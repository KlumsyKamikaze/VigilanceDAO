"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod2) => function __require() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
  var __export = (target, all5) => {
    for (var name5 in all5)
      __defProp(target, name5, { get: all5[name5], enumerable: true });
  };
  var __copyProps = (to, from3, except, desc) => {
    if (from3 && typeof from3 === "object" || typeof from3 === "function") {
      for (let key2 of __getOwnPropNames(from3))
        if (!__hasOwnProp.call(to, key2) && key2 !== except)
          __defProp(to, key2, { get: () => from3[key2], enumerable: !(desc = __getOwnPropDesc(from3, key2)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
    mod2
  ));
  var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
  var __async = (__this, __arguments, generator2) => {
    return new Promise((resolve5, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator2.next(value));
        } catch (e3) {
          reject(e3);
        }
      };
      var rejected = (value) => {
        try {
          step(generator2.throw(value));
        } catch (e3) {
          reject(e3);
        }
      };
      var step = (x) => x.done ? resolve5(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator2 = generator2.apply(__this, __arguments)).next());
    });
  };

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports2, module2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format2) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component27(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component27.prototype.isReactComponent = {};
          Component27.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component27.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component27.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component27.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component27.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef8() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type4 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type4;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type4) {
            return type4.displayName || "Context";
          }
          function getComponentNameFromType(type4) {
            if (type4 == null) {
              return null;
            }
            {
              if (typeof type4.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type4 === "function") {
              return type4.displayName || type4.name || null;
            }
            if (typeof type4 === "string") {
              return type4;
            }
            switch (type4) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type4;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type4;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type4, type4.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type4.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type4.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type4, key2, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type: type4,
              key: key2,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement202(type4, config, children) {
            var propName;
            var props = {};
            var key2 = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key2 = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type4 && type4.defaultProps) {
              var defaultProps2 = type4.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key2 || ref) {
                var displayName = typeof type4 === "function" ? type4.displayName || type4.name || "Unknown" : type4;
                if (key2) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type4, key2, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement19(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key2 = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key2 = "" + config.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key2, ref, self2, source, owner, props);
          }
          function isValidElement19(object4) {
            return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key2) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key2.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index3) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index3.toString(36);
          }
          function mapIntoArray(children, array4, escapedPrefix, nameSoFar, callback) {
            var type4 = typeof children;
            if (type4 === "undefined" || type4 === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type4) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array4, escapedChildKey, "", function(c2) {
                  return c2;
                });
              } else if (mappedChild != null) {
                if (isValidElement19(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array4.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children)) {
              for (var i3 = 0; i3 < children.length; i3++) {
                child = children[i3];
                nextName = nextNamePrefix + getElementKey(child, i3);
                subtreeCount += mapIntoArray(child, array4, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array4, escapedPrefix, nextName, callback);
                }
              } else if (type4 === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count2 = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count2++);
            });
            return result;
          }
          function countChildren(children) {
            var n3 = 0;
            mapChildren(children, function() {
              n3++;
            });
            return n3;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray7(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement19(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext30(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef102(render4) {
            {
              if (render4 != null && render4.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render4 !== "function") {
                error("forwardRef requires a render function but was given %s.", render4 === null ? "null" : typeof render4);
              } else {
                if (render4.length !== 0 && render4.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render4.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render4 != null) {
                if (render4.defaultProps != null || render4.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render4
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name5) {
                  ownName = name5;
                  if (!render4.name && !render4.displayName) {
                    render4.displayName = name5;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type4) {
            if (typeof type4 === "string" || typeof type4 === "function") {
              return true;
            }
            if (type4 === REACT_FRAGMENT_TYPE || type4 === REACT_PROFILER_TYPE || enableDebugTracing || type4 === REACT_STRICT_MODE_TYPE || type4 === REACT_SUSPENSE_TYPE || type4 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type4 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type4 === "object" && type4 !== null) {
              if (type4.$$typeof === REACT_LAZY_TYPE || type4.$$typeof === REACT_MEMO_TYPE || type4.$$typeof === REACT_PROVIDER_TYPE || type4.$$typeof === REACT_CONTEXT_TYPE || type4.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type4.$$typeof === REACT_MODULE_REFERENCE || type4.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo6(type4, compare2) {
            {
              if (!isValidElementType(type4)) {
                error("memo: The first argument must be a component. Instead received: %s", type4 === null ? "null" : typeof type4);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type: type4,
              compare: compare2 === void 0 ? null : compare2
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name5) {
                  ownName = name5;
                  if (!type4.name && !type4.displayName) {
                    type4.displayName = name5;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext99(Context4) {
            var dispatcher = resolveDispatcher();
            {
              if (Context4._context !== void 0) {
                var realContext = Context4._context;
                if (realContext.Consumer === Context4) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context4) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context4);
          }
          function useState67(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer2(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef86(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect73(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create5, deps);
          }
          function useInsertionEffect(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create5, deps);
          }
          function useLayoutEffect6(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create5, deps);
          }
          function useCallback21(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo52(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create5, deps);
          }
          function useImperativeHandle22(ref, create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create5, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId3() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name5, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name5;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name5 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name5 ? describeBuiltInComponentFrame(name5) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component28) {
            var prototype3 = Component28.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type4, source, ownerFn) {
            if (type4 == null) {
              return "";
            }
            if (typeof type4 === "function") {
              {
                return describeNativeComponentFrame(type4, shouldConstruct(type4));
              }
            }
            if (typeof type4 === "string") {
              return describeBuiltInComponentFrame(type4);
            }
            switch (type4) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type4.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type4.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name5 = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name5) {
                return "\n\nCheck the render method of `" + name5 + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray2(node)) {
              for (var i3 = 0; i3 < node.length; i3++) {
                var child = node[i3];
                if (isValidElement19(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement19(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement19(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type4 = element.type;
              if (type4 === null || type4 === void 0 || typeof type4 === "string") {
                return;
              }
              var propTypes;
              if (typeof type4 === "function") {
                propTypes = type4.propTypes;
              } else if (typeof type4 === "object" && (type4.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type4.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type4.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name5 = getComponentNameFromType(type4);
                checkPropTypes(propTypes, element.props, "prop", name5, element);
              } else if (type4.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type4);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type4.getDefaultProps === "function" && !type4.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys.length; i3++) {
                var key2 = keys[i3];
                if (key2 !== "children" && key2 !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key2);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type4, props, children) {
            var validType = isValidElementType(type4);
            if (!validType) {
              var info = "";
              if (type4 === void 0 || typeof type4 === "object" && type4 !== null && Object.keys(type4).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type4 === null) {
                typeString = "null";
              } else if (isArray2(type4)) {
                typeString = "array";
              } else if (type4 !== void 0 && type4.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type4.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type4;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement202.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i3 = 2; i3 < arguments.length; i3++) {
                validateChildKeys(arguments[i3], type4);
              }
            }
            if (type4 === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type4) {
            var validatedFactory = createElementWithValidation.bind(null, type4);
            validatedFactory.type = type4;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type4
                  });
                  return type4;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement19.apply(this, arguments);
            for (var i3 = 2; i3 < arguments.length; i3++) {
              validateChildKeys(arguments[i3], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module2 && module2[requireString];
                enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve5, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve5, reject);
                      } else {
                        resolve5(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve5, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve5, reject);
                      } else {
                        resolve5(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve5, reject) {
                      resolve5(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve5, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve5(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve5, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve5(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i3 = 0;
                try {
                  for (; i3 < queue.length; i3++) {
                    var callback = queue[i3];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i3 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children9 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray7,
            only: onlyChild
          };
          exports2.Children = Children9;
          exports2.Component = Component27;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.Profiler = REACT_PROFILER_TYPE;
          exports2.PureComponent = PureComponent;
          exports2.StrictMode = REACT_STRICT_MODE_TYPE;
          exports2.Suspense = REACT_SUSPENSE_TYPE;
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports2.cloneElement = cloneElement$1;
          exports2.createContext = createContext30;
          exports2.createElement = createElement$1;
          exports2.createFactory = createFactory;
          exports2.createRef = createRef8;
          exports2.forwardRef = forwardRef102;
          exports2.isValidElement = isValidElement19;
          exports2.lazy = lazy;
          exports2.memo = memo6;
          exports2.startTransition = startTransition;
          exports2.unstable_act = act;
          exports2.useCallback = useCallback21;
          exports2.useContext = useContext99;
          exports2.useDebugValue = useDebugValue2;
          exports2.useDeferredValue = useDeferredValue;
          exports2.useEffect = useEffect73;
          exports2.useId = useId3;
          exports2.useImperativeHandle = useImperativeHandle22;
          exports2.useInsertionEffect = useInsertionEffect;
          exports2.useLayoutEffect = useLayoutEffect6;
          exports2.useMemo = useMemo52;
          exports2.useReducer = useReducer2;
          exports2.useRef = useRef86;
          exports2.useState = useState67;
          exports2.useSyncExternalStore = useSyncExternalStore;
          exports2.useTransition = useTransition;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index3 = heap.length;
            heap.push(node);
            siftUp(heap, node, index3);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last3 = heap.pop();
            if (last3 !== first) {
              heap[0] = last3;
              siftDown(heap, last3, 0);
            }
            return first;
          }
          function siftUp(heap, node, i3) {
            var index3 = i3;
            while (index3 > 0) {
              var parentIndex = index3 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare2(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index3] = parent;
                index3 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i3) {
            var index3 = i3;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index3 < halfLength) {
              var leftIndex = (index3 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare2(left, node) < 0) {
                if (rightIndex < length2 && compare2(right, left) < 0) {
                  heap[index3] = right;
                  heap[rightIndex] = node;
                  index3 = rightIndex;
                } else {
                  heap[index3] = left;
                  heap[leftIndex] = node;
                  index3 = leftIndex;
                }
              } else if (rightIndex < length2 && compare2(right, node) < 0) {
                heap[index3] = right;
                heap[rightIndex] = node;
                index3 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare2(a2, b2) {
            var diff = a2.sortIndex - b2.sortIndex;
            return diff !== 0 ? diff : a2.id - b2.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports2.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports2.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports2.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports2.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports2.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports2.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports2.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports2.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports2.unstable_IdlePriority = IdlePriority;
          exports2.unstable_ImmediatePriority = ImmediatePriority;
          exports2.unstable_LowPriority = LowPriority;
          exports2.unstable_NormalPriority = NormalPriority;
          exports2.unstable_Profiling = unstable_Profiling;
          exports2.unstable_UserBlockingPriority = UserBlockingPriority;
          exports2.unstable_cancelCallback = unstable_cancelCallback;
          exports2.unstable_continueExecution = unstable_continueExecution;
          exports2.unstable_forceFrameRate = forceFrameRate;
          exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports2.unstable_next = unstable_next;
          exports2.unstable_pauseExecution = unstable_pauseExecution;
          exports2.unstable_requestPaint = unstable_requestPaint;
          exports2.unstable_runWithPriority = unstable_runWithPriority;
          exports2.unstable_scheduleCallback = unstable_scheduleCallback;
          exports2.unstable_shouldYield = shouldYieldToHost;
          exports2.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React292 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React292.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format2) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment21 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i3 = 0; i3 < dependencies.length; i3++) {
              allNativeEvents.add(dependencies[i3]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type4 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type4;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name5, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name5.length > 2 && (name5[0] === "o" || name5[0] === "O") && (name5[1] === "n" || name5[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name5, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name5.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name5, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name5, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name5) {
            return properties.hasOwnProperty(name5) ? properties[name5] : null;
          }
          function PropertyInfoRecord(name5, type4, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type4 === BOOLEANISH_STRING || type4 === BOOLEAN || type4 === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name5;
            this.type = type4;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name5) {
            properties[name5] = new PropertyInfoRecord(
              name5,
              RESERVED,
              false,
              // mustUseProperty
              name5,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name5 = _ref[0], attributeName = _ref[1];
            properties[name5] = new PropertyInfoRecord(
              name5,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name5) {
            properties[name5] = new PropertyInfoRecord(
              name5,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name5.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name5) {
            properties[name5] = new PropertyInfoRecord(
              name5,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name5,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name5) {
            properties[name5] = new PropertyInfoRecord(
              name5,
              BOOLEAN,
              false,
              // mustUseProperty
              name5.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name5) {
            properties[name5] = new PropertyInfoRecord(
              name5,
              BOOLEAN,
              true,
              // mustUseProperty
              name5,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name5) {
            properties[name5] = new PropertyInfoRecord(
              name5,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name5,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name5) {
            properties[name5] = new PropertyInfoRecord(
              name5,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name5,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name5) {
            properties[name5] = new PropertyInfoRecord(
              name5,
              NUMERIC,
              false,
              // mustUseProperty
              name5.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name5 = attributeName.replace(CAMELIZE, capitalize);
            properties[name5] = new PropertyInfoRecord(
              name5,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name5 = attributeName.replace(CAMELIZE, capitalize);
            properties[name5] = new PropertyInfoRecord(
              name5,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name5 = attributeName.replace(CAMELIZE, capitalize);
            properties[name5] = new PropertyInfoRecord(
              name5,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url2) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url2)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url2));
              }
            }
          }
          function getValueForProperty(node, name5, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name5);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name5, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name5, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name5, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name5, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name5)) {
                return;
              }
              if (!node.hasAttribute(name5)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name5);
              {
                checkAttributeStringCoercion(expected, name5);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name5, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name5);
            if (shouldIgnoreAttribute(name5, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name5, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name5)) {
                var _attributeName = name5;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name5);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type4 = propertyInfo.type;
                node[propertyName] = type4 === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name5, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name5;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name5 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name5 ? describeBuiltInComponentFrame(name5) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component27) {
            var prototype3 = Component27.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type4, source, ownerFn) {
            if (type4 == null) {
              return "";
            }
            if (typeof type4 === "function") {
              {
                return describeNativeComponentFrame(type4, shouldConstruct(type4));
              }
            }
            if (typeof type4 === "string") {
              return describeBuiltInComponentFrame(type4);
            }
            switch (type4) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type4.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type4.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type4) {
            return type4.displayName || "Context";
          }
          function getComponentNameFromType(type4) {
            if (type4 == null) {
              return null;
            }
            {
              if (typeof type4.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type4 === "function") {
              return type4.displayName || type4.name || null;
            }
            if (typeof type4 === "string") {
              return type4;
            }
            switch (type4) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type4;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type4;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type4, type4.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type4.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type4.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type4) {
            return type4.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type4 = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type4;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type4;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type4, type4.render, "ForwardRef");
              case Fragment21:
                return "Fragment";
              case HostComponent:
                return type4;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type4);
              case Mode:
                if (type4 === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type4 === "function") {
                  return type4.displayName || type4.name || null;
                }
                if (typeof type4 === "string") {
                  return type4;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString5(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type4 = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type4 === "checkbox" || type4 === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get4 = descriptor.get, set3 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get4.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set3.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e3) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type4 = props.type;
            if (value != null) {
              if (type4 === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString5(value);
                }
              } else if (node.value !== toString5(value)) {
                node.value = toString5(value);
              }
            } else if (type4 === "submit" || type4 === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type4 = props.type;
              var isButton = type4 === "submit" || type4 === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString5(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name5 = node.name;
            if (name5 !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name5 !== "") {
              node.name = name5;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name5 = props.name;
            if (props.type === "radio" && name5 != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name5, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name5) + '][type="radio"]');
              for (var i3 = 0; i3 < group.length; i3++) {
                var otherNode = group[i3];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type4, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type4 !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString5(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString5(value)) {
                node.defaultValue = toString5(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React292.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString5(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i3 = 0; i3 < valuePropNames.length; i3++) {
                var propName = valuePropNames[i3];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray2(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i3 = 0; i3 < selectedValues.length; i3++) {
                selectedValue["$" + selectedValues[i3]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString5(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString5(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray2(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString5(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString5(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type4) {
            switch (type4) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type4) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type4);
            }
            if (parentNamespace === SVG_NAMESPACE && type4 === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key2) {
            return prefix2 + key2.charAt(0).toUpperCase() + key2.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name5, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name5) && isUnitlessNumber[name5])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name5);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name5) {
            return name5.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string4) {
              return string4.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name5) {
              if (warnedStyleNames.hasOwnProperty(name5) && warnedStyleNames[name5]) {
                return;
              }
              warnedStyleNames[name5] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name5,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name5.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name5) {
              if (warnedStyleNames.hasOwnProperty(name5) && warnedStyleNames[name5]) {
                return;
              }
              warnedStyleNames[name5] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name5, name5.charAt(0).toUpperCase() + name5.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name5, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name5, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name5, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name5);
            };
            var warnStyleValueIsInfinity = function(name5, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name5);
            };
            warnValidStyle = function(name5, value) {
              if (name5.indexOf("-") > -1) {
                warnHyphenatedStyleName(name5);
              } else if (badVendoredStyleNamePattern.test(name5)) {
                warnBadVendoredStyleName(name5);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name5, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name5, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name5, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style3 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style3.setProperty(styleName, styleValue);
              } else {
                style3[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key2 in styles) {
              var longhands = shorthandToLonghand[key2] || [key2];
              for (var i3 = 0; i3 < longhands.length; i3++) {
                expanded[longhands[i3]] = key2;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key2 in expandedUpdates) {
                var originalKey = expandedUpdates[key2];
                var correctOriginalKey = expandedStyles[key2];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name5) {
            {
              if (hasOwnProperty2.call(warnedProperties, name5) && warnedProperties[name5]) {
                return true;
              }
              if (rARIACamel.test(name5)) {
                var ariaName = "aria-" + name5.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name5);
                  warnedProperties[name5] = true;
                  return true;
                }
                if (name5 !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name5, correctName);
                  warnedProperties[name5] = true;
                  return true;
                }
              }
              if (rARIA.test(name5)) {
                var lowerCasedName = name5.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name5] = true;
                  return false;
                }
                if (name5 !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name5, standardName);
                  warnedProperties[name5] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type4, props) {
            {
              var invalidProps = [];
              for (var key2 in props) {
                var isValid2 = validateProperty(type4, key2);
                if (!isValid2) {
                  invalidProps.push(key2);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type4);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type4);
              }
            }
          }
          function validateProperties(type4, props) {
            if (isCustomComponent(type4, props)) {
              return;
            }
            warnInvalidARIAProps(type4, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type4, props) {
            {
              if (type4 !== "input" && type4 !== "textarea" && type4 !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type4 === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type4);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type4);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name5, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name5) && warnedProperties$1[name5]) {
                return true;
              }
              var lowerCasedName = name5.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name5] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name5)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name5, registrationName);
                  warnedProperties$1[name5] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name5)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name5);
                  warnedProperties$1[name5] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name5)) {
                if (INVALID_EVENT_NAME_REGEX.test(name5)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name5);
                }
                warnedProperties$1[name5] = true;
                return true;
              }
              if (rARIA$1.test(name5) || rARIACamel$1.test(name5)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name5] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name5] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name5] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name5);
                warnedProperties$1[name5] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name5);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name5) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name5, standardName);
                  warnedProperties$1[name5] = true;
                  return true;
                }
              } else if (!isReserved && name5 !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name5, lowerCasedName);
                warnedProperties$1[name5] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name5, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name5, name5, value, name5);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name5, name5, value, name5, name5, name5);
                }
                warnedProperties$1[name5] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name5, value, propertyInfo, false)) {
                warnedProperties$1[name5] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name5, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name5, value);
                warnedProperties$1[name5] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type4, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key2 in props) {
                var isValid2 = validateProperty$1(type4, key2, props[key2], eventRegistry);
                if (!isValid2) {
                  unknownProps.push(key2);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type4);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type4);
              }
            }
          };
          function validateProperties$2(type4, props, eventRegistry) {
            if (isCustomComponent(type4, props)) {
              return;
            }
            warnUnknownProperties(type4, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i3 = 0; i3 < queuedTargets.length; i3++) {
                restoreStateOfTarget(queuedTargets[i3]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a2, b2) {
            if (isInsideEventHandler) {
              return fn(a2, b2);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a2, b2);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name5, type4, props) {
            switch (name5) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type4));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e3) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name5, func, context, a2, b2, c2, d2, e3, f2) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name5, func, context, a2, b2, c2, d2, e3, f2) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name5 ? name5 : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name5, func, context, a2, b2, c2, d2, e3, f2) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name5, func, context, a2, b2, c2, d2, e3, f2) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get3(key2) {
            return key2._reactInternals;
          }
          function has(key2) {
            return key2._reactInternals !== void 0;
          }
          function set2(key2, value) {
            key2._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref2 = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref2 | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref2 | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref2 | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get3(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b2.return) {
                a2 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b2) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now3 = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map3 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index4 = 0; index4 < TotalLanes; index4++) {
                var label = getLabelForLane(lane);
                map3.set(lane, label);
                lane *= 2;
              }
              return map3;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index4 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index4;
                nextLanes |= entanglements[index4];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              var eventTime = eventTimes[index4];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              var expirationTime = expirationTimes[index4];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index4] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b2) {
            return (a2 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set3, subset) {
            return (set3 & subset) === subset;
          }
          function mergeLanes(a2, b2) {
            return a2 | b2;
          }
          function removeLanes(set3, subset) {
            return set3 & ~subset;
          }
          function intersectLanes(a2, b2) {
            return a2 & b2;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b2) {
            return a2 !== NoLane && a2 < b2 ? a2 : b2;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i3 = 0; i3 < TotalLanes; i3++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index4 = laneToIndex(updateLane);
            eventTimes[index4] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              expirationTimes[index4] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              entanglements[index4] = NoLanes;
              eventTimes[index4] = NoTimestamp;
              expirationTimes[index4] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index4] & entangledLanes
              ) {
                entanglements[index4] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index4 = laneToIndex(lanes);
              var lane = 1 << index4;
              var updaters = pendingUpdatersLaneMap[index4];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index4 = laneToIndex(lanes);
              var lane = 1 << index4;
              var updaters = pendingUpdatersLaneMap[index4];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2 ? a2 : b2;
          }
          function lowerEventPriority(a2, b2) {
            return a2 === 0 || a2 > b2 ? a2 : b2;
          }
          function isHigherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i3 = 0;
            for (; i3 < queuedExplicitHydrationTargets.length; i3++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i3].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i3, 0, queuedTarget);
            if (i3 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key2, map3) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map3.delete(key2);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i3 = 1; i3 < queuedDiscreteEvents.length; i3++) {
                var queuedEvent = queuedDiscreteEvents[i3];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize2 = Interface[_propName];
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key2 = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key2 !== "Unidentified") {
                return key2;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from3;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from3 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from3 = null;
              to = targetInst;
            }
            if (from3 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from3 == null ? win : getNodeFromInstance(from3);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from3, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from3, to);
          }
          function is2(x, y2) {
            return x === y2 && (x !== 0 || 1 / x === 1 / y2) || x !== x && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          function shallowEqual6(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i3 = 0; i3 < keysA.length; i3++) {
              var currentKey = keysA[i3];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset3) {
            var node = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset3 && nodeEnd >= offset3) {
                  return {
                    node,
                    offset: offset3 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e3) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length2 + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length2 + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length2 += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length2;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length2;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length2 = node.textContent.length;
            var start = Math.min(offsets.start, length2);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range3 = doc.createRange();
              range3.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range3);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range3.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range3);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i3 = 0; i3 < ancestors.length; i3++) {
                var info = ancestors[i3];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual6(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap2(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes2 = {
            animationend: makePrefixMap2("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap2("Animation", "AnimationIteration"),
            animationstart: makePrefixMap2("Animation", "AnimationStart"),
            transitionend: makePrefixMap2("Transition", "TransitionEnd")
          };
          var prefixedEventNames2 = {};
          var style2 = {};
          if (canUseDOM) {
            style2 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes2.animationend.animation;
              delete vendorPrefixes2.animationiteration.animation;
              delete vendorPrefixes2.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes2.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName2(eventName) {
            if (prefixedEventNames2[eventName]) {
              return prefixedEventNames2[eventName];
            } else if (!vendorPrefixes2[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes2[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
                return prefixedEventNames2[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName2("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName2("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName2("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName2("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i3 = 0; i3 < simpleEventPluginEvents.length; i3++) {
              var eventName = simpleEventPluginEvents[i3];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type4 = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type4, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i3 = dispatchListeners.length - 1; i3 >= 0; i3--) {
                var _dispatchListeners$i = dispatchListeners[i3], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i3 = 0; i3 < dispatchQueue.length; i3++) {
              var _dispatchQueue$i = dispatchQueue[i3], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent5(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent5(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent5(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent5(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent5(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent5(nodeA);
              nodeB = getParent5(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from3, to) {
            var common = from3 && to ? getLowestCommonAncestor(from3, to) : null;
            if (from3 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from3, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type4, props) {
              validateProperties(type4, props);
              validateProperties$1(type4, props);
              validateProperties$2(type4, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names2 = [];
              attributeNames.forEach(function(name5) {
                names2.push(name5);
              });
              error("Extra attributes from the server: %s", names2);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop6() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop6;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i3 = 0; i3 < updatePayload.length; i3 += 2) {
              var propKey = updatePayload[i3];
              var propValue = updatePayload[i3 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement202(type4, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type4);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type4, props);
                if (!isCustomComponentTag && type4 !== type4.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type4);
                }
              }
              if (type4 === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type4, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type4);
                if (type4 === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type4);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type4)) {
                  warnedUnknownTags[type4] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type4);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes2 = domElement.attributes;
              for (var _i = 0; _i < attributes2.length; _i++) {
                var name5 = attributes2[_i].name.toLowerCase();
                switch (name5) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes2[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type4;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type4 = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type4 = container.tagName;
                namespace = getChildNamespace(ownNamespace, type4);
                break;
              }
            }
            {
              var validatedTag = type4.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type4, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type4);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type4);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance2(type4, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type4, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string4 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type4);
                validateDOMNesting(null, string4, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement202(type4, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type4, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type4, props, rootContainerInstance);
            switch (type4) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type4, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string4 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type4);
                validateDOMNesting(null, string4, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type4, oldProps, newProps);
          }
          function shouldSetTextContent(type4, props) {
            return type4 === "textarea" || type4 === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type4, newProps, internalInstanceHandle) {
            switch (type4) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type4, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type4, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style3 = instance.style;
            if (typeof style3.setProperty === "function") {
              style3.setProperty("display", "none", "important");
            } else {
              style3.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type4, props) {
            if (instance.nodeType !== ELEMENT_NODE || type4.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest2, message, stack;
            if (dataset) {
              digest2 = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest: digest2,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type4, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type4, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type4, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type4);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type4, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type4);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type4, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type4);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index3 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index3 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index3]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index3];
            valueStack[index3] = null;
            {
              fiberStack[index3] = null;
            }
            index3--;
          }
          function push(cursor, value, fiber) {
            index3++;
            valueStack[index3] = cursor.current;
            {
              fiberStack[index3] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component27, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component27)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type4 = workInProgress2.type;
              var contextTypes = type4.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key2 in contextTypes) {
                context[key2] = unmaskedContext[key2];
              }
              {
                var name5 = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name5);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type4) {
            {
              var childContextTypes = type4.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type4, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type4.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name5 = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name5);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type4, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type4, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component27 = node.type;
                    if (isContextProvider(Component27)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i3 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i3 < queue.length; i3++) {
                  var callback = queue[i3];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i3 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id2 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id2.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index4) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index4 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id2 = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id2;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number4) {
            return 32 - clz32(number4);
          }
          function getLeadingBit(id2) {
            return 1 << getBitLength(id2) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type4 = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type4);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type4 = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type4);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set3) {
              var array4 = [];
              set3.forEach(function(value) {
                array4.push(value);
              });
              return array4.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component27, baseProps) {
            if (Component27 && Component27.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps2 = Component27.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i3 = 0; i3 < concurrentQueues.length; i3++) {
                var queue = concurrentQueues[i3];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root3 = node.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone2 = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone2;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone2 = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone2;
                    } else {
                      newLast.next = clone2;
                      newLast = clone2;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone2 = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone2;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone2;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i3 = 0; i3 < effects.length; i3++) {
                var effect = effects[i3];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React292.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key2 = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key2)) {
                didWarnOnInvalidCallback.add(key2);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type4, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type4) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual6(oldProps, newProps) || !shallowEqual6(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name5 = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name5);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name5);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name5);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name5);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name5);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name5);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name5);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name5);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name5);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name5);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name5);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name5);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name5);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name5, name5);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name5, name5);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name5);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name5);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name5);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error("%s.state: must be set to an object or null", name5);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name5);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set2(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid2 = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone2 = createWorkInProgress(fiber, pendingProps);
              clone2.index = 0;
              clone2.sibling = null;
              return clone2;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key2) {
              if (current2 === null || current2.tag !== Fragment21) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key2);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key2 = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key2 !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key2) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key2) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  if (key2 !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key2 = child.key;
                    if (typeof key2 !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key2);
                      break;
                    }
                    if (!knownKeys.has(key2)) {
                      knownKeys.add(key2);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key2);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i3 = 0; i3 < newChildren.length; i3++) {
                  var child = newChildren[i3];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key2 = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key2) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment21) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key2 = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key2) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray2(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c2) {
            if (c2 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c2;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout2 = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i3 = 0; i3 < workInProgressSources.length; i3++) {
              var mutableSource = workInProgressSources[i3];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version3 = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version3];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version3);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray2(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i3 = 0; i3 <= hookTypesUpdateIndexDev; i3++) {
                    var oldHookName = hookTypesDev[i3];
                    var newHookName = i3 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i3 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
              if (objectIs(nextDeps[i3], prevDeps[i3])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component27, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component27(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component27(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone2 = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone2;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone2;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch2 = queue.dispatch;
            return [hook.memoizedState, dispatch2];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch2 = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch2];
          }
          function mountMutableSource(source, getSnapshot, subscribe2) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe2) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe2), [subscribe2]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe2), [subscribe2]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe2) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe2(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create5, destroy3, deps) {
            var effect = {
              tag,
              create: create5,
              destroy: destroy3,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create5, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create5, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create5, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy3 = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy3 = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create5, destroy3, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create5, destroy3, nextDeps);
          }
          function mountEffect(create5, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create5, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create5, deps);
            }
          }
          function updateEffect(create5, deps) {
            return updateEffectImpl(Passive, Passive$1, create5, deps);
          }
          function mountInsertionEffect(create5, deps) {
            return mountEffectImpl(Update, Insertion, create5, deps);
          }
          function updateInsertionEffect(create5, deps) {
            return updateEffectImpl(Update, Insertion, create5, deps);
          }
          function mountLayoutEffect(create5, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout2, create5, deps);
          }
          function updateLayoutEffect(create5, deps) {
            return updateEffectImpl(Update, Layout2, create5, deps);
          }
          function imperativeHandleEffect(create5, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create5();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create5();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create5, deps) {
            {
              if (typeof create5 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create5 !== null ? typeof create5 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout2, imperativeHandleEffect.bind(null, create5, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create5, deps) {
            {
              if (typeof create5 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create5 !== null ? typeof create5 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout2, imperativeHandleEffect.bind(null, create5, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id2;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id2 = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id2 += "H" + localId.toString(32);
              }
              id2 += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id2 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id2;
            return id2;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id2 = hook.memoizedState;
            return id2;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe2, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe2, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe2, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe2, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest2, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest2 != null ? digest2 : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e3) {
              setTimeout(function() {
                throw e3;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component27, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component27.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component27)
                  );
                }
              }
            }
            var render5 = Component27.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render5, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render5, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component27, nextProps, renderLanes2) {
            if (current2 === null) {
              var type4 = Component27.type;
              if (isSimpleFunctionComponent(type4) && Component27.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component27.defaultProps === void 0) {
                var resolvedType = type4;
                {
                  resolvedType = resolveFunctionForHotReloading(type4);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type4);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type4.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type4)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component27.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component27.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare2 = Component27.compare;
              compare2 = compare2 !== null ? compare2 : shallowEqual6;
              if (compare2(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component27, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual6(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component27, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref2;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component27, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component27.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component27)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component27, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component27, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component27, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component27, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component27.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component27)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component27)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component27, nextProps);
              mountClassInstance(workInProgress2, Component27, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component27, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component27, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component27, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component27, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component27, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component27.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component27, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type4 = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type4, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type4, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component27 = init(payload);
            workInProgress2.type = Component27;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component27);
            var resolvedProps = resolveDefaultProps(Component27, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component27);
                  workInProgress2.type = Component27 = resolveFunctionForHotReloading(Component27);
                }
                child = updateFunctionComponent(null, workInProgress2, Component27, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component27 = resolveClassForHotReloading(Component27);
                }
                child = updateClassComponent(null, workInProgress2, Component27, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component27 = resolveForwardRefForHotReloading(Component27);
                }
                child = updateForwardRef(null, workInProgress2, Component27, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component27.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component27)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component27,
                  resolveDefaultProps(Component27.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component27 !== null && typeof Component27 === "object" && Component27.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component27 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component27, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component27)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component27, nextProps);
            mountClassInstance(workInProgress2, Component27, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component27, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component27, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component27, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component27.prototype && typeof Component27.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component27) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component27, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component27) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component27) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component27)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component27, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component27, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component27, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component27);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component27) {
            {
              if (Component27) {
                if (Component27.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component27.displayName || Component27.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component27.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component27) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component27.contextType === "object" && Component27.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component27) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest2, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest2 = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest2, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index4) {
            {
              var isAnArray = isArray2(childSlot);
              var isIterable2 = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable2) {
                var type4 = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type4, index4, type4);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray2(children)) {
                  for (var i3 = 0; i3 < children.length; i3++) {
                    if (!validateSuspenseListNestedChild(children[i3], i3)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render5 = newProps.children;
            {
              if (typeof render5 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render5(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component27 = workInProgress2.type;
                if (isContextProvider(Component27)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component27 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component27 ? unresolvedProps : resolveDefaultProps(Component27, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component27, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type4 = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type4 ? _unresolvedProps2 : resolveDefaultProps(type4, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type4, _resolvedProps2, renderLanes2);
              }
              case Fragment21:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref2;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden2) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type4, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type4, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment21:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component27 = workInProgress2.type;
                if (isContextProvider(Component27)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type4 = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type4, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance2(type4, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type4, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now3() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now3() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now3();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component27 = workInProgress2.type;
                if (isContextProvider(Component27)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout2, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy3) {
            try {
              destroy3();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy3 = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy3 !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout2) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy3);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout2) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout2) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create5 = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create5();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout2) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy3 = effect.destroy;
                    if (destroy3 !== void 0 && typeof destroy3 !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout2) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy3 === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy3.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy3;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id2 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id2, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout2 | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout2 | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type4 = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type4, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root3 = parentFiber.stateNode;
                              root3.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref2) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden2) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden2) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden2) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy3 = _effect.destroy, tag = _effect.tag;
                        if (destroy3 !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy3);
                          } else if ((tag & Layout2) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy3);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy3);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i3 = 0; i3 < deletions.length; i3++) {
                var childToDelete = deletions[i3];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout2 | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout2 | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref2) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref2) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type4 = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type4, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden2 = newState !== null;
                  offscreenInstance.isHidden = isHidden2;
                  if (isHidden2) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden2 = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden2 || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout2, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout2, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden2 = fiber.memoizedState !== null;
                  if (isHidden2) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden2 = fiber.memoizedState !== null;
                if (isHidden2) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i3 = 0; i3 < deletions.length; i3++) {
                    var fiberToDelete = deletions[i3];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout2 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout2 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now3() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now3();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now3();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now3());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now3());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now3());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now3();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now3() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i3 = 0; i3 < checks.length; i3++) {
                      var check = checks[i3];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now3());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now3());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now3());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now3());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a2, b2, c2, d2) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a2, b2, c2, d2);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync2(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now3();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now3());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i3 = 0; i3 < recoverableErrors.length; i3++) {
                var recoverableError = recoverableErrors[i3];
                var componentStack = recoverableError.stack;
                var digest2 = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest: digest2
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i3 = 0; i3 < profilerEffects.length; i3++) {
                var _fiber = profilerEffects[i3];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now3() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type4) {
            {
              if (resolveFamily === null) {
                return type4;
              }
              var family = resolveFamily(type4);
              if (family === void 0) {
                return type4;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type4) {
            return resolveFunctionForHotReloading(type4);
          }
          function resolveForwardRefForHotReloading(type4) {
            {
              if (resolveFamily === null) {
                return type4;
              }
              var family = resolveFamily(type4);
              if (family === void 0) {
                if (type4 !== null && type4 !== void 0 && typeof type4.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type4.render);
                  if (type4.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type4.displayName !== void 0) {
                      syntheticType.displayName = type4.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type4;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync2(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync2(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type4 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type4;
                  break;
                case ForwardRef:
                  candidateType = type4.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types3 = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types3, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types3, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type4 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type4;
                  break;
                case ForwardRef:
                  candidateType = type4.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types3.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types3, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types3, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e3) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key2, mode) {
            this.tag = tag;
            this.key = key2;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key2, mode) {
            return new FiberNode(tag, pendingProps, key2, mode);
          };
          function shouldConstruct$1(Component27) {
            var prototype3 = Component27.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function isSimpleFunctionComponent(type4) {
            return typeof type4 === "function" && !shouldConstruct$1(type4) && type4.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component27) {
            if (typeof Component27 === "function") {
              return shouldConstruct$1(Component27) ? ClassComponent : FunctionComponent;
            } else if (Component27 !== void 0 && Component27 !== null) {
              var $$typeof = Component27.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type4, key2, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type4;
            if (typeof type4 === "function") {
              if (shouldConstruct$1(type4)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type4 === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type4) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key2);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key2);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key2);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key2);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key2);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type4 === "object" && type4 !== null) {
                      switch (type4.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type4 === void 0 || typeof type4 === "object" && type4 !== null && Object.keys(type4).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type4 == null ? type4 : typeof type4) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key2, mode);
            fiber.elementType = type4;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type4 = element.type;
            var key2 = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type4, key2, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key2) {
            var fiber = createFiber(Fragment21, elements, key2, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key2) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key2, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key2) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key2, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key2) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key2, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key2) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key2, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.2.0";
          function createPortal(children, containerInfo, implementation) {
            var key2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key2);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key2 == null ? null : "" + key2,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get3(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component27 = fiber.type;
              if (isContextProvider(Component27)) {
                return processChildContext(fiber, Component27, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get3(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync2(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path2, index4) {
              var key2 = path2[index4];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              if (index4 + 1 === path2.length) {
                if (isArray2(updated)) {
                  updated.splice(key2, 1);
                } else {
                  delete updated[key2];
                }
                return updated;
              }
              updated[key2] = copyWithDeleteImpl(obj[key2], path2, index4 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path2) {
              return copyWithDeleteImpl(obj, path2, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index4) {
              var oldKey = oldPath[index4];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              if (index4 + 1 === oldPath.length) {
                var newKey = newPath[index4];
                updated[newKey] = updated[oldKey];
                if (isArray2(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index4 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i3 = 0; i3 < newPath.length - 1; i3++) {
                  if (oldPath[i3] !== newPath[i3]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path2, index4, value) {
              if (index4 >= path2.length) {
                return value;
              }
              var key2 = path2[index4];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              updated[key2] = copyWithSetImpl(obj[key2], path2, index4 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path2, value) {
              return copyWithSetImpl(obj, path2, 0, value);
            };
            var findHook = function(fiber, id2) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id2 > 0) {
                currentHook2 = currentHook2.next;
                id2--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id2, path2, value) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path2, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id2, path2) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path2);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id2, oldPath, newPath) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path2, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path2) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync2(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i3 = 0; i3 < mutableSources.length; i3++) {
                var mutableSource = mutableSources[i3];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync2();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync2(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          function findDOMNode2(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render4(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode2(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync2(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync2);
          function createPortal$1(children, container) {
            var key2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key2);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync2(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports2.createPortal = createPortal$1;
          exports2.createRoot = createRoot$1;
          exports2.findDOMNode = findDOMNode2;
          exports2.flushSync = flushSync$1;
          exports2.hydrate = hydrate;
          exports2.hydrateRoot = hydrateRoot$1;
          exports2.render = render4;
          exports2.unmountComponentAtNode = unmountComponentAtNode2;
          exports2.unstable_batchedUpdates = batchedUpdates$1;
          exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        checkDCE();
        module2.exports = null;
      } else {
        module2.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports2) {
      "use strict";
      var m2 = require_react_dom();
      if (false) {
        exports2.createRoot = m2.createRoot;
        exports2.hydrateRoot = m2.hydrateRoot;
      } else {
        i3 = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports2.createRoot = function(c2, o2) {
          i3.usingClientEntryPoint = true;
          try {
            return m2.createRoot(c2, o2);
          } finally {
            i3.usingClientEntryPoint = false;
          }
        };
        exports2.hydrateRoot = function(c2, h2, o2) {
          i3.usingClientEntryPoint = true;
          try {
            return m2.hydrateRoot(c2, h2, o2);
          } finally {
            i3.usingClientEntryPoint = false;
          }
        };
      }
      var i3;
    }
  });

  // node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "node_modules/classnames/index.js"(exports2, module2) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        var nativeCodeString = "[native code]";
        function classNames118() {
          var classes = [];
          for (var i3 = 0; i3 < arguments.length; i3++) {
            var arg = arguments[i3];
            if (!arg)
              continue;
            var argType = typeof arg;
            if (argType === "string" || argType === "number") {
              classes.push(arg);
            } else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner = classNames118.apply(null, arg);
                if (inner) {
                  classes.push(inner);
                }
              }
            } else if (argType === "object") {
              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                classes.push(arg.toString());
                continue;
              }
              for (var key2 in arg) {
                if (hasOwn.call(arg, key2) && arg[key2]) {
                  classes.push(key2);
                }
              }
            }
          }
          return classes.join(" ");
        }
        if (typeof module2 !== "undefined" && module2.exports) {
          classNames118.default = classNames118;
          module2.exports = classNames118;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames118;
          });
        } else {
          window.classNames = classNames118;
        }
      })();
    }
  });

  // node_modules/rc-util/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/rc-util/node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type4) {
            return typeof type4 === "string" || typeof type4 === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type4 === REACT_FRAGMENT_TYPE || type4 === REACT_CONCURRENT_MODE_TYPE || type4 === REACT_PROFILER_TYPE || type4 === REACT_STRICT_MODE_TYPE || type4 === REACT_SUSPENSE_TYPE || type4 === REACT_SUSPENSE_LIST_TYPE || typeof type4 === "object" && type4 !== null && (type4.$$typeof === REACT_LAZY_TYPE || type4.$$typeof === REACT_MEMO_TYPE || type4.$$typeof === REACT_PROVIDER_TYPE || type4.$$typeof === REACT_CONTEXT_TYPE || type4.$$typeof === REACT_FORWARD_REF_TYPE || type4.$$typeof === REACT_FUNDAMENTAL_TYPE || type4.$$typeof === REACT_RESPONDER_TYPE || type4.$$typeof === REACT_SCOPE_TYPE || type4.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object4) {
            if (typeof object4 === "object" && object4 !== null) {
              var $$typeof = object4.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type4 = object4.type;
                  switch (type4) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type4;
                    default:
                      var $$typeofType = type4 && type4.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element4 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment21 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object4) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object4) || typeOf(object4) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object4) {
            return typeOf(object4) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object4) {
            return typeOf(object4) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object4) {
            return typeOf(object4) === REACT_PROVIDER_TYPE;
          }
          function isElement(object4) {
            return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object4) {
            return typeOf(object4) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment3(object4) {
            return typeOf(object4) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object4) {
            return typeOf(object4) === REACT_LAZY_TYPE;
          }
          function isMemo2(object4) {
            return typeOf(object4) === REACT_MEMO_TYPE;
          }
          function isPortal(object4) {
            return typeOf(object4) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object4) {
            return typeOf(object4) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object4) {
            return typeOf(object4) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object4) {
            return typeOf(object4) === REACT_SUSPENSE_TYPE;
          }
          exports2.AsyncMode = AsyncMode;
          exports2.ConcurrentMode = ConcurrentMode;
          exports2.ContextConsumer = ContextConsumer;
          exports2.ContextProvider = ContextProvider;
          exports2.Element = Element4;
          exports2.ForwardRef = ForwardRef;
          exports2.Fragment = Fragment21;
          exports2.Lazy = Lazy;
          exports2.Memo = Memo;
          exports2.Portal = Portal2;
          exports2.Profiler = Profiler;
          exports2.StrictMode = StrictMode;
          exports2.Suspense = Suspense;
          exports2.isAsyncMode = isAsyncMode;
          exports2.isConcurrentMode = isConcurrentMode;
          exports2.isContextConsumer = isContextConsumer;
          exports2.isContextProvider = isContextProvider;
          exports2.isElement = isElement;
          exports2.isForwardRef = isForwardRef;
          exports2.isFragment = isFragment3;
          exports2.isLazy = isLazy;
          exports2.isMemo = isMemo2;
          exports2.isPortal = isPortal;
          exports2.isProfiler = isProfiler;
          exports2.isStrictMode = isStrictMode;
          exports2.isSuspense = isSuspense;
          exports2.isValidElementType = isValidElementType;
          exports2.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/rc-util/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/rc-util/node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development();
      }
    }
  });

  // node_modules/shallowequal/index.js
  var require_shallowequal = __commonJS({
    "node_modules/shallowequal/index.js"(exports2, module2) {
      module2.exports = function shallowEqual6(objA, objB, compare2, compareContext) {
        var ret = compare2 ? compare2.call(compareContext, objA, objB) : void 0;
        if (ret !== void 0) {
          return !!ret;
        }
        if (objA === objB) {
          return true;
        }
        if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
        for (var idx = 0; idx < keysA.length; idx++) {
          var key2 = keysA[idx];
          if (!bHasOwnProperty(key2)) {
            return false;
          }
          var valueA = objA[key2];
          var valueB = objB[key2];
          ret = compare2 ? compare2.call(compareContext, valueA, valueB, key2) : void 0;
          if (ret === false || ret === void 0 && valueA !== valueB) {
            return false;
          }
        }
        return true;
      };
    }
  });

  // node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "node_modules/lodash/isObject.js"(exports2, module2) {
      function isObject3(value) {
        var type4 = typeof value;
        return value != null && (type4 == "object" || type4 == "function");
      }
      module2.exports = isObject3;
    }
  });

  // node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "node_modules/lodash/_freeGlobal.js"(exports2, module2) {
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      module2.exports = freeGlobal;
    }
  });

  // node_modules/lodash/_root.js
  var require_root = __commonJS({
    "node_modules/lodash/_root.js"(exports2, module2) {
      var freeGlobal = require_freeGlobal();
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root2 = freeGlobal || freeSelf || Function("return this")();
      module2.exports = root2;
    }
  });

  // node_modules/lodash/now.js
  var require_now = __commonJS({
    "node_modules/lodash/now.js"(exports2, module2) {
      var root2 = require_root();
      var now3 = function() {
        return root2.Date.now();
      };
      module2.exports = now3;
    }
  });

  // node_modules/lodash/_trimmedEndIndex.js
  var require_trimmedEndIndex = __commonJS({
    "node_modules/lodash/_trimmedEndIndex.js"(exports2, module2) {
      var reWhitespace = /\s/;
      function trimmedEndIndex(string4) {
        var index3 = string4.length;
        while (index3-- && reWhitespace.test(string4.charAt(index3))) {
        }
        return index3;
      }
      module2.exports = trimmedEndIndex;
    }
  });

  // node_modules/lodash/_baseTrim.js
  var require_baseTrim = __commonJS({
    "node_modules/lodash/_baseTrim.js"(exports2, module2) {
      var trimmedEndIndex = require_trimmedEndIndex();
      var reTrimStart = /^\s+/;
      function baseTrim(string4) {
        return string4 ? string4.slice(0, trimmedEndIndex(string4) + 1).replace(reTrimStart, "") : string4;
      }
      module2.exports = baseTrim;
    }
  });

  // node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "node_modules/lodash/_Symbol.js"(exports2, module2) {
      var root2 = require_root();
      var Symbol2 = root2.Symbol;
      module2.exports = Symbol2;
    }
  });

  // node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "node_modules/lodash/_getRawTag.js"(exports2, module2) {
      var Symbol2 = require_Symbol();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e3) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      module2.exports = getRawTag;
    }
  });

  // node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "node_modules/lodash/_objectToString.js"(exports2, module2) {
      var objectProto = Object.prototype;
      var nativeObjectToString = objectProto.toString;
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      module2.exports = objectToString;
    }
  });

  // node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "node_modules/lodash/_baseGetTag.js"(exports2, module2) {
      var Symbol2 = require_Symbol();
      var getRawTag = require_getRawTag();
      var objectToString = require_objectToString();
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      module2.exports = baseGetTag;
    }
  });

  // node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "node_modules/lodash/isObjectLike.js"(exports2, module2) {
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      module2.exports = isObjectLike;
    }
  });

  // node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "node_modules/lodash/isSymbol.js"(exports2, module2) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var symbolTag = "[object Symbol]";
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      module2.exports = isSymbol;
    }
  });

  // node_modules/lodash/toNumber.js
  var require_toNumber = __commonJS({
    "node_modules/lodash/toNumber.js"(exports2, module2) {
      var baseTrim = require_baseTrim();
      var isObject3 = require_isObject();
      var isSymbol = require_isSymbol();
      var NAN = 0 / 0;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject3(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject3(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary2 = reIsBinary.test(value);
        return isBinary2 || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary2 ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      module2.exports = toNumber;
    }
  });

  // node_modules/lodash/debounce.js
  var require_debounce = __commonJS({
    "node_modules/lodash/debounce.js"(exports2, module2) {
      var isObject3 = require_isObject();
      var now3 = require_now();
      var toNumber = require_toNumber();
      var FUNC_ERROR_TEXT = "Expected a function";
      var nativeMax = Math.max;
      var nativeMin = Math.min;
      function debounce2(func, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject3(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now3();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel2() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush2() {
          return timerId === void 0 ? result : trailingEdge(now3());
        }
        function debounced() {
          var time = now3(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel2;
        debounced.flush = flush2;
        return debounced;
      }
      module2.exports = debounce2;
    }
  });

  // node_modules/toggle-selection/index.js
  var require_toggle_selection = __commonJS({
    "node_modules/toggle-selection/index.js"(exports2, module2) {
      module2.exports = function() {
        var selection = document.getSelection();
        if (!selection.rangeCount) {
          return function() {
          };
        }
        var active = document.activeElement;
        var ranges = [];
        for (var i3 = 0; i3 < selection.rangeCount; i3++) {
          ranges.push(selection.getRangeAt(i3));
        }
        switch (active.tagName.toUpperCase()) {
          case "INPUT":
          case "TEXTAREA":
            active.blur();
            break;
          default:
            active = null;
            break;
        }
        selection.removeAllRanges();
        return function() {
          selection.type === "Caret" && selection.removeAllRanges();
          if (!selection.rangeCount) {
            ranges.forEach(function(range3) {
              selection.addRange(range3);
            });
          }
          active && active.focus();
        };
      };
    }
  });

  // node_modules/copy-to-clipboard/index.js
  var require_copy_to_clipboard = __commonJS({
    "node_modules/copy-to-clipboard/index.js"(exports2, module2) {
      "use strict";
      var deselectCurrent = require_toggle_selection();
      var clipboardToIE11Formatting = {
        "text/plain": "Text",
        "text/html": "Url",
        "default": "Text"
      };
      var defaultMessage = "Copy to clipboard: #{key}, Enter";
      function format2(message) {
        var copyKey = (/mac os x/i.test(navigator.userAgent) ? "\u2318" : "Ctrl") + "+C";
        return message.replace(/#{\s*key\s*}/g, copyKey);
      }
      function copy2(text, options) {
        var debug, message, reselectPrevious, range3, selection, mark, success = false;
        if (!options) {
          options = {};
        }
        debug = options.debug || false;
        try {
          reselectPrevious = deselectCurrent();
          range3 = document.createRange();
          selection = document.getSelection();
          mark = document.createElement("span");
          mark.textContent = text;
          mark.ariaHidden = "true";
          mark.style.all = "unset";
          mark.style.position = "fixed";
          mark.style.top = 0;
          mark.style.clip = "rect(0, 0, 0, 0)";
          mark.style.whiteSpace = "pre";
          mark.style.webkitUserSelect = "text";
          mark.style.MozUserSelect = "text";
          mark.style.msUserSelect = "text";
          mark.style.userSelect = "text";
          mark.addEventListener("copy", function(e3) {
            e3.stopPropagation();
            if (options.format) {
              e3.preventDefault();
              if (typeof e3.clipboardData === "undefined") {
                debug && console.warn("unable to use e.clipboardData");
                debug && console.warn("trying IE specific stuff");
                window.clipboardData.clearData();
                var format3 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
                window.clipboardData.setData(format3, text);
              } else {
                e3.clipboardData.clearData();
                e3.clipboardData.setData(options.format, text);
              }
            }
            if (options.onCopy) {
              e3.preventDefault();
              options.onCopy(e3.clipboardData);
            }
          });
          document.body.appendChild(mark);
          range3.selectNodeContents(mark);
          selection.addRange(range3);
          var successful = document.execCommand("copy");
          if (!successful) {
            throw new Error("copy command was unsuccessful");
          }
          success = true;
        } catch (err) {
          debug && console.error("unable to copy using execCommand: ", err);
          debug && console.warn("trying IE specific stuff");
          try {
            window.clipboardData.setData(options.format || "text", text);
            options.onCopy && options.onCopy(window.clipboardData);
            success = true;
          } catch (err2) {
            debug && console.error("unable to copy using clipboardData: ", err2);
            debug && console.error("falling back to prompt");
            message = format2("message" in options ? options.message : defaultMessage);
            window.prompt(message, text);
          }
        } finally {
          if (selection) {
            if (typeof selection.removeRange == "function") {
              selection.removeRange(range3);
            } else {
              selection.removeAllRanges();
            }
          }
          if (mark) {
            document.body.removeChild(mark);
          }
          reselectPrevious();
        }
        return success;
      }
      module2.exports = copy2;
    }
  });

  // (disabled):node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "(disabled):node_modules/buffer/index.js"() {
    }
  });

  // node_modules/bn.js/lib/bn.js
  var require_bn = __commonJS({
    "node_modules/bn.js/lib/bn.js"(exports2, module2) {
      (function(module3, exports3) {
        "use strict";
        function assert(val, msg) {
          if (!val)
            throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number4, base3, endian) {
          if (BN.isBN(number4)) {
            return number4;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number4 !== null) {
            if (base3 === "le" || base3 === "be") {
              endian = base3;
              base3 = 10;
            }
            this._init(number4 || 0, base3 || 10, endian || "be");
          }
        }
        if (typeof module3 === "object") {
          module3.exports = BN;
        } else {
          exports3.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer2;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer2 = window.Buffer;
          } else {
            Buffer2 = require_buffer().Buffer;
          }
        } catch (e3) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0)
            return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0)
            return left;
          return right;
        };
        BN.prototype._init = function init(number4, base3, endian) {
          if (typeof number4 === "number") {
            return this._initNumber(number4, base3, endian);
          }
          if (typeof number4 === "object") {
            return this._initArray(number4, base3, endian);
          }
          if (base3 === "hex") {
            base3 = 16;
          }
          assert(base3 === (base3 | 0) && base3 >= 2 && base3 <= 36);
          number4 = number4.toString().replace(/\s+/g, "");
          var start = 0;
          if (number4[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number4.length) {
            if (base3 === 16) {
              this._parseHex(number4, start, endian);
            } else {
              this._parseBase(number4, base3, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base3, endian);
              }
            }
          }
        };
        BN.prototype._initNumber = function _initNumber(number4, base3, endian) {
          if (number4 < 0) {
            this.negative = 1;
            number4 = -number4;
          }
          if (number4 < 67108864) {
            this.words = [number4 & 67108863];
            this.length = 1;
          } else if (number4 < 4503599627370496) {
            this.words = [
              number4 & 67108863,
              number4 / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert(number4 < 9007199254740992);
            this.words = [
              number4 & 67108863,
              number4 / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le")
            return;
          this._initArray(this.toArray(), base3, endian);
        };
        BN.prototype._initArray = function _initArray(number4, base3, endian) {
          assert(typeof number4.length === "number");
          if (number4.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number4.length / 3);
          this.words = new Array(this.length);
          for (var i3 = 0; i3 < this.length; i3++) {
            this.words[i3] = 0;
          }
          var j, w2;
          var off = 0;
          if (endian === "be") {
            for (i3 = number4.length - 1, j = 0; i3 >= 0; i3 -= 3) {
              w2 = number4[i3] | number4[i3 - 1] << 8 | number4[i3 - 2] << 16;
              this.words[j] |= w2 << off & 67108863;
              this.words[j + 1] = w2 >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i3 = 0, j = 0; i3 < number4.length; i3 += 3) {
              w2 = number4[i3] | number4[i3 + 1] << 8 | number4[i3 + 2] << 16;
              this.words[j] |= w2 << off & 67108863;
              this.words[j + 1] = w2 >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          }
          return this._strip();
        };
        function parseHex4Bits(string4, index3) {
          var c2 = string4.charCodeAt(index3);
          if (c2 >= 48 && c2 <= 57) {
            return c2 - 48;
          } else if (c2 >= 65 && c2 <= 70) {
            return c2 - 55;
          } else if (c2 >= 97 && c2 <= 102) {
            return c2 - 87;
          } else {
            assert(false, "Invalid character in " + string4);
          }
        }
        function parseHexByte(string4, lowerBound, index3) {
          var r3 = parseHex4Bits(string4, index3);
          if (index3 - 1 >= lowerBound) {
            r3 |= parseHex4Bits(string4, index3 - 1) << 4;
          }
          return r3;
        }
        BN.prototype._parseHex = function _parseHex(number4, start, endian) {
          this.length = Math.ceil((number4.length - start) / 6);
          this.words = new Array(this.length);
          for (var i3 = 0; i3 < this.length; i3++) {
            this.words[i3] = 0;
          }
          var off = 0;
          var j = 0;
          var w2;
          if (endian === "be") {
            for (i3 = number4.length - 1; i3 >= start; i3 -= 2) {
              w2 = parseHexByte(number4, start, i3) << off;
              this.words[j] |= w2 & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w2 >>> 26;
              } else {
                off += 8;
              }
            }
          } else {
            var parseLength = number4.length - start;
            for (i3 = parseLength % 2 === 0 ? start + 1 : start; i3 < number4.length; i3 += 2) {
              w2 = parseHexByte(number4, start, i3) << off;
              this.words[j] |= w2 & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w2 >>> 26;
              } else {
                off += 8;
              }
            }
          }
          this._strip();
        };
        function parseBase(str, start, end, mul) {
          var r3 = 0;
          var b2 = 0;
          var len = Math.min(str.length, end);
          for (var i3 = start; i3 < len; i3++) {
            var c2 = str.charCodeAt(i3) - 48;
            r3 *= mul;
            if (c2 >= 49) {
              b2 = c2 - 49 + 10;
            } else if (c2 >= 17) {
              b2 = c2 - 17 + 10;
            } else {
              b2 = c2;
            }
            assert(c2 >= 0 && b2 < mul, "Invalid character");
            r3 += b2;
          }
          return r3;
        }
        BN.prototype._parseBase = function _parseBase(number4, base3, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base3) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base3 | 0;
          var total = number4.length - start;
          var mod2 = total % limbLen;
          var end = Math.min(total, total - mod2) + start;
          var word = 0;
          for (var i3 = start; i3 < end; i3 += limbLen) {
            word = parseBase(number4, i3, i3 + limbLen, base3);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod2 !== 0) {
            var pow = 1;
            word = parseBase(number4, i3, number4.length, base3);
            for (i3 = 0; i3 < mod2; i3++) {
              pow *= base3;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this._strip();
        };
        BN.prototype.copy = function copy2(dest) {
          dest.words = new Array(this.length);
          for (var i3 = 0; i3 < this.length; i3++) {
            dest.words[i3] = this.words[i3];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        function move2(dest, src2) {
          dest.words = src2.words;
          dest.length = src2.length;
          dest.negative = src2.negative;
          dest.red = src2.red;
        }
        BN.prototype._move = function _move(dest) {
          move2(dest, this);
        };
        BN.prototype.clone = function clone2() {
          var r3 = new BN(null);
          this.copy(r3);
          return r3;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype._strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
          try {
            BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
          } catch (e3) {
            BN.prototype.inspect = inspect;
          }
        } else {
          BN.prototype.inspect = inspect;
        }
        function inspect() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        }
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString5(base3, padding) {
          base3 = base3 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base3 === 16 || base3 === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i3 = 0; i3 < this.length; i3++) {
              var w2 = this.words[i3];
              var word = ((w2 << off | carry) & 16777215).toString(16);
              carry = w2 >>> 24 - off & 16777215;
              off += 2;
              if (off >= 26) {
                off -= 26;
                i3--;
              }
              if (carry !== 0 || i3 !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base3 === (base3 | 0) && base3 >= 2 && base3 <= 36) {
            var groupSize = groupSizes[base3];
            var groupBase = groupBases[base3];
            out = "";
            var c2 = this.clone();
            c2.negative = 0;
            while (!c2.isZero()) {
              var r3 = c2.modrn(groupBase).toString(base3);
              c2 = c2.idivn(groupBase);
              if (!c2.isZero()) {
                out = zeros[groupSize - r3.length] + r3 + out;
              } else {
                out = r3 + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON2() {
          return this.toString(16, 2);
        };
        if (Buffer2) {
          BN.prototype.toBuffer = function toBuffer(endian, length2) {
            return this.toArrayLike(Buffer2, endian, length2);
          };
        }
        BN.prototype.toArray = function toArray7(endian, length2) {
          return this.toArrayLike(Array, endian, length2);
        };
        var allocate = function allocate2(ArrayType, size) {
          if (ArrayType.allocUnsafe) {
            return ArrayType.allocUnsafe(size);
          }
          return new ArrayType(size);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length2) {
          this._strip();
          var byteLength = this.byteLength();
          var reqLength = length2 || Math.max(1, byteLength);
          assert(byteLength <= reqLength, "byte array longer than desired length");
          assert(reqLength > 0, "Requested array length <= 0");
          var res = allocate(ArrayType, reqLength);
          var postfix = endian === "le" ? "LE" : "BE";
          this["_toArrayLike" + postfix](res, byteLength);
          return res;
        };
        BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
          var position = 0;
          var carry = 0;
          for (var i3 = 0, shift = 0; i3 < this.length; i3++) {
            var word = this.words[i3] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) {
              res[position++] = word >> 8 & 255;
            }
            if (position < res.length) {
              res[position++] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position < res.length) {
                res[position++] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position < res.length) {
            res[position++] = carry;
            while (position < res.length) {
              res[position++] = 0;
            }
          }
        };
        BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
          var position = res.length - 1;
          var carry = 0;
          for (var i3 = 0, shift = 0; i3 < this.length; i3++) {
            var word = this.words[i3] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) {
              res[position--] = word >> 8 & 255;
            }
            if (position >= 0) {
              res[position--] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position >= 0) {
                res[position--] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position >= 0) {
            res[position--] = carry;
            while (position >= 0) {
              res[position--] = 0;
            }
          }
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w2) {
            return 32 - Math.clz32(w2);
          };
        } else {
          BN.prototype._countBits = function _countBits(w2) {
            var t3 = w2;
            var r3 = 0;
            if (t3 >= 4096) {
              r3 += 13;
              t3 >>>= 13;
            }
            if (t3 >= 64) {
              r3 += 7;
              t3 >>>= 7;
            }
            if (t3 >= 8) {
              r3 += 4;
              t3 >>>= 4;
            }
            if (t3 >= 2) {
              r3 += 2;
              t3 >>>= 2;
            }
            return r3 + t3;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w2) {
          if (w2 === 0)
            return 26;
          var t3 = w2;
          var r3 = 0;
          if ((t3 & 8191) === 0) {
            r3 += 13;
            t3 >>>= 13;
          }
          if ((t3 & 127) === 0) {
            r3 += 7;
            t3 >>>= 7;
          }
          if ((t3 & 15) === 0) {
            r3 += 4;
            t3 >>>= 4;
          }
          if ((t3 & 3) === 0) {
            r3 += 2;
            t3 >>>= 2;
          }
          if ((t3 & 1) === 0) {
            r3++;
          }
          return r3;
        };
        BN.prototype.bitLength = function bitLength() {
          var w2 = this.words[this.length - 1];
          var hi = this._countBits(w2);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w2 = new Array(num.bitLength());
          for (var bit = 0; bit < w2.length; bit++) {
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w2[bit] = num.words[off] >>> wbit & 1;
          }
          return w2;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero())
            return 0;
          var r3 = 0;
          for (var i3 = 0; i3 < this.length; i3++) {
            var b2 = this._zeroBits(this.words[i3]);
            r3 += b2;
            if (b2 !== 26)
              break;
          }
          return r3;
        };
        BN.prototype.byteLength = function byteLength() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i3 = 0; i3 < num.length; i3++) {
            this.words[i3] = this.words[i3] | num.words[i3];
          }
          return this._strip();
        };
        BN.prototype.ior = function ior(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or2(num) {
          if (this.length > num.length)
            return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length)
            return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b2;
          if (this.length > num.length) {
            b2 = num;
          } else {
            b2 = this;
          }
          for (var i3 = 0; i3 < b2.length; i3++) {
            this.words[i3] = this.words[i3] & num.words[i3];
          }
          this.length = b2.length;
          return this._strip();
        };
        BN.prototype.iand = function iand(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length)
            return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length)
            return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a2;
          var b2;
          if (this.length > num.length) {
            a2 = this;
            b2 = num;
          } else {
            a2 = num;
            b2 = this;
          }
          for (var i3 = 0; i3 < b2.length; i3++) {
            this.words[i3] = a2.words[i3] ^ b2.words[i3];
          }
          if (this !== a2) {
            for (; i3 < a2.length; i3++) {
              this.words[i3] = a2.words[i3];
            }
          }
          this.length = a2.length;
          return this._strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor(num) {
          if (this.length > num.length)
            return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length)
            return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i3 = 0; i3 < bytesNeeded; i3++) {
            this.words[i3] = ~this.words[i3] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i3] = ~this.words[i3] & 67108863 >> 26 - bitsLeft;
          }
          return this._strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) {
            this.words[off] = this.words[off] | 1 << wbit;
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }
          return this._strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r3;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r3 = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r3 = this.isub(num);
            num.negative = 1;
            return r3._normSign();
          }
          var a2, b2;
          if (this.length > num.length) {
            a2 = this;
            b2 = num;
          } else {
            a2 = num;
            b2 = this;
          }
          var carry = 0;
          for (var i3 = 0; i3 < b2.length; i3++) {
            r3 = (a2.words[i3] | 0) + (b2.words[i3] | 0) + carry;
            this.words[i3] = r3 & 67108863;
            carry = r3 >>> 26;
          }
          for (; carry !== 0 && i3 < a2.length; i3++) {
            r3 = (a2.words[i3] | 0) + carry;
            this.words[i3] = r3 & 67108863;
            carry = r3 >>> 26;
          }
          this.length = a2.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a2 !== this) {
            for (; i3 < a2.length; i3++) {
              this.words[i3] = a2.words[i3];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length)
            return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r3 = this.iadd(num);
            num.negative = 1;
            return r3._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a2, b2;
          if (cmp > 0) {
            a2 = this;
            b2 = num;
          } else {
            a2 = num;
            b2 = this;
          }
          var carry = 0;
          for (var i3 = 0; i3 < b2.length; i3++) {
            r3 = (a2.words[i3] | 0) - (b2.words[i3] | 0) + carry;
            carry = r3 >> 26;
            this.words[i3] = r3 & 67108863;
          }
          for (; carry !== 0 && i3 < a2.length; i3++) {
            r3 = (a2.words[i3] | 0) + carry;
            carry = r3 >> 26;
            this.words[i3] = r3 & 67108863;
          }
          if (carry === 0 && i3 < a2.length && a2 !== this) {
            for (; i3 < a2.length; i3++) {
              this.words[i3] = a2.words[i3];
            }
          }
          this.length = Math.max(this.length, i3);
          if (a2 !== this) {
            this.negative = 1;
          }
          return this._strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a2 = self2.words[0] | 0;
          var b2 = num.words[0] | 0;
          var r3 = a2 * b2;
          var lo = r3 & 67108863;
          var carry = r3 / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i3 = k - j | 0;
              a2 = self2.words[i3] | 0;
              b2 = num.words[j] | 0;
              r3 = a2 * b2 + rword;
              ncarry += r3 / 67108864 | 0;
              rword = r3 & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out._strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a2 = self2.words;
          var b2 = num.words;
          var o2 = out.words;
          var c2 = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a2[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a2[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a22 = a2[2] | 0;
          var al2 = a22 & 8191;
          var ah2 = a22 >>> 13;
          var a3 = a2[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a2[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a2[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a2[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a2[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a2[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a2[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b2[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b2[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b22 = b2[2] | 0;
          var bl2 = b22 & 8191;
          var bh2 = b22 >>> 13;
          var b3 = b2[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b2[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b2[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b2[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b2[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b2[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b2[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o2[0] = w0;
          o2[1] = w1;
          o2[2] = w2;
          o2[3] = w3;
          o2[4] = w4;
          o2[5] = w5;
          o2[6] = w6;
          o2[7] = w7;
          o2[8] = w8;
          o2[9] = w9;
          o2[10] = w10;
          o2[11] = w11;
          o2[12] = w12;
          o2[13] = w13;
          o2[14] = w14;
          o2[15] = w15;
          o2[16] = w16;
          o2[17] = w17;
          o2[18] = w18;
          if (c2 !== 0) {
            o2[19] = c2;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i3 = k - j;
              var a2 = self2.words[i3] | 0;
              var b2 = num.words[j] | 0;
              var r3 = a2 * b2;
              var lo = r3 & 67108863;
              ncarry = ncarry + (r3 / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out._strip();
        }
        function jumboMulTo(self2, num, out) {
          return bigMulTo(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y2) {
          this.x = x;
          this.y = y2;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t3 = new Array(N);
          var l2 = BN.prototype._countBits(N) - 1;
          for (var i3 = 0; i3 < N; i3++) {
            t3[i3] = this.revBin(i3, l2, N);
          }
          return t3;
        };
        FFTM.prototype.revBin = function revBin(x, l2, N) {
          if (x === 0 || x === N - 1)
            return x;
          var rb = 0;
          for (var i3 = 0; i3 < l2; i3++) {
            rb |= (x & 1) << l2 - i3 - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i3 = 0; i3 < N; i3++) {
            rtws[i3] = rws[rbt[i3]];
            itws[i3] = iws[rbt[i3]];
          }
        };
        FFTM.prototype.transform = function transform2(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s2 = 1; s2 < N; s2 <<= 1) {
            var l2 = s2 << 1;
            var rtwdf = Math.cos(2 * Math.PI / l2);
            var itwdf = Math.sin(2 * Math.PI / l2);
            for (var p2 = 0; p2 < N; p2 += l2) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s2; j++) {
                var re = rtws[p2 + j];
                var ie = itws[p2 + j];
                var ro = rtws[p2 + j + s2];
                var io = itws[p2 + j + s2];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p2 + j] = re + ro;
                itws[p2 + j] = ie + io;
                rtws[p2 + j + s2] = re - ro;
                itws[p2 + j + s2] = ie - io;
                if (j !== l2) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n3, m2) {
          var N = Math.max(m2, n3) | 1;
          var odd = N & 1;
          var i3 = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i3++;
          }
          return 1 << i3 + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1)
            return;
          for (var i3 = 0; i3 < N / 2; i3++) {
            var t3 = rws[i3];
            rws[i3] = rws[N - i3 - 1];
            rws[N - i3 - 1] = t3;
            t3 = iws[i3];
            iws[i3] = -iws[N - i3 - 1];
            iws[N - i3 - 1] = -t3;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i3 = 0; i3 < N / 2; i3++) {
            var w2 = Math.round(ws[2 * i3 + 1] / N) * 8192 + Math.round(ws[2 * i3] / N) + carry;
            ws[i3] = w2 & 67108863;
            if (w2 < 67108864) {
              carry = 0;
            } else {
              carry = w2 / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i3 = 0; i3 < len; i3++) {
            carry = carry + (ws[i3] | 0);
            rws[2 * i3] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i3 + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i3 = 2 * len; i3 < N; ++i3) {
            rws[i3] = 0;
          }
          assert(carry === 0);
          assert((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i3 = 0; i3 < N; i3++) {
            ph[i3] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y2, out) {
          var N = 2 * this.guessLen13b(x.length, y2.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y2.words, y2.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i3 = 0; i3 < N; i3++) {
            var rx = rwst[i3] * nrwst[i3] - iwst[i3] * niwst[i3];
            iwst[i3] = rwst[i3] * niwst[i3] + iwst[i3] * nrwst[i3];
            rwst[i3] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y2.negative;
          out.length = x.length + y2.length;
          return out._strip();
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          var isNegNum = num < 0;
          if (isNegNum)
            num = -num;
          assert(typeof num === "number");
          assert(num < 67108864);
          var carry = 0;
          for (var i3 = 0; i3 < this.length; i3++) {
            var w2 = (this.words[i3] | 0) * num;
            var lo = (w2 & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w2 / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i3] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i3] = carry;
            this.length++;
          }
          return isNegNum ? this.ineg() : this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w2 = toBitArray(num);
          if (w2.length === 0)
            return new BN(1);
          var res = this;
          for (var i3 = 0; i3 < w2.length; i3++, res = res.sqr()) {
            if (w2[i3] !== 0)
              break;
          }
          if (++i3 < w2.length) {
            for (var q = res.sqr(); i3 < w2.length; i3++, q = q.sqr()) {
              if (w2[i3] === 0)
                continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r3 = bits % 26;
          var s2 = (bits - r3) / 26;
          var carryMask = 67108863 >>> 26 - r3 << 26 - r3;
          var i3;
          if (r3 !== 0) {
            var carry = 0;
            for (i3 = 0; i3 < this.length; i3++) {
              var newCarry = this.words[i3] & carryMask;
              var c2 = (this.words[i3] | 0) - newCarry << r3;
              this.words[i3] = c2 | carry;
              carry = newCarry >>> 26 - r3;
            }
            if (carry) {
              this.words[i3] = carry;
              this.length++;
            }
          }
          if (s2 !== 0) {
            for (i3 = this.length - 1; i3 >= 0; i3--) {
              this.words[i3 + s2] = this.words[i3];
            }
            for (i3 = 0; i3 < s2; i3++) {
              this.words[i3] = 0;
            }
            this.length += s2;
          }
          return this._strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert(typeof bits === "number" && bits >= 0);
          var h2;
          if (hint) {
            h2 = (hint - hint % 26) / 26;
          } else {
            h2 = 0;
          }
          var r3 = bits % 26;
          var s2 = Math.min((bits - r3) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r3 << r3;
          var maskedWords = extended;
          h2 -= s2;
          h2 = Math.max(0, h2);
          if (maskedWords) {
            for (var i3 = 0; i3 < s2; i3++) {
              maskedWords.words[i3] = this.words[i3];
            }
            maskedWords.length = s2;
          }
          if (s2 === 0) {
          } else if (this.length > s2) {
            this.length -= s2;
            for (i3 = 0; i3 < this.length; i3++) {
              this.words[i3] = this.words[i3 + s2];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i3 = this.length - 1; i3 >= 0 && (carry !== 0 || i3 >= h2); i3--) {
            var word = this.words[i3] | 0;
            this.words[i3] = carry << 26 - r3 | word >>> r3;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this._strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert(typeof bit === "number" && bit >= 0);
          var r3 = bit % 26;
          var s2 = (bit - r3) / 26;
          var q = 1 << r3;
          if (this.length <= s2)
            return false;
          var w2 = this.words[s2];
          return !!(w2 & q);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r3 = bits % 26;
          var s2 = (bits - r3) / 26;
          assert(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s2) {
            return this;
          }
          if (r3 !== 0) {
            s2++;
          }
          this.length = Math.min(s2, this.length);
          if (r3 !== 0) {
            var mask = 67108863 ^ 67108863 >>> r3 << r3;
            this.words[this.length - 1] &= mask;
          }
          return this._strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          if (num < 0)
            return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i3 = 0; i3 < this.length && this.words[i3] >= 67108864; i3++) {
            this.words[i3] -= 67108864;
            if (i3 === this.length - 1) {
              this.words[i3 + 1] = 1;
            } else {
              this.words[i3 + 1]++;
            }
          }
          this.length = Math.max(this.length, i3 + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          if (num < 0)
            return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i3 = 0; i3 < this.length && this.words[i3] < 0; i3++) {
              this.words[i3] += 67108864;
              this.words[i3 + 1] -= 1;
            }
          }
          return this._strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i3;
          this._expand(len);
          var w2;
          var carry = 0;
          for (i3 = 0; i3 < num.length; i3++) {
            w2 = (this.words[i3 + shift] | 0) + carry;
            var right = (num.words[i3] | 0) * mul;
            w2 -= right & 67108863;
            carry = (w2 >> 26) - (right / 67108864 | 0);
            this.words[i3 + shift] = w2 & 67108863;
          }
          for (; i3 < this.length - shift; i3++) {
            w2 = (this.words[i3 + shift] | 0) + carry;
            carry = w2 >> 26;
            this.words[i3 + shift] = w2 & 67108863;
          }
          if (carry === 0)
            return this._strip();
          assert(carry === -1);
          carry = 0;
          for (i3 = 0; i3 < this.length; i3++) {
            w2 = -(this.words[i3] | 0) + carry;
            carry = w2 >> 26;
            this.words[i3] = w2 & 67108863;
          }
          this.negative = 1;
          return this._strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a2 = this.clone();
          var b2 = num;
          var bhi = b2.words[b2.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b2 = b2.ushln(shift);
            a2.iushln(shift);
            bhi = b2.words[b2.length - 1] | 0;
          }
          var m2 = a2.length - b2.length;
          var q;
          if (mode !== "mod") {
            q = new BN(null);
            q.length = m2 + 1;
            q.words = new Array(q.length);
            for (var i3 = 0; i3 < q.length; i3++) {
              q.words[i3] = 0;
            }
          }
          var diff = a2.clone()._ishlnsubmul(b2, 1, m2);
          if (diff.negative === 0) {
            a2 = diff;
            if (q) {
              q.words[m2] = 1;
            }
          }
          for (var j = m2 - 1; j >= 0; j--) {
            var qj = (a2.words[b2.length + j] | 0) * 67108864 + (a2.words[b2.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a2._ishlnsubmul(b2, qj, j);
            while (a2.negative !== 0) {
              qj--;
              a2.negative = 0;
              a2._ishlnsubmul(b2, 1, j);
              if (!a2.isZero()) {
                a2.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q._strip();
          }
          a2._strip();
          if (mode !== "div" && shift !== 0) {
            a2.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a2
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod2, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.iadd(num);
              }
            }
            return {
              div,
              mod: mod2
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.isub(num);
              }
            }
            return {
              div: res.div,
              mod: mod2
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modrn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod2(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero())
            return dm.div;
          var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r22 = num.andln(1);
          var cmp = mod2.cmp(half);
          if (cmp < 0 || r22 === 1 && cmp === 0)
            return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modrn = function modrn(num) {
          var isNegNum = num < 0;
          if (isNegNum)
            num = -num;
          assert(num <= 67108863);
          var p2 = (1 << 26) % num;
          var acc = 0;
          for (var i3 = this.length - 1; i3 >= 0; i3--) {
            acc = (p2 * acc + (this.words[i3] | 0)) % num;
          }
          return isNegNum ? -acc : acc;
        };
        BN.prototype.modn = function modn(num) {
          return this.modrn(num);
        };
        BN.prototype.idivn = function idivn(num) {
          var isNegNum = num < 0;
          if (isNegNum)
            num = -num;
          assert(num <= 67108863);
          var carry = 0;
          for (var i3 = this.length - 1; i3 >= 0; i3--) {
            var w2 = (this.words[i3] | 0) + carry * 67108864;
            this.words[i3] = w2 / num | 0;
            carry = w2 % num;
          }
          this._strip();
          return isNegNum ? this.ineg() : this;
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p2) {
          assert(p2.negative === 0);
          assert(!p2.isZero());
          var x = this;
          var y2 = p2.clone();
          if (x.negative !== 0) {
            x = x.umod(p2);
          } else {
            x = x.clone();
          }
          var A = new BN(1);
          var B = new BN(0);
          var C = new BN(0);
          var D = new BN(1);
          var g2 = 0;
          while (x.isEven() && y2.isEven()) {
            x.iushrn(1);
            y2.iushrn(1);
            ++g2;
          }
          var yp = y2.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i3 = 0, im = 1; (x.words[0] & im) === 0 && i3 < 26; ++i3, im <<= 1)
              ;
            if (i3 > 0) {
              x.iushrn(i3);
              while (i3-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y2.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
              ;
            if (j > 0) {
              y2.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y2) >= 0) {
              x.isub(y2);
              A.isub(C);
              B.isub(D);
            } else {
              y2.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y2.iushln(g2)
          };
        };
        BN.prototype._invmp = function _invmp(p2) {
          assert(p2.negative === 0);
          assert(!p2.isZero());
          var a2 = this;
          var b2 = p2.clone();
          if (a2.negative !== 0) {
            a2 = a2.umod(p2);
          } else {
            a2 = a2.clone();
          }
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b2.clone();
          while (a2.cmpn(1) > 0 && b2.cmpn(1) > 0) {
            for (var i3 = 0, im = 1; (a2.words[0] & im) === 0 && i3 < 26; ++i3, im <<= 1)
              ;
            if (i3 > 0) {
              a2.iushrn(i3);
              while (i3-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b2.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
              ;
            if (j > 0) {
              b2.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a2.cmp(b2) >= 0) {
              a2.isub(b2);
              x1.isub(x2);
            } else {
              b2.isub(a2);
              x2.isub(x1);
            }
          }
          var res;
          if (a2.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p2);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero())
            return num.abs();
          if (num.isZero())
            return this.abs();
          var a2 = this.clone();
          var b2 = num.clone();
          a2.negative = 0;
          b2.negative = 0;
          for (var shift = 0; a2.isEven() && b2.isEven(); shift++) {
            a2.iushrn(1);
            b2.iushrn(1);
          }
          do {
            while (a2.isEven()) {
              a2.iushrn(1);
            }
            while (b2.isEven()) {
              b2.iushrn(1);
            }
            var r3 = a2.cmp(b2);
            if (r3 < 0) {
              var t3 = a2;
              a2 = b2;
              b2 = t3;
            } else if (r3 === 0 || b2.cmpn(1) === 0) {
              break;
            }
            a2.isub(b2);
          } while (true);
          return b2.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert(typeof bit === "number");
          var r3 = bit % 26;
          var s2 = (bit - r3) / 26;
          var q = 1 << r3;
          if (this.length <= s2) {
            this._expand(s2 + 1);
            this.words[s2] |= q;
            return this;
          }
          var carry = q;
          for (var i3 = s2; carry !== 0 && i3 < this.length; i3++) {
            var w2 = this.words[i3] | 0;
            w2 += carry;
            carry = w2 >>> 26;
            w2 &= 67108863;
            this.words[i3] = w2;
          }
          if (carry !== 0) {
            this.words[i3] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative)
            return -1;
          if (this.negative === 0 && negative)
            return 1;
          this._strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert(num <= 67108863, "Number is too big");
            var w2 = this.words[0] | 0;
            res = w2 === num ? 0 : w2 < num ? -1 : 1;
          }
          if (this.negative !== 0)
            return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0)
            return -1;
          if (this.negative === 0 && num.negative !== 0)
            return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0)
            return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length)
            return 1;
          if (this.length < num.length)
            return -1;
          var res = 0;
          for (var i3 = this.length - 1; i3 >= 0; i3--) {
            var a2 = this.words[i3] | 0;
            var b2 = num.words[i3] | 0;
            if (a2 === b2)
              continue;
            if (a2 < b2) {
              res = -1;
            } else if (a2 > b2) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red2(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          assert(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name5, p2) {
          this.name = name5;
          this.p = new BN(p2, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r3 = num;
          var rlen;
          do {
            this.split(r3, this.tmp);
            r3 = this.imulK(r3);
            r3 = r3.iadd(this.tmp);
            rlen = r3.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r3.ucmp(this.p);
          if (cmp === 0) {
            r3.words[0] = 0;
            r3.length = 1;
          } else if (cmp > 0) {
            r3.isub(this.p);
          } else {
            if (r3.strip !== void 0) {
              r3.strip();
            } else {
              r3._strip();
            }
          }
          return r3;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i3 = 0; i3 < outLen; i3++) {
            output.words[i3] = input.words[i3];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i3 = 10; i3 < input.length; i3++) {
            var next = input.words[i3] | 0;
            input.words[i3 - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i3 - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i3 = 0; i3 < num.length; i3++) {
            var w2 = num.words[i3] | 0;
            lo += w2 * 977;
            num.words[i3] = lo & 67108863;
            lo = w2 * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i3 = 0; i3 < num.length; i3++) {
            var hi = (num.words[i3] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i3] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name5) {
          if (primes[name5])
            return primes[name5];
          var prime2;
          if (name5 === "k256") {
            prime2 = new K256();
          } else if (name5 === "p224") {
            prime2 = new P224();
          } else if (name5 === "p192") {
            prime2 = new P192();
          } else if (name5 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name5);
          }
          primes[name5] = prime2;
          return prime2;
        };
        function Red(m2) {
          if (typeof m2 === "string") {
            var prime = BN._prime(m2);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert(m2.gtn(1), "modulus must be greater than 1");
            this.m = m2;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a2) {
          assert(a2.negative === 0, "red works only with positives");
          assert(a2.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a2, b2) {
          assert((a2.negative | b2.negative) === 0, "red works only with positives");
          assert(
            a2.red && a2.red === b2.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a2) {
          if (this.prime)
            return this.prime.ireduce(a2)._forceRed(this);
          move2(a2, a2.umod(this.m)._forceRed(this));
          return a2;
        };
        Red.prototype.neg = function neg(a2) {
          if (a2.isZero()) {
            return a2.clone();
          }
          return this.m.sub(a2)._forceRed(this);
        };
        Red.prototype.add = function add(a2, b2) {
          this._verify2(a2, b2);
          var res = a2.add(b2);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a2, b2) {
          this._verify2(a2, b2);
          var res = a2.iadd(b2);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a2, b2) {
          this._verify2(a2, b2);
          var res = a2.sub(b2);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a2, b2) {
          this._verify2(a2, b2);
          var res = a2.isub(b2);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a2, num) {
          this._verify1(a2);
          return this.imod(a2.ushln(num));
        };
        Red.prototype.imul = function imul(a2, b2) {
          this._verify2(a2, b2);
          return this.imod(a2.imul(b2));
        };
        Red.prototype.mul = function mul(a2, b2) {
          this._verify2(a2, b2);
          return this.imod(a2.mul(b2));
        };
        Red.prototype.isqr = function isqr(a2) {
          return this.imul(a2, a2.clone());
        };
        Red.prototype.sqr = function sqr(a2) {
          return this.mul(a2, a2);
        };
        Red.prototype.sqrt = function sqrt(a2) {
          if (a2.isZero())
            return a2.clone();
          var mod3 = this.m.andln(3);
          assert(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a2, pow);
          }
          var q = this.m.subn(1);
          var s2 = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s2++;
            q.iushrn(1);
          }
          assert(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c2 = this.pow(z, q);
          var r3 = this.pow(a2, q.addn(1).iushrn(1));
          var t3 = this.pow(a2, q);
          var m2 = s2;
          while (t3.cmp(one) !== 0) {
            var tmp = t3;
            for (var i3 = 0; tmp.cmp(one) !== 0; i3++) {
              tmp = tmp.redSqr();
            }
            assert(i3 < m2);
            var b2 = this.pow(c2, new BN(1).iushln(m2 - i3 - 1));
            r3 = r3.redMul(b2);
            c2 = b2.redSqr();
            t3 = t3.redMul(c2);
            m2 = i3;
          }
          return r3;
        };
        Red.prototype.invm = function invm(a2) {
          var inv = a2._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a2, num) {
          if (num.isZero())
            return new BN(1).toRed(this);
          if (num.cmpn(1) === 0)
            return a2.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a2;
          for (var i3 = 2; i3 < wnd.length; i3++) {
            wnd[i3] = this.mul(wnd[i3 - 1], a2);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i3 = num.length - 1; i3 >= 0; i3--) {
            var word = num.words[i3];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i3 !== 0 || j !== 0))
                continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r3 = num.umod(this.m);
          return r3 === num ? r3.clone() : r3;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m2) {
          Red.call(this, m2);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r3 = this.imod(num.mul(this.rinv));
          r3.red = null;
          return r3;
        };
        Mont.prototype.imul = function imul(a2, b2) {
          if (a2.isZero() || b2.isZero()) {
            a2.words[0] = 0;
            a2.length = 1;
            return a2;
          }
          var t3 = a2.imul(b2);
          var c2 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u2 = t3.isub(c2).iushrn(this.shift);
          var res = u2;
          if (u2.cmp(this.m) >= 0) {
            res = u2.isub(this.m);
          } else if (u2.cmpn(0) < 0) {
            res = u2.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a2, b2) {
          if (a2.isZero() || b2.isZero())
            return new BN(0)._forceRed(this);
          var t3 = a2.mul(b2);
          var c2 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u2 = t3.isub(c2).iushrn(this.shift);
          var res = u2;
          if (u2.cmp(this.m) >= 0) {
            res = u2.isub(this.m);
          } else if (u2.cmpn(0) < 0) {
            res = u2.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a2) {
          var res = this.imod(a2._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module2 === "undefined" || module2, exports2);
    }
  });

  // node_modules/@ethersproject/logger/lib/_version.js
  var require_version = __commonJS({
    "node_modules/@ethersproject/logger/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "logger/5.7.0";
    }
  });

  // node_modules/@ethersproject/logger/lib/index.js
  var require_lib = __commonJS({
    "node_modules/@ethersproject/logger/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Logger = exports2.ErrorCode = exports2.LogLevel = void 0;
      var _permanentCensorErrors = false;
      var _censorErrors = false;
      var LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
      var _logLevel = LogLevels["default"];
      var _version_1 = require_version();
      var _globalLogger = null;
      function _checkNormalize() {
        try {
          var missing_1 = [];
          ["NFD", "NFC", "NFKD", "NFKC"].forEach(function(form) {
            try {
              if ("test".normalize(form) !== "test") {
                throw new Error("bad normalize");
              }
              ;
            } catch (error) {
              missing_1.push(form);
            }
          });
          if (missing_1.length) {
            throw new Error("missing " + missing_1.join(", "));
          }
          if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
            throw new Error("broken implementation");
          }
        } catch (error) {
          return error.message;
        }
        return null;
      }
      var _normalizeError = _checkNormalize();
      var LogLevel;
      (function(LogLevel2) {
        LogLevel2["DEBUG"] = "DEBUG";
        LogLevel2["INFO"] = "INFO";
        LogLevel2["WARNING"] = "WARNING";
        LogLevel2["ERROR"] = "ERROR";
        LogLevel2["OFF"] = "OFF";
      })(LogLevel = exports2.LogLevel || (exports2.LogLevel = {}));
      var ErrorCode;
      (function(ErrorCode2) {
        ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode2["TIMEOUT"] = "TIMEOUT";
        ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
        ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
      })(ErrorCode = exports2.ErrorCode || (exports2.ErrorCode = {}));
      var HEX = "0123456789abcdef";
      var Logger = (
        /** @class */
        function() {
          function Logger2(version3) {
            Object.defineProperty(this, "version", {
              enumerable: true,
              value: version3,
              writable: false
            });
          }
          Logger2.prototype._log = function(logLevel, args) {
            var level = logLevel.toLowerCase();
            if (LogLevels[level] == null) {
              this.throwArgumentError("invalid log level name", "logLevel", logLevel);
            }
            if (_logLevel > LogLevels[level]) {
              return;
            }
            console.log.apply(console, args);
          };
          Logger2.prototype.debug = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            this._log(Logger2.levels.DEBUG, args);
          };
          Logger2.prototype.info = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            this._log(Logger2.levels.INFO, args);
          };
          Logger2.prototype.warn = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            this._log(Logger2.levels.WARNING, args);
          };
          Logger2.prototype.makeError = function(message, code6, params) {
            if (_censorErrors) {
              return this.makeError("censored error", code6, {});
            }
            if (!code6) {
              code6 = Logger2.errors.UNKNOWN_ERROR;
            }
            if (!params) {
              params = {};
            }
            var messageDetails = [];
            Object.keys(params).forEach(function(key2) {
              var value = params[key2];
              try {
                if (value instanceof Uint8Array) {
                  var hex2 = "";
                  for (var i3 = 0; i3 < value.length; i3++) {
                    hex2 += HEX[value[i3] >> 4];
                    hex2 += HEX[value[i3] & 15];
                  }
                  messageDetails.push(key2 + "=Uint8Array(0x" + hex2 + ")");
                } else {
                  messageDetails.push(key2 + "=" + JSON.stringify(value));
                }
              } catch (error2) {
                messageDetails.push(key2 + "=" + JSON.stringify(params[key2].toString()));
              }
            });
            messageDetails.push("code=" + code6);
            messageDetails.push("version=" + this.version);
            var reason = message;
            var url2 = "";
            switch (code6) {
              case ErrorCode.NUMERIC_FAULT: {
                url2 = "NUMERIC_FAULT";
                var fault = message;
                switch (fault) {
                  case "overflow":
                  case "underflow":
                  case "division-by-zero":
                    url2 += "-" + fault;
                    break;
                  case "negative-power":
                  case "negative-width":
                    url2 += "-unsupported";
                    break;
                  case "unbound-bitwise-result":
                    url2 += "-unbound-result";
                    break;
                }
                break;
              }
              case ErrorCode.CALL_EXCEPTION:
              case ErrorCode.INSUFFICIENT_FUNDS:
              case ErrorCode.MISSING_NEW:
              case ErrorCode.NONCE_EXPIRED:
              case ErrorCode.REPLACEMENT_UNDERPRICED:
              case ErrorCode.TRANSACTION_REPLACED:
              case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
                url2 = code6;
                break;
            }
            if (url2) {
              message += " [ See: https://links.ethers.org/v5-errors-" + url2 + " ]";
            }
            if (messageDetails.length) {
              message += " (" + messageDetails.join(", ") + ")";
            }
            var error = new Error(message);
            error.reason = reason;
            error.code = code6;
            Object.keys(params).forEach(function(key2) {
              error[key2] = params[key2];
            });
            return error;
          };
          Logger2.prototype.throwError = function(message, code6, params) {
            throw this.makeError(message, code6, params);
          };
          Logger2.prototype.throwArgumentError = function(message, name5, value) {
            return this.throwError(message, Logger2.errors.INVALID_ARGUMENT, {
              argument: name5,
              value
            });
          };
          Logger2.prototype.assert = function(condition, message, code6, params) {
            if (!!condition) {
              return;
            }
            this.throwError(message, code6, params);
          };
          Logger2.prototype.assertArgument = function(condition, message, name5, value) {
            if (!!condition) {
              return;
            }
            this.throwArgumentError(message, name5, value);
          };
          Logger2.prototype.checkNormalize = function(message) {
            if (message == null) {
              message = "platform missing String.prototype.normalize";
            }
            if (_normalizeError) {
              this.throwError("platform missing String.prototype.normalize", Logger2.errors.UNSUPPORTED_OPERATION, {
                operation: "String.prototype.normalize",
                form: _normalizeError
              });
            }
          };
          Logger2.prototype.checkSafeUint53 = function(value, message) {
            if (typeof value !== "number") {
              return;
            }
            if (message == null) {
              message = "value not safe";
            }
            if (value < 0 || value >= 9007199254740991) {
              this.throwError(message, Logger2.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "out-of-safe-range",
                value
              });
            }
            if (value % 1) {
              this.throwError(message, Logger2.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "non-integer",
                value
              });
            }
          };
          Logger2.prototype.checkArgumentCount = function(count2, expectedCount, message) {
            if (message) {
              message = ": " + message;
            } else {
              message = "";
            }
            if (count2 < expectedCount) {
              this.throwError("missing argument" + message, Logger2.errors.MISSING_ARGUMENT, {
                count: count2,
                expectedCount
              });
            }
            if (count2 > expectedCount) {
              this.throwError("too many arguments" + message, Logger2.errors.UNEXPECTED_ARGUMENT, {
                count: count2,
                expectedCount
              });
            }
          };
          Logger2.prototype.checkNew = function(target, kind) {
            if (target === Object || target == null) {
              this.throwError("missing new", Logger2.errors.MISSING_NEW, { name: kind.name });
            }
          };
          Logger2.prototype.checkAbstract = function(target, kind) {
            if (target === kind) {
              this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger2.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
            } else if (target === Object || target == null) {
              this.throwError("missing new", Logger2.errors.MISSING_NEW, { name: kind.name });
            }
          };
          Logger2.globalLogger = function() {
            if (!_globalLogger) {
              _globalLogger = new Logger2(_version_1.version);
            }
            return _globalLogger;
          };
          Logger2.setCensorship = function(censorship, permanent) {
            if (!censorship && permanent) {
              this.globalLogger().throwError("cannot permanently disable censorship", Logger2.errors.UNSUPPORTED_OPERATION, {
                operation: "setCensorship"
              });
            }
            if (_permanentCensorErrors) {
              if (!censorship) {
                return;
              }
              this.globalLogger().throwError("error censorship permanent", Logger2.errors.UNSUPPORTED_OPERATION, {
                operation: "setCensorship"
              });
            }
            _censorErrors = !!censorship;
            _permanentCensorErrors = !!permanent;
          };
          Logger2.setLogLevel = function(logLevel) {
            var level = LogLevels[logLevel.toLowerCase()];
            if (level == null) {
              Logger2.globalLogger().warn("invalid log level - " + logLevel);
              return;
            }
            _logLevel = level;
          };
          Logger2.from = function(version3) {
            return new Logger2(version3);
          };
          Logger2.errors = ErrorCode;
          Logger2.levels = LogLevel;
          return Logger2;
        }()
      );
      exports2.Logger = Logger;
    }
  });

  // node_modules/@ethersproject/bytes/lib/_version.js
  var require_version2 = __commonJS({
    "node_modules/@ethersproject/bytes/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "bytes/5.7.0";
    }
  });

  // node_modules/@ethersproject/bytes/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/@ethersproject/bytes/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.joinSignature = exports2.splitSignature = exports2.hexZeroPad = exports2.hexStripZeros = exports2.hexValue = exports2.hexConcat = exports2.hexDataSlice = exports2.hexDataLength = exports2.hexlify = exports2.isHexString = exports2.zeroPad = exports2.stripZeros = exports2.concat = exports2.arrayify = exports2.isBytes = exports2.isBytesLike = void 0;
      var logger_1 = require_lib();
      var _version_1 = require_version2();
      var logger = new logger_1.Logger(_version_1.version);
      function isHexable(value) {
        return !!value.toHexString;
      }
      function addSlice(array4) {
        if (array4.slice) {
          return array4;
        }
        array4.slice = function() {
          var args = Array.prototype.slice.call(arguments);
          return addSlice(new Uint8Array(Array.prototype.slice.apply(array4, args)));
        };
        return array4;
      }
      function isBytesLike(value) {
        return isHexString(value) && !(value.length % 2) || isBytes3(value);
      }
      exports2.isBytesLike = isBytesLike;
      function isInteger2(value) {
        return typeof value === "number" && value == value && value % 1 === 0;
      }
      function isBytes3(value) {
        if (value == null) {
          return false;
        }
        if (value.constructor === Uint8Array) {
          return true;
        }
        if (typeof value === "string") {
          return false;
        }
        if (!isInteger2(value.length) || value.length < 0) {
          return false;
        }
        for (var i3 = 0; i3 < value.length; i3++) {
          var v2 = value[i3];
          if (!isInteger2(v2) || v2 < 0 || v2 >= 256) {
            return false;
          }
        }
        return true;
      }
      exports2.isBytes = isBytes3;
      function arrayify(value, options) {
        if (!options) {
          options = {};
        }
        if (typeof value === "number") {
          logger.checkSafeUint53(value, "invalid arrayify value");
          var result = [];
          while (value) {
            result.unshift(value & 255);
            value = parseInt(String(value / 256));
          }
          if (result.length === 0) {
            result.push(0);
          }
          return addSlice(new Uint8Array(result));
        }
        if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
          value = "0x" + value;
        }
        if (isHexable(value)) {
          value = value.toHexString();
        }
        if (isHexString(value)) {
          var hex2 = value.substring(2);
          if (hex2.length % 2) {
            if (options.hexPad === "left") {
              hex2 = "0" + hex2;
            } else if (options.hexPad === "right") {
              hex2 += "0";
            } else {
              logger.throwArgumentError("hex data is odd-length", "value", value);
            }
          }
          var result = [];
          for (var i3 = 0; i3 < hex2.length; i3 += 2) {
            result.push(parseInt(hex2.substring(i3, i3 + 2), 16));
          }
          return addSlice(new Uint8Array(result));
        }
        if (isBytes3(value)) {
          return addSlice(new Uint8Array(value));
        }
        return logger.throwArgumentError("invalid arrayify value", "value", value);
      }
      exports2.arrayify = arrayify;
      function concat3(items) {
        var objects = items.map(function(item) {
          return arrayify(item);
        });
        var length2 = objects.reduce(function(accum, item) {
          return accum + item.length;
        }, 0);
        var result = new Uint8Array(length2);
        objects.reduce(function(offset3, object4) {
          result.set(object4, offset3);
          return offset3 + object4.length;
        }, 0);
        return addSlice(result);
      }
      exports2.concat = concat3;
      function stripZeros(value) {
        var result = arrayify(value);
        if (result.length === 0) {
          return result;
        }
        var start = 0;
        while (start < result.length && result[start] === 0) {
          start++;
        }
        if (start) {
          result = result.slice(start);
        }
        return result;
      }
      exports2.stripZeros = stripZeros;
      function zeroPad(value, length2) {
        value = arrayify(value);
        if (value.length > length2) {
          logger.throwArgumentError("value out of range", "value", arguments[0]);
        }
        var result = new Uint8Array(length2);
        result.set(value, length2 - value.length);
        return addSlice(result);
      }
      exports2.zeroPad = zeroPad;
      function isHexString(value, length2) {
        if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
          return false;
        }
        if (length2 && value.length !== 2 + 2 * length2) {
          return false;
        }
        return true;
      }
      exports2.isHexString = isHexString;
      var HexCharacters = "0123456789abcdef";
      function hexlify(value, options) {
        if (!options) {
          options = {};
        }
        if (typeof value === "number") {
          logger.checkSafeUint53(value, "invalid hexlify value");
          var hex2 = "";
          while (value) {
            hex2 = HexCharacters[value & 15] + hex2;
            value = Math.floor(value / 16);
          }
          if (hex2.length) {
            if (hex2.length % 2) {
              hex2 = "0" + hex2;
            }
            return "0x" + hex2;
          }
          return "0x00";
        }
        if (typeof value === "bigint") {
          value = value.toString(16);
          if (value.length % 2) {
            return "0x0" + value;
          }
          return "0x" + value;
        }
        if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
          value = "0x" + value;
        }
        if (isHexable(value)) {
          return value.toHexString();
        }
        if (isHexString(value)) {
          if (value.length % 2) {
            if (options.hexPad === "left") {
              value = "0x0" + value.substring(2);
            } else if (options.hexPad === "right") {
              value += "0";
            } else {
              logger.throwArgumentError("hex data is odd-length", "value", value);
            }
          }
          return value.toLowerCase();
        }
        if (isBytes3(value)) {
          var result = "0x";
          for (var i3 = 0; i3 < value.length; i3++) {
            var v2 = value[i3];
            result += HexCharacters[(v2 & 240) >> 4] + HexCharacters[v2 & 15];
          }
          return result;
        }
        return logger.throwArgumentError("invalid hexlify value", "value", value);
      }
      exports2.hexlify = hexlify;
      function hexDataLength(data) {
        if (typeof data !== "string") {
          data = hexlify(data);
        } else if (!isHexString(data) || data.length % 2) {
          return null;
        }
        return (data.length - 2) / 2;
      }
      exports2.hexDataLength = hexDataLength;
      function hexDataSlice(data, offset3, endOffset) {
        if (typeof data !== "string") {
          data = hexlify(data);
        } else if (!isHexString(data) || data.length % 2) {
          logger.throwArgumentError("invalid hexData", "value", data);
        }
        offset3 = 2 + 2 * offset3;
        if (endOffset != null) {
          return "0x" + data.substring(offset3, 2 + 2 * endOffset);
        }
        return "0x" + data.substring(offset3);
      }
      exports2.hexDataSlice = hexDataSlice;
      function hexConcat(items) {
        var result = "0x";
        items.forEach(function(item) {
          result += hexlify(item).substring(2);
        });
        return result;
      }
      exports2.hexConcat = hexConcat;
      function hexValue(value) {
        var trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
        if (trimmed === "0x") {
          return "0x0";
        }
        return trimmed;
      }
      exports2.hexValue = hexValue;
      function hexStripZeros(value) {
        if (typeof value !== "string") {
          value = hexlify(value);
        }
        if (!isHexString(value)) {
          logger.throwArgumentError("invalid hex string", "value", value);
        }
        value = value.substring(2);
        var offset3 = 0;
        while (offset3 < value.length && value[offset3] === "0") {
          offset3++;
        }
        return "0x" + value.substring(offset3);
      }
      exports2.hexStripZeros = hexStripZeros;
      function hexZeroPad(value, length2) {
        if (typeof value !== "string") {
          value = hexlify(value);
        } else if (!isHexString(value)) {
          logger.throwArgumentError("invalid hex string", "value", value);
        }
        if (value.length > 2 * length2 + 2) {
          logger.throwArgumentError("value out of range", "value", arguments[1]);
        }
        while (value.length < 2 * length2 + 2) {
          value = "0x0" + value.substring(2);
        }
        return value;
      }
      exports2.hexZeroPad = hexZeroPad;
      function splitSignature(signature) {
        var result = {
          r: "0x",
          s: "0x",
          _vs: "0x",
          recoveryParam: 0,
          v: 0,
          yParityAndS: "0x",
          compact: "0x"
        };
        if (isBytesLike(signature)) {
          var bytes = arrayify(signature);
          if (bytes.length === 64) {
            result.v = 27 + (bytes[32] >> 7);
            bytes[32] &= 127;
            result.r = hexlify(bytes.slice(0, 32));
            result.s = hexlify(bytes.slice(32, 64));
          } else if (bytes.length === 65) {
            result.r = hexlify(bytes.slice(0, 32));
            result.s = hexlify(bytes.slice(32, 64));
            result.v = bytes[64];
          } else {
            logger.throwArgumentError("invalid signature string", "signature", signature);
          }
          if (result.v < 27) {
            if (result.v === 0 || result.v === 1) {
              result.v += 27;
            } else {
              logger.throwArgumentError("signature invalid v byte", "signature", signature);
            }
          }
          result.recoveryParam = 1 - result.v % 2;
          if (result.recoveryParam) {
            bytes[32] |= 128;
          }
          result._vs = hexlify(bytes.slice(32, 64));
        } else {
          result.r = signature.r;
          result.s = signature.s;
          result.v = signature.v;
          result.recoveryParam = signature.recoveryParam;
          result._vs = signature._vs;
          if (result._vs != null) {
            var vs_1 = zeroPad(arrayify(result._vs), 32);
            result._vs = hexlify(vs_1);
            var recoveryParam = vs_1[0] >= 128 ? 1 : 0;
            if (result.recoveryParam == null) {
              result.recoveryParam = recoveryParam;
            } else if (result.recoveryParam !== recoveryParam) {
              logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
            }
            vs_1[0] &= 127;
            var s2 = hexlify(vs_1);
            if (result.s == null) {
              result.s = s2;
            } else if (result.s !== s2) {
              logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
            }
          }
          if (result.recoveryParam == null) {
            if (result.v == null) {
              logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
            } else if (result.v === 0 || result.v === 1) {
              result.recoveryParam = result.v;
            } else {
              result.recoveryParam = 1 - result.v % 2;
            }
          } else {
            if (result.v == null) {
              result.v = 27 + result.recoveryParam;
            } else {
              var recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
              if (result.recoveryParam !== recId) {
                logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
              }
            }
          }
          if (result.r == null || !isHexString(result.r)) {
            logger.throwArgumentError("signature missing or invalid r", "signature", signature);
          } else {
            result.r = hexZeroPad(result.r, 32);
          }
          if (result.s == null || !isHexString(result.s)) {
            logger.throwArgumentError("signature missing or invalid s", "signature", signature);
          } else {
            result.s = hexZeroPad(result.s, 32);
          }
          var vs = arrayify(result.s);
          if (vs[0] >= 128) {
            logger.throwArgumentError("signature s out of range", "signature", signature);
          }
          if (result.recoveryParam) {
            vs[0] |= 128;
          }
          var _vs = hexlify(vs);
          if (result._vs) {
            if (!isHexString(result._vs)) {
              logger.throwArgumentError("signature invalid _vs", "signature", signature);
            }
            result._vs = hexZeroPad(result._vs, 32);
          }
          if (result._vs == null) {
            result._vs = _vs;
          } else if (result._vs !== _vs) {
            logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
          }
        }
        result.yParityAndS = result._vs;
        result.compact = result.r + result.yParityAndS.substring(2);
        return result;
      }
      exports2.splitSignature = splitSignature;
      function joinSignature(signature) {
        signature = splitSignature(signature);
        return hexlify(concat3([
          signature.r,
          signature.s,
          signature.recoveryParam ? "0x1c" : "0x1b"
        ]));
      }
      exports2.joinSignature = joinSignature;
    }
  });

  // node_modules/@ethersproject/bignumber/lib/_version.js
  var require_version3 = __commonJS({
    "node_modules/@ethersproject/bignumber/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "bignumber/5.7.0";
    }
  });

  // node_modules/@ethersproject/bignumber/lib/bignumber.js
  var require_bignumber = __commonJS({
    "node_modules/@ethersproject/bignumber/lib/bignumber.js"(exports2) {
      "use strict";
      var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
        return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2._base16To36 = exports2._base36To16 = exports2.BigNumber = exports2.isBigNumberish = void 0;
      var bn_js_1 = __importDefault(require_bn());
      var BN = bn_js_1.default.BN;
      var bytes_1 = require_lib2();
      var logger_1 = require_lib();
      var _version_1 = require_version3();
      var logger = new logger_1.Logger(_version_1.version);
      var _constructorGuard = {};
      var MAX_SAFE = 9007199254740991;
      function isBigNumberish(value) {
        return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || (0, bytes_1.isHexString)(value) || typeof value === "bigint" || (0, bytes_1.isBytes)(value));
      }
      exports2.isBigNumberish = isBigNumberish;
      var _warnedToStringRadix = false;
      var BigNumber = (
        /** @class */
        function() {
          function BigNumber2(constructorGuard, hex2) {
            if (constructorGuard !== _constructorGuard) {
              logger.throwError("cannot call constructor directly; use BigNumber.from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new (BigNumber)"
              });
            }
            this._hex = hex2;
            this._isBigNumber = true;
            Object.freeze(this);
          }
          BigNumber2.prototype.fromTwos = function(value) {
            return toBigNumber(toBN(this).fromTwos(value));
          };
          BigNumber2.prototype.toTwos = function(value) {
            return toBigNumber(toBN(this).toTwos(value));
          };
          BigNumber2.prototype.abs = function() {
            if (this._hex[0] === "-") {
              return BigNumber2.from(this._hex.substring(1));
            }
            return this;
          };
          BigNumber2.prototype.add = function(other) {
            return toBigNumber(toBN(this).add(toBN(other)));
          };
          BigNumber2.prototype.sub = function(other) {
            return toBigNumber(toBN(this).sub(toBN(other)));
          };
          BigNumber2.prototype.div = function(other) {
            var o2 = BigNumber2.from(other);
            if (o2.isZero()) {
              throwFault("division-by-zero", "div");
            }
            return toBigNumber(toBN(this).div(toBN(other)));
          };
          BigNumber2.prototype.mul = function(other) {
            return toBigNumber(toBN(this).mul(toBN(other)));
          };
          BigNumber2.prototype.mod = function(other) {
            var value = toBN(other);
            if (value.isNeg()) {
              throwFault("division-by-zero", "mod");
            }
            return toBigNumber(toBN(this).umod(value));
          };
          BigNumber2.prototype.pow = function(other) {
            var value = toBN(other);
            if (value.isNeg()) {
              throwFault("negative-power", "pow");
            }
            return toBigNumber(toBN(this).pow(value));
          };
          BigNumber2.prototype.and = function(other) {
            var value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
              throwFault("unbound-bitwise-result", "and");
            }
            return toBigNumber(toBN(this).and(value));
          };
          BigNumber2.prototype.or = function(other) {
            var value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
              throwFault("unbound-bitwise-result", "or");
            }
            return toBigNumber(toBN(this).or(value));
          };
          BigNumber2.prototype.xor = function(other) {
            var value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
              throwFault("unbound-bitwise-result", "xor");
            }
            return toBigNumber(toBN(this).xor(value));
          };
          BigNumber2.prototype.mask = function(value) {
            if (this.isNegative() || value < 0) {
              throwFault("negative-width", "mask");
            }
            return toBigNumber(toBN(this).maskn(value));
          };
          BigNumber2.prototype.shl = function(value) {
            if (this.isNegative() || value < 0) {
              throwFault("negative-width", "shl");
            }
            return toBigNumber(toBN(this).shln(value));
          };
          BigNumber2.prototype.shr = function(value) {
            if (this.isNegative() || value < 0) {
              throwFault("negative-width", "shr");
            }
            return toBigNumber(toBN(this).shrn(value));
          };
          BigNumber2.prototype.eq = function(other) {
            return toBN(this).eq(toBN(other));
          };
          BigNumber2.prototype.lt = function(other) {
            return toBN(this).lt(toBN(other));
          };
          BigNumber2.prototype.lte = function(other) {
            return toBN(this).lte(toBN(other));
          };
          BigNumber2.prototype.gt = function(other) {
            return toBN(this).gt(toBN(other));
          };
          BigNumber2.prototype.gte = function(other) {
            return toBN(this).gte(toBN(other));
          };
          BigNumber2.prototype.isNegative = function() {
            return this._hex[0] === "-";
          };
          BigNumber2.prototype.isZero = function() {
            return toBN(this).isZero();
          };
          BigNumber2.prototype.toNumber = function() {
            try {
              return toBN(this).toNumber();
            } catch (error) {
              throwFault("overflow", "toNumber", this.toString());
            }
            return null;
          };
          BigNumber2.prototype.toBigInt = function() {
            try {
              return BigInt(this.toString());
            } catch (e3) {
            }
            return logger.throwError("this platform does not support BigInt", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              value: this.toString()
            });
          };
          BigNumber2.prototype.toString = function() {
            if (arguments.length > 0) {
              if (arguments[0] === 10) {
                if (!_warnedToStringRadix) {
                  _warnedToStringRadix = true;
                  logger.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                }
              } else if (arguments[0] === 16) {
                logger.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});
              } else {
                logger.throwError("BigNumber.toString does not accept parameters", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});
              }
            }
            return toBN(this).toString(10);
          };
          BigNumber2.prototype.toHexString = function() {
            return this._hex;
          };
          BigNumber2.prototype.toJSON = function(key2) {
            return { type: "BigNumber", hex: this.toHexString() };
          };
          BigNumber2.from = function(value) {
            if (value instanceof BigNumber2) {
              return value;
            }
            if (typeof value === "string") {
              if (value.match(/^-?0x[0-9a-f]+$/i)) {
                return new BigNumber2(_constructorGuard, toHex3(value));
              }
              if (value.match(/^-?[0-9]+$/)) {
                return new BigNumber2(_constructorGuard, toHex3(new BN(value)));
              }
              return logger.throwArgumentError("invalid BigNumber string", "value", value);
            }
            if (typeof value === "number") {
              if (value % 1) {
                throwFault("underflow", "BigNumber.from", value);
              }
              if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                throwFault("overflow", "BigNumber.from", value);
              }
              return BigNumber2.from(String(value));
            }
            var anyValue = value;
            if (typeof anyValue === "bigint") {
              return BigNumber2.from(anyValue.toString());
            }
            if ((0, bytes_1.isBytes)(anyValue)) {
              return BigNumber2.from((0, bytes_1.hexlify)(anyValue));
            }
            if (anyValue) {
              if (anyValue.toHexString) {
                var hex2 = anyValue.toHexString();
                if (typeof hex2 === "string") {
                  return BigNumber2.from(hex2);
                }
              } else {
                var hex2 = anyValue._hex;
                if (hex2 == null && anyValue.type === "BigNumber") {
                  hex2 = anyValue.hex;
                }
                if (typeof hex2 === "string") {
                  if ((0, bytes_1.isHexString)(hex2) || hex2[0] === "-" && (0, bytes_1.isHexString)(hex2.substring(1))) {
                    return BigNumber2.from(hex2);
                  }
                }
              }
            }
            return logger.throwArgumentError("invalid BigNumber value", "value", value);
          };
          BigNumber2.isBigNumber = function(value) {
            return !!(value && value._isBigNumber);
          };
          return BigNumber2;
        }()
      );
      exports2.BigNumber = BigNumber;
      function toHex3(value) {
        if (typeof value !== "string") {
          return toHex3(value.toString(16));
        }
        if (value[0] === "-") {
          value = value.substring(1);
          if (value[0] === "-") {
            logger.throwArgumentError("invalid hex", "value", value);
          }
          value = toHex3(value);
          if (value === "0x00") {
            return value;
          }
          return "-" + value;
        }
        if (value.substring(0, 2) !== "0x") {
          value = "0x" + value;
        }
        if (value === "0x") {
          return "0x00";
        }
        if (value.length % 2) {
          value = "0x0" + value.substring(2);
        }
        while (value.length > 4 && value.substring(0, 4) === "0x00") {
          value = "0x" + value.substring(4);
        }
        return value;
      }
      function toBigNumber(value) {
        return BigNumber.from(toHex3(value));
      }
      function toBN(value) {
        var hex2 = BigNumber.from(value).toHexString();
        if (hex2[0] === "-") {
          return new BN("-" + hex2.substring(3), 16);
        }
        return new BN(hex2.substring(2), 16);
      }
      function throwFault(fault, operation, value) {
        var params = { fault, operation };
        if (value != null) {
          params.value = value;
        }
        return logger.throwError(fault, logger_1.Logger.errors.NUMERIC_FAULT, params);
      }
      function _base36To16(value) {
        return new BN(value, 36).toString(16);
      }
      exports2._base36To16 = _base36To16;
      function _base16To36(value) {
        return new BN(value, 16).toString(36);
      }
      exports2._base16To36 = _base16To36;
    }
  });

  // node_modules/@ethersproject/bignumber/lib/fixednumber.js
  var require_fixednumber = __commonJS({
    "node_modules/@ethersproject/bignumber/lib/fixednumber.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.FixedNumber = exports2.FixedFormat = exports2.parseFixed = exports2.formatFixed = void 0;
      var bytes_1 = require_lib2();
      var logger_1 = require_lib();
      var _version_1 = require_version3();
      var logger = new logger_1.Logger(_version_1.version);
      var bignumber_1 = require_bignumber();
      var _constructorGuard = {};
      var Zero = bignumber_1.BigNumber.from(0);
      var NegativeOne = bignumber_1.BigNumber.from(-1);
      function throwFault(message, fault, operation, value) {
        var params = { fault, operation };
        if (value !== void 0) {
          params.value = value;
        }
        return logger.throwError(message, logger_1.Logger.errors.NUMERIC_FAULT, params);
      }
      var zeros = "0";
      while (zeros.length < 256) {
        zeros += zeros;
      }
      function getMultiplier(decimals) {
        if (typeof decimals !== "number") {
          try {
            decimals = bignumber_1.BigNumber.from(decimals).toNumber();
          } catch (e3) {
          }
        }
        if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
          return "1" + zeros.substring(0, decimals);
        }
        return logger.throwArgumentError("invalid decimal size", "decimals", decimals);
      }
      function formatFixed(value, decimals) {
        if (decimals == null) {
          decimals = 0;
        }
        var multiplier = getMultiplier(decimals);
        value = bignumber_1.BigNumber.from(value);
        var negative = value.lt(Zero);
        if (negative) {
          value = value.mul(NegativeOne);
        }
        var fraction = value.mod(multiplier).toString();
        while (fraction.length < multiplier.length - 1) {
          fraction = "0" + fraction;
        }
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
        var whole = value.div(multiplier).toString();
        if (multiplier.length === 1) {
          value = whole;
        } else {
          value = whole + "." + fraction;
        }
        if (negative) {
          value = "-" + value;
        }
        return value;
      }
      exports2.formatFixed = formatFixed;
      function parseFixed(value, decimals) {
        if (decimals == null) {
          decimals = 0;
        }
        var multiplier = getMultiplier(decimals);
        if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
          logger.throwArgumentError("invalid decimal value", "value", value);
        }
        var negative = value.substring(0, 1) === "-";
        if (negative) {
          value = value.substring(1);
        }
        if (value === ".") {
          logger.throwArgumentError("missing value", "value", value);
        }
        var comps = value.split(".");
        if (comps.length > 2) {
          logger.throwArgumentError("too many decimal points", "value", value);
        }
        var whole = comps[0], fraction = comps[1];
        if (!whole) {
          whole = "0";
        }
        if (!fraction) {
          fraction = "0";
        }
        while (fraction[fraction.length - 1] === "0") {
          fraction = fraction.substring(0, fraction.length - 1);
        }
        if (fraction.length > multiplier.length - 1) {
          throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
        }
        if (fraction === "") {
          fraction = "0";
        }
        while (fraction.length < multiplier.length - 1) {
          fraction += "0";
        }
        var wholeValue = bignumber_1.BigNumber.from(whole);
        var fractionValue = bignumber_1.BigNumber.from(fraction);
        var wei = wholeValue.mul(multiplier).add(fractionValue);
        if (negative) {
          wei = wei.mul(NegativeOne);
        }
        return wei;
      }
      exports2.parseFixed = parseFixed;
      var FixedFormat = (
        /** @class */
        function() {
          function FixedFormat2(constructorGuard, signed, width, decimals) {
            if (constructorGuard !== _constructorGuard) {
              logger.throwError("cannot use FixedFormat constructor; use FixedFormat.from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new FixedFormat"
              });
            }
            this.signed = signed;
            this.width = width;
            this.decimals = decimals;
            this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
            this._multiplier = getMultiplier(decimals);
            Object.freeze(this);
          }
          FixedFormat2.from = function(value) {
            if (value instanceof FixedFormat2) {
              return value;
            }
            if (typeof value === "number") {
              value = "fixed128x" + value;
            }
            var signed = true;
            var width = 128;
            var decimals = 18;
            if (typeof value === "string") {
              if (value === "fixed") {
              } else if (value === "ufixed") {
                signed = false;
              } else {
                var match2 = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                if (!match2) {
                  logger.throwArgumentError("invalid fixed format", "format", value);
                }
                signed = match2[1] !== "u";
                width = parseInt(match2[2]);
                decimals = parseInt(match2[3]);
              }
            } else if (value) {
              var check = function(key2, type4, defaultValue) {
                if (value[key2] == null) {
                  return defaultValue;
                }
                if (typeof value[key2] !== type4) {
                  logger.throwArgumentError("invalid fixed format (" + key2 + " not " + type4 + ")", "format." + key2, value[key2]);
                }
                return value[key2];
              };
              signed = check("signed", "boolean", signed);
              width = check("width", "number", width);
              decimals = check("decimals", "number", decimals);
            }
            if (width % 8) {
              logger.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
            }
            if (decimals > 80) {
              logger.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
            }
            return new FixedFormat2(_constructorGuard, signed, width, decimals);
          };
          return FixedFormat2;
        }()
      );
      exports2.FixedFormat = FixedFormat;
      var FixedNumber = (
        /** @class */
        function() {
          function FixedNumber2(constructorGuard, hex2, value, format2) {
            if (constructorGuard !== _constructorGuard) {
              logger.throwError("cannot use FixedNumber constructor; use FixedNumber.from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new FixedFormat"
              });
            }
            this.format = format2;
            this._hex = hex2;
            this._value = value;
            this._isFixedNumber = true;
            Object.freeze(this);
          }
          FixedNumber2.prototype._checkFormat = function(other) {
            if (this.format.name !== other.format.name) {
              logger.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
            }
          };
          FixedNumber2.prototype.addUnsafe = function(other) {
            this._checkFormat(other);
            var a2 = parseFixed(this._value, this.format.decimals);
            var b2 = parseFixed(other._value, other.format.decimals);
            return FixedNumber2.fromValue(a2.add(b2), this.format.decimals, this.format);
          };
          FixedNumber2.prototype.subUnsafe = function(other) {
            this._checkFormat(other);
            var a2 = parseFixed(this._value, this.format.decimals);
            var b2 = parseFixed(other._value, other.format.decimals);
            return FixedNumber2.fromValue(a2.sub(b2), this.format.decimals, this.format);
          };
          FixedNumber2.prototype.mulUnsafe = function(other) {
            this._checkFormat(other);
            var a2 = parseFixed(this._value, this.format.decimals);
            var b2 = parseFixed(other._value, other.format.decimals);
            return FixedNumber2.fromValue(a2.mul(b2).div(this.format._multiplier), this.format.decimals, this.format);
          };
          FixedNumber2.prototype.divUnsafe = function(other) {
            this._checkFormat(other);
            var a2 = parseFixed(this._value, this.format.decimals);
            var b2 = parseFixed(other._value, other.format.decimals);
            return FixedNumber2.fromValue(a2.mul(this.format._multiplier).div(b2), this.format.decimals, this.format);
          };
          FixedNumber2.prototype.floor = function() {
            var comps = this.toString().split(".");
            if (comps.length === 1) {
              comps.push("0");
            }
            var result = FixedNumber2.from(comps[0], this.format);
            var hasFraction = !comps[1].match(/^(0*)$/);
            if (this.isNegative() && hasFraction) {
              result = result.subUnsafe(ONE.toFormat(result.format));
            }
            return result;
          };
          FixedNumber2.prototype.ceiling = function() {
            var comps = this.toString().split(".");
            if (comps.length === 1) {
              comps.push("0");
            }
            var result = FixedNumber2.from(comps[0], this.format);
            var hasFraction = !comps[1].match(/^(0*)$/);
            if (!this.isNegative() && hasFraction) {
              result = result.addUnsafe(ONE.toFormat(result.format));
            }
            return result;
          };
          FixedNumber2.prototype.round = function(decimals) {
            if (decimals == null) {
              decimals = 0;
            }
            var comps = this.toString().split(".");
            if (comps.length === 1) {
              comps.push("0");
            }
            if (decimals < 0 || decimals > 80 || decimals % 1) {
              logger.throwArgumentError("invalid decimal count", "decimals", decimals);
            }
            if (comps[1].length <= decimals) {
              return this;
            }
            var factor = FixedNumber2.from("1" + zeros.substring(0, decimals), this.format);
            var bump = BUMP.toFormat(this.format);
            return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
          };
          FixedNumber2.prototype.isZero = function() {
            return this._value === "0.0" || this._value === "0";
          };
          FixedNumber2.prototype.isNegative = function() {
            return this._value[0] === "-";
          };
          FixedNumber2.prototype.toString = function() {
            return this._value;
          };
          FixedNumber2.prototype.toHexString = function(width) {
            if (width == null) {
              return this._hex;
            }
            if (width % 8) {
              logger.throwArgumentError("invalid byte width", "width", width);
            }
            var hex2 = bignumber_1.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
            return (0, bytes_1.hexZeroPad)(hex2, width / 8);
          };
          FixedNumber2.prototype.toUnsafeFloat = function() {
            return parseFloat(this.toString());
          };
          FixedNumber2.prototype.toFormat = function(format2) {
            return FixedNumber2.fromString(this._value, format2);
          };
          FixedNumber2.fromValue = function(value, decimals, format2) {
            if (format2 == null && decimals != null && !(0, bignumber_1.isBigNumberish)(decimals)) {
              format2 = decimals;
              decimals = null;
            }
            if (decimals == null) {
              decimals = 0;
            }
            if (format2 == null) {
              format2 = "fixed";
            }
            return FixedNumber2.fromString(formatFixed(value, decimals), FixedFormat.from(format2));
          };
          FixedNumber2.fromString = function(value, format2) {
            if (format2 == null) {
              format2 = "fixed";
            }
            var fixedFormat = FixedFormat.from(format2);
            var numeric = parseFixed(value, fixedFormat.decimals);
            if (!fixedFormat.signed && numeric.lt(Zero)) {
              throwFault("unsigned value cannot be negative", "overflow", "value", value);
            }
            var hex2 = null;
            if (fixedFormat.signed) {
              hex2 = numeric.toTwos(fixedFormat.width).toHexString();
            } else {
              hex2 = numeric.toHexString();
              hex2 = (0, bytes_1.hexZeroPad)(hex2, fixedFormat.width / 8);
            }
            var decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber2(_constructorGuard, hex2, decimal, fixedFormat);
          };
          FixedNumber2.fromBytes = function(value, format2) {
            if (format2 == null) {
              format2 = "fixed";
            }
            var fixedFormat = FixedFormat.from(format2);
            if ((0, bytes_1.arrayify)(value).length > fixedFormat.width / 8) {
              throw new Error("overflow");
            }
            var numeric = bignumber_1.BigNumber.from(value);
            if (fixedFormat.signed) {
              numeric = numeric.fromTwos(fixedFormat.width);
            }
            var hex2 = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
            var decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber2(_constructorGuard, hex2, decimal, fixedFormat);
          };
          FixedNumber2.from = function(value, format2) {
            if (typeof value === "string") {
              return FixedNumber2.fromString(value, format2);
            }
            if ((0, bytes_1.isBytes)(value)) {
              return FixedNumber2.fromBytes(value, format2);
            }
            try {
              return FixedNumber2.fromValue(value, 0, format2);
            } catch (error) {
              if (error.code !== logger_1.Logger.errors.INVALID_ARGUMENT) {
                throw error;
              }
            }
            return logger.throwArgumentError("invalid FixedNumber value", "value", value);
          };
          FixedNumber2.isFixedNumber = function(value) {
            return !!(value && value._isFixedNumber);
          };
          return FixedNumber2;
        }()
      );
      exports2.FixedNumber = FixedNumber;
      var ONE = FixedNumber.from(1);
      var BUMP = FixedNumber.from("0.5");
    }
  });

  // node_modules/@ethersproject/bignumber/lib/index.js
  var require_lib3 = __commonJS({
    "node_modules/@ethersproject/bignumber/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2._base36To16 = exports2._base16To36 = exports2.parseFixed = exports2.FixedNumber = exports2.FixedFormat = exports2.formatFixed = exports2.BigNumber = void 0;
      var bignumber_1 = require_bignumber();
      Object.defineProperty(exports2, "BigNumber", { enumerable: true, get: function() {
        return bignumber_1.BigNumber;
      } });
      var fixednumber_1 = require_fixednumber();
      Object.defineProperty(exports2, "formatFixed", { enumerable: true, get: function() {
        return fixednumber_1.formatFixed;
      } });
      Object.defineProperty(exports2, "FixedFormat", { enumerable: true, get: function() {
        return fixednumber_1.FixedFormat;
      } });
      Object.defineProperty(exports2, "FixedNumber", { enumerable: true, get: function() {
        return fixednumber_1.FixedNumber;
      } });
      Object.defineProperty(exports2, "parseFixed", { enumerable: true, get: function() {
        return fixednumber_1.parseFixed;
      } });
      var bignumber_2 = require_bignumber();
      Object.defineProperty(exports2, "_base16To36", { enumerable: true, get: function() {
        return bignumber_2._base16To36;
      } });
      Object.defineProperty(exports2, "_base36To16", { enumerable: true, get: function() {
        return bignumber_2._base36To16;
      } });
    }
  });

  // node_modules/@ethersproject/properties/lib/_version.js
  var require_version4 = __commonJS({
    "node_modules/@ethersproject/properties/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "properties/5.7.0";
    }
  });

  // node_modules/@ethersproject/properties/lib/index.js
  var require_lib4 = __commonJS({
    "node_modules/@ethersproject/properties/lib/index.js"(exports2) {
      "use strict";
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports2 && exports2.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y2, t3, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                return t3;
              if (y2 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t3[1]) {
                    _.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _.label < t3[2]) {
                    _.label = t3[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Description = exports2.deepCopy = exports2.shallowCopy = exports2.checkProperties = exports2.resolveProperties = exports2.getStatic = exports2.defineReadOnly = void 0;
      var logger_1 = require_lib();
      var _version_1 = require_version4();
      var logger = new logger_1.Logger(_version_1.version);
      function defineReadOnly(object4, name5, value) {
        Object.defineProperty(object4, name5, {
          enumerable: true,
          value,
          writable: false
        });
      }
      exports2.defineReadOnly = defineReadOnly;
      function getStatic(ctor, key2) {
        for (var i3 = 0; i3 < 32; i3++) {
          if (ctor[key2]) {
            return ctor[key2];
          }
          if (!ctor.prototype || typeof ctor.prototype !== "object") {
            break;
          }
          ctor = Object.getPrototypeOf(ctor.prototype).constructor;
        }
        return null;
      }
      exports2.getStatic = getStatic;
      function resolveProperties(object4) {
        return __awaiter2(this, void 0, void 0, function() {
          var promises, results;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                promises = Object.keys(object4).map(function(key2) {
                  var value = object4[key2];
                  return Promise.resolve(value).then(function(v2) {
                    return { key: key2, value: v2 };
                  });
                });
                return [4, Promise.all(promises)];
              case 1:
                results = _a.sent();
                return [2, results.reduce(function(accum, result) {
                  accum[result.key] = result.value;
                  return accum;
                }, {})];
            }
          });
        });
      }
      exports2.resolveProperties = resolveProperties;
      function checkProperties(object4, properties) {
        if (!object4 || typeof object4 !== "object") {
          logger.throwArgumentError("invalid object", "object", object4);
        }
        Object.keys(object4).forEach(function(key2) {
          if (!properties[key2]) {
            logger.throwArgumentError("invalid object key - " + key2, "transaction:" + key2, object4);
          }
        });
      }
      exports2.checkProperties = checkProperties;
      function shallowCopy(object4) {
        var result = {};
        for (var key2 in object4) {
          result[key2] = object4[key2];
        }
        return result;
      }
      exports2.shallowCopy = shallowCopy;
      var opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
      function _isFrozen(object4) {
        if (object4 === void 0 || object4 === null || opaque[typeof object4]) {
          return true;
        }
        if (Array.isArray(object4) || typeof object4 === "object") {
          if (!Object.isFrozen(object4)) {
            return false;
          }
          var keys = Object.keys(object4);
          for (var i3 = 0; i3 < keys.length; i3++) {
            var value = null;
            try {
              value = object4[keys[i3]];
            } catch (error) {
              continue;
            }
            if (!_isFrozen(value)) {
              return false;
            }
          }
          return true;
        }
        return logger.throwArgumentError("Cannot deepCopy " + typeof object4, "object", object4);
      }
      function _deepCopy(object4) {
        if (_isFrozen(object4)) {
          return object4;
        }
        if (Array.isArray(object4)) {
          return Object.freeze(object4.map(function(item) {
            return deepCopy(item);
          }));
        }
        if (typeof object4 === "object") {
          var result = {};
          for (var key2 in object4) {
            var value = object4[key2];
            if (value === void 0) {
              continue;
            }
            defineReadOnly(result, key2, deepCopy(value));
          }
          return result;
        }
        return logger.throwArgumentError("Cannot deepCopy " + typeof object4, "object", object4);
      }
      function deepCopy(object4) {
        return _deepCopy(object4);
      }
      exports2.deepCopy = deepCopy;
      var Description = (
        /** @class */
        function() {
          function Description2(info) {
            for (var key2 in info) {
              this[key2] = deepCopy(info[key2]);
            }
          }
          return Description2;
        }()
      );
      exports2.Description = Description;
    }
  });

  // node_modules/@ethersproject/abstract-provider/lib/_version.js
  var require_version5 = __commonJS({
    "node_modules/@ethersproject/abstract-provider/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "abstract-provider/5.7.0";
    }
  });

  // node_modules/@ethersproject/abstract-provider/lib/index.js
  var require_lib5 = __commonJS({
    "node_modules/@ethersproject/abstract-provider/lib/index.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports2 && exports2.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y2, t3, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                return t3;
              if (y2 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t3[1]) {
                    _.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _.label < t3[2]) {
                    _.label = t3[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Provider = exports2.TransactionOrderForkEvent = exports2.TransactionForkEvent = exports2.BlockForkEvent = exports2.ForkEvent = void 0;
      var bignumber_1 = require_lib3();
      var bytes_1 = require_lib2();
      var properties_1 = require_lib4();
      var logger_1 = require_lib();
      var _version_1 = require_version5();
      var logger = new logger_1.Logger(_version_1.version);
      var ForkEvent = (
        /** @class */
        function(_super) {
          __extends(ForkEvent2, _super);
          function ForkEvent2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          ForkEvent2.isForkEvent = function(value) {
            return !!(value && value._isForkEvent);
          };
          return ForkEvent2;
        }(properties_1.Description)
      );
      exports2.ForkEvent = ForkEvent;
      var BlockForkEvent = (
        /** @class */
        function(_super) {
          __extends(BlockForkEvent2, _super);
          function BlockForkEvent2(blockHash, expiry) {
            var _this = this;
            if (!(0, bytes_1.isHexString)(blockHash, 32)) {
              logger.throwArgumentError("invalid blockHash", "blockHash", blockHash);
            }
            _this = _super.call(this, {
              _isForkEvent: true,
              _isBlockForkEvent: true,
              expiry: expiry || 0,
              blockHash
            }) || this;
            return _this;
          }
          return BlockForkEvent2;
        }(ForkEvent)
      );
      exports2.BlockForkEvent = BlockForkEvent;
      var TransactionForkEvent = (
        /** @class */
        function(_super) {
          __extends(TransactionForkEvent2, _super);
          function TransactionForkEvent2(hash, expiry) {
            var _this = this;
            if (!(0, bytes_1.isHexString)(hash, 32)) {
              logger.throwArgumentError("invalid transaction hash", "hash", hash);
            }
            _this = _super.call(this, {
              _isForkEvent: true,
              _isTransactionForkEvent: true,
              expiry: expiry || 0,
              hash
            }) || this;
            return _this;
          }
          return TransactionForkEvent2;
        }(ForkEvent)
      );
      exports2.TransactionForkEvent = TransactionForkEvent;
      var TransactionOrderForkEvent = (
        /** @class */
        function(_super) {
          __extends(TransactionOrderForkEvent2, _super);
          function TransactionOrderForkEvent2(beforeHash, afterHash, expiry) {
            var _this = this;
            if (!(0, bytes_1.isHexString)(beforeHash, 32)) {
              logger.throwArgumentError("invalid transaction hash", "beforeHash", beforeHash);
            }
            if (!(0, bytes_1.isHexString)(afterHash, 32)) {
              logger.throwArgumentError("invalid transaction hash", "afterHash", afterHash);
            }
            _this = _super.call(this, {
              _isForkEvent: true,
              _isTransactionOrderForkEvent: true,
              expiry: expiry || 0,
              beforeHash,
              afterHash
            }) || this;
            return _this;
          }
          return TransactionOrderForkEvent2;
        }(ForkEvent)
      );
      exports2.TransactionOrderForkEvent = TransactionOrderForkEvent;
      var Provider = (
        /** @class */
        function() {
          function Provider2() {
            var _newTarget = this.constructor;
            logger.checkAbstract(_newTarget, Provider2);
            (0, properties_1.defineReadOnly)(this, "_isProvider", true);
          }
          Provider2.prototype.getFeeData = function() {
            return __awaiter2(this, void 0, void 0, function() {
              var _a, block, gasPrice, lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    return [4, (0, properties_1.resolveProperties)({
                      block: this.getBlock("latest"),
                      gasPrice: this.getGasPrice().catch(function(error) {
                        return null;
                      })
                    })];
                  case 1:
                    _a = _b.sent(), block = _a.block, gasPrice = _a.gasPrice;
                    lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;
                    if (block && block.baseFeePerGas) {
                      lastBaseFeePerGas = block.baseFeePerGas;
                      maxPriorityFeePerGas = bignumber_1.BigNumber.from("1500000000");
                      maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
                    }
                    return [2, { lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas, gasPrice }];
                }
              });
            });
          };
          Provider2.prototype.addListener = function(eventName, listener) {
            return this.on(eventName, listener);
          };
          Provider2.prototype.removeListener = function(eventName, listener) {
            return this.off(eventName, listener);
          };
          Provider2.isProvider = function(value) {
            return !!(value && value._isProvider);
          };
          return Provider2;
        }()
      );
      exports2.Provider = Provider;
    }
  });

  // node_modules/@ethersproject/networks/lib/_version.js
  var require_version6 = __commonJS({
    "node_modules/@ethersproject/networks/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "networks/5.7.1";
    }
  });

  // node_modules/@ethersproject/networks/lib/index.js
  var require_lib6 = __commonJS({
    "node_modules/@ethersproject/networks/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getNetwork = void 0;
      var logger_1 = require_lib();
      var _version_1 = require_version6();
      var logger = new logger_1.Logger(_version_1.version);
      function isRenetworkable(value) {
        return value && typeof value.renetwork === "function";
      }
      function ethDefaultProvider(network) {
        var func = function(providers, options) {
          if (options == null) {
            options = {};
          }
          var providerList = [];
          if (providers.InfuraProvider && options.infura !== "-") {
            try {
              providerList.push(new providers.InfuraProvider(network, options.infura));
            } catch (error) {
            }
          }
          if (providers.EtherscanProvider && options.etherscan !== "-") {
            try {
              providerList.push(new providers.EtherscanProvider(network, options.etherscan));
            } catch (error) {
            }
          }
          if (providers.AlchemyProvider && options.alchemy !== "-") {
            try {
              providerList.push(new providers.AlchemyProvider(network, options.alchemy));
            } catch (error) {
            }
          }
          if (providers.PocketProvider && options.pocket !== "-") {
            var skip = ["goerli", "ropsten", "rinkeby", "sepolia"];
            try {
              var provider = new providers.PocketProvider(network, options.pocket);
              if (provider.network && skip.indexOf(provider.network.name) === -1) {
                providerList.push(provider);
              }
            } catch (error) {
            }
          }
          if (providers.CloudflareProvider && options.cloudflare !== "-") {
            try {
              providerList.push(new providers.CloudflareProvider(network));
            } catch (error) {
            }
          }
          if (providers.AnkrProvider && options.ankr !== "-") {
            try {
              var skip = ["ropsten"];
              var provider = new providers.AnkrProvider(network, options.ankr);
              if (provider.network && skip.indexOf(provider.network.name) === -1) {
                providerList.push(provider);
              }
            } catch (error) {
            }
          }
          if (providerList.length === 0) {
            return null;
          }
          if (providers.FallbackProvider) {
            var quorum = 1;
            if (options.quorum != null) {
              quorum = options.quorum;
            } else if (network === "homestead") {
              quorum = 2;
            }
            return new providers.FallbackProvider(providerList, quorum);
          }
          return providerList[0];
        };
        func.renetwork = function(network2) {
          return ethDefaultProvider(network2);
        };
        return func;
      }
      function etcDefaultProvider(url2, network) {
        var func = function(providers, options) {
          if (providers.JsonRpcProvider) {
            return new providers.JsonRpcProvider(url2, network);
          }
          return null;
        };
        func.renetwork = function(network2) {
          return etcDefaultProvider(url2, network2);
        };
        return func;
      }
      var homestead = {
        chainId: 1,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "homestead",
        _defaultProvider: ethDefaultProvider("homestead")
      };
      var ropsten = {
        chainId: 3,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "ropsten",
        _defaultProvider: ethDefaultProvider("ropsten")
      };
      var classicMordor = {
        chainId: 63,
        name: "classicMordor",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
      };
      var networks = {
        unspecified: { chainId: 0, name: "unspecified" },
        homestead,
        mainnet: homestead,
        morden: { chainId: 2, name: "morden" },
        ropsten,
        testnet: ropsten,
        rinkeby: {
          chainId: 4,
          ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
          name: "rinkeby",
          _defaultProvider: ethDefaultProvider("rinkeby")
        },
        kovan: {
          chainId: 42,
          name: "kovan",
          _defaultProvider: ethDefaultProvider("kovan")
        },
        goerli: {
          chainId: 5,
          ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
          name: "goerli",
          _defaultProvider: ethDefaultProvider("goerli")
        },
        kintsugi: { chainId: 1337702, name: "kintsugi" },
        sepolia: {
          chainId: 11155111,
          name: "sepolia",
          _defaultProvider: ethDefaultProvider("sepolia")
        },
        // ETC (See: #351)
        classic: {
          chainId: 61,
          name: "classic",
          _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic")
        },
        classicMorden: { chainId: 62, name: "classicMorden" },
        classicMordor,
        classicTestnet: classicMordor,
        classicKotti: {
          chainId: 6,
          name: "classicKotti",
          _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti")
        },
        xdai: { chainId: 100, name: "xdai" },
        matic: {
          chainId: 137,
          name: "matic",
          _defaultProvider: ethDefaultProvider("matic")
        },
        maticmum: { chainId: 80001, name: "maticmum" },
        optimism: {
          chainId: 10,
          name: "optimism",
          _defaultProvider: ethDefaultProvider("optimism")
        },
        "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
        "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
        arbitrum: { chainId: 42161, name: "arbitrum" },
        "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
        "arbitrum-goerli": { chainId: 421613, name: "arbitrum-goerli" },
        bnb: { chainId: 56, name: "bnb" },
        bnbt: { chainId: 97, name: "bnbt" }
      };
      function getNetwork(network) {
        if (network == null) {
          return null;
        }
        if (typeof network === "number") {
          for (var name_1 in networks) {
            var standard_1 = networks[name_1];
            if (standard_1.chainId === network) {
              return {
                name: standard_1.name,
                chainId: standard_1.chainId,
                ensAddress: standard_1.ensAddress || null,
                _defaultProvider: standard_1._defaultProvider || null
              };
            }
          }
          return {
            chainId: network,
            name: "unknown"
          };
        }
        if (typeof network === "string") {
          var standard_2 = networks[network];
          if (standard_2 == null) {
            return null;
          }
          return {
            name: standard_2.name,
            chainId: standard_2.chainId,
            ensAddress: standard_2.ensAddress,
            _defaultProvider: standard_2._defaultProvider || null
          };
        }
        var standard = networks[network.name];
        if (!standard) {
          if (typeof network.chainId !== "number") {
            logger.throwArgumentError("invalid network chainId", "network", network);
          }
          return network;
        }
        if (network.chainId !== 0 && network.chainId !== standard.chainId) {
          logger.throwArgumentError("network chainId mismatch", "network", network);
        }
        var defaultProvider = network._defaultProvider || null;
        if (defaultProvider == null && standard._defaultProvider) {
          if (isRenetworkable(standard._defaultProvider)) {
            defaultProvider = standard._defaultProvider.renetwork(network);
          } else {
            defaultProvider = standard._defaultProvider;
          }
        }
        return {
          name: network.name,
          chainId: standard.chainId,
          ensAddress: network.ensAddress || standard.ensAddress || null,
          _defaultProvider: defaultProvider
        };
      }
      exports2.getNetwork = getNetwork;
    }
  });

  // node_modules/@ethersproject/base64/lib/browser-base64.js
  var require_browser_base64 = __commonJS({
    "node_modules/@ethersproject/base64/lib/browser-base64.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.encode = exports2.decode = void 0;
      var bytes_1 = require_lib2();
      function decode11(textData) {
        textData = atob(textData);
        var data = [];
        for (var i3 = 0; i3 < textData.length; i3++) {
          data.push(textData.charCodeAt(i3));
        }
        return (0, bytes_1.arrayify)(data);
      }
      exports2.decode = decode11;
      function encode12(data) {
        data = (0, bytes_1.arrayify)(data);
        var textData = "";
        for (var i3 = 0; i3 < data.length; i3++) {
          textData += String.fromCharCode(data[i3]);
        }
        return btoa(textData);
      }
      exports2.encode = encode12;
    }
  });

  // node_modules/@ethersproject/base64/lib/index.js
  var require_lib7 = __commonJS({
    "node_modules/@ethersproject/base64/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.encode = exports2.decode = void 0;
      var base64_1 = require_browser_base64();
      Object.defineProperty(exports2, "decode", { enumerable: true, get: function() {
        return base64_1.decode;
      } });
      Object.defineProperty(exports2, "encode", { enumerable: true, get: function() {
        return base64_1.encode;
      } });
    }
  });

  // node_modules/@ethersproject/basex/lib/index.js
  var require_lib8 = __commonJS({
    "node_modules/@ethersproject/basex/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Base58 = exports2.Base32 = exports2.BaseX = void 0;
      var bytes_1 = require_lib2();
      var properties_1 = require_lib4();
      var BaseX = (
        /** @class */
        function() {
          function BaseX2(alphabet2) {
            (0, properties_1.defineReadOnly)(this, "alphabet", alphabet2);
            (0, properties_1.defineReadOnly)(this, "base", alphabet2.length);
            (0, properties_1.defineReadOnly)(this, "_alphabetMap", {});
            (0, properties_1.defineReadOnly)(this, "_leader", alphabet2.charAt(0));
            for (var i3 = 0; i3 < alphabet2.length; i3++) {
              this._alphabetMap[alphabet2.charAt(i3)] = i3;
            }
          }
          BaseX2.prototype.encode = function(value) {
            var source = (0, bytes_1.arrayify)(value);
            if (source.length === 0) {
              return "";
            }
            var digits = [0];
            for (var i3 = 0; i3 < source.length; ++i3) {
              var carry = source[i3];
              for (var j = 0; j < digits.length; ++j) {
                carry += digits[j] << 8;
                digits[j] = carry % this.base;
                carry = carry / this.base | 0;
              }
              while (carry > 0) {
                digits.push(carry % this.base);
                carry = carry / this.base | 0;
              }
            }
            var string4 = "";
            for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
              string4 += this._leader;
            }
            for (var q = digits.length - 1; q >= 0; --q) {
              string4 += this.alphabet[digits[q]];
            }
            return string4;
          };
          BaseX2.prototype.decode = function(value) {
            if (typeof value !== "string") {
              throw new TypeError("Expected String");
            }
            var bytes = [];
            if (value.length === 0) {
              return new Uint8Array(bytes);
            }
            bytes.push(0);
            for (var i3 = 0; i3 < value.length; i3++) {
              var byte = this._alphabetMap[value[i3]];
              if (byte === void 0) {
                throw new Error("Non-base" + this.base + " character");
              }
              var carry = byte;
              for (var j = 0; j < bytes.length; ++j) {
                carry += bytes[j] * this.base;
                bytes[j] = carry & 255;
                carry >>= 8;
              }
              while (carry > 0) {
                bytes.push(carry & 255);
                carry >>= 8;
              }
            }
            for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
              bytes.push(0);
            }
            return (0, bytes_1.arrayify)(new Uint8Array(bytes.reverse()));
          };
          return BaseX2;
        }()
      );
      exports2.BaseX = BaseX;
      var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
      exports2.Base32 = Base32;
      var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
      exports2.Base58 = Base58;
    }
  });

  // node_modules/@ethersproject/constants/lib/addresses.js
  var require_addresses = __commonJS({
    "node_modules/@ethersproject/constants/lib/addresses.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.AddressZero = void 0;
      exports2.AddressZero = "0x0000000000000000000000000000000000000000";
    }
  });

  // node_modules/@ethersproject/constants/lib/bignumbers.js
  var require_bignumbers = __commonJS({
    "node_modules/@ethersproject/constants/lib/bignumbers.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.MaxInt256 = exports2.MinInt256 = exports2.MaxUint256 = exports2.WeiPerEther = exports2.Two = exports2.One = exports2.Zero = exports2.NegativeOne = void 0;
      var bignumber_1 = require_lib3();
      var NegativeOne = /* @__PURE__ */ bignumber_1.BigNumber.from(-1);
      exports2.NegativeOne = NegativeOne;
      var Zero = /* @__PURE__ */ bignumber_1.BigNumber.from(0);
      exports2.Zero = Zero;
      var One = /* @__PURE__ */ bignumber_1.BigNumber.from(1);
      exports2.One = One;
      var Two = /* @__PURE__ */ bignumber_1.BigNumber.from(2);
      exports2.Two = Two;
      var WeiPerEther = /* @__PURE__ */ bignumber_1.BigNumber.from("1000000000000000000");
      exports2.WeiPerEther = WeiPerEther;
      var MaxUint256 = /* @__PURE__ */ bignumber_1.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
      exports2.MaxUint256 = MaxUint256;
      var MinInt256 = /* @__PURE__ */ bignumber_1.BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
      exports2.MinInt256 = MinInt256;
      var MaxInt256 = /* @__PURE__ */ bignumber_1.BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
      exports2.MaxInt256 = MaxInt256;
    }
  });

  // node_modules/@ethersproject/constants/lib/hashes.js
  var require_hashes = __commonJS({
    "node_modules/@ethersproject/constants/lib/hashes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.HashZero = void 0;
      exports2.HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
    }
  });

  // node_modules/@ethersproject/constants/lib/strings.js
  var require_strings = __commonJS({
    "node_modules/@ethersproject/constants/lib/strings.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EtherSymbol = void 0;
      exports2.EtherSymbol = "\u039E";
    }
  });

  // node_modules/@ethersproject/constants/lib/index.js
  var require_lib9 = __commonJS({
    "node_modules/@ethersproject/constants/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EtherSymbol = exports2.HashZero = exports2.MaxInt256 = exports2.MinInt256 = exports2.MaxUint256 = exports2.WeiPerEther = exports2.Two = exports2.One = exports2.Zero = exports2.NegativeOne = exports2.AddressZero = void 0;
      var addresses_1 = require_addresses();
      Object.defineProperty(exports2, "AddressZero", { enumerable: true, get: function() {
        return addresses_1.AddressZero;
      } });
      var bignumbers_1 = require_bignumbers();
      Object.defineProperty(exports2, "NegativeOne", { enumerable: true, get: function() {
        return bignumbers_1.NegativeOne;
      } });
      Object.defineProperty(exports2, "Zero", { enumerable: true, get: function() {
        return bignumbers_1.Zero;
      } });
      Object.defineProperty(exports2, "One", { enumerable: true, get: function() {
        return bignumbers_1.One;
      } });
      Object.defineProperty(exports2, "Two", { enumerable: true, get: function() {
        return bignumbers_1.Two;
      } });
      Object.defineProperty(exports2, "WeiPerEther", { enumerable: true, get: function() {
        return bignumbers_1.WeiPerEther;
      } });
      Object.defineProperty(exports2, "MaxUint256", { enumerable: true, get: function() {
        return bignumbers_1.MaxUint256;
      } });
      Object.defineProperty(exports2, "MinInt256", { enumerable: true, get: function() {
        return bignumbers_1.MinInt256;
      } });
      Object.defineProperty(exports2, "MaxInt256", { enumerable: true, get: function() {
        return bignumbers_1.MaxInt256;
      } });
      var hashes_1 = require_hashes();
      Object.defineProperty(exports2, "HashZero", { enumerable: true, get: function() {
        return hashes_1.HashZero;
      } });
      var strings_1 = require_strings();
      Object.defineProperty(exports2, "EtherSymbol", { enumerable: true, get: function() {
        return strings_1.EtherSymbol;
      } });
    }
  });

  // node_modules/js-sha3/src/sha3.js
  var require_sha3 = __commonJS({
    "node_modules/js-sha3/src/sha3.js"(exports2, module2) {
      (function() {
        "use strict";
        var INPUT_ERROR = "input is invalid type";
        var FINALIZE_ERROR = "finalize already called";
        var WINDOW = typeof window === "object";
        var root2 = WINDOW ? window : {};
        if (root2.JS_SHA3_NO_WINDOW) {
          WINDOW = false;
        }
        var WEB_WORKER = !WINDOW && typeof self === "object";
        var NODE_JS = !root2.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
        if (NODE_JS) {
          root2 = global;
        } else if (WEB_WORKER) {
          root2 = self;
        }
        var COMMON_JS = !root2.JS_SHA3_NO_COMMON_JS && typeof module2 === "object" && module2.exports;
        var AMD = typeof define === "function" && define.amd;
        var ARRAY_BUFFER = !root2.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
        var HEX_CHARS = "0123456789abcdef".split("");
        var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
        var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
        var KECCAK_PADDING = [1, 256, 65536, 16777216];
        var PADDING = [6, 1536, 393216, 100663296];
        var SHIFT = [0, 8, 16, 24];
        var RC = [
          1,
          0,
          32898,
          0,
          32906,
          2147483648,
          2147516416,
          2147483648,
          32907,
          0,
          2147483649,
          0,
          2147516545,
          2147483648,
          32777,
          2147483648,
          138,
          0,
          136,
          0,
          2147516425,
          0,
          2147483658,
          0,
          2147516555,
          0,
          139,
          2147483648,
          32905,
          2147483648,
          32771,
          2147483648,
          32770,
          2147483648,
          128,
          2147483648,
          32778,
          0,
          2147483658,
          2147483648,
          2147516545,
          2147483648,
          32896,
          2147483648,
          2147483649,
          0,
          2147516424,
          2147483648
        ];
        var BITS = [224, 256, 384, 512];
        var SHAKE_BITS = [128, 256];
        var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
        var CSHAKE_BYTEPAD = {
          "128": 168,
          "256": 136
        };
        if (root2.JS_SHA3_NO_NODE_JS || !Array.isArray) {
          Array.isArray = function(obj) {
            return Object.prototype.toString.call(obj) === "[object Array]";
          };
        }
        if (ARRAY_BUFFER && (root2.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
          ArrayBuffer.isView = function(obj) {
            return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
          };
        }
        var createOutputMethod = function(bits2, padding, outputType) {
          return function(message) {
            return new Keccak(bits2, padding, bits2).update(message)[outputType]();
          };
        };
        var createShakeOutputMethod = function(bits2, padding, outputType) {
          return function(message, outputBits) {
            return new Keccak(bits2, padding, outputBits).update(message)[outputType]();
          };
        };
        var createCshakeOutputMethod = function(bits2, padding, outputType) {
          return function(message, outputBits, n3, s2) {
            return methods["cshake" + bits2].update(message, outputBits, n3, s2)[outputType]();
          };
        };
        var createKmacOutputMethod = function(bits2, padding, outputType) {
          return function(key2, message, outputBits, s2) {
            return methods["kmac" + bits2].update(key2, message, outputBits, s2)[outputType]();
          };
        };
        var createOutputMethods = function(method4, createMethod2, bits2, padding) {
          for (var i4 = 0; i4 < OUTPUT_TYPES.length; ++i4) {
            var type4 = OUTPUT_TYPES[i4];
            method4[type4] = createMethod2(bits2, padding, type4);
          }
          return method4;
        };
        var createMethod = function(bits2, padding) {
          var method4 = createOutputMethod(bits2, padding, "hex");
          method4.create = function() {
            return new Keccak(bits2, padding, bits2);
          };
          method4.update = function(message) {
            return method4.create().update(message);
          };
          return createOutputMethods(method4, createOutputMethod, bits2, padding);
        };
        var createShakeMethod = function(bits2, padding) {
          var method4 = createShakeOutputMethod(bits2, padding, "hex");
          method4.create = function(outputBits) {
            return new Keccak(bits2, padding, outputBits);
          };
          method4.update = function(message, outputBits) {
            return method4.create(outputBits).update(message);
          };
          return createOutputMethods(method4, createShakeOutputMethod, bits2, padding);
        };
        var createCshakeMethod = function(bits2, padding) {
          var w2 = CSHAKE_BYTEPAD[bits2];
          var method4 = createCshakeOutputMethod(bits2, padding, "hex");
          method4.create = function(outputBits, n3, s2) {
            if (!n3 && !s2) {
              return methods["shake" + bits2].create(outputBits);
            } else {
              return new Keccak(bits2, padding, outputBits).bytepad([n3, s2], w2);
            }
          };
          method4.update = function(message, outputBits, n3, s2) {
            return method4.create(outputBits, n3, s2).update(message);
          };
          return createOutputMethods(method4, createCshakeOutputMethod, bits2, padding);
        };
        var createKmacMethod = function(bits2, padding) {
          var w2 = CSHAKE_BYTEPAD[bits2];
          var method4 = createKmacOutputMethod(bits2, padding, "hex");
          method4.create = function(key2, outputBits, s2) {
            return new Kmac(bits2, padding, outputBits).bytepad(["KMAC", s2], w2).bytepad([key2], w2);
          };
          method4.update = function(key2, message, outputBits, s2) {
            return method4.create(key2, outputBits, s2).update(message);
          };
          return createOutputMethods(method4, createKmacOutputMethod, bits2, padding);
        };
        var algorithms = [
          { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
          { name: "sha3", padding: PADDING, bits: BITS, createMethod },
          { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
          { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
          { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
        ];
        var methods = {}, methodNames = [];
        for (var i3 = 0; i3 < algorithms.length; ++i3) {
          var algorithm = algorithms[i3];
          var bits = algorithm.bits;
          for (var j = 0; j < bits.length; ++j) {
            var methodName = algorithm.name + "_" + bits[j];
            methodNames.push(methodName);
            methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
            if (algorithm.name !== "sha3") {
              var newMethodName = algorithm.name + bits[j];
              methodNames.push(newMethodName);
              methods[newMethodName] = methods[methodName];
            }
          }
        }
        function Keccak(bits2, padding, outputBits) {
          this.blocks = [];
          this.s = [];
          this.padding = padding;
          this.outputBits = outputBits;
          this.reset = true;
          this.finalized = false;
          this.block = 0;
          this.start = 0;
          this.blockCount = 1600 - (bits2 << 1) >> 5;
          this.byteCount = this.blockCount << 2;
          this.outputBlocks = outputBits >> 5;
          this.extraBytes = (outputBits & 31) >> 3;
          for (var i4 = 0; i4 < 50; ++i4) {
            this.s[i4] = 0;
          }
        }
        Keccak.prototype.update = function(message) {
          if (this.finalized) {
            throw new Error(FINALIZE_ERROR);
          }
          var notString, type4 = typeof message;
          if (type4 !== "string") {
            if (type4 === "object") {
              if (message === null) {
                throw new Error(INPUT_ERROR);
              } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
                message = new Uint8Array(message);
              } else if (!Array.isArray(message)) {
                if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                  throw new Error(INPUT_ERROR);
                }
              }
            } else {
              throw new Error(INPUT_ERROR);
            }
            notString = true;
          }
          var blocks = this.blocks, byteCount = this.byteCount, length2 = message.length, blockCount = this.blockCount, index3 = 0, s2 = this.s, i4, code6;
          while (index3 < length2) {
            if (this.reset) {
              this.reset = false;
              blocks[0] = this.block;
              for (i4 = 1; i4 < blockCount + 1; ++i4) {
                blocks[i4] = 0;
              }
            }
            if (notString) {
              for (i4 = this.start; index3 < length2 && i4 < byteCount; ++index3) {
                blocks[i4 >> 2] |= message[index3] << SHIFT[i4++ & 3];
              }
            } else {
              for (i4 = this.start; index3 < length2 && i4 < byteCount; ++index3) {
                code6 = message.charCodeAt(index3);
                if (code6 < 128) {
                  blocks[i4 >> 2] |= code6 << SHIFT[i4++ & 3];
                } else if (code6 < 2048) {
                  blocks[i4 >> 2] |= (192 | code6 >> 6) << SHIFT[i4++ & 3];
                  blocks[i4 >> 2] |= (128 | code6 & 63) << SHIFT[i4++ & 3];
                } else if (code6 < 55296 || code6 >= 57344) {
                  blocks[i4 >> 2] |= (224 | code6 >> 12) << SHIFT[i4++ & 3];
                  blocks[i4 >> 2] |= (128 | code6 >> 6 & 63) << SHIFT[i4++ & 3];
                  blocks[i4 >> 2] |= (128 | code6 & 63) << SHIFT[i4++ & 3];
                } else {
                  code6 = 65536 + ((code6 & 1023) << 10 | message.charCodeAt(++index3) & 1023);
                  blocks[i4 >> 2] |= (240 | code6 >> 18) << SHIFT[i4++ & 3];
                  blocks[i4 >> 2] |= (128 | code6 >> 12 & 63) << SHIFT[i4++ & 3];
                  blocks[i4 >> 2] |= (128 | code6 >> 6 & 63) << SHIFT[i4++ & 3];
                  blocks[i4 >> 2] |= (128 | code6 & 63) << SHIFT[i4++ & 3];
                }
              }
            }
            this.lastByteIndex = i4;
            if (i4 >= byteCount) {
              this.start = i4 - byteCount;
              this.block = blocks[blockCount];
              for (i4 = 0; i4 < blockCount; ++i4) {
                s2[i4] ^= blocks[i4];
              }
              f2(s2);
              this.reset = true;
            } else {
              this.start = i4;
            }
          }
          return this;
        };
        Keccak.prototype.encode = function(x, right) {
          var o2 = x & 255, n3 = 1;
          var bytes = [o2];
          x = x >> 8;
          o2 = x & 255;
          while (o2 > 0) {
            bytes.unshift(o2);
            x = x >> 8;
            o2 = x & 255;
            ++n3;
          }
          if (right) {
            bytes.push(n3);
          } else {
            bytes.unshift(n3);
          }
          this.update(bytes);
          return bytes.length;
        };
        Keccak.prototype.encodeString = function(str) {
          var notString, type4 = typeof str;
          if (type4 !== "string") {
            if (type4 === "object") {
              if (str === null) {
                throw new Error(INPUT_ERROR);
              } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
                str = new Uint8Array(str);
              } else if (!Array.isArray(str)) {
                if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                  throw new Error(INPUT_ERROR);
                }
              }
            } else {
              throw new Error(INPUT_ERROR);
            }
            notString = true;
          }
          var bytes = 0, length2 = str.length;
          if (notString) {
            bytes = length2;
          } else {
            for (var i4 = 0; i4 < str.length; ++i4) {
              var code6 = str.charCodeAt(i4);
              if (code6 < 128) {
                bytes += 1;
              } else if (code6 < 2048) {
                bytes += 2;
              } else if (code6 < 55296 || code6 >= 57344) {
                bytes += 3;
              } else {
                code6 = 65536 + ((code6 & 1023) << 10 | str.charCodeAt(++i4) & 1023);
                bytes += 4;
              }
            }
          }
          bytes += this.encode(bytes * 8);
          this.update(str);
          return bytes;
        };
        Keccak.prototype.bytepad = function(strs, w2) {
          var bytes = this.encode(w2);
          for (var i4 = 0; i4 < strs.length; ++i4) {
            bytes += this.encodeString(strs[i4]);
          }
          var paddingBytes = w2 - bytes % w2;
          var zeros = [];
          zeros.length = paddingBytes;
          this.update(zeros);
          return this;
        };
        Keccak.prototype.finalize = function() {
          if (this.finalized) {
            return;
          }
          this.finalized = true;
          var blocks = this.blocks, i4 = this.lastByteIndex, blockCount = this.blockCount, s2 = this.s;
          blocks[i4 >> 2] |= this.padding[i4 & 3];
          if (this.lastByteIndex === this.byteCount) {
            blocks[0] = blocks[blockCount];
            for (i4 = 1; i4 < blockCount + 1; ++i4) {
              blocks[i4] = 0;
            }
          }
          blocks[blockCount - 1] |= 2147483648;
          for (i4 = 0; i4 < blockCount; ++i4) {
            s2[i4] ^= blocks[i4];
          }
          f2(s2);
        };
        Keccak.prototype.toString = Keccak.prototype.hex = function() {
          this.finalize();
          var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i4 = 0, j2 = 0;
          var hex2 = "", block;
          while (j2 < outputBlocks) {
            for (i4 = 0; i4 < blockCount && j2 < outputBlocks; ++i4, ++j2) {
              block = s2[i4];
              hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
            }
            if (j2 % blockCount === 0) {
              f2(s2);
              i4 = 0;
            }
          }
          if (extraBytes) {
            block = s2[i4];
            hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
            if (extraBytes > 1) {
              hex2 += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
            }
            if (extraBytes > 2) {
              hex2 += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
            }
          }
          return hex2;
        };
        Keccak.prototype.arrayBuffer = function() {
          this.finalize();
          var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i4 = 0, j2 = 0;
          var bytes = this.outputBits >> 3;
          var buffer2;
          if (extraBytes) {
            buffer2 = new ArrayBuffer(outputBlocks + 1 << 2);
          } else {
            buffer2 = new ArrayBuffer(bytes);
          }
          var array4 = new Uint32Array(buffer2);
          while (j2 < outputBlocks) {
            for (i4 = 0; i4 < blockCount && j2 < outputBlocks; ++i4, ++j2) {
              array4[j2] = s2[i4];
            }
            if (j2 % blockCount === 0) {
              f2(s2);
            }
          }
          if (extraBytes) {
            array4[i4] = s2[i4];
            buffer2 = buffer2.slice(0, bytes);
          }
          return buffer2;
        };
        Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
        Keccak.prototype.digest = Keccak.prototype.array = function() {
          this.finalize();
          var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i4 = 0, j2 = 0;
          var array4 = [], offset3, block;
          while (j2 < outputBlocks) {
            for (i4 = 0; i4 < blockCount && j2 < outputBlocks; ++i4, ++j2) {
              offset3 = j2 << 2;
              block = s2[i4];
              array4[offset3] = block & 255;
              array4[offset3 + 1] = block >> 8 & 255;
              array4[offset3 + 2] = block >> 16 & 255;
              array4[offset3 + 3] = block >> 24 & 255;
            }
            if (j2 % blockCount === 0) {
              f2(s2);
            }
          }
          if (extraBytes) {
            offset3 = j2 << 2;
            block = s2[i4];
            array4[offset3] = block & 255;
            if (extraBytes > 1) {
              array4[offset3 + 1] = block >> 8 & 255;
            }
            if (extraBytes > 2) {
              array4[offset3 + 2] = block >> 16 & 255;
            }
          }
          return array4;
        };
        function Kmac(bits2, padding, outputBits) {
          Keccak.call(this, bits2, padding, outputBits);
        }
        Kmac.prototype = new Keccak();
        Kmac.prototype.finalize = function() {
          this.encode(this.outputBits, true);
          return Keccak.prototype.finalize.call(this);
        };
        var f2 = function(s2) {
          var h2, l2, n3, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
          for (n3 = 0; n3 < 48; n3 += 2) {
            c0 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
            c1 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
            c2 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
            c3 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
            c4 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
            c5 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
            c6 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
            c7 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
            c8 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
            c9 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
            h2 = c8 ^ (c2 << 1 | c3 >>> 31);
            l2 = c9 ^ (c3 << 1 | c2 >>> 31);
            s2[0] ^= h2;
            s2[1] ^= l2;
            s2[10] ^= h2;
            s2[11] ^= l2;
            s2[20] ^= h2;
            s2[21] ^= l2;
            s2[30] ^= h2;
            s2[31] ^= l2;
            s2[40] ^= h2;
            s2[41] ^= l2;
            h2 = c0 ^ (c4 << 1 | c5 >>> 31);
            l2 = c1 ^ (c5 << 1 | c4 >>> 31);
            s2[2] ^= h2;
            s2[3] ^= l2;
            s2[12] ^= h2;
            s2[13] ^= l2;
            s2[22] ^= h2;
            s2[23] ^= l2;
            s2[32] ^= h2;
            s2[33] ^= l2;
            s2[42] ^= h2;
            s2[43] ^= l2;
            h2 = c2 ^ (c6 << 1 | c7 >>> 31);
            l2 = c3 ^ (c7 << 1 | c6 >>> 31);
            s2[4] ^= h2;
            s2[5] ^= l2;
            s2[14] ^= h2;
            s2[15] ^= l2;
            s2[24] ^= h2;
            s2[25] ^= l2;
            s2[34] ^= h2;
            s2[35] ^= l2;
            s2[44] ^= h2;
            s2[45] ^= l2;
            h2 = c4 ^ (c8 << 1 | c9 >>> 31);
            l2 = c5 ^ (c9 << 1 | c8 >>> 31);
            s2[6] ^= h2;
            s2[7] ^= l2;
            s2[16] ^= h2;
            s2[17] ^= l2;
            s2[26] ^= h2;
            s2[27] ^= l2;
            s2[36] ^= h2;
            s2[37] ^= l2;
            s2[46] ^= h2;
            s2[47] ^= l2;
            h2 = c6 ^ (c0 << 1 | c1 >>> 31);
            l2 = c7 ^ (c1 << 1 | c0 >>> 31);
            s2[8] ^= h2;
            s2[9] ^= l2;
            s2[18] ^= h2;
            s2[19] ^= l2;
            s2[28] ^= h2;
            s2[29] ^= l2;
            s2[38] ^= h2;
            s2[39] ^= l2;
            s2[48] ^= h2;
            s2[49] ^= l2;
            b0 = s2[0];
            b1 = s2[1];
            b32 = s2[11] << 4 | s2[10] >>> 28;
            b33 = s2[10] << 4 | s2[11] >>> 28;
            b14 = s2[20] << 3 | s2[21] >>> 29;
            b15 = s2[21] << 3 | s2[20] >>> 29;
            b46 = s2[31] << 9 | s2[30] >>> 23;
            b47 = s2[30] << 9 | s2[31] >>> 23;
            b28 = s2[40] << 18 | s2[41] >>> 14;
            b29 = s2[41] << 18 | s2[40] >>> 14;
            b20 = s2[2] << 1 | s2[3] >>> 31;
            b21 = s2[3] << 1 | s2[2] >>> 31;
            b2 = s2[13] << 12 | s2[12] >>> 20;
            b3 = s2[12] << 12 | s2[13] >>> 20;
            b34 = s2[22] << 10 | s2[23] >>> 22;
            b35 = s2[23] << 10 | s2[22] >>> 22;
            b16 = s2[33] << 13 | s2[32] >>> 19;
            b17 = s2[32] << 13 | s2[33] >>> 19;
            b48 = s2[42] << 2 | s2[43] >>> 30;
            b49 = s2[43] << 2 | s2[42] >>> 30;
            b40 = s2[5] << 30 | s2[4] >>> 2;
            b41 = s2[4] << 30 | s2[5] >>> 2;
            b22 = s2[14] << 6 | s2[15] >>> 26;
            b23 = s2[15] << 6 | s2[14] >>> 26;
            b4 = s2[25] << 11 | s2[24] >>> 21;
            b5 = s2[24] << 11 | s2[25] >>> 21;
            b36 = s2[34] << 15 | s2[35] >>> 17;
            b37 = s2[35] << 15 | s2[34] >>> 17;
            b18 = s2[45] << 29 | s2[44] >>> 3;
            b19 = s2[44] << 29 | s2[45] >>> 3;
            b10 = s2[6] << 28 | s2[7] >>> 4;
            b11 = s2[7] << 28 | s2[6] >>> 4;
            b42 = s2[17] << 23 | s2[16] >>> 9;
            b43 = s2[16] << 23 | s2[17] >>> 9;
            b24 = s2[26] << 25 | s2[27] >>> 7;
            b25 = s2[27] << 25 | s2[26] >>> 7;
            b6 = s2[36] << 21 | s2[37] >>> 11;
            b7 = s2[37] << 21 | s2[36] >>> 11;
            b38 = s2[47] << 24 | s2[46] >>> 8;
            b39 = s2[46] << 24 | s2[47] >>> 8;
            b30 = s2[8] << 27 | s2[9] >>> 5;
            b31 = s2[9] << 27 | s2[8] >>> 5;
            b12 = s2[18] << 20 | s2[19] >>> 12;
            b13 = s2[19] << 20 | s2[18] >>> 12;
            b44 = s2[29] << 7 | s2[28] >>> 25;
            b45 = s2[28] << 7 | s2[29] >>> 25;
            b26 = s2[38] << 8 | s2[39] >>> 24;
            b27 = s2[39] << 8 | s2[38] >>> 24;
            b8 = s2[48] << 14 | s2[49] >>> 18;
            b9 = s2[49] << 14 | s2[48] >>> 18;
            s2[0] = b0 ^ ~b2 & b4;
            s2[1] = b1 ^ ~b3 & b5;
            s2[10] = b10 ^ ~b12 & b14;
            s2[11] = b11 ^ ~b13 & b15;
            s2[20] = b20 ^ ~b22 & b24;
            s2[21] = b21 ^ ~b23 & b25;
            s2[30] = b30 ^ ~b32 & b34;
            s2[31] = b31 ^ ~b33 & b35;
            s2[40] = b40 ^ ~b42 & b44;
            s2[41] = b41 ^ ~b43 & b45;
            s2[2] = b2 ^ ~b4 & b6;
            s2[3] = b3 ^ ~b5 & b7;
            s2[12] = b12 ^ ~b14 & b16;
            s2[13] = b13 ^ ~b15 & b17;
            s2[22] = b22 ^ ~b24 & b26;
            s2[23] = b23 ^ ~b25 & b27;
            s2[32] = b32 ^ ~b34 & b36;
            s2[33] = b33 ^ ~b35 & b37;
            s2[42] = b42 ^ ~b44 & b46;
            s2[43] = b43 ^ ~b45 & b47;
            s2[4] = b4 ^ ~b6 & b8;
            s2[5] = b5 ^ ~b7 & b9;
            s2[14] = b14 ^ ~b16 & b18;
            s2[15] = b15 ^ ~b17 & b19;
            s2[24] = b24 ^ ~b26 & b28;
            s2[25] = b25 ^ ~b27 & b29;
            s2[34] = b34 ^ ~b36 & b38;
            s2[35] = b35 ^ ~b37 & b39;
            s2[44] = b44 ^ ~b46 & b48;
            s2[45] = b45 ^ ~b47 & b49;
            s2[6] = b6 ^ ~b8 & b0;
            s2[7] = b7 ^ ~b9 & b1;
            s2[16] = b16 ^ ~b18 & b10;
            s2[17] = b17 ^ ~b19 & b11;
            s2[26] = b26 ^ ~b28 & b20;
            s2[27] = b27 ^ ~b29 & b21;
            s2[36] = b36 ^ ~b38 & b30;
            s2[37] = b37 ^ ~b39 & b31;
            s2[46] = b46 ^ ~b48 & b40;
            s2[47] = b47 ^ ~b49 & b41;
            s2[8] = b8 ^ ~b0 & b2;
            s2[9] = b9 ^ ~b1 & b3;
            s2[18] = b18 ^ ~b10 & b12;
            s2[19] = b19 ^ ~b11 & b13;
            s2[28] = b28 ^ ~b20 & b22;
            s2[29] = b29 ^ ~b21 & b23;
            s2[38] = b38 ^ ~b30 & b32;
            s2[39] = b39 ^ ~b31 & b33;
            s2[48] = b48 ^ ~b40 & b42;
            s2[49] = b49 ^ ~b41 & b43;
            s2[0] ^= RC[n3];
            s2[1] ^= RC[n3 + 1];
          }
        };
        if (COMMON_JS) {
          module2.exports = methods;
        } else {
          for (i3 = 0; i3 < methodNames.length; ++i3) {
            root2[methodNames[i3]] = methods[methodNames[i3]];
          }
          if (AMD) {
            define(function() {
              return methods;
            });
          }
        }
      })();
    }
  });

  // node_modules/@ethersproject/keccak256/lib/index.js
  var require_lib10 = __commonJS({
    "node_modules/@ethersproject/keccak256/lib/index.js"(exports2) {
      "use strict";
      var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
        return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.keccak256 = void 0;
      var js_sha3_1 = __importDefault(require_sha3());
      var bytes_1 = require_lib2();
      function keccak256(data) {
        return "0x" + js_sha3_1.default.keccak_256((0, bytes_1.arrayify)(data));
      }
      exports2.keccak256 = keccak256;
    }
  });

  // node_modules/@ethersproject/strings/lib/_version.js
  var require_version7 = __commonJS({
    "node_modules/@ethersproject/strings/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "strings/5.7.0";
    }
  });

  // node_modules/@ethersproject/strings/lib/utf8.js
  var require_utf8 = __commonJS({
    "node_modules/@ethersproject/strings/lib/utf8.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.toUtf8CodePoints = exports2.toUtf8String = exports2._toUtf8String = exports2._toEscapedUtf8String = exports2.toUtf8Bytes = exports2.Utf8ErrorFuncs = exports2.Utf8ErrorReason = exports2.UnicodeNormalizationForm = void 0;
      var bytes_1 = require_lib2();
      var logger_1 = require_lib();
      var _version_1 = require_version7();
      var logger = new logger_1.Logger(_version_1.version);
      var UnicodeNormalizationForm;
      (function(UnicodeNormalizationForm2) {
        UnicodeNormalizationForm2["current"] = "";
        UnicodeNormalizationForm2["NFC"] = "NFC";
        UnicodeNormalizationForm2["NFD"] = "NFD";
        UnicodeNormalizationForm2["NFKC"] = "NFKC";
        UnicodeNormalizationForm2["NFKD"] = "NFKD";
      })(UnicodeNormalizationForm = exports2.UnicodeNormalizationForm || (exports2.UnicodeNormalizationForm = {}));
      var Utf8ErrorReason;
      (function(Utf8ErrorReason2) {
        Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
        Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
        Utf8ErrorReason2["OVERRUN"] = "string overrun";
        Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
        Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
        Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
        Utf8ErrorReason2["OVERLONG"] = "overlong representation";
      })(Utf8ErrorReason = exports2.Utf8ErrorReason || (exports2.Utf8ErrorReason = {}));
      function errorFunc(reason, offset3, bytes, output, badCodepoint) {
        return logger.throwArgumentError("invalid codepoint at offset " + offset3 + "; " + reason, "bytes", bytes);
      }
      function ignoreFunc(reason, offset3, bytes, output, badCodepoint) {
        if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
          var i3 = 0;
          for (var o2 = offset3 + 1; o2 < bytes.length; o2++) {
            if (bytes[o2] >> 6 !== 2) {
              break;
            }
            i3++;
          }
          return i3;
        }
        if (reason === Utf8ErrorReason.OVERRUN) {
          return bytes.length - offset3 - 1;
        }
        return 0;
      }
      function replaceFunc(reason, offset3, bytes, output, badCodepoint) {
        if (reason === Utf8ErrorReason.OVERLONG) {
          output.push(badCodepoint);
          return 0;
        }
        output.push(65533);
        return ignoreFunc(reason, offset3, bytes, output, badCodepoint);
      }
      exports2.Utf8ErrorFuncs = Object.freeze({
        error: errorFunc,
        ignore: ignoreFunc,
        replace: replaceFunc
      });
      function getUtf8CodePoints(bytes, onError) {
        if (onError == null) {
          onError = exports2.Utf8ErrorFuncs.error;
        }
        bytes = (0, bytes_1.arrayify)(bytes);
        var result = [];
        var i3 = 0;
        while (i3 < bytes.length) {
          var c2 = bytes[i3++];
          if (c2 >> 7 === 0) {
            result.push(c2);
            continue;
          }
          var extraLength = null;
          var overlongMask = null;
          if ((c2 & 224) === 192) {
            extraLength = 1;
            overlongMask = 127;
          } else if ((c2 & 240) === 224) {
            extraLength = 2;
            overlongMask = 2047;
          } else if ((c2 & 248) === 240) {
            extraLength = 3;
            overlongMask = 65535;
          } else {
            if ((c2 & 192) === 128) {
              i3 += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i3 - 1, bytes, result);
            } else {
              i3 += onError(Utf8ErrorReason.BAD_PREFIX, i3 - 1, bytes, result);
            }
            continue;
          }
          if (i3 - 1 + extraLength >= bytes.length) {
            i3 += onError(Utf8ErrorReason.OVERRUN, i3 - 1, bytes, result);
            continue;
          }
          var res = c2 & (1 << 8 - extraLength - 1) - 1;
          for (var j = 0; j < extraLength; j++) {
            var nextChar = bytes[i3];
            if ((nextChar & 192) != 128) {
              i3 += onError(Utf8ErrorReason.MISSING_CONTINUE, i3, bytes, result);
              res = null;
              break;
            }
            ;
            res = res << 6 | nextChar & 63;
            i3++;
          }
          if (res === null) {
            continue;
          }
          if (res > 1114111) {
            i3 += onError(Utf8ErrorReason.OUT_OF_RANGE, i3 - 1 - extraLength, bytes, result, res);
            continue;
          }
          if (res >= 55296 && res <= 57343) {
            i3 += onError(Utf8ErrorReason.UTF16_SURROGATE, i3 - 1 - extraLength, bytes, result, res);
            continue;
          }
          if (res <= overlongMask) {
            i3 += onError(Utf8ErrorReason.OVERLONG, i3 - 1 - extraLength, bytes, result, res);
            continue;
          }
          result.push(res);
        }
        return result;
      }
      function toUtf8Bytes(str, form) {
        if (form === void 0) {
          form = UnicodeNormalizationForm.current;
        }
        if (form != UnicodeNormalizationForm.current) {
          logger.checkNormalize();
          str = str.normalize(form);
        }
        var result = [];
        for (var i3 = 0; i3 < str.length; i3++) {
          var c2 = str.charCodeAt(i3);
          if (c2 < 128) {
            result.push(c2);
          } else if (c2 < 2048) {
            result.push(c2 >> 6 | 192);
            result.push(c2 & 63 | 128);
          } else if ((c2 & 64512) == 55296) {
            i3++;
            var c22 = str.charCodeAt(i3);
            if (i3 >= str.length || (c22 & 64512) !== 56320) {
              throw new Error("invalid utf-8 string");
            }
            var pair = 65536 + ((c2 & 1023) << 10) + (c22 & 1023);
            result.push(pair >> 18 | 240);
            result.push(pair >> 12 & 63 | 128);
            result.push(pair >> 6 & 63 | 128);
            result.push(pair & 63 | 128);
          } else {
            result.push(c2 >> 12 | 224);
            result.push(c2 >> 6 & 63 | 128);
            result.push(c2 & 63 | 128);
          }
        }
        return (0, bytes_1.arrayify)(result);
      }
      exports2.toUtf8Bytes = toUtf8Bytes;
      function escapeChar(value) {
        var hex2 = "0000" + value.toString(16);
        return "\\u" + hex2.substring(hex2.length - 4);
      }
      function _toEscapedUtf8String(bytes, onError) {
        return '"' + getUtf8CodePoints(bytes, onError).map(function(codePoint) {
          if (codePoint < 256) {
            switch (codePoint) {
              case 8:
                return "\\b";
              case 9:
                return "\\t";
              case 10:
                return "\\n";
              case 13:
                return "\\r";
              case 34:
                return '\\"';
              case 92:
                return "\\\\";
            }
            if (codePoint >= 32 && codePoint < 127) {
              return String.fromCharCode(codePoint);
            }
          }
          if (codePoint <= 65535) {
            return escapeChar(codePoint);
          }
          codePoint -= 65536;
          return escapeChar((codePoint >> 10 & 1023) + 55296) + escapeChar((codePoint & 1023) + 56320);
        }).join("") + '"';
      }
      exports2._toEscapedUtf8String = _toEscapedUtf8String;
      function _toUtf8String(codePoints) {
        return codePoints.map(function(codePoint) {
          if (codePoint <= 65535) {
            return String.fromCharCode(codePoint);
          }
          codePoint -= 65536;
          return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
        }).join("");
      }
      exports2._toUtf8String = _toUtf8String;
      function toUtf8String(bytes, onError) {
        return _toUtf8String(getUtf8CodePoints(bytes, onError));
      }
      exports2.toUtf8String = toUtf8String;
      function toUtf8CodePoints(str, form) {
        if (form === void 0) {
          form = UnicodeNormalizationForm.current;
        }
        return getUtf8CodePoints(toUtf8Bytes(str, form));
      }
      exports2.toUtf8CodePoints = toUtf8CodePoints;
    }
  });

  // node_modules/@ethersproject/strings/lib/bytes32.js
  var require_bytes32 = __commonJS({
    "node_modules/@ethersproject/strings/lib/bytes32.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.parseBytes32String = exports2.formatBytes32String = void 0;
      var constants_1 = require_lib9();
      var bytes_1 = require_lib2();
      var utf8_1 = require_utf8();
      function formatBytes32String(text) {
        var bytes = (0, utf8_1.toUtf8Bytes)(text);
        if (bytes.length > 31) {
          throw new Error("bytes32 string must be less than 32 bytes");
        }
        return (0, bytes_1.hexlify)((0, bytes_1.concat)([bytes, constants_1.HashZero]).slice(0, 32));
      }
      exports2.formatBytes32String = formatBytes32String;
      function parseBytes32String(bytes) {
        var data = (0, bytes_1.arrayify)(bytes);
        if (data.length !== 32) {
          throw new Error("invalid bytes32 - not 32 bytes long");
        }
        if (data[31] !== 0) {
          throw new Error("invalid bytes32 string - no null terminator");
        }
        var length2 = 31;
        while (data[length2 - 1] === 0) {
          length2--;
        }
        return (0, utf8_1.toUtf8String)(data.slice(0, length2));
      }
      exports2.parseBytes32String = parseBytes32String;
    }
  });

  // node_modules/@ethersproject/strings/lib/idna.js
  var require_idna = __commonJS({
    "node_modules/@ethersproject/strings/lib/idna.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.nameprep = exports2._nameprepTableC = exports2._nameprepTableB2 = exports2._nameprepTableA1 = void 0;
      var utf8_1 = require_utf8();
      function bytes2(data) {
        if (data.length % 4 !== 0) {
          throw new Error("bad data");
        }
        var result = [];
        for (var i3 = 0; i3 < data.length; i3 += 4) {
          result.push(parseInt(data.substring(i3, i3 + 4), 16));
        }
        return result;
      }
      function createTable(data, func) {
        if (!func) {
          func = function(value) {
            return [parseInt(value, 16)];
          };
        }
        var lo = 0;
        var result = {};
        data.split(",").forEach(function(pair) {
          var comps = pair.split(":");
          lo += parseInt(comps[0], 16);
          result[lo] = func(comps[1]);
        });
        return result;
      }
      function createRangeTable(data) {
        var hi = 0;
        return data.split(",").map(function(v2) {
          var comps = v2.split("-");
          if (comps.length === 1) {
            comps[1] = "0";
          } else if (comps[1] === "") {
            comps[1] = "1";
          }
          var lo = hi + parseInt(comps[0], 16);
          hi = parseInt(comps[1], 16);
          return { l: lo, h: hi };
        });
      }
      function matchMap(value, ranges) {
        var lo = 0;
        for (var i3 = 0; i3 < ranges.length; i3++) {
          var range3 = ranges[i3];
          lo += range3.l;
          if (value >= lo && value <= lo + range3.h && (value - lo) % (range3.d || 1) === 0) {
            if (range3.e && range3.e.indexOf(value - lo) !== -1) {
              continue;
            }
            return range3;
          }
        }
        return null;
      }
      var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
      var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(function(v2) {
        return parseInt(v2, 16);
      });
      var Table_B_2_ranges = [
        { h: 25, s: 32, l: 65 },
        { h: 30, s: 32, e: [23], l: 127 },
        { h: 54, s: 1, e: [48], l: 64, d: 2 },
        { h: 14, s: 1, l: 57, d: 2 },
        { h: 44, s: 1, l: 17, d: 2 },
        { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
        { h: 16, s: 1, l: 68, d: 2 },
        { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
        { h: 26, s: 32, e: [17], l: 435 },
        { h: 22, s: 1, l: 71, d: 2 },
        { h: 15, s: 80, l: 40 },
        { h: 31, s: 32, l: 16 },
        { h: 32, s: 1, l: 80, d: 2 },
        { h: 52, s: 1, l: 42, d: 2 },
        { h: 12, s: 1, l: 55, d: 2 },
        { h: 40, s: 1, e: [38], l: 15, d: 2 },
        { h: 14, s: 1, l: 48, d: 2 },
        { h: 37, s: 48, l: 49 },
        { h: 148, s: 1, l: 6351, d: 2 },
        { h: 88, s: 1, l: 160, d: 2 },
        { h: 15, s: 16, l: 704 },
        { h: 25, s: 26, l: 854 },
        { h: 25, s: 32, l: 55915 },
        { h: 37, s: 40, l: 1247 },
        { h: 25, s: -119711, l: 53248 },
        { h: 25, s: -119763, l: 52 },
        { h: 25, s: -119815, l: 52 },
        { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
        { h: 25, s: -119919, l: 52 },
        { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
        { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
        { h: 25, s: -120075, l: 52 },
        { h: 25, s: -120127, l: 52 },
        { h: 25, s: -120179, l: 52 },
        { h: 25, s: -120231, l: 52 },
        { h: 25, s: -120283, l: 52 },
        { h: 25, s: -120335, l: 52 },
        { h: 24, s: -119543, e: [17], l: 56 },
        { h: 24, s: -119601, e: [17], l: 58 },
        { h: 24, s: -119659, e: [17], l: 58 },
        { h: 24, s: -119717, e: [17], l: 58 },
        { h: 24, s: -119775, e: [17], l: 58 }
      ];
      var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
      var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
      var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
      var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
      function flatten(values) {
        return values.reduce(function(accum, value) {
          value.forEach(function(value2) {
            accum.push(value2);
          });
          return accum;
        }, []);
      }
      function _nameprepTableA1(codepoint) {
        return !!matchMap(codepoint, Table_A_1_ranges);
      }
      exports2._nameprepTableA1 = _nameprepTableA1;
      function _nameprepTableB2(codepoint) {
        var range3 = matchMap(codepoint, Table_B_2_ranges);
        if (range3) {
          return [codepoint + range3.s];
        }
        var codes = Table_B_2_lut_abs[codepoint];
        if (codes) {
          return codes;
        }
        var shift = Table_B_2_lut_rel[codepoint];
        if (shift) {
          return [codepoint + shift[0]];
        }
        var complex = Table_B_2_complex[codepoint];
        if (complex) {
          return complex;
        }
        return null;
      }
      exports2._nameprepTableB2 = _nameprepTableB2;
      function _nameprepTableC(codepoint) {
        return !!matchMap(codepoint, Table_C_ranges);
      }
      exports2._nameprepTableC = _nameprepTableC;
      function nameprep(value) {
        if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
          return value.toLowerCase();
        }
        var codes = (0, utf8_1.toUtf8CodePoints)(value);
        codes = flatten(codes.map(function(code6) {
          if (Table_B_1_flags.indexOf(code6) >= 0) {
            return [];
          }
          if (code6 >= 65024 && code6 <= 65039) {
            return [];
          }
          var codesTableB2 = _nameprepTableB2(code6);
          if (codesTableB2) {
            return codesTableB2;
          }
          return [code6];
        }));
        codes = (0, utf8_1.toUtf8CodePoints)((0, utf8_1._toUtf8String)(codes), utf8_1.UnicodeNormalizationForm.NFKC);
        codes.forEach(function(code6) {
          if (_nameprepTableC(code6)) {
            throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
          }
        });
        codes.forEach(function(code6) {
          if (_nameprepTableA1(code6)) {
            throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
          }
        });
        var name5 = (0, utf8_1._toUtf8String)(codes);
        if (name5.substring(0, 1) === "-" || name5.substring(2, 4) === "--" || name5.substring(name5.length - 1) === "-") {
          throw new Error("invalid hyphen");
        }
        return name5;
      }
      exports2.nameprep = nameprep;
    }
  });

  // node_modules/@ethersproject/strings/lib/index.js
  var require_lib11 = __commonJS({
    "node_modules/@ethersproject/strings/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.nameprep = exports2.parseBytes32String = exports2.formatBytes32String = exports2.UnicodeNormalizationForm = exports2.Utf8ErrorReason = exports2.Utf8ErrorFuncs = exports2.toUtf8String = exports2.toUtf8CodePoints = exports2.toUtf8Bytes = exports2._toEscapedUtf8String = void 0;
      var bytes32_1 = require_bytes32();
      Object.defineProperty(exports2, "formatBytes32String", { enumerable: true, get: function() {
        return bytes32_1.formatBytes32String;
      } });
      Object.defineProperty(exports2, "parseBytes32String", { enumerable: true, get: function() {
        return bytes32_1.parseBytes32String;
      } });
      var idna_1 = require_idna();
      Object.defineProperty(exports2, "nameprep", { enumerable: true, get: function() {
        return idna_1.nameprep;
      } });
      var utf8_1 = require_utf8();
      Object.defineProperty(exports2, "_toEscapedUtf8String", { enumerable: true, get: function() {
        return utf8_1._toEscapedUtf8String;
      } });
      Object.defineProperty(exports2, "toUtf8Bytes", { enumerable: true, get: function() {
        return utf8_1.toUtf8Bytes;
      } });
      Object.defineProperty(exports2, "toUtf8CodePoints", { enumerable: true, get: function() {
        return utf8_1.toUtf8CodePoints;
      } });
      Object.defineProperty(exports2, "toUtf8String", { enumerable: true, get: function() {
        return utf8_1.toUtf8String;
      } });
      Object.defineProperty(exports2, "UnicodeNormalizationForm", { enumerable: true, get: function() {
        return utf8_1.UnicodeNormalizationForm;
      } });
      Object.defineProperty(exports2, "Utf8ErrorFuncs", { enumerable: true, get: function() {
        return utf8_1.Utf8ErrorFuncs;
      } });
      Object.defineProperty(exports2, "Utf8ErrorReason", { enumerable: true, get: function() {
        return utf8_1.Utf8ErrorReason;
      } });
    }
  });

  // node_modules/@ethersproject/hash/lib/id.js
  var require_id = __commonJS({
    "node_modules/@ethersproject/hash/lib/id.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.id = void 0;
      var keccak256_1 = require_lib10();
      var strings_1 = require_lib11();
      function id2(text) {
        return (0, keccak256_1.keccak256)((0, strings_1.toUtf8Bytes)(text));
      }
      exports2.id = id2;
    }
  });

  // node_modules/@ethersproject/hash/lib/_version.js
  var require_version8 = __commonJS({
    "node_modules/@ethersproject/hash/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "hash/5.7.0";
    }
  });

  // node_modules/@ethersproject/hash/lib/ens-normalize/decoder.js
  var require_decoder = __commonJS({
    "node_modules/@ethersproject/hash/lib/ens-normalize/decoder.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.read_emoji_trie = exports2.read_zero_terminated_array = exports2.read_mapped_map = exports2.read_member_array = exports2.signed = exports2.read_compressed_payload = exports2.read_payload = exports2.decode_arithmetic = void 0;
      function flat2(array4, depth) {
        if (depth == null) {
          depth = 1;
        }
        var result = [];
        var forEach2 = result.forEach;
        var flatDeep = function(arr, depth2) {
          forEach2.call(arr, function(val) {
            if (depth2 > 0 && Array.isArray(val)) {
              flatDeep(val, depth2 - 1);
            } else {
              result.push(val);
            }
          });
        };
        flatDeep(array4, depth);
        return result;
      }
      function fromEntries(array4) {
        var result = {};
        for (var i3 = 0; i3 < array4.length; i3++) {
          var value = array4[i3];
          result[value[0]] = value[1];
        }
        return result;
      }
      function decode_arithmetic(bytes) {
        var pos = 0;
        function u16() {
          return bytes[pos++] << 8 | bytes[pos++];
        }
        var symbol_count = u16();
        var total = 1;
        var acc = [0, 1];
        for (var i3 = 1; i3 < symbol_count; i3++) {
          acc.push(total += u16());
        }
        var skip = u16();
        var pos_payload = pos;
        pos += skip;
        var read_width = 0;
        var read_buffer = 0;
        function read_bit() {
          if (read_width == 0) {
            read_buffer = read_buffer << 8 | bytes[pos++];
            read_width = 8;
          }
          return read_buffer >> --read_width & 1;
        }
        var N = 31;
        var FULL = Math.pow(2, N);
        var HALF = FULL >>> 1;
        var QRTR = HALF >> 1;
        var MASK = FULL - 1;
        var register3 = 0;
        for (var i3 = 0; i3 < N; i3++)
          register3 = register3 << 1 | read_bit();
        var symbols = [];
        var low = 0;
        var range3 = FULL;
        while (true) {
          var value = Math.floor(((register3 - low + 1) * total - 1) / range3);
          var start = 0;
          var end = symbol_count;
          while (end - start > 1) {
            var mid = start + end >>> 1;
            if (value < acc[mid]) {
              end = mid;
            } else {
              start = mid;
            }
          }
          if (start == 0)
            break;
          symbols.push(start);
          var a2 = low + Math.floor(range3 * acc[start] / total);
          var b2 = low + Math.floor(range3 * acc[start + 1] / total) - 1;
          while (((a2 ^ b2) & HALF) == 0) {
            register3 = register3 << 1 & MASK | read_bit();
            a2 = a2 << 1 & MASK;
            b2 = b2 << 1 & MASK | 1;
          }
          while (a2 & ~b2 & QRTR) {
            register3 = register3 & HALF | register3 << 1 & MASK >>> 1 | read_bit();
            a2 = a2 << 1 ^ HALF;
            b2 = (b2 ^ HALF) << 1 | HALF | 1;
          }
          low = a2;
          range3 = 1 + b2 - a2;
        }
        var offset3 = symbol_count - 4;
        return symbols.map(function(x) {
          switch (x - offset3) {
            case 3:
              return offset3 + 65792 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
            case 2:
              return offset3 + 256 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
            case 1:
              return offset3 + bytes[pos_payload++];
            default:
              return x - 1;
          }
        });
      }
      exports2.decode_arithmetic = decode_arithmetic;
      function read_payload(v2) {
        var pos = 0;
        return function() {
          return v2[pos++];
        };
      }
      exports2.read_payload = read_payload;
      function read_compressed_payload(bytes) {
        return read_payload(decode_arithmetic(bytes));
      }
      exports2.read_compressed_payload = read_compressed_payload;
      function signed(i3) {
        return i3 & 1 ? ~i3 >> 1 : i3 >> 1;
      }
      exports2.signed = signed;
      function read_counts(n3, next) {
        var v2 = Array(n3);
        for (var i3 = 0; i3 < n3; i3++)
          v2[i3] = 1 + next();
        return v2;
      }
      function read_ascending(n3, next) {
        var v2 = Array(n3);
        for (var i3 = 0, x = -1; i3 < n3; i3++)
          v2[i3] = x += 1 + next();
        return v2;
      }
      function read_deltas(n3, next) {
        var v2 = Array(n3);
        for (var i3 = 0, x = 0; i3 < n3; i3++)
          v2[i3] = x += signed(next());
        return v2;
      }
      function read_member_array(next, lookup) {
        var v2 = read_ascending(next(), next);
        var n3 = next();
        var vX = read_ascending(n3, next);
        var vN = read_counts(n3, next);
        for (var i3 = 0; i3 < n3; i3++) {
          for (var j = 0; j < vN[i3]; j++) {
            v2.push(vX[i3] + j);
          }
        }
        return lookup ? v2.map(function(x) {
          return lookup[x];
        }) : v2;
      }
      exports2.read_member_array = read_member_array;
      function read_mapped_map(next) {
        var ret = [];
        while (true) {
          var w2 = next();
          if (w2 == 0)
            break;
          ret.push(read_linear_table(w2, next));
        }
        while (true) {
          var w2 = next() - 1;
          if (w2 < 0)
            break;
          ret.push(read_replacement_table(w2, next));
        }
        return fromEntries(flat2(ret));
      }
      exports2.read_mapped_map = read_mapped_map;
      function read_zero_terminated_array(next) {
        var v2 = [];
        while (true) {
          var i3 = next();
          if (i3 == 0)
            break;
          v2.push(i3);
        }
        return v2;
      }
      exports2.read_zero_terminated_array = read_zero_terminated_array;
      function read_transposed(n3, w2, next) {
        var m2 = Array(n3).fill(void 0).map(function() {
          return [];
        });
        for (var i3 = 0; i3 < w2; i3++) {
          read_deltas(n3, next).forEach(function(x, j) {
            return m2[j].push(x);
          });
        }
        return m2;
      }
      function read_linear_table(w2, next) {
        var dx = 1 + next();
        var dy = next();
        var vN = read_zero_terminated_array(next);
        var m2 = read_transposed(vN.length, 1 + w2, next);
        return flat2(m2.map(function(v2, i3) {
          var x = v2[0], ys = v2.slice(1);
          return Array(vN[i3]).fill(void 0).map(function(_, j) {
            var j_dy = j * dy;
            return [x + j * dx, ys.map(function(y2) {
              return y2 + j_dy;
            })];
          });
        }));
      }
      function read_replacement_table(w2, next) {
        var n3 = 1 + next();
        var m2 = read_transposed(n3, 1 + w2, next);
        return m2.map(function(v2) {
          return [v2[0], v2.slice(1)];
        });
      }
      function read_emoji_trie(next) {
        var sorted = read_member_array(next).sort(function(a2, b2) {
          return a2 - b2;
        });
        return read2();
        function read2() {
          var branches = [];
          while (true) {
            var keys = read_member_array(next, sorted);
            if (keys.length == 0)
              break;
            branches.push({ set: new Set(keys), node: read2() });
          }
          branches.sort(function(a2, b2) {
            return b2.set.size - a2.set.size;
          });
          var temp = next();
          var valid = temp % 3;
          temp = temp / 3 | 0;
          var fe0f = !!(temp & 1);
          temp >>= 1;
          var save = temp == 1;
          var check = temp == 2;
          return { branches, valid, fe0f, save, check };
        }
      }
      exports2.read_emoji_trie = read_emoji_trie;
    }
  });

  // node_modules/@ethersproject/hash/lib/ens-normalize/include.js
  var require_include = __commonJS({
    "node_modules/@ethersproject/hash/lib/ens-normalize/include.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getData = void 0;
      var base64_1 = require_lib7();
      var decoder_js_1 = require_decoder();
      function getData() {
        return (0, decoder_js_1.read_compressed_payload)((0, base64_1.decode)(""));
      }
      exports2.getData = getData;
    }
  });

  // node_modules/@ethersproject/hash/lib/ens-normalize/lib.js
  var require_lib12 = __commonJS({
    "node_modules/@ethersproject/hash/lib/ens-normalize/lib.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ens_normalize = exports2.ens_normalize_post_check = void 0;
      var strings_1 = require_lib11();
      var include_js_1 = require_include();
      var r3 = (0, include_js_1.getData)();
      var decoder_js_1 = require_decoder();
      var VALID = new Set((0, decoder_js_1.read_member_array)(r3));
      var IGNORED = new Set((0, decoder_js_1.read_member_array)(r3));
      var MAPPED = (0, decoder_js_1.read_mapped_map)(r3);
      var EMOJI_ROOT = (0, decoder_js_1.read_emoji_trie)(r3);
      var HYPHEN = 45;
      var UNDERSCORE = 95;
      function explode_cp(name5) {
        return (0, strings_1.toUtf8CodePoints)(name5);
      }
      function filter_fe0f(cps) {
        return cps.filter(function(cp) {
          return cp != 65039;
        });
      }
      function ens_normalize_post_check(name5) {
        for (var _i = 0, _a = name5.split("."); _i < _a.length; _i++) {
          var label = _a[_i];
          var cps = explode_cp(label);
          try {
            for (var i3 = cps.lastIndexOf(UNDERSCORE) - 1; i3 >= 0; i3--) {
              if (cps[i3] !== UNDERSCORE) {
                throw new Error("underscore only allowed at start");
              }
            }
            if (cps.length >= 4 && cps.every(function(cp) {
              return cp < 128;
            }) && cps[2] === HYPHEN && cps[3] === HYPHEN) {
              throw new Error("invalid label extension");
            }
          } catch (err) {
            throw new Error('Invalid label "' + label + '": ' + err.message);
          }
        }
        return name5;
      }
      exports2.ens_normalize_post_check = ens_normalize_post_check;
      function ens_normalize(name5) {
        return ens_normalize_post_check(normalize2(name5, filter_fe0f));
      }
      exports2.ens_normalize = ens_normalize;
      function normalize2(name5, emoji_filter) {
        var input = explode_cp(name5).reverse();
        var output = [];
        while (input.length) {
          var emoji = consume_emoji_reversed(input);
          if (emoji) {
            output.push.apply(output, emoji_filter(emoji));
            continue;
          }
          var cp = input.pop();
          if (VALID.has(cp)) {
            output.push(cp);
            continue;
          }
          if (IGNORED.has(cp)) {
            continue;
          }
          var cps = MAPPED[cp];
          if (cps) {
            output.push.apply(output, cps);
            continue;
          }
          throw new Error("Disallowed codepoint: 0x" + cp.toString(16).toUpperCase());
        }
        return ens_normalize_post_check(nfc(String.fromCodePoint.apply(String, output)));
      }
      function nfc(s2) {
        return s2.normalize("NFC");
      }
      function consume_emoji_reversed(cps, eaten) {
        var _a;
        var node = EMOJI_ROOT;
        var emoji;
        var saved;
        var stack = [];
        var pos = cps.length;
        if (eaten)
          eaten.length = 0;
        var _loop_1 = function() {
          var cp = cps[--pos];
          node = (_a = node.branches.find(function(x) {
            return x.set.has(cp);
          })) === null || _a === void 0 ? void 0 : _a.node;
          if (!node)
            return "break";
          if (node.save) {
            saved = cp;
          } else if (node.check) {
            if (cp === saved)
              return "break";
          }
          stack.push(cp);
          if (node.fe0f) {
            stack.push(65039);
            if (pos > 0 && cps[pos - 1] == 65039)
              pos--;
          }
          if (node.valid) {
            emoji = stack.slice();
            if (node.valid == 2)
              emoji.splice(1, 1);
            if (eaten)
              eaten.push.apply(eaten, cps.slice(pos).reverse());
            cps.length = pos;
          }
        };
        while (pos) {
          var state_1 = _loop_1();
          if (state_1 === "break")
            break;
        }
        return emoji;
      }
    }
  });

  // node_modules/@ethersproject/hash/lib/namehash.js
  var require_namehash = __commonJS({
    "node_modules/@ethersproject/hash/lib/namehash.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.dnsEncode = exports2.namehash = exports2.isValidName = exports2.ensNormalize = void 0;
      var bytes_1 = require_lib2();
      var strings_1 = require_lib11();
      var keccak256_1 = require_lib10();
      var logger_1 = require_lib();
      var _version_1 = require_version8();
      var logger = new logger_1.Logger(_version_1.version);
      var lib_1 = require_lib12();
      var Zeros = new Uint8Array(32);
      Zeros.fill(0);
      function checkComponent(comp) {
        if (comp.length === 0) {
          throw new Error("invalid ENS name; empty component");
        }
        return comp;
      }
      function ensNameSplit(name5) {
        var bytes = (0, strings_1.toUtf8Bytes)((0, lib_1.ens_normalize)(name5));
        var comps = [];
        if (name5.length === 0) {
          return comps;
        }
        var last3 = 0;
        for (var i3 = 0; i3 < bytes.length; i3++) {
          var d2 = bytes[i3];
          if (d2 === 46) {
            comps.push(checkComponent(bytes.slice(last3, i3)));
            last3 = i3 + 1;
          }
        }
        if (last3 >= bytes.length) {
          throw new Error("invalid ENS name; empty component");
        }
        comps.push(checkComponent(bytes.slice(last3)));
        return comps;
      }
      function ensNormalize(name5) {
        return ensNameSplit(name5).map(function(comp) {
          return (0, strings_1.toUtf8String)(comp);
        }).join(".");
      }
      exports2.ensNormalize = ensNormalize;
      function isValidName(name5) {
        try {
          return ensNameSplit(name5).length !== 0;
        } catch (error) {
        }
        return false;
      }
      exports2.isValidName = isValidName;
      function namehash(name5) {
        if (typeof name5 !== "string") {
          logger.throwArgumentError("invalid ENS name; not a string", "name", name5);
        }
        var result = Zeros;
        var comps = ensNameSplit(name5);
        while (comps.length) {
          result = (0, keccak256_1.keccak256)((0, bytes_1.concat)([result, (0, keccak256_1.keccak256)(comps.pop())]));
        }
        return (0, bytes_1.hexlify)(result);
      }
      exports2.namehash = namehash;
      function dnsEncode(name5) {
        return (0, bytes_1.hexlify)((0, bytes_1.concat)(ensNameSplit(name5).map(function(comp) {
          if (comp.length > 63) {
            throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
          }
          var bytes = new Uint8Array(comp.length + 1);
          bytes.set(comp, 1);
          bytes[0] = bytes.length - 1;
          return bytes;
        }))) + "00";
      }
      exports2.dnsEncode = dnsEncode;
    }
  });

  // node_modules/@ethersproject/hash/lib/message.js
  var require_message = __commonJS({
    "node_modules/@ethersproject/hash/lib/message.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.hashMessage = exports2.messagePrefix = void 0;
      var bytes_1 = require_lib2();
      var keccak256_1 = require_lib10();
      var strings_1 = require_lib11();
      exports2.messagePrefix = "Ethereum Signed Message:\n";
      function hashMessage(message) {
        if (typeof message === "string") {
          message = (0, strings_1.toUtf8Bytes)(message);
        }
        return (0, keccak256_1.keccak256)((0, bytes_1.concat)([
          (0, strings_1.toUtf8Bytes)(exports2.messagePrefix),
          (0, strings_1.toUtf8Bytes)(String(message.length)),
          message
        ]));
      }
      exports2.hashMessage = hashMessage;
    }
  });

  // node_modules/@ethersproject/rlp/lib/_version.js
  var require_version9 = __commonJS({
    "node_modules/@ethersproject/rlp/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "rlp/5.7.0";
    }
  });

  // node_modules/@ethersproject/rlp/lib/index.js
  var require_lib13 = __commonJS({
    "node_modules/@ethersproject/rlp/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.decode = exports2.encode = void 0;
      var bytes_1 = require_lib2();
      var logger_1 = require_lib();
      var _version_1 = require_version9();
      var logger = new logger_1.Logger(_version_1.version);
      function arrayifyInteger(value) {
        var result = [];
        while (value) {
          result.unshift(value & 255);
          value >>= 8;
        }
        return result;
      }
      function unarrayifyInteger(data, offset3, length2) {
        var result = 0;
        for (var i3 = 0; i3 < length2; i3++) {
          result = result * 256 + data[offset3 + i3];
        }
        return result;
      }
      function _encode(object4) {
        if (Array.isArray(object4)) {
          var payload_1 = [];
          object4.forEach(function(child) {
            payload_1 = payload_1.concat(_encode(child));
          });
          if (payload_1.length <= 55) {
            payload_1.unshift(192 + payload_1.length);
            return payload_1;
          }
          var length_1 = arrayifyInteger(payload_1.length);
          length_1.unshift(247 + length_1.length);
          return length_1.concat(payload_1);
        }
        if (!(0, bytes_1.isBytesLike)(object4)) {
          logger.throwArgumentError("RLP object must be BytesLike", "object", object4);
        }
        var data = Array.prototype.slice.call((0, bytes_1.arrayify)(object4));
        if (data.length === 1 && data[0] <= 127) {
          return data;
        } else if (data.length <= 55) {
          data.unshift(128 + data.length);
          return data;
        }
        var length2 = arrayifyInteger(data.length);
        length2.unshift(183 + length2.length);
        return length2.concat(data);
      }
      function encode12(object4) {
        return (0, bytes_1.hexlify)(_encode(object4));
      }
      exports2.encode = encode12;
      function _decodeChildren(data, offset3, childOffset, length2) {
        var result = [];
        while (childOffset < offset3 + 1 + length2) {
          var decoded = _decode(data, childOffset);
          result.push(decoded.result);
          childOffset += decoded.consumed;
          if (childOffset > offset3 + 1 + length2) {
            logger.throwError("child data too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
          }
        }
        return { consumed: 1 + length2, result };
      }
      function _decode(data, offset3) {
        if (data.length === 0) {
          logger.throwError("data too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
        }
        if (data[offset3] >= 248) {
          var lengthLength = data[offset3] - 247;
          if (offset3 + 1 + lengthLength > data.length) {
            logger.throwError("data short segment too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
          }
          var length_2 = unarrayifyInteger(data, offset3 + 1, lengthLength);
          if (offset3 + 1 + lengthLength + length_2 > data.length) {
            logger.throwError("data long segment too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
          }
          return _decodeChildren(data, offset3, offset3 + 1 + lengthLength, lengthLength + length_2);
        } else if (data[offset3] >= 192) {
          var length_3 = data[offset3] - 192;
          if (offset3 + 1 + length_3 > data.length) {
            logger.throwError("data array too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
          }
          return _decodeChildren(data, offset3, offset3 + 1, length_3);
        } else if (data[offset3] >= 184) {
          var lengthLength = data[offset3] - 183;
          if (offset3 + 1 + lengthLength > data.length) {
            logger.throwError("data array too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
          }
          var length_4 = unarrayifyInteger(data, offset3 + 1, lengthLength);
          if (offset3 + 1 + lengthLength + length_4 > data.length) {
            logger.throwError("data array too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
          }
          var result = (0, bytes_1.hexlify)(data.slice(offset3 + 1 + lengthLength, offset3 + 1 + lengthLength + length_4));
          return { consumed: 1 + lengthLength + length_4, result };
        } else if (data[offset3] >= 128) {
          var length_5 = data[offset3] - 128;
          if (offset3 + 1 + length_5 > data.length) {
            logger.throwError("data too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
          }
          var result = (0, bytes_1.hexlify)(data.slice(offset3 + 1, offset3 + 1 + length_5));
          return { consumed: 1 + length_5, result };
        }
        return { consumed: 1, result: (0, bytes_1.hexlify)(data[offset3]) };
      }
      function decode11(data) {
        var bytes = (0, bytes_1.arrayify)(data);
        var decoded = _decode(bytes, 0);
        if (decoded.consumed !== bytes.length) {
          logger.throwArgumentError("invalid rlp data", "data", data);
        }
        return decoded.result;
      }
      exports2.decode = decode11;
    }
  });

  // node_modules/@ethersproject/address/lib/_version.js
  var require_version10 = __commonJS({
    "node_modules/@ethersproject/address/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "address/5.7.0";
    }
  });

  // node_modules/@ethersproject/address/lib/index.js
  var require_lib14 = __commonJS({
    "node_modules/@ethersproject/address/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getCreate2Address = exports2.getContractAddress = exports2.getIcapAddress = exports2.isAddress = exports2.getAddress = void 0;
      var bytes_1 = require_lib2();
      var bignumber_1 = require_lib3();
      var keccak256_1 = require_lib10();
      var rlp_1 = require_lib13();
      var logger_1 = require_lib();
      var _version_1 = require_version10();
      var logger = new logger_1.Logger(_version_1.version);
      function getChecksumAddress(address) {
        if (!(0, bytes_1.isHexString)(address, 20)) {
          logger.throwArgumentError("invalid address", "address", address);
        }
        address = address.toLowerCase();
        var chars = address.substring(2).split("");
        var expanded = new Uint8Array(40);
        for (var i4 = 0; i4 < 40; i4++) {
          expanded[i4] = chars[i4].charCodeAt(0);
        }
        var hashed = (0, bytes_1.arrayify)((0, keccak256_1.keccak256)(expanded));
        for (var i4 = 0; i4 < 40; i4 += 2) {
          if (hashed[i4 >> 1] >> 4 >= 8) {
            chars[i4] = chars[i4].toUpperCase();
          }
          if ((hashed[i4 >> 1] & 15) >= 8) {
            chars[i4 + 1] = chars[i4 + 1].toUpperCase();
          }
        }
        return "0x" + chars.join("");
      }
      var MAX_SAFE_INTEGER = 9007199254740991;
      function log10(x) {
        if (Math.log10) {
          return Math.log10(x);
        }
        return Math.log(x) / Math.LN10;
      }
      var ibanLookup = {};
      for (i3 = 0; i3 < 10; i3++) {
        ibanLookup[String(i3)] = String(i3);
      }
      var i3;
      for (i3 = 0; i3 < 26; i3++) {
        ibanLookup[String.fromCharCode(65 + i3)] = String(10 + i3);
      }
      var i3;
      var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
      function ibanChecksum(address) {
        address = address.toUpperCase();
        address = address.substring(4) + address.substring(0, 2) + "00";
        var expanded = address.split("").map(function(c2) {
          return ibanLookup[c2];
        }).join("");
        while (expanded.length >= safeDigits) {
          var block = expanded.substring(0, safeDigits);
          expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
        }
        var checksum = String(98 - parseInt(expanded, 10) % 97);
        while (checksum.length < 2) {
          checksum = "0" + checksum;
        }
        return checksum;
      }
      function getAddress(address) {
        var result = null;
        if (typeof address !== "string") {
          logger.throwArgumentError("invalid address", "address", address);
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
          if (address.substring(0, 2) !== "0x") {
            address = "0x" + address;
          }
          result = getChecksumAddress(address);
          if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
            logger.throwArgumentError("bad address checksum", "address", address);
          }
        } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
          if (address.substring(2, 4) !== ibanChecksum(address)) {
            logger.throwArgumentError("bad icap checksum", "address", address);
          }
          result = (0, bignumber_1._base36To16)(address.substring(4));
          while (result.length < 40) {
            result = "0" + result;
          }
          result = getChecksumAddress("0x" + result);
        } else {
          logger.throwArgumentError("invalid address", "address", address);
        }
        return result;
      }
      exports2.getAddress = getAddress;
      function isAddress(address) {
        try {
          getAddress(address);
          return true;
        } catch (error) {
        }
        return false;
      }
      exports2.isAddress = isAddress;
      function getIcapAddress(address) {
        var base362 = (0, bignumber_1._base16To36)(getAddress(address).substring(2)).toUpperCase();
        while (base362.length < 30) {
          base362 = "0" + base362;
        }
        return "XE" + ibanChecksum("XE00" + base362) + base362;
      }
      exports2.getIcapAddress = getIcapAddress;
      function getContractAddress(transaction) {
        var from3 = null;
        try {
          from3 = getAddress(transaction.from);
        } catch (error) {
          logger.throwArgumentError("missing from address", "transaction", transaction);
        }
        var nonce = (0, bytes_1.stripZeros)((0, bytes_1.arrayify)(bignumber_1.BigNumber.from(transaction.nonce).toHexString()));
        return getAddress((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, rlp_1.encode)([from3, nonce])), 12));
      }
      exports2.getContractAddress = getContractAddress;
      function getCreate2Address(from3, salt, initCodeHash) {
        if ((0, bytes_1.hexDataLength)(salt) !== 32) {
          logger.throwArgumentError("salt must be 32 bytes", "salt", salt);
        }
        if ((0, bytes_1.hexDataLength)(initCodeHash) !== 32) {
          logger.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
        }
        return getAddress((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, bytes_1.concat)(["0xff", getAddress(from3), salt, initCodeHash])), 12));
      }
      exports2.getCreate2Address = getCreate2Address;
    }
  });

  // node_modules/@ethersproject/hash/lib/typed-data.js
  var require_typed_data = __commonJS({
    "node_modules/@ethersproject/hash/lib/typed-data.js"(exports2) {
      "use strict";
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports2 && exports2.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y2, t3, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                return t3;
              if (y2 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t3[1]) {
                    _.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _.label < t3[2]) {
                    _.label = t3[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TypedDataEncoder = void 0;
      var address_1 = require_lib14();
      var bignumber_1 = require_lib3();
      var bytes_1 = require_lib2();
      var keccak256_1 = require_lib10();
      var properties_1 = require_lib4();
      var logger_1 = require_lib();
      var _version_1 = require_version8();
      var logger = new logger_1.Logger(_version_1.version);
      var id_1 = require_id();
      var padding = new Uint8Array(32);
      padding.fill(0);
      var NegativeOne = bignumber_1.BigNumber.from(-1);
      var Zero = bignumber_1.BigNumber.from(0);
      var One = bignumber_1.BigNumber.from(1);
      var MaxUint256 = bignumber_1.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
      function hexPadRight(value) {
        var bytes = (0, bytes_1.arrayify)(value);
        var padOffset = bytes.length % 32;
        if (padOffset) {
          return (0, bytes_1.hexConcat)([bytes, padding.slice(padOffset)]);
        }
        return (0, bytes_1.hexlify)(bytes);
      }
      var hexTrue = (0, bytes_1.hexZeroPad)(One.toHexString(), 32);
      var hexFalse = (0, bytes_1.hexZeroPad)(Zero.toHexString(), 32);
      var domainFieldTypes = {
        name: "string",
        version: "string",
        chainId: "uint256",
        verifyingContract: "address",
        salt: "bytes32"
      };
      var domainFieldNames = [
        "name",
        "version",
        "chainId",
        "verifyingContract",
        "salt"
      ];
      function checkString(key2) {
        return function(value) {
          if (typeof value !== "string") {
            logger.throwArgumentError("invalid domain value for " + JSON.stringify(key2), "domain." + key2, value);
          }
          return value;
        };
      }
      var domainChecks = {
        name: checkString("name"),
        version: checkString("version"),
        chainId: function(value) {
          try {
            return bignumber_1.BigNumber.from(value).toString();
          } catch (error) {
          }
          return logger.throwArgumentError('invalid domain value for "chainId"', "domain.chainId", value);
        },
        verifyingContract: function(value) {
          try {
            return (0, address_1.getAddress)(value).toLowerCase();
          } catch (error) {
          }
          return logger.throwArgumentError('invalid domain value "verifyingContract"', "domain.verifyingContract", value);
        },
        salt: function(value) {
          try {
            var bytes = (0, bytes_1.arrayify)(value);
            if (bytes.length !== 32) {
              throw new Error("bad length");
            }
            return (0, bytes_1.hexlify)(bytes);
          } catch (error) {
          }
          return logger.throwArgumentError('invalid domain value "salt"', "domain.salt", value);
        }
      };
      function getBaseEncoder(type4) {
        {
          var match2 = type4.match(/^(u?)int(\d*)$/);
          if (match2) {
            var signed = match2[1] === "";
            var width = parseInt(match2[2] || "256");
            if (width % 8 !== 0 || width > 256 || match2[2] && match2[2] !== String(width)) {
              logger.throwArgumentError("invalid numeric width", "type", type4);
            }
            var boundsUpper_1 = MaxUint256.mask(signed ? width - 1 : width);
            var boundsLower_1 = signed ? boundsUpper_1.add(One).mul(NegativeOne) : Zero;
            return function(value) {
              var v2 = bignumber_1.BigNumber.from(value);
              if (v2.lt(boundsLower_1) || v2.gt(boundsUpper_1)) {
                logger.throwArgumentError("value out-of-bounds for " + type4, "value", value);
              }
              return (0, bytes_1.hexZeroPad)(v2.toTwos(256).toHexString(), 32);
            };
          }
        }
        {
          var match2 = type4.match(/^bytes(\d+)$/);
          if (match2) {
            var width_1 = parseInt(match2[1]);
            if (width_1 === 0 || width_1 > 32 || match2[1] !== String(width_1)) {
              logger.throwArgumentError("invalid bytes width", "type", type4);
            }
            return function(value) {
              var bytes = (0, bytes_1.arrayify)(value);
              if (bytes.length !== width_1) {
                logger.throwArgumentError("invalid length for " + type4, "value", value);
              }
              return hexPadRight(value);
            };
          }
        }
        switch (type4) {
          case "address":
            return function(value) {
              return (0, bytes_1.hexZeroPad)((0, address_1.getAddress)(value), 32);
            };
          case "bool":
            return function(value) {
              return !value ? hexFalse : hexTrue;
            };
          case "bytes":
            return function(value) {
              return (0, keccak256_1.keccak256)(value);
            };
          case "string":
            return function(value) {
              return (0, id_1.id)(value);
            };
        }
        return null;
      }
      function encodeType(name5, fields) {
        return name5 + "(" + fields.map(function(_a) {
          var name6 = _a.name, type4 = _a.type;
          return type4 + " " + name6;
        }).join(",") + ")";
      }
      var TypedDataEncoder = (
        /** @class */
        function() {
          function TypedDataEncoder2(types3) {
            (0, properties_1.defineReadOnly)(this, "types", Object.freeze((0, properties_1.deepCopy)(types3)));
            (0, properties_1.defineReadOnly)(this, "_encoderCache", {});
            (0, properties_1.defineReadOnly)(this, "_types", {});
            var links3 = {};
            var parents = {};
            var subtypes = {};
            Object.keys(types3).forEach(function(type4) {
              links3[type4] = {};
              parents[type4] = [];
              subtypes[type4] = {};
            });
            var _loop_1 = function(name_12) {
              var uniqueNames = {};
              types3[name_12].forEach(function(field) {
                if (uniqueNames[field.name]) {
                  logger.throwArgumentError("duplicate variable name " + JSON.stringify(field.name) + " in " + JSON.stringify(name_12), "types", types3);
                }
                uniqueNames[field.name] = true;
                var baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                if (baseType === name_12) {
                  logger.throwArgumentError("circular type reference to " + JSON.stringify(baseType), "types", types3);
                }
                var encoder = getBaseEncoder(baseType);
                if (encoder) {
                  return;
                }
                if (!parents[baseType]) {
                  logger.throwArgumentError("unknown type " + JSON.stringify(baseType), "types", types3);
                }
                parents[baseType].push(name_12);
                links3[name_12][baseType] = true;
              });
            };
            for (var name_1 in types3) {
              _loop_1(name_1);
            }
            var primaryTypes = Object.keys(parents).filter(function(n3) {
              return parents[n3].length === 0;
            });
            if (primaryTypes.length === 0) {
              logger.throwArgumentError("missing primary type", "types", types3);
            } else if (primaryTypes.length > 1) {
              logger.throwArgumentError("ambiguous primary types or unused types: " + primaryTypes.map(function(t3) {
                return JSON.stringify(t3);
              }).join(", "), "types", types3);
            }
            (0, properties_1.defineReadOnly)(this, "primaryType", primaryTypes[0]);
            function checkCircular(type4, found) {
              if (found[type4]) {
                logger.throwArgumentError("circular type reference to " + JSON.stringify(type4), "types", types3);
              }
              found[type4] = true;
              Object.keys(links3[type4]).forEach(function(child) {
                if (!parents[child]) {
                  return;
                }
                checkCircular(child, found);
                Object.keys(found).forEach(function(subtype) {
                  subtypes[subtype][child] = true;
                });
              });
              delete found[type4];
            }
            checkCircular(this.primaryType, {});
            for (var name_2 in subtypes) {
              var st = Object.keys(subtypes[name_2]);
              st.sort();
              this._types[name_2] = encodeType(name_2, types3[name_2]) + st.map(function(t3) {
                return encodeType(t3, types3[t3]);
              }).join("");
            }
          }
          TypedDataEncoder2.prototype.getEncoder = function(type4) {
            var encoder = this._encoderCache[type4];
            if (!encoder) {
              encoder = this._encoderCache[type4] = this._getEncoder(type4);
            }
            return encoder;
          };
          TypedDataEncoder2.prototype._getEncoder = function(type4) {
            var _this = this;
            {
              var encoder = getBaseEncoder(type4);
              if (encoder) {
                return encoder;
              }
            }
            var match2 = type4.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match2) {
              var subtype_1 = match2[1];
              var subEncoder_1 = this.getEncoder(subtype_1);
              var length_1 = parseInt(match2[3]);
              return function(value) {
                if (length_1 >= 0 && value.length !== length_1) {
                  logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                }
                var result = value.map(subEncoder_1);
                if (_this._types[subtype_1]) {
                  result = result.map(keccak256_1.keccak256);
                }
                return (0, keccak256_1.keccak256)((0, bytes_1.hexConcat)(result));
              };
            }
            var fields = this.types[type4];
            if (fields) {
              var encodedType_1 = (0, id_1.id)(this._types[type4]);
              return function(value) {
                var values = fields.map(function(_a) {
                  var name5 = _a.name, type5 = _a.type;
                  var result = _this.getEncoder(type5)(value[name5]);
                  if (_this._types[type5]) {
                    return (0, keccak256_1.keccak256)(result);
                  }
                  return result;
                });
                values.unshift(encodedType_1);
                return (0, bytes_1.hexConcat)(values);
              };
            }
            return logger.throwArgumentError("unknown type: " + type4, "type", type4);
          };
          TypedDataEncoder2.prototype.encodeType = function(name5) {
            var result = this._types[name5];
            if (!result) {
              logger.throwArgumentError("unknown type: " + JSON.stringify(name5), "name", name5);
            }
            return result;
          };
          TypedDataEncoder2.prototype.encodeData = function(type4, value) {
            return this.getEncoder(type4)(value);
          };
          TypedDataEncoder2.prototype.hashStruct = function(name5, value) {
            return (0, keccak256_1.keccak256)(this.encodeData(name5, value));
          };
          TypedDataEncoder2.prototype.encode = function(value) {
            return this.encodeData(this.primaryType, value);
          };
          TypedDataEncoder2.prototype.hash = function(value) {
            return this.hashStruct(this.primaryType, value);
          };
          TypedDataEncoder2.prototype._visit = function(type4, value, callback) {
            var _this = this;
            {
              var encoder = getBaseEncoder(type4);
              if (encoder) {
                return callback(type4, value);
              }
            }
            var match2 = type4.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match2) {
              var subtype_2 = match2[1];
              var length_2 = parseInt(match2[3]);
              if (length_2 >= 0 && value.length !== length_2) {
                logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
              }
              return value.map(function(v2) {
                return _this._visit(subtype_2, v2, callback);
              });
            }
            var fields = this.types[type4];
            if (fields) {
              return fields.reduce(function(accum, _a) {
                var name5 = _a.name, type5 = _a.type;
                accum[name5] = _this._visit(type5, value[name5], callback);
                return accum;
              }, {});
            }
            return logger.throwArgumentError("unknown type: " + type4, "type", type4);
          };
          TypedDataEncoder2.prototype.visit = function(value, callback) {
            return this._visit(this.primaryType, value, callback);
          };
          TypedDataEncoder2.from = function(types3) {
            return new TypedDataEncoder2(types3);
          };
          TypedDataEncoder2.getPrimaryType = function(types3) {
            return TypedDataEncoder2.from(types3).primaryType;
          };
          TypedDataEncoder2.hashStruct = function(name5, types3, value) {
            return TypedDataEncoder2.from(types3).hashStruct(name5, value);
          };
          TypedDataEncoder2.hashDomain = function(domain) {
            var domainFields = [];
            for (var name_3 in domain) {
              var type4 = domainFieldTypes[name_3];
              if (!type4) {
                logger.throwArgumentError("invalid typed-data domain key: " + JSON.stringify(name_3), "domain", domain);
              }
              domainFields.push({ name: name_3, type: type4 });
            }
            domainFields.sort(function(a2, b2) {
              return domainFieldNames.indexOf(a2.name) - domainFieldNames.indexOf(b2.name);
            });
            return TypedDataEncoder2.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
          };
          TypedDataEncoder2.encode = function(domain, types3, value) {
            return (0, bytes_1.hexConcat)([
              "0x1901",
              TypedDataEncoder2.hashDomain(domain),
              TypedDataEncoder2.from(types3).hash(value)
            ]);
          };
          TypedDataEncoder2.hash = function(domain, types3, value) {
            return (0, keccak256_1.keccak256)(TypedDataEncoder2.encode(domain, types3, value));
          };
          TypedDataEncoder2.resolveNames = function(domain, types3, value, resolveName) {
            return __awaiter2(this, void 0, void 0, function() {
              var ensCache, encoder, _a, _b, _i, name_4, _c, _d;
              return __generator(this, function(_e) {
                switch (_e.label) {
                  case 0:
                    domain = (0, properties_1.shallowCopy)(domain);
                    ensCache = {};
                    if (domain.verifyingContract && !(0, bytes_1.isHexString)(domain.verifyingContract, 20)) {
                      ensCache[domain.verifyingContract] = "0x";
                    }
                    encoder = TypedDataEncoder2.from(types3);
                    encoder.visit(value, function(type4, value2) {
                      if (type4 === "address" && !(0, bytes_1.isHexString)(value2, 20)) {
                        ensCache[value2] = "0x";
                      }
                      return value2;
                    });
                    _a = [];
                    for (_b in ensCache)
                      _a.push(_b);
                    _i = 0;
                    _e.label = 1;
                  case 1:
                    if (!(_i < _a.length))
                      return [3, 4];
                    name_4 = _a[_i];
                    _c = ensCache;
                    _d = name_4;
                    return [4, resolveName(name_4)];
                  case 2:
                    _c[_d] = _e.sent();
                    _e.label = 3;
                  case 3:
                    _i++;
                    return [3, 1];
                  case 4:
                    if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                      domain.verifyingContract = ensCache[domain.verifyingContract];
                    }
                    value = encoder.visit(value, function(type4, value2) {
                      if (type4 === "address" && ensCache[value2]) {
                        return ensCache[value2];
                      }
                      return value2;
                    });
                    return [2, { domain, value }];
                }
              });
            });
          };
          TypedDataEncoder2.getPayload = function(domain, types3, value) {
            TypedDataEncoder2.hashDomain(domain);
            var domainValues = {};
            var domainTypes = [];
            domainFieldNames.forEach(function(name5) {
              var value2 = domain[name5];
              if (value2 == null) {
                return;
              }
              domainValues[name5] = domainChecks[name5](value2);
              domainTypes.push({ name: name5, type: domainFieldTypes[name5] });
            });
            var encoder = TypedDataEncoder2.from(types3);
            var typesWithDomain = (0, properties_1.shallowCopy)(types3);
            if (typesWithDomain.EIP712Domain) {
              logger.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types3);
            } else {
              typesWithDomain.EIP712Domain = domainTypes;
            }
            encoder.encode(value);
            return {
              types: typesWithDomain,
              domain: domainValues,
              primaryType: encoder.primaryType,
              message: encoder.visit(value, function(type4, value2) {
                if (type4.match(/^bytes(\d*)/)) {
                  return (0, bytes_1.hexlify)((0, bytes_1.arrayify)(value2));
                }
                if (type4.match(/^u?int/)) {
                  return bignumber_1.BigNumber.from(value2).toString();
                }
                switch (type4) {
                  case "address":
                    return value2.toLowerCase();
                  case "bool":
                    return !!value2;
                  case "string":
                    if (typeof value2 !== "string") {
                      logger.throwArgumentError("invalid string", "value", value2);
                    }
                    return value2;
                }
                return logger.throwArgumentError("unsupported type", "type", type4);
              })
            };
          };
          return TypedDataEncoder2;
        }()
      );
      exports2.TypedDataEncoder = TypedDataEncoder;
    }
  });

  // node_modules/@ethersproject/hash/lib/index.js
  var require_lib15 = __commonJS({
    "node_modules/@ethersproject/hash/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2._TypedDataEncoder = exports2.hashMessage = exports2.messagePrefix = exports2.ensNormalize = exports2.isValidName = exports2.namehash = exports2.dnsEncode = exports2.id = void 0;
      var id_1 = require_id();
      Object.defineProperty(exports2, "id", { enumerable: true, get: function() {
        return id_1.id;
      } });
      var namehash_1 = require_namehash();
      Object.defineProperty(exports2, "dnsEncode", { enumerable: true, get: function() {
        return namehash_1.dnsEncode;
      } });
      Object.defineProperty(exports2, "isValidName", { enumerable: true, get: function() {
        return namehash_1.isValidName;
      } });
      Object.defineProperty(exports2, "namehash", { enumerable: true, get: function() {
        return namehash_1.namehash;
      } });
      var message_1 = require_message();
      Object.defineProperty(exports2, "hashMessage", { enumerable: true, get: function() {
        return message_1.hashMessage;
      } });
      Object.defineProperty(exports2, "messagePrefix", { enumerable: true, get: function() {
        return message_1.messagePrefix;
      } });
      var namehash_2 = require_namehash();
      Object.defineProperty(exports2, "ensNormalize", { enumerable: true, get: function() {
        return namehash_2.ensNormalize;
      } });
      var typed_data_1 = require_typed_data();
      Object.defineProperty(exports2, "_TypedDataEncoder", { enumerable: true, get: function() {
        return typed_data_1.TypedDataEncoder;
      } });
    }
  });

  // node_modules/minimalistic-assert/index.js
  var require_minimalistic_assert = __commonJS({
    "node_modules/minimalistic-assert/index.js"(exports2, module2) {
      module2.exports = assert;
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      assert.equal = function assertEqual(l2, r3, msg) {
        if (l2 != r3)
          throw new Error(msg || "Assertion failed: " + l2 + " != " + r3);
      };
    }
  });

  // node_modules/inherits/inherits_browser.js
  var require_inherits_browser = __commonJS({
    "node_modules/inherits/inherits_browser.js"(exports2, module2) {
      if (typeof Object.create === "function") {
        module2.exports = function inherits2(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        module2.exports = function inherits2(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    }
  });

  // node_modules/hash.js/lib/hash/utils.js
  var require_utils = __commonJS({
    "node_modules/hash.js/lib/hash/utils.js"(exports2) {
      "use strict";
      var assert = require_minimalistic_assert();
      var inherits2 = require_inherits_browser();
      exports2.inherits = inherits2;
      function isSurrogatePair(msg, i3) {
        if ((msg.charCodeAt(i3) & 64512) !== 55296) {
          return false;
        }
        if (i3 < 0 || i3 + 1 >= msg.length) {
          return false;
        }
        return (msg.charCodeAt(i3 + 1) & 64512) === 56320;
      }
      function toArray7(msg, enc) {
        if (Array.isArray(msg))
          return msg.slice();
        if (!msg)
          return [];
        var res = [];
        if (typeof msg === "string") {
          if (!enc) {
            var p2 = 0;
            for (var i3 = 0; i3 < msg.length; i3++) {
              var c2 = msg.charCodeAt(i3);
              if (c2 < 128) {
                res[p2++] = c2;
              } else if (c2 < 2048) {
                res[p2++] = c2 >> 6 | 192;
                res[p2++] = c2 & 63 | 128;
              } else if (isSurrogatePair(msg, i3)) {
                c2 = 65536 + ((c2 & 1023) << 10) + (msg.charCodeAt(++i3) & 1023);
                res[p2++] = c2 >> 18 | 240;
                res[p2++] = c2 >> 12 & 63 | 128;
                res[p2++] = c2 >> 6 & 63 | 128;
                res[p2++] = c2 & 63 | 128;
              } else {
                res[p2++] = c2 >> 12 | 224;
                res[p2++] = c2 >> 6 & 63 | 128;
                res[p2++] = c2 & 63 | 128;
              }
            }
          } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0)
              msg = "0" + msg;
            for (i3 = 0; i3 < msg.length; i3 += 2)
              res.push(parseInt(msg[i3] + msg[i3 + 1], 16));
          }
        } else {
          for (i3 = 0; i3 < msg.length; i3++)
            res[i3] = msg[i3] | 0;
        }
        return res;
      }
      exports2.toArray = toArray7;
      function toHex3(msg) {
        var res = "";
        for (var i3 = 0; i3 < msg.length; i3++)
          res += zero2(msg[i3].toString(16));
        return res;
      }
      exports2.toHex = toHex3;
      function htonl(w2) {
        var res = w2 >>> 24 | w2 >>> 8 & 65280 | w2 << 8 & 16711680 | (w2 & 255) << 24;
        return res >>> 0;
      }
      exports2.htonl = htonl;
      function toHex32(msg, endian) {
        var res = "";
        for (var i3 = 0; i3 < msg.length; i3++) {
          var w2 = msg[i3];
          if (endian === "little")
            w2 = htonl(w2);
          res += zero8(w2.toString(16));
        }
        return res;
      }
      exports2.toHex32 = toHex32;
      function zero2(word) {
        if (word.length === 1)
          return "0" + word;
        else
          return word;
      }
      exports2.zero2 = zero2;
      function zero8(word) {
        if (word.length === 7)
          return "0" + word;
        else if (word.length === 6)
          return "00" + word;
        else if (word.length === 5)
          return "000" + word;
        else if (word.length === 4)
          return "0000" + word;
        else if (word.length === 3)
          return "00000" + word;
        else if (word.length === 2)
          return "000000" + word;
        else if (word.length === 1)
          return "0000000" + word;
        else
          return word;
      }
      exports2.zero8 = zero8;
      function join32(msg, start, end, endian) {
        var len = end - start;
        assert(len % 4 === 0);
        var res = new Array(len / 4);
        for (var i3 = 0, k = start; i3 < res.length; i3++, k += 4) {
          var w2;
          if (endian === "big")
            w2 = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
          else
            w2 = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
          res[i3] = w2 >>> 0;
        }
        return res;
      }
      exports2.join32 = join32;
      function split32(msg, endian) {
        var res = new Array(msg.length * 4);
        for (var i3 = 0, k = 0; i3 < msg.length; i3++, k += 4) {
          var m2 = msg[i3];
          if (endian === "big") {
            res[k] = m2 >>> 24;
            res[k + 1] = m2 >>> 16 & 255;
            res[k + 2] = m2 >>> 8 & 255;
            res[k + 3] = m2 & 255;
          } else {
            res[k + 3] = m2 >>> 24;
            res[k + 2] = m2 >>> 16 & 255;
            res[k + 1] = m2 >>> 8 & 255;
            res[k] = m2 & 255;
          }
        }
        return res;
      }
      exports2.split32 = split32;
      function rotr32(w2, b2) {
        return w2 >>> b2 | w2 << 32 - b2;
      }
      exports2.rotr32 = rotr32;
      function rotl32(w2, b2) {
        return w2 << b2 | w2 >>> 32 - b2;
      }
      exports2.rotl32 = rotl32;
      function sum32(a2, b2) {
        return a2 + b2 >>> 0;
      }
      exports2.sum32 = sum32;
      function sum32_3(a2, b2, c2) {
        return a2 + b2 + c2 >>> 0;
      }
      exports2.sum32_3 = sum32_3;
      function sum32_4(a2, b2, c2, d2) {
        return a2 + b2 + c2 + d2 >>> 0;
      }
      exports2.sum32_4 = sum32_4;
      function sum32_5(a2, b2, c2, d2, e3) {
        return a2 + b2 + c2 + d2 + e3 >>> 0;
      }
      exports2.sum32_5 = sum32_5;
      function sum64(buf2, pos, ah, al) {
        var bh = buf2[pos];
        var bl = buf2[pos + 1];
        var lo = al + bl >>> 0;
        var hi = (lo < al ? 1 : 0) + ah + bh;
        buf2[pos] = hi >>> 0;
        buf2[pos + 1] = lo;
      }
      exports2.sum64 = sum64;
      function sum64_hi(ah, al, bh, bl) {
        var lo = al + bl >>> 0;
        var hi = (lo < al ? 1 : 0) + ah + bh;
        return hi >>> 0;
      }
      exports2.sum64_hi = sum64_hi;
      function sum64_lo(ah, al, bh, bl) {
        var lo = al + bl;
        return lo >>> 0;
      }
      exports2.sum64_lo = sum64_lo;
      function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
        var carry = 0;
        var lo = al;
        lo = lo + bl >>> 0;
        carry += lo < al ? 1 : 0;
        lo = lo + cl >>> 0;
        carry += lo < cl ? 1 : 0;
        lo = lo + dl >>> 0;
        carry += lo < dl ? 1 : 0;
        var hi = ah + bh + ch + dh + carry;
        return hi >>> 0;
      }
      exports2.sum64_4_hi = sum64_4_hi;
      function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
        var lo = al + bl + cl + dl;
        return lo >>> 0;
      }
      exports2.sum64_4_lo = sum64_4_lo;
      function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
        var carry = 0;
        var lo = al;
        lo = lo + bl >>> 0;
        carry += lo < al ? 1 : 0;
        lo = lo + cl >>> 0;
        carry += lo < cl ? 1 : 0;
        lo = lo + dl >>> 0;
        carry += lo < dl ? 1 : 0;
        lo = lo + el >>> 0;
        carry += lo < el ? 1 : 0;
        var hi = ah + bh + ch + dh + eh + carry;
        return hi >>> 0;
      }
      exports2.sum64_5_hi = sum64_5_hi;
      function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
        var lo = al + bl + cl + dl + el;
        return lo >>> 0;
      }
      exports2.sum64_5_lo = sum64_5_lo;
      function rotr64_hi(ah, al, num) {
        var r3 = al << 32 - num | ah >>> num;
        return r3 >>> 0;
      }
      exports2.rotr64_hi = rotr64_hi;
      function rotr64_lo(ah, al, num) {
        var r3 = ah << 32 - num | al >>> num;
        return r3 >>> 0;
      }
      exports2.rotr64_lo = rotr64_lo;
      function shr64_hi(ah, al, num) {
        return ah >>> num;
      }
      exports2.shr64_hi = shr64_hi;
      function shr64_lo(ah, al, num) {
        var r3 = ah << 32 - num | al >>> num;
        return r3 >>> 0;
      }
      exports2.shr64_lo = shr64_lo;
    }
  });

  // node_modules/hash.js/lib/hash/common.js
  var require_common = __commonJS({
    "node_modules/hash.js/lib/hash/common.js"(exports2) {
      "use strict";
      var utils2 = require_utils();
      var assert = require_minimalistic_assert();
      function BlockHash() {
        this.pending = null;
        this.pendingTotal = 0;
        this.blockSize = this.constructor.blockSize;
        this.outSize = this.constructor.outSize;
        this.hmacStrength = this.constructor.hmacStrength;
        this.padLength = this.constructor.padLength / 8;
        this.endian = "big";
        this._delta8 = this.blockSize / 8;
        this._delta32 = this.blockSize / 32;
      }
      exports2.BlockHash = BlockHash;
      BlockHash.prototype.update = function update(msg, enc) {
        msg = utils2.toArray(msg, enc);
        if (!this.pending)
          this.pending = msg;
        else
          this.pending = this.pending.concat(msg);
        this.pendingTotal += msg.length;
        if (this.pending.length >= this._delta8) {
          msg = this.pending;
          var r3 = msg.length % this._delta8;
          this.pending = msg.slice(msg.length - r3, msg.length);
          if (this.pending.length === 0)
            this.pending = null;
          msg = utils2.join32(msg, 0, msg.length - r3, this.endian);
          for (var i3 = 0; i3 < msg.length; i3 += this._delta32)
            this._update(msg, i3, i3 + this._delta32);
        }
        return this;
      };
      BlockHash.prototype.digest = function digest2(enc) {
        this.update(this._pad());
        assert(this.pending === null);
        return this._digest(enc);
      };
      BlockHash.prototype._pad = function pad() {
        var len = this.pendingTotal;
        var bytes = this._delta8;
        var k = bytes - (len + this.padLength) % bytes;
        var res = new Array(k + this.padLength);
        res[0] = 128;
        for (var i3 = 1; i3 < k; i3++)
          res[i3] = 0;
        len <<= 3;
        if (this.endian === "big") {
          for (var t3 = 8; t3 < this.padLength; t3++)
            res[i3++] = 0;
          res[i3++] = 0;
          res[i3++] = 0;
          res[i3++] = 0;
          res[i3++] = 0;
          res[i3++] = len >>> 24 & 255;
          res[i3++] = len >>> 16 & 255;
          res[i3++] = len >>> 8 & 255;
          res[i3++] = len & 255;
        } else {
          res[i3++] = len & 255;
          res[i3++] = len >>> 8 & 255;
          res[i3++] = len >>> 16 & 255;
          res[i3++] = len >>> 24 & 255;
          res[i3++] = 0;
          res[i3++] = 0;
          res[i3++] = 0;
          res[i3++] = 0;
          for (t3 = 8; t3 < this.padLength; t3++)
            res[i3++] = 0;
        }
        return res;
      };
    }
  });

  // node_modules/hash.js/lib/hash/sha/common.js
  var require_common2 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/common.js"(exports2) {
      "use strict";
      var utils2 = require_utils();
      var rotr32 = utils2.rotr32;
      function ft_1(s2, x, y2, z) {
        if (s2 === 0)
          return ch32(x, y2, z);
        if (s2 === 1 || s2 === 3)
          return p32(x, y2, z);
        if (s2 === 2)
          return maj32(x, y2, z);
      }
      exports2.ft_1 = ft_1;
      function ch32(x, y2, z) {
        return x & y2 ^ ~x & z;
      }
      exports2.ch32 = ch32;
      function maj32(x, y2, z) {
        return x & y2 ^ x & z ^ y2 & z;
      }
      exports2.maj32 = maj32;
      function p32(x, y2, z) {
        return x ^ y2 ^ z;
      }
      exports2.p32 = p32;
      function s0_256(x) {
        return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
      }
      exports2.s0_256 = s0_256;
      function s1_256(x) {
        return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
      }
      exports2.s1_256 = s1_256;
      function g0_256(x) {
        return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
      }
      exports2.g0_256 = g0_256;
      function g1_256(x) {
        return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
      }
      exports2.g1_256 = g1_256;
    }
  });

  // node_modules/hash.js/lib/hash/sha/1.js
  var require__ = __commonJS({
    "node_modules/hash.js/lib/hash/sha/1.js"(exports2, module2) {
      "use strict";
      var utils2 = require_utils();
      var common = require_common();
      var shaCommon = require_common2();
      var rotl32 = utils2.rotl32;
      var sum32 = utils2.sum32;
      var sum32_5 = utils2.sum32_5;
      var ft_1 = shaCommon.ft_1;
      var BlockHash = common.BlockHash;
      var sha1_K = [
        1518500249,
        1859775393,
        2400959708,
        3395469782
      ];
      function SHA1() {
        if (!(this instanceof SHA1))
          return new SHA1();
        BlockHash.call(this);
        this.h = [
          1732584193,
          4023233417,
          2562383102,
          271733878,
          3285377520
        ];
        this.W = new Array(80);
      }
      utils2.inherits(SHA1, BlockHash);
      module2.exports = SHA1;
      SHA1.blockSize = 512;
      SHA1.outSize = 160;
      SHA1.hmacStrength = 80;
      SHA1.padLength = 64;
      SHA1.prototype._update = function _update(msg, start) {
        var W = this.W;
        for (var i3 = 0; i3 < 16; i3++)
          W[i3] = msg[start + i3];
        for (; i3 < W.length; i3++)
          W[i3] = rotl32(W[i3 - 3] ^ W[i3 - 8] ^ W[i3 - 14] ^ W[i3 - 16], 1);
        var a2 = this.h[0];
        var b2 = this.h[1];
        var c2 = this.h[2];
        var d2 = this.h[3];
        var e3 = this.h[4];
        for (i3 = 0; i3 < W.length; i3++) {
          var s2 = ~~(i3 / 20);
          var t3 = sum32_5(rotl32(a2, 5), ft_1(s2, b2, c2, d2), e3, W[i3], sha1_K[s2]);
          e3 = d2;
          d2 = c2;
          c2 = rotl32(b2, 30);
          b2 = a2;
          a2 = t3;
        }
        this.h[0] = sum32(this.h[0], a2);
        this.h[1] = sum32(this.h[1], b2);
        this.h[2] = sum32(this.h[2], c2);
        this.h[3] = sum32(this.h[3], d2);
        this.h[4] = sum32(this.h[4], e3);
      };
      SHA1.prototype._digest = function digest2(enc) {
        if (enc === "hex")
          return utils2.toHex32(this.h, "big");
        else
          return utils2.split32(this.h, "big");
      };
    }
  });

  // node_modules/hash.js/lib/hash/sha/256.js
  var require__2 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/256.js"(exports2, module2) {
      "use strict";
      var utils2 = require_utils();
      var common = require_common();
      var shaCommon = require_common2();
      var assert = require_minimalistic_assert();
      var sum32 = utils2.sum32;
      var sum32_4 = utils2.sum32_4;
      var sum32_5 = utils2.sum32_5;
      var ch32 = shaCommon.ch32;
      var maj32 = shaCommon.maj32;
      var s0_256 = shaCommon.s0_256;
      var s1_256 = shaCommon.s1_256;
      var g0_256 = shaCommon.g0_256;
      var g1_256 = shaCommon.g1_256;
      var BlockHash = common.BlockHash;
      var sha256_K = [
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
      ];
      function SHA256() {
        if (!(this instanceof SHA256))
          return new SHA256();
        BlockHash.call(this);
        this.h = [
          1779033703,
          3144134277,
          1013904242,
          2773480762,
          1359893119,
          2600822924,
          528734635,
          1541459225
        ];
        this.k = sha256_K;
        this.W = new Array(64);
      }
      utils2.inherits(SHA256, BlockHash);
      module2.exports = SHA256;
      SHA256.blockSize = 512;
      SHA256.outSize = 256;
      SHA256.hmacStrength = 192;
      SHA256.padLength = 64;
      SHA256.prototype._update = function _update(msg, start) {
        var W = this.W;
        for (var i3 = 0; i3 < 16; i3++)
          W[i3] = msg[start + i3];
        for (; i3 < W.length; i3++)
          W[i3] = sum32_4(g1_256(W[i3 - 2]), W[i3 - 7], g0_256(W[i3 - 15]), W[i3 - 16]);
        var a2 = this.h[0];
        var b2 = this.h[1];
        var c2 = this.h[2];
        var d2 = this.h[3];
        var e3 = this.h[4];
        var f2 = this.h[5];
        var g2 = this.h[6];
        var h2 = this.h[7];
        assert(this.k.length === W.length);
        for (i3 = 0; i3 < W.length; i3++) {
          var T1 = sum32_5(h2, s1_256(e3), ch32(e3, f2, g2), this.k[i3], W[i3]);
          var T2 = sum32(s0_256(a2), maj32(a2, b2, c2));
          h2 = g2;
          g2 = f2;
          f2 = e3;
          e3 = sum32(d2, T1);
          d2 = c2;
          c2 = b2;
          b2 = a2;
          a2 = sum32(T1, T2);
        }
        this.h[0] = sum32(this.h[0], a2);
        this.h[1] = sum32(this.h[1], b2);
        this.h[2] = sum32(this.h[2], c2);
        this.h[3] = sum32(this.h[3], d2);
        this.h[4] = sum32(this.h[4], e3);
        this.h[5] = sum32(this.h[5], f2);
        this.h[6] = sum32(this.h[6], g2);
        this.h[7] = sum32(this.h[7], h2);
      };
      SHA256.prototype._digest = function digest2(enc) {
        if (enc === "hex")
          return utils2.toHex32(this.h, "big");
        else
          return utils2.split32(this.h, "big");
      };
    }
  });

  // node_modules/hash.js/lib/hash/sha/224.js
  var require__3 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/224.js"(exports2, module2) {
      "use strict";
      var utils2 = require_utils();
      var SHA256 = require__2();
      function SHA224() {
        if (!(this instanceof SHA224))
          return new SHA224();
        SHA256.call(this);
        this.h = [
          3238371032,
          914150663,
          812702999,
          4144912697,
          4290775857,
          1750603025,
          1694076839,
          3204075428
        ];
      }
      utils2.inherits(SHA224, SHA256);
      module2.exports = SHA224;
      SHA224.blockSize = 512;
      SHA224.outSize = 224;
      SHA224.hmacStrength = 192;
      SHA224.padLength = 64;
      SHA224.prototype._digest = function digest2(enc) {
        if (enc === "hex")
          return utils2.toHex32(this.h.slice(0, 7), "big");
        else
          return utils2.split32(this.h.slice(0, 7), "big");
      };
    }
  });

  // node_modules/hash.js/lib/hash/sha/512.js
  var require__4 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/512.js"(exports2, module2) {
      "use strict";
      var utils2 = require_utils();
      var common = require_common();
      var assert = require_minimalistic_assert();
      var rotr64_hi = utils2.rotr64_hi;
      var rotr64_lo = utils2.rotr64_lo;
      var shr64_hi = utils2.shr64_hi;
      var shr64_lo = utils2.shr64_lo;
      var sum64 = utils2.sum64;
      var sum64_hi = utils2.sum64_hi;
      var sum64_lo = utils2.sum64_lo;
      var sum64_4_hi = utils2.sum64_4_hi;
      var sum64_4_lo = utils2.sum64_4_lo;
      var sum64_5_hi = utils2.sum64_5_hi;
      var sum64_5_lo = utils2.sum64_5_lo;
      var BlockHash = common.BlockHash;
      var sha512_K = [
        1116352408,
        3609767458,
        1899447441,
        602891725,
        3049323471,
        3964484399,
        3921009573,
        2173295548,
        961987163,
        4081628472,
        1508970993,
        3053834265,
        2453635748,
        2937671579,
        2870763221,
        3664609560,
        3624381080,
        2734883394,
        310598401,
        1164996542,
        607225278,
        1323610764,
        1426881987,
        3590304994,
        1925078388,
        4068182383,
        2162078206,
        991336113,
        2614888103,
        633803317,
        3248222580,
        3479774868,
        3835390401,
        2666613458,
        4022224774,
        944711139,
        264347078,
        2341262773,
        604807628,
        2007800933,
        770255983,
        1495990901,
        1249150122,
        1856431235,
        1555081692,
        3175218132,
        1996064986,
        2198950837,
        2554220882,
        3999719339,
        2821834349,
        766784016,
        2952996808,
        2566594879,
        3210313671,
        3203337956,
        3336571891,
        1034457026,
        3584528711,
        2466948901,
        113926993,
        3758326383,
        338241895,
        168717936,
        666307205,
        1188179964,
        773529912,
        1546045734,
        1294757372,
        1522805485,
        1396182291,
        2643833823,
        1695183700,
        2343527390,
        1986661051,
        1014477480,
        2177026350,
        1206759142,
        2456956037,
        344077627,
        2730485921,
        1290863460,
        2820302411,
        3158454273,
        3259730800,
        3505952657,
        3345764771,
        106217008,
        3516065817,
        3606008344,
        3600352804,
        1432725776,
        4094571909,
        1467031594,
        275423344,
        851169720,
        430227734,
        3100823752,
        506948616,
        1363258195,
        659060556,
        3750685593,
        883997877,
        3785050280,
        958139571,
        3318307427,
        1322822218,
        3812723403,
        1537002063,
        2003034995,
        1747873779,
        3602036899,
        1955562222,
        1575990012,
        2024104815,
        1125592928,
        2227730452,
        2716904306,
        2361852424,
        442776044,
        2428436474,
        593698344,
        2756734187,
        3733110249,
        3204031479,
        2999351573,
        3329325298,
        3815920427,
        3391569614,
        3928383900,
        3515267271,
        566280711,
        3940187606,
        3454069534,
        4118630271,
        4000239992,
        116418474,
        1914138554,
        174292421,
        2731055270,
        289380356,
        3203993006,
        460393269,
        320620315,
        685471733,
        587496836,
        852142971,
        1086792851,
        1017036298,
        365543100,
        1126000580,
        2618297676,
        1288033470,
        3409855158,
        1501505948,
        4234509866,
        1607167915,
        987167468,
        1816402316,
        1246189591
      ];
      function SHA512() {
        if (!(this instanceof SHA512))
          return new SHA512();
        BlockHash.call(this);
        this.h = [
          1779033703,
          4089235720,
          3144134277,
          2227873595,
          1013904242,
          4271175723,
          2773480762,
          1595750129,
          1359893119,
          2917565137,
          2600822924,
          725511199,
          528734635,
          4215389547,
          1541459225,
          327033209
        ];
        this.k = sha512_K;
        this.W = new Array(160);
      }
      utils2.inherits(SHA512, BlockHash);
      module2.exports = SHA512;
      SHA512.blockSize = 1024;
      SHA512.outSize = 512;
      SHA512.hmacStrength = 192;
      SHA512.padLength = 128;
      SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
        var W = this.W;
        for (var i3 = 0; i3 < 32; i3++)
          W[i3] = msg[start + i3];
        for (; i3 < W.length; i3 += 2) {
          var c0_hi = g1_512_hi(W[i3 - 4], W[i3 - 3]);
          var c0_lo = g1_512_lo(W[i3 - 4], W[i3 - 3]);
          var c1_hi = W[i3 - 14];
          var c1_lo = W[i3 - 13];
          var c2_hi = g0_512_hi(W[i3 - 30], W[i3 - 29]);
          var c2_lo = g0_512_lo(W[i3 - 30], W[i3 - 29]);
          var c3_hi = W[i3 - 32];
          var c3_lo = W[i3 - 31];
          W[i3] = sum64_4_hi(
            c0_hi,
            c0_lo,
            c1_hi,
            c1_lo,
            c2_hi,
            c2_lo,
            c3_hi,
            c3_lo
          );
          W[i3 + 1] = sum64_4_lo(
            c0_hi,
            c0_lo,
            c1_hi,
            c1_lo,
            c2_hi,
            c2_lo,
            c3_hi,
            c3_lo
          );
        }
      };
      SHA512.prototype._update = function _update(msg, start) {
        this._prepareBlock(msg, start);
        var W = this.W;
        var ah = this.h[0];
        var al = this.h[1];
        var bh = this.h[2];
        var bl = this.h[3];
        var ch = this.h[4];
        var cl = this.h[5];
        var dh = this.h[6];
        var dl = this.h[7];
        var eh = this.h[8];
        var el = this.h[9];
        var fh = this.h[10];
        var fl = this.h[11];
        var gh = this.h[12];
        var gl = this.h[13];
        var hh = this.h[14];
        var hl = this.h[15];
        assert(this.k.length === W.length);
        for (var i3 = 0; i3 < W.length; i3 += 2) {
          var c0_hi = hh;
          var c0_lo = hl;
          var c1_hi = s1_512_hi(eh, el);
          var c1_lo = s1_512_lo(eh, el);
          var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
          var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
          var c3_hi = this.k[i3];
          var c3_lo = this.k[i3 + 1];
          var c4_hi = W[i3];
          var c4_lo = W[i3 + 1];
          var T1_hi = sum64_5_hi(
            c0_hi,
            c0_lo,
            c1_hi,
            c1_lo,
            c2_hi,
            c2_lo,
            c3_hi,
            c3_lo,
            c4_hi,
            c4_lo
          );
          var T1_lo = sum64_5_lo(
            c0_hi,
            c0_lo,
            c1_hi,
            c1_lo,
            c2_hi,
            c2_lo,
            c3_hi,
            c3_lo,
            c4_hi,
            c4_lo
          );
          c0_hi = s0_512_hi(ah, al);
          c0_lo = s0_512_lo(ah, al);
          c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
          c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
          var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
          var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
          hh = gh;
          hl = gl;
          gh = fh;
          gl = fl;
          fh = eh;
          fl = el;
          eh = sum64_hi(dh, dl, T1_hi, T1_lo);
          el = sum64_lo(dl, dl, T1_hi, T1_lo);
          dh = ch;
          dl = cl;
          ch = bh;
          cl = bl;
          bh = ah;
          bl = al;
          ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
          al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
        }
        sum64(this.h, 0, ah, al);
        sum64(this.h, 2, bh, bl);
        sum64(this.h, 4, ch, cl);
        sum64(this.h, 6, dh, dl);
        sum64(this.h, 8, eh, el);
        sum64(this.h, 10, fh, fl);
        sum64(this.h, 12, gh, gl);
        sum64(this.h, 14, hh, hl);
      };
      SHA512.prototype._digest = function digest2(enc) {
        if (enc === "hex")
          return utils2.toHex32(this.h, "big");
        else
          return utils2.split32(this.h, "big");
      };
      function ch64_hi(xh, xl, yh, yl, zh) {
        var r3 = xh & yh ^ ~xh & zh;
        if (r3 < 0)
          r3 += 4294967296;
        return r3;
      }
      function ch64_lo(xh, xl, yh, yl, zh, zl) {
        var r3 = xl & yl ^ ~xl & zl;
        if (r3 < 0)
          r3 += 4294967296;
        return r3;
      }
      function maj64_hi(xh, xl, yh, yl, zh) {
        var r3 = xh & yh ^ xh & zh ^ yh & zh;
        if (r3 < 0)
          r3 += 4294967296;
        return r3;
      }
      function maj64_lo(xh, xl, yh, yl, zh, zl) {
        var r3 = xl & yl ^ xl & zl ^ yl & zl;
        if (r3 < 0)
          r3 += 4294967296;
        return r3;
      }
      function s0_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 28);
        var c1_hi = rotr64_hi(xl, xh, 2);
        var c2_hi = rotr64_hi(xl, xh, 7);
        var r3 = c0_hi ^ c1_hi ^ c2_hi;
        if (r3 < 0)
          r3 += 4294967296;
        return r3;
      }
      function s0_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 28);
        var c1_lo = rotr64_lo(xl, xh, 2);
        var c2_lo = rotr64_lo(xl, xh, 7);
        var r3 = c0_lo ^ c1_lo ^ c2_lo;
        if (r3 < 0)
          r3 += 4294967296;
        return r3;
      }
      function s1_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 14);
        var c1_hi = rotr64_hi(xh, xl, 18);
        var c2_hi = rotr64_hi(xl, xh, 9);
        var r3 = c0_hi ^ c1_hi ^ c2_hi;
        if (r3 < 0)
          r3 += 4294967296;
        return r3;
      }
      function s1_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 14);
        var c1_lo = rotr64_lo(xh, xl, 18);
        var c2_lo = rotr64_lo(xl, xh, 9);
        var r3 = c0_lo ^ c1_lo ^ c2_lo;
        if (r3 < 0)
          r3 += 4294967296;
        return r3;
      }
      function g0_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 1);
        var c1_hi = rotr64_hi(xh, xl, 8);
        var c2_hi = shr64_hi(xh, xl, 7);
        var r3 = c0_hi ^ c1_hi ^ c2_hi;
        if (r3 < 0)
          r3 += 4294967296;
        return r3;
      }
      function g0_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 1);
        var c1_lo = rotr64_lo(xh, xl, 8);
        var c2_lo = shr64_lo(xh, xl, 7);
        var r3 = c0_lo ^ c1_lo ^ c2_lo;
        if (r3 < 0)
          r3 += 4294967296;
        return r3;
      }
      function g1_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 19);
        var c1_hi = rotr64_hi(xl, xh, 29);
        var c2_hi = shr64_hi(xh, xl, 6);
        var r3 = c0_hi ^ c1_hi ^ c2_hi;
        if (r3 < 0)
          r3 += 4294967296;
        return r3;
      }
      function g1_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 19);
        var c1_lo = rotr64_lo(xl, xh, 29);
        var c2_lo = shr64_lo(xh, xl, 6);
        var r3 = c0_lo ^ c1_lo ^ c2_lo;
        if (r3 < 0)
          r3 += 4294967296;
        return r3;
      }
    }
  });

  // node_modules/hash.js/lib/hash/sha/384.js
  var require__5 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/384.js"(exports2, module2) {
      "use strict";
      var utils2 = require_utils();
      var SHA512 = require__4();
      function SHA384() {
        if (!(this instanceof SHA384))
          return new SHA384();
        SHA512.call(this);
        this.h = [
          3418070365,
          3238371032,
          1654270250,
          914150663,
          2438529370,
          812702999,
          355462360,
          4144912697,
          1731405415,
          4290775857,
          2394180231,
          1750603025,
          3675008525,
          1694076839,
          1203062813,
          3204075428
        ];
      }
      utils2.inherits(SHA384, SHA512);
      module2.exports = SHA384;
      SHA384.blockSize = 1024;
      SHA384.outSize = 384;
      SHA384.hmacStrength = 192;
      SHA384.padLength = 128;
      SHA384.prototype._digest = function digest2(enc) {
        if (enc === "hex")
          return utils2.toHex32(this.h.slice(0, 12), "big");
        else
          return utils2.split32(this.h.slice(0, 12), "big");
      };
    }
  });

  // node_modules/hash.js/lib/hash/sha.js
  var require_sha = __commonJS({
    "node_modules/hash.js/lib/hash/sha.js"(exports2) {
      "use strict";
      exports2.sha1 = require__();
      exports2.sha224 = require__3();
      exports2.sha256 = require__2();
      exports2.sha384 = require__5();
      exports2.sha512 = require__4();
    }
  });

  // node_modules/hash.js/lib/hash/ripemd.js
  var require_ripemd = __commonJS({
    "node_modules/hash.js/lib/hash/ripemd.js"(exports2) {
      "use strict";
      var utils2 = require_utils();
      var common = require_common();
      var rotl32 = utils2.rotl32;
      var sum32 = utils2.sum32;
      var sum32_3 = utils2.sum32_3;
      var sum32_4 = utils2.sum32_4;
      var BlockHash = common.BlockHash;
      function RIPEMD160() {
        if (!(this instanceof RIPEMD160))
          return new RIPEMD160();
        BlockHash.call(this);
        this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
        this.endian = "little";
      }
      utils2.inherits(RIPEMD160, BlockHash);
      exports2.ripemd160 = RIPEMD160;
      RIPEMD160.blockSize = 512;
      RIPEMD160.outSize = 160;
      RIPEMD160.hmacStrength = 192;
      RIPEMD160.padLength = 64;
      RIPEMD160.prototype._update = function update(msg, start) {
        var A = this.h[0];
        var B = this.h[1];
        var C = this.h[2];
        var D = this.h[3];
        var E2 = this.h[4];
        var Ah = A;
        var Bh = B;
        var Ch = C;
        var Dh = D;
        var Eh = E2;
        for (var j = 0; j < 80; j++) {
          var T2 = sum32(
            rotl32(
              sum32_4(A, f2(j, B, C, D), msg[r3[j] + start], K(j)),
              s2[j]
            ),
            E2
          );
          A = E2;
          E2 = D;
          D = rotl32(C, 10);
          C = B;
          B = T2;
          T2 = sum32(
            rotl32(
              sum32_4(Ah, f2(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
              sh[j]
            ),
            Eh
          );
          Ah = Eh;
          Eh = Dh;
          Dh = rotl32(Ch, 10);
          Ch = Bh;
          Bh = T2;
        }
        T2 = sum32_3(this.h[1], C, Dh);
        this.h[1] = sum32_3(this.h[2], D, Eh);
        this.h[2] = sum32_3(this.h[3], E2, Ah);
        this.h[3] = sum32_3(this.h[4], A, Bh);
        this.h[4] = sum32_3(this.h[0], B, Ch);
        this.h[0] = T2;
      };
      RIPEMD160.prototype._digest = function digest2(enc) {
        if (enc === "hex")
          return utils2.toHex32(this.h, "little");
        else
          return utils2.split32(this.h, "little");
      };
      function f2(j, x, y2, z) {
        if (j <= 15)
          return x ^ y2 ^ z;
        else if (j <= 31)
          return x & y2 | ~x & z;
        else if (j <= 47)
          return (x | ~y2) ^ z;
        else if (j <= 63)
          return x & z | y2 & ~z;
        else
          return x ^ (y2 | ~z);
      }
      function K(j) {
        if (j <= 15)
          return 0;
        else if (j <= 31)
          return 1518500249;
        else if (j <= 47)
          return 1859775393;
        else if (j <= 63)
          return 2400959708;
        else
          return 2840853838;
      }
      function Kh(j) {
        if (j <= 15)
          return 1352829926;
        else if (j <= 31)
          return 1548603684;
        else if (j <= 47)
          return 1836072691;
        else if (j <= 63)
          return 2053994217;
        else
          return 0;
      }
      var r3 = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        7,
        4,
        13,
        1,
        10,
        6,
        15,
        3,
        12,
        0,
        9,
        5,
        2,
        14,
        11,
        8,
        3,
        10,
        14,
        4,
        9,
        15,
        8,
        1,
        2,
        7,
        0,
        6,
        13,
        11,
        5,
        12,
        1,
        9,
        11,
        10,
        0,
        8,
        12,
        4,
        13,
        3,
        7,
        15,
        14,
        5,
        6,
        2,
        4,
        0,
        5,
        9,
        7,
        12,
        2,
        10,
        14,
        1,
        3,
        8,
        11,
        6,
        15,
        13
      ];
      var rh = [
        5,
        14,
        7,
        0,
        9,
        2,
        11,
        4,
        13,
        6,
        15,
        8,
        1,
        10,
        3,
        12,
        6,
        11,
        3,
        7,
        0,
        13,
        5,
        10,
        14,
        15,
        8,
        12,
        4,
        9,
        1,
        2,
        15,
        5,
        1,
        3,
        7,
        14,
        6,
        9,
        11,
        8,
        12,
        2,
        10,
        0,
        4,
        13,
        8,
        6,
        4,
        1,
        3,
        11,
        15,
        0,
        5,
        12,
        2,
        13,
        9,
        7,
        10,
        14,
        12,
        15,
        10,
        4,
        1,
        5,
        8,
        7,
        6,
        2,
        13,
        14,
        0,
        3,
        9,
        11
      ];
      var s2 = [
        11,
        14,
        15,
        12,
        5,
        8,
        7,
        9,
        11,
        13,
        14,
        15,
        6,
        7,
        9,
        8,
        7,
        6,
        8,
        13,
        11,
        9,
        7,
        15,
        7,
        12,
        15,
        9,
        11,
        7,
        13,
        12,
        11,
        13,
        6,
        7,
        14,
        9,
        13,
        15,
        14,
        8,
        13,
        6,
        5,
        12,
        7,
        5,
        11,
        12,
        14,
        15,
        14,
        15,
        9,
        8,
        9,
        14,
        5,
        6,
        8,
        6,
        5,
        12,
        9,
        15,
        5,
        11,
        6,
        8,
        13,
        12,
        5,
        12,
        13,
        14,
        11,
        8,
        5,
        6
      ];
      var sh = [
        8,
        9,
        9,
        11,
        13,
        15,
        15,
        5,
        7,
        7,
        8,
        11,
        14,
        14,
        12,
        6,
        9,
        13,
        15,
        7,
        12,
        8,
        9,
        11,
        7,
        7,
        12,
        7,
        6,
        15,
        13,
        11,
        9,
        7,
        15,
        11,
        8,
        6,
        6,
        14,
        12,
        13,
        5,
        14,
        13,
        13,
        7,
        5,
        15,
        5,
        8,
        11,
        14,
        14,
        6,
        14,
        6,
        9,
        12,
        9,
        12,
        5,
        15,
        8,
        8,
        5,
        12,
        9,
        12,
        5,
        14,
        6,
        8,
        13,
        6,
        5,
        15,
        13,
        11,
        11
      ];
    }
  });

  // node_modules/hash.js/lib/hash/hmac.js
  var require_hmac = __commonJS({
    "node_modules/hash.js/lib/hash/hmac.js"(exports2, module2) {
      "use strict";
      var utils2 = require_utils();
      var assert = require_minimalistic_assert();
      function Hmac(hash, key2, enc) {
        if (!(this instanceof Hmac))
          return new Hmac(hash, key2, enc);
        this.Hash = hash;
        this.blockSize = hash.blockSize / 8;
        this.outSize = hash.outSize / 8;
        this.inner = null;
        this.outer = null;
        this._init(utils2.toArray(key2, enc));
      }
      module2.exports = Hmac;
      Hmac.prototype._init = function init(key2) {
        if (key2.length > this.blockSize)
          key2 = new this.Hash().update(key2).digest();
        assert(key2.length <= this.blockSize);
        for (var i3 = key2.length; i3 < this.blockSize; i3++)
          key2.push(0);
        for (i3 = 0; i3 < key2.length; i3++)
          key2[i3] ^= 54;
        this.inner = new this.Hash().update(key2);
        for (i3 = 0; i3 < key2.length; i3++)
          key2[i3] ^= 106;
        this.outer = new this.Hash().update(key2);
      };
      Hmac.prototype.update = function update(msg, enc) {
        this.inner.update(msg, enc);
        return this;
      };
      Hmac.prototype.digest = function digest2(enc) {
        this.outer.update(this.inner.digest());
        return this.outer.digest(enc);
      };
    }
  });

  // node_modules/hash.js/lib/hash.js
  var require_hash = __commonJS({
    "node_modules/hash.js/lib/hash.js"(exports2) {
      var hash = exports2;
      hash.utils = require_utils();
      hash.common = require_common();
      hash.sha = require_sha();
      hash.ripemd = require_ripemd();
      hash.hmac = require_hmac();
      hash.sha1 = hash.sha.sha1;
      hash.sha256 = hash.sha.sha256;
      hash.sha224 = hash.sha.sha224;
      hash.sha384 = hash.sha.sha384;
      hash.sha512 = hash.sha.sha512;
      hash.ripemd160 = hash.ripemd.ripemd160;
    }
  });

  // node_modules/@ethersproject/sha2/lib/types.js
  var require_types = __commonJS({
    "node_modules/@ethersproject/sha2/lib/types.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SupportedAlgorithm = void 0;
      var SupportedAlgorithm;
      (function(SupportedAlgorithm2) {
        SupportedAlgorithm2["sha256"] = "sha256";
        SupportedAlgorithm2["sha512"] = "sha512";
      })(SupportedAlgorithm = exports2.SupportedAlgorithm || (exports2.SupportedAlgorithm = {}));
    }
  });

  // node_modules/@ethersproject/sha2/lib/_version.js
  var require_version11 = __commonJS({
    "node_modules/@ethersproject/sha2/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "sha2/5.7.0";
    }
  });

  // node_modules/@ethersproject/sha2/lib/browser-sha2.js
  var require_browser_sha2 = __commonJS({
    "node_modules/@ethersproject/sha2/lib/browser-sha2.js"(exports2) {
      "use strict";
      var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
        return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.computeHmac = exports2.sha512 = exports2.sha256 = exports2.ripemd160 = void 0;
      var hash_js_1 = __importDefault(require_hash());
      var bytes_1 = require_lib2();
      var types_1 = require_types();
      var logger_1 = require_lib();
      var _version_1 = require_version11();
      var logger = new logger_1.Logger(_version_1.version);
      function ripemd160(data) {
        return "0x" + hash_js_1.default.ripemd160().update((0, bytes_1.arrayify)(data)).digest("hex");
      }
      exports2.ripemd160 = ripemd160;
      function sha2562(data) {
        return "0x" + hash_js_1.default.sha256().update((0, bytes_1.arrayify)(data)).digest("hex");
      }
      exports2.sha256 = sha2562;
      function sha5122(data) {
        return "0x" + hash_js_1.default.sha512().update((0, bytes_1.arrayify)(data)).digest("hex");
      }
      exports2.sha512 = sha5122;
      function computeHmac(algorithm, key2, data) {
        if (!types_1.SupportedAlgorithm[algorithm]) {
          logger.throwError("unsupported algorithm " + algorithm, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "hmac",
            algorithm
          });
        }
        return "0x" + hash_js_1.default.hmac(hash_js_1.default[algorithm], (0, bytes_1.arrayify)(key2)).update((0, bytes_1.arrayify)(data)).digest("hex");
      }
      exports2.computeHmac = computeHmac;
    }
  });

  // node_modules/@ethersproject/sha2/lib/index.js
  var require_lib16 = __commonJS({
    "node_modules/@ethersproject/sha2/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SupportedAlgorithm = exports2.sha512 = exports2.sha256 = exports2.ripemd160 = exports2.computeHmac = void 0;
      var sha2_1 = require_browser_sha2();
      Object.defineProperty(exports2, "computeHmac", { enumerable: true, get: function() {
        return sha2_1.computeHmac;
      } });
      Object.defineProperty(exports2, "ripemd160", { enumerable: true, get: function() {
        return sha2_1.ripemd160;
      } });
      Object.defineProperty(exports2, "sha256", { enumerable: true, get: function() {
        return sha2_1.sha256;
      } });
      Object.defineProperty(exports2, "sha512", { enumerable: true, get: function() {
        return sha2_1.sha512;
      } });
      var types_1 = require_types();
      Object.defineProperty(exports2, "SupportedAlgorithm", { enumerable: true, get: function() {
        return types_1.SupportedAlgorithm;
      } });
    }
  });

  // node_modules/@ethersproject/web/lib/_version.js
  var require_version12 = __commonJS({
    "node_modules/@ethersproject/web/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "web/5.7.1";
    }
  });

  // node_modules/@ethersproject/web/lib/browser-geturl.js
  var require_browser_geturl = __commonJS({
    "node_modules/@ethersproject/web/lib/browser-geturl.js"(exports2) {
      "use strict";
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports2 && exports2.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y2, t3, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                return t3;
              if (y2 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t3[1]) {
                    _.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _.label < t3[2]) {
                    _.label = t3[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getUrl = void 0;
      var bytes_1 = require_lib2();
      function getUrl(href, options) {
        return __awaiter2(this, void 0, void 0, function() {
          var request, opts, response, body, headers;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                if (options == null) {
                  options = {};
                }
                request = {
                  method: options.method || "GET",
                  headers: options.headers || {},
                  body: options.body || void 0
                };
                if (options.skipFetchSetup !== true) {
                  request.mode = "cors";
                  request.cache = "no-cache";
                  request.credentials = "same-origin";
                  request.redirect = "follow";
                  request.referrer = "client";
                }
                ;
                if (options.fetchOptions != null) {
                  opts = options.fetchOptions;
                  if (opts.mode) {
                    request.mode = opts.mode;
                  }
                  if (opts.cache) {
                    request.cache = opts.cache;
                  }
                  if (opts.credentials) {
                    request.credentials = opts.credentials;
                  }
                  if (opts.redirect) {
                    request.redirect = opts.redirect;
                  }
                  if (opts.referrer) {
                    request.referrer = opts.referrer;
                  }
                }
                return [4, fetch(href, request)];
              case 1:
                response = _a.sent();
                return [4, response.arrayBuffer()];
              case 2:
                body = _a.sent();
                headers = {};
                if (response.headers.forEach) {
                  response.headers.forEach(function(value, key2) {
                    headers[key2.toLowerCase()] = value;
                  });
                } else {
                  response.headers.keys().forEach(function(key2) {
                    headers[key2.toLowerCase()] = response.headers.get(key2);
                  });
                }
                return [2, {
                  headers,
                  statusCode: response.status,
                  statusMessage: response.statusText,
                  body: (0, bytes_1.arrayify)(new Uint8Array(body))
                }];
            }
          });
        });
      }
      exports2.getUrl = getUrl;
    }
  });

  // node_modules/@ethersproject/web/lib/index.js
  var require_lib17 = __commonJS({
    "node_modules/@ethersproject/web/lib/index.js"(exports2) {
      "use strict";
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports2 && exports2.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y2, t3, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                return t3;
              if (y2 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t3[1]) {
                    _.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _.label < t3[2]) {
                    _.label = t3[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.poll = exports2.fetchJson = exports2._fetchData = void 0;
      var base64_1 = require_lib7();
      var bytes_1 = require_lib2();
      var properties_1 = require_lib4();
      var strings_1 = require_lib11();
      var logger_1 = require_lib();
      var _version_1 = require_version12();
      var logger = new logger_1.Logger(_version_1.version);
      var geturl_1 = require_browser_geturl();
      function staller(duration) {
        return new Promise(function(resolve5) {
          setTimeout(resolve5, duration);
        });
      }
      function bodyify(value, type4) {
        if (value == null) {
          return null;
        }
        if (typeof value === "string") {
          return value;
        }
        if ((0, bytes_1.isBytesLike)(value)) {
          if (type4 && (type4.split("/")[0] === "text" || type4.split(";")[0].trim() === "application/json")) {
            try {
              return (0, strings_1.toUtf8String)(value);
            } catch (error) {
            }
            ;
          }
          return (0, bytes_1.hexlify)(value);
        }
        return value;
      }
      function unpercent(value) {
        return (0, strings_1.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, function(all5, code6) {
          return String.fromCharCode(parseInt(code6, 16));
        }));
      }
      function _fetchData(connection, body, processFunc) {
        var attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
        logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
        var throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
        var throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
        logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
        var errorPassThrough = typeof connection === "object" ? !!connection.errorPassThrough : false;
        var headers = {};
        var url2 = null;
        var options = {
          method: "GET"
        };
        var allow304 = false;
        var timeout = 2 * 60 * 1e3;
        if (typeof connection === "string") {
          url2 = connection;
        } else if (typeof connection === "object") {
          if (connection == null || connection.url == null) {
            logger.throwArgumentError("missing URL", "connection.url", connection);
          }
          url2 = connection.url;
          if (typeof connection.timeout === "number" && connection.timeout > 0) {
            timeout = connection.timeout;
          }
          if (connection.headers) {
            for (var key2 in connection.headers) {
              headers[key2.toLowerCase()] = { key: key2, value: String(connection.headers[key2]) };
              if (["if-none-match", "if-modified-since"].indexOf(key2.toLowerCase()) >= 0) {
                allow304 = true;
              }
            }
          }
          options.allowGzip = !!connection.allowGzip;
          if (connection.user != null && connection.password != null) {
            if (url2.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
              logger.throwError("basic authentication requires a secure https url", logger_1.Logger.errors.INVALID_ARGUMENT, { argument: "url", url: url2, user: connection.user, password: "[REDACTED]" });
            }
            var authorization = connection.user + ":" + connection.password;
            headers["authorization"] = {
              key: "Authorization",
              value: "Basic " + (0, base64_1.encode)((0, strings_1.toUtf8Bytes)(authorization))
            };
          }
          if (connection.skipFetchSetup != null) {
            options.skipFetchSetup = !!connection.skipFetchSetup;
          }
          if (connection.fetchOptions != null) {
            options.fetchOptions = (0, properties_1.shallowCopy)(connection.fetchOptions);
          }
        }
        var reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
        var dataMatch = url2 ? url2.match(reData) : null;
        if (dataMatch) {
          try {
            var response = {
              statusCode: 200,
              statusMessage: "OK",
              headers: { "content-type": dataMatch[1] || "text/plain" },
              body: dataMatch[2] ? (0, base64_1.decode)(dataMatch[3]) : unpercent(dataMatch[3])
            };
            var result = response.body;
            if (processFunc) {
              result = processFunc(response.body, response);
            }
            return Promise.resolve(result);
          } catch (error) {
            logger.throwError("processing response error", logger_1.Logger.errors.SERVER_ERROR, {
              body: bodyify(dataMatch[1], dataMatch[2]),
              error,
              requestBody: null,
              requestMethod: "GET",
              url: url2
            });
          }
        }
        if (body) {
          options.method = "POST";
          options.body = body;
          if (headers["content-type"] == null) {
            headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
          }
          if (headers["content-length"] == null) {
            headers["content-length"] = { key: "Content-Length", value: String(body.length) };
          }
        }
        var flatHeaders = {};
        Object.keys(headers).forEach(function(key3) {
          var header = headers[key3];
          flatHeaders[header.key] = header.value;
        });
        options.headers = flatHeaders;
        var runningTimeout = function() {
          var timer = null;
          var promise = new Promise(function(resolve5, reject) {
            if (timeout) {
              timer = setTimeout(function() {
                if (timer == null) {
                  return;
                }
                timer = null;
                reject(logger.makeError("timeout", logger_1.Logger.errors.TIMEOUT, {
                  requestBody: bodyify(options.body, flatHeaders["content-type"]),
                  requestMethod: options.method,
                  timeout,
                  url: url2
                }));
              }, timeout);
            }
          });
          var cancel2 = function() {
            if (timer == null) {
              return;
            }
            clearTimeout(timer);
            timer = null;
          };
          return { promise, cancel: cancel2 };
        }();
        var runningFetch = function() {
          return __awaiter2(this, void 0, void 0, function() {
            var attempt, response2, location_1, tryAgain, stall, retryAfter, error_1, body_1, result2, error_2, tryAgain, timeout_1;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  attempt = 0;
                  _a.label = 1;
                case 1:
                  if (!(attempt < attemptLimit))
                    return [3, 20];
                  response2 = null;
                  _a.label = 2;
                case 2:
                  _a.trys.push([2, 9, , 10]);
                  return [4, (0, geturl_1.getUrl)(url2, options)];
                case 3:
                  response2 = _a.sent();
                  if (!(attempt < attemptLimit))
                    return [3, 8];
                  if (!(response2.statusCode === 301 || response2.statusCode === 302))
                    return [3, 4];
                  location_1 = response2.headers.location || "";
                  if (options.method === "GET" && location_1.match(/^https:/)) {
                    url2 = response2.headers.location;
                    return [3, 19];
                  }
                  return [3, 8];
                case 4:
                  if (!(response2.statusCode === 429))
                    return [3, 8];
                  tryAgain = true;
                  if (!throttleCallback)
                    return [3, 6];
                  return [4, throttleCallback(attempt, url2)];
                case 5:
                  tryAgain = _a.sent();
                  _a.label = 6;
                case 6:
                  if (!tryAgain)
                    return [3, 8];
                  stall = 0;
                  retryAfter = response2.headers["retry-after"];
                  if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                    stall = parseInt(retryAfter) * 1e3;
                  } else {
                    stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                  }
                  return [4, staller(stall)];
                case 7:
                  _a.sent();
                  return [3, 19];
                case 8:
                  return [3, 10];
                case 9:
                  error_1 = _a.sent();
                  response2 = error_1.response;
                  if (response2 == null) {
                    runningTimeout.cancel();
                    logger.throwError("missing response", logger_1.Logger.errors.SERVER_ERROR, {
                      requestBody: bodyify(options.body, flatHeaders["content-type"]),
                      requestMethod: options.method,
                      serverError: error_1,
                      url: url2
                    });
                  }
                  return [3, 10];
                case 10:
                  body_1 = response2.body;
                  if (allow304 && response2.statusCode === 304) {
                    body_1 = null;
                  } else if (!errorPassThrough && (response2.statusCode < 200 || response2.statusCode >= 300)) {
                    runningTimeout.cancel();
                    logger.throwError("bad response", logger_1.Logger.errors.SERVER_ERROR, {
                      status: response2.statusCode,
                      headers: response2.headers,
                      body: bodyify(body_1, response2.headers ? response2.headers["content-type"] : null),
                      requestBody: bodyify(options.body, flatHeaders["content-type"]),
                      requestMethod: options.method,
                      url: url2
                    });
                  }
                  if (!processFunc)
                    return [3, 18];
                  _a.label = 11;
                case 11:
                  _a.trys.push([11, 13, , 18]);
                  return [4, processFunc(body_1, response2)];
                case 12:
                  result2 = _a.sent();
                  runningTimeout.cancel();
                  return [2, result2];
                case 13:
                  error_2 = _a.sent();
                  if (!(error_2.throttleRetry && attempt < attemptLimit))
                    return [3, 17];
                  tryAgain = true;
                  if (!throttleCallback)
                    return [3, 15];
                  return [4, throttleCallback(attempt, url2)];
                case 14:
                  tryAgain = _a.sent();
                  _a.label = 15;
                case 15:
                  if (!tryAgain)
                    return [3, 17];
                  timeout_1 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                  return [4, staller(timeout_1)];
                case 16:
                  _a.sent();
                  return [3, 19];
                case 17:
                  runningTimeout.cancel();
                  logger.throwError("processing response error", logger_1.Logger.errors.SERVER_ERROR, {
                    body: bodyify(body_1, response2.headers ? response2.headers["content-type"] : null),
                    error: error_2,
                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                    requestMethod: options.method,
                    url: url2
                  });
                  return [3, 18];
                case 18:
                  runningTimeout.cancel();
                  return [2, body_1];
                case 19:
                  attempt++;
                  return [3, 1];
                case 20:
                  return [2, logger.throwError("failed response", logger_1.Logger.errors.SERVER_ERROR, {
                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                    requestMethod: options.method,
                    url: url2
                  })];
              }
            });
          });
        }();
        return Promise.race([runningTimeout.promise, runningFetch]);
      }
      exports2._fetchData = _fetchData;
      function fetchJson(connection, json, processFunc) {
        var processJsonFunc = function(value, response) {
          var result = null;
          if (value != null) {
            try {
              result = JSON.parse((0, strings_1.toUtf8String)(value));
            } catch (error) {
              logger.throwError("invalid JSON", logger_1.Logger.errors.SERVER_ERROR, {
                body: value,
                error
              });
            }
          }
          if (processFunc) {
            result = processFunc(result, response);
          }
          return result;
        };
        var body = null;
        if (json != null) {
          body = (0, strings_1.toUtf8Bytes)(json);
          var updated = typeof connection === "string" ? { url: connection } : (0, properties_1.shallowCopy)(connection);
          if (updated.headers) {
            var hasContentType = Object.keys(updated.headers).filter(function(k) {
              return k.toLowerCase() === "content-type";
            }).length !== 0;
            if (!hasContentType) {
              updated.headers = (0, properties_1.shallowCopy)(updated.headers);
              updated.headers["content-type"] = "application/json";
            }
          } else {
            updated.headers = { "content-type": "application/json" };
          }
          connection = updated;
        }
        return _fetchData(connection, body, processJsonFunc);
      }
      exports2.fetchJson = fetchJson;
      function poll(func, options) {
        if (!options) {
          options = {};
        }
        options = (0, properties_1.shallowCopy)(options);
        if (options.floor == null) {
          options.floor = 0;
        }
        if (options.ceiling == null) {
          options.ceiling = 1e4;
        }
        if (options.interval == null) {
          options.interval = 250;
        }
        return new Promise(function(resolve5, reject) {
          var timer = null;
          var done = false;
          var cancel2 = function() {
            if (done) {
              return false;
            }
            done = true;
            if (timer) {
              clearTimeout(timer);
            }
            return true;
          };
          if (options.timeout) {
            timer = setTimeout(function() {
              if (cancel2()) {
                reject(new Error("timeout"));
              }
            }, options.timeout);
          }
          var retryLimit = options.retryLimit;
          var attempt = 0;
          function check() {
            return func().then(function(result) {
              if (result !== void 0) {
                if (cancel2()) {
                  resolve5(result);
                }
              } else if (options.oncePoll) {
                options.oncePoll.once("poll", check);
              } else if (options.onceBlock) {
                options.onceBlock.once("block", check);
              } else if (!done) {
                attempt++;
                if (attempt > retryLimit) {
                  if (cancel2()) {
                    reject(new Error("retry limit reached"));
                  }
                  return;
                }
                var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                if (timeout < options.floor) {
                  timeout = options.floor;
                }
                if (timeout > options.ceiling) {
                  timeout = options.ceiling;
                }
                setTimeout(check, timeout);
              }
              return null;
            }, function(error) {
              if (cancel2()) {
                reject(error);
              }
            });
          }
          check();
        });
      }
      exports2.poll = poll;
    }
  });

  // node_modules/bech32/index.js
  var require_bech32 = __commonJS({
    "node_modules/bech32/index.js"(exports2, module2) {
      "use strict";
      var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
      var ALPHABET_MAP = {};
      for (z = 0; z < ALPHABET.length; z++) {
        x = ALPHABET.charAt(z);
        if (ALPHABET_MAP[x] !== void 0)
          throw new TypeError(x + " is ambiguous");
        ALPHABET_MAP[x] = z;
      }
      var x;
      var z;
      function polymodStep(pre) {
        var b2 = pre >> 25;
        return (pre & 33554431) << 5 ^ -(b2 >> 0 & 1) & 996825010 ^ -(b2 >> 1 & 1) & 642813549 ^ -(b2 >> 2 & 1) & 513874426 ^ -(b2 >> 3 & 1) & 1027748829 ^ -(b2 >> 4 & 1) & 705979059;
      }
      function prefixChk(prefix) {
        var chk = 1;
        for (var i3 = 0; i3 < prefix.length; ++i3) {
          var c2 = prefix.charCodeAt(i3);
          if (c2 < 33 || c2 > 126)
            return "Invalid prefix (" + prefix + ")";
          chk = polymodStep(chk) ^ c2 >> 5;
        }
        chk = polymodStep(chk);
        for (i3 = 0; i3 < prefix.length; ++i3) {
          var v2 = prefix.charCodeAt(i3);
          chk = polymodStep(chk) ^ v2 & 31;
        }
        return chk;
      }
      function encode12(prefix, words, LIMIT) {
        LIMIT = LIMIT || 90;
        if (prefix.length + 7 + words.length > LIMIT)
          throw new TypeError("Exceeds length limit");
        prefix = prefix.toLowerCase();
        var chk = prefixChk(prefix);
        if (typeof chk === "string")
          throw new Error(chk);
        var result = prefix + "1";
        for (var i3 = 0; i3 < words.length; ++i3) {
          var x2 = words[i3];
          if (x2 >> 5 !== 0)
            throw new Error("Non 5-bit word");
          chk = polymodStep(chk) ^ x2;
          result += ALPHABET.charAt(x2);
        }
        for (i3 = 0; i3 < 6; ++i3) {
          chk = polymodStep(chk);
        }
        chk ^= 1;
        for (i3 = 0; i3 < 6; ++i3) {
          var v2 = chk >> (5 - i3) * 5 & 31;
          result += ALPHABET.charAt(v2);
        }
        return result;
      }
      function __decode(str, LIMIT) {
        LIMIT = LIMIT || 90;
        if (str.length < 8)
          return str + " too short";
        if (str.length > LIMIT)
          return "Exceeds length limit";
        var lowered = str.toLowerCase();
        var uppered = str.toUpperCase();
        if (str !== lowered && str !== uppered)
          return "Mixed-case string " + str;
        str = lowered;
        var split = str.lastIndexOf("1");
        if (split === -1)
          return "No separator character for " + str;
        if (split === 0)
          return "Missing prefix for " + str;
        var prefix = str.slice(0, split);
        var wordChars = str.slice(split + 1);
        if (wordChars.length < 6)
          return "Data too short";
        var chk = prefixChk(prefix);
        if (typeof chk === "string")
          return chk;
        var words = [];
        for (var i3 = 0; i3 < wordChars.length; ++i3) {
          var c2 = wordChars.charAt(i3);
          var v2 = ALPHABET_MAP[c2];
          if (v2 === void 0)
            return "Unknown character " + c2;
          chk = polymodStep(chk) ^ v2;
          if (i3 + 6 >= wordChars.length)
            continue;
          words.push(v2);
        }
        if (chk !== 1)
          return "Invalid checksum for " + str;
        return { prefix, words };
      }
      function decodeUnsafe() {
        var res = __decode.apply(null, arguments);
        if (typeof res === "object")
          return res;
      }
      function decode11(str) {
        var res = __decode.apply(null, arguments);
        if (typeof res === "object")
          return res;
        throw new Error(res);
      }
      function convert(data, inBits, outBits, pad) {
        var value = 0;
        var bits = 0;
        var maxV = (1 << outBits) - 1;
        var result = [];
        for (var i3 = 0; i3 < data.length; ++i3) {
          value = value << inBits | data[i3];
          bits += inBits;
          while (bits >= outBits) {
            bits -= outBits;
            result.push(value >> bits & maxV);
          }
        }
        if (pad) {
          if (bits > 0) {
            result.push(value << outBits - bits & maxV);
          }
        } else {
          if (bits >= inBits)
            return "Excess padding";
          if (value << outBits - bits & maxV)
            return "Non-zero padding";
        }
        return result;
      }
      function toWordsUnsafe(bytes) {
        var res = convert(bytes, 8, 5, true);
        if (Array.isArray(res))
          return res;
      }
      function toWords(bytes) {
        var res = convert(bytes, 8, 5, true);
        if (Array.isArray(res))
          return res;
        throw new Error(res);
      }
      function fromWordsUnsafe(words) {
        var res = convert(words, 5, 8, false);
        if (Array.isArray(res))
          return res;
      }
      function fromWords(words) {
        var res = convert(words, 5, 8, false);
        if (Array.isArray(res))
          return res;
        throw new Error(res);
      }
      module2.exports = {
        decodeUnsafe,
        decode: decode11,
        encode: encode12,
        toWordsUnsafe,
        toWords,
        fromWordsUnsafe,
        fromWords
      };
    }
  });

  // node_modules/@ethersproject/providers/lib/_version.js
  var require_version13 = __commonJS({
    "node_modules/@ethersproject/providers/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "providers/5.7.2";
    }
  });

  // node_modules/elliptic/package.json
  var require_package = __commonJS({
    "node_modules/elliptic/package.json"(exports2, module2) {
      module2.exports = {
        name: "elliptic",
        version: "6.5.4",
        description: "EC cryptography",
        main: "lib/elliptic.js",
        files: [
          "lib"
        ],
        scripts: {
          lint: "eslint lib test",
          "lint:fix": "npm run lint -- --fix",
          unit: "istanbul test _mocha --reporter=spec test/index.js",
          test: "npm run lint && npm run unit",
          version: "grunt dist && git add dist/"
        },
        repository: {
          type: "git",
          url: "git@github.com:indutny/elliptic"
        },
        keywords: [
          "EC",
          "Elliptic",
          "curve",
          "Cryptography"
        ],
        author: "Fedor Indutny <fedor@indutny.com>",
        license: "MIT",
        bugs: {
          url: "https://github.com/indutny/elliptic/issues"
        },
        homepage: "https://github.com/indutny/elliptic",
        devDependencies: {
          brfs: "^2.0.2",
          coveralls: "^3.1.0",
          eslint: "^7.6.0",
          grunt: "^1.2.1",
          "grunt-browserify": "^5.3.0",
          "grunt-cli": "^1.3.2",
          "grunt-contrib-connect": "^3.0.0",
          "grunt-contrib-copy": "^1.0.0",
          "grunt-contrib-uglify": "^5.0.0",
          "grunt-mocha-istanbul": "^5.0.2",
          "grunt-saucelabs": "^9.0.1",
          istanbul: "^0.4.5",
          mocha: "^8.0.1"
        },
        dependencies: {
          "bn.js": "^4.11.9",
          brorand: "^1.1.0",
          "hash.js": "^1.0.0",
          "hmac-drbg": "^1.0.1",
          inherits: "^2.0.4",
          "minimalistic-assert": "^1.0.1",
          "minimalistic-crypto-utils": "^1.0.1"
        }
      };
    }
  });

  // node_modules/elliptic/node_modules/bn.js/lib/bn.js
  var require_bn2 = __commonJS({
    "node_modules/elliptic/node_modules/bn.js/lib/bn.js"(exports2, module2) {
      (function(module3, exports3) {
        "use strict";
        function assert(val, msg) {
          if (!val)
            throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number4, base3, endian) {
          if (BN.isBN(number4)) {
            return number4;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number4 !== null) {
            if (base3 === "le" || base3 === "be") {
              endian = base3;
              base3 = 10;
            }
            this._init(number4 || 0, base3 || 10, endian || "be");
          }
        }
        if (typeof module3 === "object") {
          module3.exports = BN;
        } else {
          exports3.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer2;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer2 = window.Buffer;
          } else {
            Buffer2 = require_buffer().Buffer;
          }
        } catch (e3) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0)
            return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0)
            return left;
          return right;
        };
        BN.prototype._init = function init(number4, base3, endian) {
          if (typeof number4 === "number") {
            return this._initNumber(number4, base3, endian);
          }
          if (typeof number4 === "object") {
            return this._initArray(number4, base3, endian);
          }
          if (base3 === "hex") {
            base3 = 16;
          }
          assert(base3 === (base3 | 0) && base3 >= 2 && base3 <= 36);
          number4 = number4.toString().replace(/\s+/g, "");
          var start = 0;
          if (number4[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number4.length) {
            if (base3 === 16) {
              this._parseHex(number4, start, endian);
            } else {
              this._parseBase(number4, base3, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base3, endian);
              }
            }
          }
        };
        BN.prototype._initNumber = function _initNumber(number4, base3, endian) {
          if (number4 < 0) {
            this.negative = 1;
            number4 = -number4;
          }
          if (number4 < 67108864) {
            this.words = [number4 & 67108863];
            this.length = 1;
          } else if (number4 < 4503599627370496) {
            this.words = [
              number4 & 67108863,
              number4 / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert(number4 < 9007199254740992);
            this.words = [
              number4 & 67108863,
              number4 / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le")
            return;
          this._initArray(this.toArray(), base3, endian);
        };
        BN.prototype._initArray = function _initArray(number4, base3, endian) {
          assert(typeof number4.length === "number");
          if (number4.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number4.length / 3);
          this.words = new Array(this.length);
          for (var i3 = 0; i3 < this.length; i3++) {
            this.words[i3] = 0;
          }
          var j, w2;
          var off = 0;
          if (endian === "be") {
            for (i3 = number4.length - 1, j = 0; i3 >= 0; i3 -= 3) {
              w2 = number4[i3] | number4[i3 - 1] << 8 | number4[i3 - 2] << 16;
              this.words[j] |= w2 << off & 67108863;
              this.words[j + 1] = w2 >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i3 = 0, j = 0; i3 < number4.length; i3 += 3) {
              w2 = number4[i3] | number4[i3 + 1] << 8 | number4[i3 + 2] << 16;
              this.words[j] |= w2 << off & 67108863;
              this.words[j + 1] = w2 >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          }
          return this.strip();
        };
        function parseHex4Bits(string4, index3) {
          var c2 = string4.charCodeAt(index3);
          if (c2 >= 65 && c2 <= 70) {
            return c2 - 55;
          } else if (c2 >= 97 && c2 <= 102) {
            return c2 - 87;
          } else {
            return c2 - 48 & 15;
          }
        }
        function parseHexByte(string4, lowerBound, index3) {
          var r3 = parseHex4Bits(string4, index3);
          if (index3 - 1 >= lowerBound) {
            r3 |= parseHex4Bits(string4, index3 - 1) << 4;
          }
          return r3;
        }
        BN.prototype._parseHex = function _parseHex(number4, start, endian) {
          this.length = Math.ceil((number4.length - start) / 6);
          this.words = new Array(this.length);
          for (var i3 = 0; i3 < this.length; i3++) {
            this.words[i3] = 0;
          }
          var off = 0;
          var j = 0;
          var w2;
          if (endian === "be") {
            for (i3 = number4.length - 1; i3 >= start; i3 -= 2) {
              w2 = parseHexByte(number4, start, i3) << off;
              this.words[j] |= w2 & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w2 >>> 26;
              } else {
                off += 8;
              }
            }
          } else {
            var parseLength = number4.length - start;
            for (i3 = parseLength % 2 === 0 ? start + 1 : start; i3 < number4.length; i3 += 2) {
              w2 = parseHexByte(number4, start, i3) << off;
              this.words[j] |= w2 & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w2 >>> 26;
              } else {
                off += 8;
              }
            }
          }
          this.strip();
        };
        function parseBase(str, start, end, mul) {
          var r3 = 0;
          var len = Math.min(str.length, end);
          for (var i3 = start; i3 < len; i3++) {
            var c2 = str.charCodeAt(i3) - 48;
            r3 *= mul;
            if (c2 >= 49) {
              r3 += c2 - 49 + 10;
            } else if (c2 >= 17) {
              r3 += c2 - 17 + 10;
            } else {
              r3 += c2;
            }
          }
          return r3;
        }
        BN.prototype._parseBase = function _parseBase(number4, base3, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base3) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base3 | 0;
          var total = number4.length - start;
          var mod2 = total % limbLen;
          var end = Math.min(total, total - mod2) + start;
          var word = 0;
          for (var i3 = start; i3 < end; i3 += limbLen) {
            word = parseBase(number4, i3, i3 + limbLen, base3);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod2 !== 0) {
            var pow = 1;
            word = parseBase(number4, i3, number4.length, base3);
            for (i3 = 0; i3 < mod2; i3++) {
              pow *= base3;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this.strip();
        };
        BN.prototype.copy = function copy2(dest) {
          dest.words = new Array(this.length);
          for (var i3 = 0; i3 < this.length; i3++) {
            dest.words[i3] = this.words[i3];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        BN.prototype.clone = function clone2() {
          var r3 = new BN(null);
          this.copy(r3);
          return r3;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype.strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        BN.prototype.inspect = function inspect() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString5(base3, padding) {
          base3 = base3 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base3 === 16 || base3 === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i3 = 0; i3 < this.length; i3++) {
              var w2 = this.words[i3];
              var word = ((w2 << off | carry) & 16777215).toString(16);
              carry = w2 >>> 24 - off & 16777215;
              if (carry !== 0 || i3 !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
              off += 2;
              if (off >= 26) {
                off -= 26;
                i3--;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base3 === (base3 | 0) && base3 >= 2 && base3 <= 36) {
            var groupSize = groupSizes[base3];
            var groupBase = groupBases[base3];
            out = "";
            var c2 = this.clone();
            c2.negative = 0;
            while (!c2.isZero()) {
              var r3 = c2.modn(groupBase).toString(base3);
              c2 = c2.idivn(groupBase);
              if (!c2.isZero()) {
                out = zeros[groupSize - r3.length] + r3 + out;
              } else {
                out = r3 + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON2() {
          return this.toString(16);
        };
        BN.prototype.toBuffer = function toBuffer(endian, length2) {
          assert(typeof Buffer2 !== "undefined");
          return this.toArrayLike(Buffer2, endian, length2);
        };
        BN.prototype.toArray = function toArray7(endian, length2) {
          return this.toArrayLike(Array, endian, length2);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length2) {
          var byteLength = this.byteLength();
          var reqLength = length2 || Math.max(1, byteLength);
          assert(byteLength <= reqLength, "byte array longer than desired length");
          assert(reqLength > 0, "Requested array length <= 0");
          this.strip();
          var littleEndian = endian === "le";
          var res = new ArrayType(reqLength);
          var b2, i3;
          var q = this.clone();
          if (!littleEndian) {
            for (i3 = 0; i3 < reqLength - byteLength; i3++) {
              res[i3] = 0;
            }
            for (i3 = 0; !q.isZero(); i3++) {
              b2 = q.andln(255);
              q.iushrn(8);
              res[reqLength - i3 - 1] = b2;
            }
          } else {
            for (i3 = 0; !q.isZero(); i3++) {
              b2 = q.andln(255);
              q.iushrn(8);
              res[i3] = b2;
            }
            for (; i3 < reqLength; i3++) {
              res[i3] = 0;
            }
          }
          return res;
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w2) {
            return 32 - Math.clz32(w2);
          };
        } else {
          BN.prototype._countBits = function _countBits(w2) {
            var t3 = w2;
            var r3 = 0;
            if (t3 >= 4096) {
              r3 += 13;
              t3 >>>= 13;
            }
            if (t3 >= 64) {
              r3 += 7;
              t3 >>>= 7;
            }
            if (t3 >= 8) {
              r3 += 4;
              t3 >>>= 4;
            }
            if (t3 >= 2) {
              r3 += 2;
              t3 >>>= 2;
            }
            return r3 + t3;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w2) {
          if (w2 === 0)
            return 26;
          var t3 = w2;
          var r3 = 0;
          if ((t3 & 8191) === 0) {
            r3 += 13;
            t3 >>>= 13;
          }
          if ((t3 & 127) === 0) {
            r3 += 7;
            t3 >>>= 7;
          }
          if ((t3 & 15) === 0) {
            r3 += 4;
            t3 >>>= 4;
          }
          if ((t3 & 3) === 0) {
            r3 += 2;
            t3 >>>= 2;
          }
          if ((t3 & 1) === 0) {
            r3++;
          }
          return r3;
        };
        BN.prototype.bitLength = function bitLength() {
          var w2 = this.words[this.length - 1];
          var hi = this._countBits(w2);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w2 = new Array(num.bitLength());
          for (var bit = 0; bit < w2.length; bit++) {
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w2[bit] = (num.words[off] & 1 << wbit) >>> wbit;
          }
          return w2;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero())
            return 0;
          var r3 = 0;
          for (var i3 = 0; i3 < this.length; i3++) {
            var b2 = this._zeroBits(this.words[i3]);
            r3 += b2;
            if (b2 !== 26)
              break;
          }
          return r3;
        };
        BN.prototype.byteLength = function byteLength() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i3 = 0; i3 < num.length; i3++) {
            this.words[i3] = this.words[i3] | num.words[i3];
          }
          return this.strip();
        };
        BN.prototype.ior = function ior(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or2(num) {
          if (this.length > num.length)
            return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length)
            return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b2;
          if (this.length > num.length) {
            b2 = num;
          } else {
            b2 = this;
          }
          for (var i3 = 0; i3 < b2.length; i3++) {
            this.words[i3] = this.words[i3] & num.words[i3];
          }
          this.length = b2.length;
          return this.strip();
        };
        BN.prototype.iand = function iand(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length)
            return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length)
            return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a2;
          var b2;
          if (this.length > num.length) {
            a2 = this;
            b2 = num;
          } else {
            a2 = num;
            b2 = this;
          }
          for (var i3 = 0; i3 < b2.length; i3++) {
            this.words[i3] = a2.words[i3] ^ b2.words[i3];
          }
          if (this !== a2) {
            for (; i3 < a2.length; i3++) {
              this.words[i3] = a2.words[i3];
            }
          }
          this.length = a2.length;
          return this.strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor(num) {
          if (this.length > num.length)
            return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length)
            return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i3 = 0; i3 < bytesNeeded; i3++) {
            this.words[i3] = ~this.words[i3] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i3] = ~this.words[i3] & 67108863 >> 26 - bitsLeft;
          }
          return this.strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) {
            this.words[off] = this.words[off] | 1 << wbit;
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }
          return this.strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r3;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r3 = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r3 = this.isub(num);
            num.negative = 1;
            return r3._normSign();
          }
          var a2, b2;
          if (this.length > num.length) {
            a2 = this;
            b2 = num;
          } else {
            a2 = num;
            b2 = this;
          }
          var carry = 0;
          for (var i3 = 0; i3 < b2.length; i3++) {
            r3 = (a2.words[i3] | 0) + (b2.words[i3] | 0) + carry;
            this.words[i3] = r3 & 67108863;
            carry = r3 >>> 26;
          }
          for (; carry !== 0 && i3 < a2.length; i3++) {
            r3 = (a2.words[i3] | 0) + carry;
            this.words[i3] = r3 & 67108863;
            carry = r3 >>> 26;
          }
          this.length = a2.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a2 !== this) {
            for (; i3 < a2.length; i3++) {
              this.words[i3] = a2.words[i3];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length)
            return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r3 = this.iadd(num);
            num.negative = 1;
            return r3._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a2, b2;
          if (cmp > 0) {
            a2 = this;
            b2 = num;
          } else {
            a2 = num;
            b2 = this;
          }
          var carry = 0;
          for (var i3 = 0; i3 < b2.length; i3++) {
            r3 = (a2.words[i3] | 0) - (b2.words[i3] | 0) + carry;
            carry = r3 >> 26;
            this.words[i3] = r3 & 67108863;
          }
          for (; carry !== 0 && i3 < a2.length; i3++) {
            r3 = (a2.words[i3] | 0) + carry;
            carry = r3 >> 26;
            this.words[i3] = r3 & 67108863;
          }
          if (carry === 0 && i3 < a2.length && a2 !== this) {
            for (; i3 < a2.length; i3++) {
              this.words[i3] = a2.words[i3];
            }
          }
          this.length = Math.max(this.length, i3);
          if (a2 !== this) {
            this.negative = 1;
          }
          return this.strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a2 = self2.words[0] | 0;
          var b2 = num.words[0] | 0;
          var r3 = a2 * b2;
          var lo = r3 & 67108863;
          var carry = r3 / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i3 = k - j | 0;
              a2 = self2.words[i3] | 0;
              b2 = num.words[j] | 0;
              r3 = a2 * b2 + rword;
              ncarry += r3 / 67108864 | 0;
              rword = r3 & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out.strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a2 = self2.words;
          var b2 = num.words;
          var o2 = out.words;
          var c2 = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a2[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a2[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a22 = a2[2] | 0;
          var al2 = a22 & 8191;
          var ah2 = a22 >>> 13;
          var a3 = a2[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a2[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a2[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a2[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a2[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a2[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a2[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b2[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b2[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b22 = b2[2] | 0;
          var bl2 = b22 & 8191;
          var bh2 = b22 >>> 13;
          var b3 = b2[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b2[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b2[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b2[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b2[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b2[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b2[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o2[0] = w0;
          o2[1] = w1;
          o2[2] = w2;
          o2[3] = w3;
          o2[4] = w4;
          o2[5] = w5;
          o2[6] = w6;
          o2[7] = w7;
          o2[8] = w8;
          o2[9] = w9;
          o2[10] = w10;
          o2[11] = w11;
          o2[12] = w12;
          o2[13] = w13;
          o2[14] = w14;
          o2[15] = w15;
          o2[16] = w16;
          o2[17] = w17;
          o2[18] = w18;
          if (c2 !== 0) {
            o2[19] = c2;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i3 = k - j;
              var a2 = self2.words[i3] | 0;
              var b2 = num.words[j] | 0;
              var r3 = a2 * b2;
              var lo = r3 & 67108863;
              ncarry = ncarry + (r3 / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out.strip();
        }
        function jumboMulTo(self2, num, out) {
          var fftm = new FFTM();
          return fftm.mulp(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y2) {
          this.x = x;
          this.y = y2;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t3 = new Array(N);
          var l2 = BN.prototype._countBits(N) - 1;
          for (var i3 = 0; i3 < N; i3++) {
            t3[i3] = this.revBin(i3, l2, N);
          }
          return t3;
        };
        FFTM.prototype.revBin = function revBin(x, l2, N) {
          if (x === 0 || x === N - 1)
            return x;
          var rb = 0;
          for (var i3 = 0; i3 < l2; i3++) {
            rb |= (x & 1) << l2 - i3 - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i3 = 0; i3 < N; i3++) {
            rtws[i3] = rws[rbt[i3]];
            itws[i3] = iws[rbt[i3]];
          }
        };
        FFTM.prototype.transform = function transform2(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s2 = 1; s2 < N; s2 <<= 1) {
            var l2 = s2 << 1;
            var rtwdf = Math.cos(2 * Math.PI / l2);
            var itwdf = Math.sin(2 * Math.PI / l2);
            for (var p2 = 0; p2 < N; p2 += l2) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s2; j++) {
                var re = rtws[p2 + j];
                var ie = itws[p2 + j];
                var ro = rtws[p2 + j + s2];
                var io = itws[p2 + j + s2];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p2 + j] = re + ro;
                itws[p2 + j] = ie + io;
                rtws[p2 + j + s2] = re - ro;
                itws[p2 + j + s2] = ie - io;
                if (j !== l2) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n3, m2) {
          var N = Math.max(m2, n3) | 1;
          var odd = N & 1;
          var i3 = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i3++;
          }
          return 1 << i3 + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1)
            return;
          for (var i3 = 0; i3 < N / 2; i3++) {
            var t3 = rws[i3];
            rws[i3] = rws[N - i3 - 1];
            rws[N - i3 - 1] = t3;
            t3 = iws[i3];
            iws[i3] = -iws[N - i3 - 1];
            iws[N - i3 - 1] = -t3;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i3 = 0; i3 < N / 2; i3++) {
            var w2 = Math.round(ws[2 * i3 + 1] / N) * 8192 + Math.round(ws[2 * i3] / N) + carry;
            ws[i3] = w2 & 67108863;
            if (w2 < 67108864) {
              carry = 0;
            } else {
              carry = w2 / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i3 = 0; i3 < len; i3++) {
            carry = carry + (ws[i3] | 0);
            rws[2 * i3] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i3 + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i3 = 2 * len; i3 < N; ++i3) {
            rws[i3] = 0;
          }
          assert(carry === 0);
          assert((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i3 = 0; i3 < N; i3++) {
            ph[i3] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y2, out) {
          var N = 2 * this.guessLen13b(x.length, y2.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y2.words, y2.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i3 = 0; i3 < N; i3++) {
            var rx = rwst[i3] * nrwst[i3] - iwst[i3] * niwst[i3];
            iwst[i3] = rwst[i3] * niwst[i3] + iwst[i3] * nrwst[i3];
            rwst[i3] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y2.negative;
          out.length = x.length + y2.length;
          return out.strip();
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          var carry = 0;
          for (var i3 = 0; i3 < this.length; i3++) {
            var w2 = (this.words[i3] | 0) * num;
            var lo = (w2 & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w2 / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i3] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i3] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w2 = toBitArray(num);
          if (w2.length === 0)
            return new BN(1);
          var res = this;
          for (var i3 = 0; i3 < w2.length; i3++, res = res.sqr()) {
            if (w2[i3] !== 0)
              break;
          }
          if (++i3 < w2.length) {
            for (var q = res.sqr(); i3 < w2.length; i3++, q = q.sqr()) {
              if (w2[i3] === 0)
                continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r3 = bits % 26;
          var s2 = (bits - r3) / 26;
          var carryMask = 67108863 >>> 26 - r3 << 26 - r3;
          var i3;
          if (r3 !== 0) {
            var carry = 0;
            for (i3 = 0; i3 < this.length; i3++) {
              var newCarry = this.words[i3] & carryMask;
              var c2 = (this.words[i3] | 0) - newCarry << r3;
              this.words[i3] = c2 | carry;
              carry = newCarry >>> 26 - r3;
            }
            if (carry) {
              this.words[i3] = carry;
              this.length++;
            }
          }
          if (s2 !== 0) {
            for (i3 = this.length - 1; i3 >= 0; i3--) {
              this.words[i3 + s2] = this.words[i3];
            }
            for (i3 = 0; i3 < s2; i3++) {
              this.words[i3] = 0;
            }
            this.length += s2;
          }
          return this.strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert(typeof bits === "number" && bits >= 0);
          var h2;
          if (hint) {
            h2 = (hint - hint % 26) / 26;
          } else {
            h2 = 0;
          }
          var r3 = bits % 26;
          var s2 = Math.min((bits - r3) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r3 << r3;
          var maskedWords = extended;
          h2 -= s2;
          h2 = Math.max(0, h2);
          if (maskedWords) {
            for (var i3 = 0; i3 < s2; i3++) {
              maskedWords.words[i3] = this.words[i3];
            }
            maskedWords.length = s2;
          }
          if (s2 === 0) {
          } else if (this.length > s2) {
            this.length -= s2;
            for (i3 = 0; i3 < this.length; i3++) {
              this.words[i3] = this.words[i3 + s2];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i3 = this.length - 1; i3 >= 0 && (carry !== 0 || i3 >= h2); i3--) {
            var word = this.words[i3] | 0;
            this.words[i3] = carry << 26 - r3 | word >>> r3;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this.strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert(typeof bit === "number" && bit >= 0);
          var r3 = bit % 26;
          var s2 = (bit - r3) / 26;
          var q = 1 << r3;
          if (this.length <= s2)
            return false;
          var w2 = this.words[s2];
          return !!(w2 & q);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r3 = bits % 26;
          var s2 = (bits - r3) / 26;
          assert(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s2) {
            return this;
          }
          if (r3 !== 0) {
            s2++;
          }
          this.length = Math.min(s2, this.length);
          if (r3 !== 0) {
            var mask = 67108863 ^ 67108863 >>> r3 << r3;
            this.words[this.length - 1] &= mask;
          }
          return this.strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          if (num < 0)
            return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i3 = 0; i3 < this.length && this.words[i3] >= 67108864; i3++) {
            this.words[i3] -= 67108864;
            if (i3 === this.length - 1) {
              this.words[i3 + 1] = 1;
            } else {
              this.words[i3 + 1]++;
            }
          }
          this.length = Math.max(this.length, i3 + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          if (num < 0)
            return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i3 = 0; i3 < this.length && this.words[i3] < 0; i3++) {
              this.words[i3] += 67108864;
              this.words[i3 + 1] -= 1;
            }
          }
          return this.strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i3;
          this._expand(len);
          var w2;
          var carry = 0;
          for (i3 = 0; i3 < num.length; i3++) {
            w2 = (this.words[i3 + shift] | 0) + carry;
            var right = (num.words[i3] | 0) * mul;
            w2 -= right & 67108863;
            carry = (w2 >> 26) - (right / 67108864 | 0);
            this.words[i3 + shift] = w2 & 67108863;
          }
          for (; i3 < this.length - shift; i3++) {
            w2 = (this.words[i3 + shift] | 0) + carry;
            carry = w2 >> 26;
            this.words[i3 + shift] = w2 & 67108863;
          }
          if (carry === 0)
            return this.strip();
          assert(carry === -1);
          carry = 0;
          for (i3 = 0; i3 < this.length; i3++) {
            w2 = -(this.words[i3] | 0) + carry;
            carry = w2 >> 26;
            this.words[i3] = w2 & 67108863;
          }
          this.negative = 1;
          return this.strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a2 = this.clone();
          var b2 = num;
          var bhi = b2.words[b2.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b2 = b2.ushln(shift);
            a2.iushln(shift);
            bhi = b2.words[b2.length - 1] | 0;
          }
          var m2 = a2.length - b2.length;
          var q;
          if (mode !== "mod") {
            q = new BN(null);
            q.length = m2 + 1;
            q.words = new Array(q.length);
            for (var i3 = 0; i3 < q.length; i3++) {
              q.words[i3] = 0;
            }
          }
          var diff = a2.clone()._ishlnsubmul(b2, 1, m2);
          if (diff.negative === 0) {
            a2 = diff;
            if (q) {
              q.words[m2] = 1;
            }
          }
          for (var j = m2 - 1; j >= 0; j--) {
            var qj = (a2.words[b2.length + j] | 0) * 67108864 + (a2.words[b2.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a2._ishlnsubmul(b2, qj, j);
            while (a2.negative !== 0) {
              qj--;
              a2.negative = 0;
              a2._ishlnsubmul(b2, 1, j);
              if (!a2.isZero()) {
                a2.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q.strip();
          }
          a2.strip();
          if (mode !== "div" && shift !== 0) {
            a2.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a2
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod2, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.iadd(num);
              }
            }
            return {
              div,
              mod: mod2
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.isub(num);
              }
            }
            return {
              div: res.div,
              mod: mod2
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod2(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero())
            return dm.div;
          var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r22 = num.andln(1);
          var cmp = mod2.cmp(half);
          if (cmp < 0 || r22 === 1 && cmp === 0)
            return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modn = function modn(num) {
          assert(num <= 67108863);
          var p2 = (1 << 26) % num;
          var acc = 0;
          for (var i3 = this.length - 1; i3 >= 0; i3--) {
            acc = (p2 * acc + (this.words[i3] | 0)) % num;
          }
          return acc;
        };
        BN.prototype.idivn = function idivn(num) {
          assert(num <= 67108863);
          var carry = 0;
          for (var i3 = this.length - 1; i3 >= 0; i3--) {
            var w2 = (this.words[i3] | 0) + carry * 67108864;
            this.words[i3] = w2 / num | 0;
            carry = w2 % num;
          }
          return this.strip();
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p2) {
          assert(p2.negative === 0);
          assert(!p2.isZero());
          var x = this;
          var y2 = p2.clone();
          if (x.negative !== 0) {
            x = x.umod(p2);
          } else {
            x = x.clone();
          }
          var A = new BN(1);
          var B = new BN(0);
          var C = new BN(0);
          var D = new BN(1);
          var g2 = 0;
          while (x.isEven() && y2.isEven()) {
            x.iushrn(1);
            y2.iushrn(1);
            ++g2;
          }
          var yp = y2.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i3 = 0, im = 1; (x.words[0] & im) === 0 && i3 < 26; ++i3, im <<= 1)
              ;
            if (i3 > 0) {
              x.iushrn(i3);
              while (i3-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y2.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
              ;
            if (j > 0) {
              y2.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y2) >= 0) {
              x.isub(y2);
              A.isub(C);
              B.isub(D);
            } else {
              y2.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y2.iushln(g2)
          };
        };
        BN.prototype._invmp = function _invmp(p2) {
          assert(p2.negative === 0);
          assert(!p2.isZero());
          var a2 = this;
          var b2 = p2.clone();
          if (a2.negative !== 0) {
            a2 = a2.umod(p2);
          } else {
            a2 = a2.clone();
          }
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b2.clone();
          while (a2.cmpn(1) > 0 && b2.cmpn(1) > 0) {
            for (var i3 = 0, im = 1; (a2.words[0] & im) === 0 && i3 < 26; ++i3, im <<= 1)
              ;
            if (i3 > 0) {
              a2.iushrn(i3);
              while (i3-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b2.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
              ;
            if (j > 0) {
              b2.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a2.cmp(b2) >= 0) {
              a2.isub(b2);
              x1.isub(x2);
            } else {
              b2.isub(a2);
              x2.isub(x1);
            }
          }
          var res;
          if (a2.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p2);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero())
            return num.abs();
          if (num.isZero())
            return this.abs();
          var a2 = this.clone();
          var b2 = num.clone();
          a2.negative = 0;
          b2.negative = 0;
          for (var shift = 0; a2.isEven() && b2.isEven(); shift++) {
            a2.iushrn(1);
            b2.iushrn(1);
          }
          do {
            while (a2.isEven()) {
              a2.iushrn(1);
            }
            while (b2.isEven()) {
              b2.iushrn(1);
            }
            var r3 = a2.cmp(b2);
            if (r3 < 0) {
              var t3 = a2;
              a2 = b2;
              b2 = t3;
            } else if (r3 === 0 || b2.cmpn(1) === 0) {
              break;
            }
            a2.isub(b2);
          } while (true);
          return b2.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert(typeof bit === "number");
          var r3 = bit % 26;
          var s2 = (bit - r3) / 26;
          var q = 1 << r3;
          if (this.length <= s2) {
            this._expand(s2 + 1);
            this.words[s2] |= q;
            return this;
          }
          var carry = q;
          for (var i3 = s2; carry !== 0 && i3 < this.length; i3++) {
            var w2 = this.words[i3] | 0;
            w2 += carry;
            carry = w2 >>> 26;
            w2 &= 67108863;
            this.words[i3] = w2;
          }
          if (carry !== 0) {
            this.words[i3] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative)
            return -1;
          if (this.negative === 0 && negative)
            return 1;
          this.strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert(num <= 67108863, "Number is too big");
            var w2 = this.words[0] | 0;
            res = w2 === num ? 0 : w2 < num ? -1 : 1;
          }
          if (this.negative !== 0)
            return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0)
            return -1;
          if (this.negative === 0 && num.negative !== 0)
            return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0)
            return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length)
            return 1;
          if (this.length < num.length)
            return -1;
          var res = 0;
          for (var i3 = this.length - 1; i3 >= 0; i3--) {
            var a2 = this.words[i3] | 0;
            var b2 = num.words[i3] | 0;
            if (a2 === b2)
              continue;
            if (a2 < b2) {
              res = -1;
            } else if (a2 > b2) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red2(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          assert(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name5, p2) {
          this.name = name5;
          this.p = new BN(p2, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r3 = num;
          var rlen;
          do {
            this.split(r3, this.tmp);
            r3 = this.imulK(r3);
            r3 = r3.iadd(this.tmp);
            rlen = r3.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r3.ucmp(this.p);
          if (cmp === 0) {
            r3.words[0] = 0;
            r3.length = 1;
          } else if (cmp > 0) {
            r3.isub(this.p);
          } else {
            if (r3.strip !== void 0) {
              r3.strip();
            } else {
              r3._strip();
            }
          }
          return r3;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i3 = 0; i3 < outLen; i3++) {
            output.words[i3] = input.words[i3];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i3 = 10; i3 < input.length; i3++) {
            var next = input.words[i3] | 0;
            input.words[i3 - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i3 - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i3 = 0; i3 < num.length; i3++) {
            var w2 = num.words[i3] | 0;
            lo += w2 * 977;
            num.words[i3] = lo & 67108863;
            lo = w2 * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i3 = 0; i3 < num.length; i3++) {
            var hi = (num.words[i3] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i3] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name5) {
          if (primes[name5])
            return primes[name5];
          var prime2;
          if (name5 === "k256") {
            prime2 = new K256();
          } else if (name5 === "p224") {
            prime2 = new P224();
          } else if (name5 === "p192") {
            prime2 = new P192();
          } else if (name5 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name5);
          }
          primes[name5] = prime2;
          return prime2;
        };
        function Red(m2) {
          if (typeof m2 === "string") {
            var prime = BN._prime(m2);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert(m2.gtn(1), "modulus must be greater than 1");
            this.m = m2;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a2) {
          assert(a2.negative === 0, "red works only with positives");
          assert(a2.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a2, b2) {
          assert((a2.negative | b2.negative) === 0, "red works only with positives");
          assert(
            a2.red && a2.red === b2.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a2) {
          if (this.prime)
            return this.prime.ireduce(a2)._forceRed(this);
          return a2.umod(this.m)._forceRed(this);
        };
        Red.prototype.neg = function neg(a2) {
          if (a2.isZero()) {
            return a2.clone();
          }
          return this.m.sub(a2)._forceRed(this);
        };
        Red.prototype.add = function add(a2, b2) {
          this._verify2(a2, b2);
          var res = a2.add(b2);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a2, b2) {
          this._verify2(a2, b2);
          var res = a2.iadd(b2);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a2, b2) {
          this._verify2(a2, b2);
          var res = a2.sub(b2);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a2, b2) {
          this._verify2(a2, b2);
          var res = a2.isub(b2);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a2, num) {
          this._verify1(a2);
          return this.imod(a2.ushln(num));
        };
        Red.prototype.imul = function imul(a2, b2) {
          this._verify2(a2, b2);
          return this.imod(a2.imul(b2));
        };
        Red.prototype.mul = function mul(a2, b2) {
          this._verify2(a2, b2);
          return this.imod(a2.mul(b2));
        };
        Red.prototype.isqr = function isqr(a2) {
          return this.imul(a2, a2.clone());
        };
        Red.prototype.sqr = function sqr(a2) {
          return this.mul(a2, a2);
        };
        Red.prototype.sqrt = function sqrt(a2) {
          if (a2.isZero())
            return a2.clone();
          var mod3 = this.m.andln(3);
          assert(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a2, pow);
          }
          var q = this.m.subn(1);
          var s2 = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s2++;
            q.iushrn(1);
          }
          assert(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c2 = this.pow(z, q);
          var r3 = this.pow(a2, q.addn(1).iushrn(1));
          var t3 = this.pow(a2, q);
          var m2 = s2;
          while (t3.cmp(one) !== 0) {
            var tmp = t3;
            for (var i3 = 0; tmp.cmp(one) !== 0; i3++) {
              tmp = tmp.redSqr();
            }
            assert(i3 < m2);
            var b2 = this.pow(c2, new BN(1).iushln(m2 - i3 - 1));
            r3 = r3.redMul(b2);
            c2 = b2.redSqr();
            t3 = t3.redMul(c2);
            m2 = i3;
          }
          return r3;
        };
        Red.prototype.invm = function invm(a2) {
          var inv = a2._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a2, num) {
          if (num.isZero())
            return new BN(1).toRed(this);
          if (num.cmpn(1) === 0)
            return a2.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a2;
          for (var i3 = 2; i3 < wnd.length; i3++) {
            wnd[i3] = this.mul(wnd[i3 - 1], a2);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i3 = num.length - 1; i3 >= 0; i3--) {
            var word = num.words[i3];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i3 !== 0 || j !== 0))
                continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r3 = num.umod(this.m);
          return r3 === num ? r3.clone() : r3;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m2) {
          Red.call(this, m2);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r3 = this.imod(num.mul(this.rinv));
          r3.red = null;
          return r3;
        };
        Mont.prototype.imul = function imul(a2, b2) {
          if (a2.isZero() || b2.isZero()) {
            a2.words[0] = 0;
            a2.length = 1;
            return a2;
          }
          var t3 = a2.imul(b2);
          var c2 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u2 = t3.isub(c2).iushrn(this.shift);
          var res = u2;
          if (u2.cmp(this.m) >= 0) {
            res = u2.isub(this.m);
          } else if (u2.cmpn(0) < 0) {
            res = u2.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a2, b2) {
          if (a2.isZero() || b2.isZero())
            return new BN(0)._forceRed(this);
          var t3 = a2.mul(b2);
          var c2 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u2 = t3.isub(c2).iushrn(this.shift);
          var res = u2;
          if (u2.cmp(this.m) >= 0) {
            res = u2.isub(this.m);
          } else if (u2.cmpn(0) < 0) {
            res = u2.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a2) {
          var res = this.imod(a2._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module2 === "undefined" || module2, exports2);
    }
  });

  // node_modules/minimalistic-crypto-utils/lib/utils.js
  var require_utils2 = __commonJS({
    "node_modules/minimalistic-crypto-utils/lib/utils.js"(exports2) {
      "use strict";
      var utils2 = exports2;
      function toArray7(msg, enc) {
        if (Array.isArray(msg))
          return msg.slice();
        if (!msg)
          return [];
        var res = [];
        if (typeof msg !== "string") {
          for (var i3 = 0; i3 < msg.length; i3++)
            res[i3] = msg[i3] | 0;
          return res;
        }
        if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (var i3 = 0; i3 < msg.length; i3 += 2)
            res.push(parseInt(msg[i3] + msg[i3 + 1], 16));
        } else {
          for (var i3 = 0; i3 < msg.length; i3++) {
            var c2 = msg.charCodeAt(i3);
            var hi = c2 >> 8;
            var lo = c2 & 255;
            if (hi)
              res.push(hi, lo);
            else
              res.push(lo);
          }
        }
        return res;
      }
      utils2.toArray = toArray7;
      function zero2(word) {
        if (word.length === 1)
          return "0" + word;
        else
          return word;
      }
      utils2.zero2 = zero2;
      function toHex3(msg) {
        var res = "";
        for (var i3 = 0; i3 < msg.length; i3++)
          res += zero2(msg[i3].toString(16));
        return res;
      }
      utils2.toHex = toHex3;
      utils2.encode = function encode12(arr, enc) {
        if (enc === "hex")
          return toHex3(arr);
        else
          return arr;
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/utils.js
  var require_utils3 = __commonJS({
    "node_modules/elliptic/lib/elliptic/utils.js"(exports2) {
      "use strict";
      var utils2 = exports2;
      var BN = require_bn2();
      var minAssert = require_minimalistic_assert();
      var minUtils = require_utils2();
      utils2.assert = minAssert;
      utils2.toArray = minUtils.toArray;
      utils2.zero2 = minUtils.zero2;
      utils2.toHex = minUtils.toHex;
      utils2.encode = minUtils.encode;
      function getNAF(num, w2, bits) {
        var naf = new Array(Math.max(num.bitLength(), bits) + 1);
        naf.fill(0);
        var ws = 1 << w2 + 1;
        var k = num.clone();
        for (var i3 = 0; i3 < naf.length; i3++) {
          var z;
          var mod2 = k.andln(ws - 1);
          if (k.isOdd()) {
            if (mod2 > (ws >> 1) - 1)
              z = (ws >> 1) - mod2;
            else
              z = mod2;
            k.isubn(z);
          } else {
            z = 0;
          }
          naf[i3] = z;
          k.iushrn(1);
        }
        return naf;
      }
      utils2.getNAF = getNAF;
      function getJSF(k1, k2) {
        var jsf = [
          [],
          []
        ];
        k1 = k1.clone();
        k2 = k2.clone();
        var d1 = 0;
        var d2 = 0;
        var m8;
        while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
          var m14 = k1.andln(3) + d1 & 3;
          var m24 = k2.andln(3) + d2 & 3;
          if (m14 === 3)
            m14 = -1;
          if (m24 === 3)
            m24 = -1;
          var u1;
          if ((m14 & 1) === 0) {
            u1 = 0;
          } else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2)
              u1 = -m14;
            else
              u1 = m14;
          }
          jsf[0].push(u1);
          var u2;
          if ((m24 & 1) === 0) {
            u2 = 0;
          } else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2)
              u2 = -m24;
            else
              u2 = m24;
          }
          jsf[1].push(u2);
          if (2 * d1 === u1 + 1)
            d1 = 1 - d1;
          if (2 * d2 === u2 + 1)
            d2 = 1 - d2;
          k1.iushrn(1);
          k2.iushrn(1);
        }
        return jsf;
      }
      utils2.getJSF = getJSF;
      function cachedProperty(obj, name5, computer) {
        var key2 = "_" + name5;
        obj.prototype[name5] = function cachedProperty2() {
          return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
        };
      }
      utils2.cachedProperty = cachedProperty;
      function parseBytes(bytes) {
        return typeof bytes === "string" ? utils2.toArray(bytes, "hex") : bytes;
      }
      utils2.parseBytes = parseBytes;
      function intFromLE(bytes) {
        return new BN(bytes, "hex", "le");
      }
      utils2.intFromLE = intFromLE;
    }
  });

  // (disabled):crypto
  var require_crypto = __commonJS({
    "(disabled):crypto"() {
    }
  });

  // node_modules/brorand/index.js
  var require_brorand = __commonJS({
    "node_modules/brorand/index.js"(exports2, module2) {
      var r3;
      module2.exports = function rand(len) {
        if (!r3)
          r3 = new Rand(null);
        return r3.generate(len);
      };
      function Rand(rand) {
        this.rand = rand;
      }
      module2.exports.Rand = Rand;
      Rand.prototype.generate = function generate3(len) {
        return this._rand(len);
      };
      Rand.prototype._rand = function _rand(n3) {
        if (this.rand.getBytes)
          return this.rand.getBytes(n3);
        var res = new Uint8Array(n3);
        for (var i3 = 0; i3 < res.length; i3++)
          res[i3] = this.rand.getByte();
        return res;
      };
      if (typeof self === "object") {
        if (self.crypto && self.crypto.getRandomValues) {
          Rand.prototype._rand = function _rand(n3) {
            var arr = new Uint8Array(n3);
            self.crypto.getRandomValues(arr);
            return arr;
          };
        } else if (self.msCrypto && self.msCrypto.getRandomValues) {
          Rand.prototype._rand = function _rand(n3) {
            var arr = new Uint8Array(n3);
            self.msCrypto.getRandomValues(arr);
            return arr;
          };
        } else if (typeof window === "object") {
          Rand.prototype._rand = function() {
            throw new Error("Not implemented yet");
          };
        }
      } else {
        try {
          crypto2 = require_crypto();
          if (typeof crypto2.randomBytes !== "function")
            throw new Error("Not supported");
          Rand.prototype._rand = function _rand(n3) {
            return crypto2.randomBytes(n3);
          };
        } catch (e3) {
        }
      }
      var crypto2;
    }
  });

  // node_modules/elliptic/lib/elliptic/curve/base.js
  var require_base = __commonJS({
    "node_modules/elliptic/lib/elliptic/curve/base.js"(exports2, module2) {
      "use strict";
      var BN = require_bn2();
      var utils2 = require_utils3();
      var getNAF = utils2.getNAF;
      var getJSF = utils2.getJSF;
      var assert = utils2.assert;
      function BaseCurve(type4, conf) {
        this.type = type4;
        this.p = new BN(conf.p, 16);
        this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
        this.zero = new BN(0).toRed(this.red);
        this.one = new BN(1).toRed(this.red);
        this.two = new BN(2).toRed(this.red);
        this.n = conf.n && new BN(conf.n, 16);
        this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
        this._wnafT1 = new Array(4);
        this._wnafT2 = new Array(4);
        this._wnafT3 = new Array(4);
        this._wnafT4 = new Array(4);
        this._bitLength = this.n ? this.n.bitLength() : 0;
        var adjustCount = this.n && this.p.div(this.n);
        if (!adjustCount || adjustCount.cmpn(100) > 0) {
          this.redN = null;
        } else {
          this._maxwellTrick = true;
          this.redN = this.n.toRed(this.red);
        }
      }
      module2.exports = BaseCurve;
      BaseCurve.prototype.point = function point() {
        throw new Error("Not implemented");
      };
      BaseCurve.prototype.validate = function validate2() {
        throw new Error("Not implemented");
      };
      BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p2, k) {
        assert(p2.precomputed);
        var doubles = p2._getDoubles();
        var naf = getNAF(k, 1, this._bitLength);
        var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
        I /= 3;
        var repr = [];
        var j;
        var nafW;
        for (j = 0; j < naf.length; j += doubles.step) {
          nafW = 0;
          for (var l2 = j + doubles.step - 1; l2 >= j; l2--)
            nafW = (nafW << 1) + naf[l2];
          repr.push(nafW);
        }
        var a2 = this.jpoint(null, null, null);
        var b2 = this.jpoint(null, null, null);
        for (var i3 = I; i3 > 0; i3--) {
          for (j = 0; j < repr.length; j++) {
            nafW = repr[j];
            if (nafW === i3)
              b2 = b2.mixedAdd(doubles.points[j]);
            else if (nafW === -i3)
              b2 = b2.mixedAdd(doubles.points[j].neg());
          }
          a2 = a2.add(b2);
        }
        return a2.toP();
      };
      BaseCurve.prototype._wnafMul = function _wnafMul(p2, k) {
        var w2 = 4;
        var nafPoints = p2._getNAFPoints(w2);
        w2 = nafPoints.wnd;
        var wnd = nafPoints.points;
        var naf = getNAF(k, w2, this._bitLength);
        var acc = this.jpoint(null, null, null);
        for (var i3 = naf.length - 1; i3 >= 0; i3--) {
          for (var l2 = 0; i3 >= 0 && naf[i3] === 0; i3--)
            l2++;
          if (i3 >= 0)
            l2++;
          acc = acc.dblp(l2);
          if (i3 < 0)
            break;
          var z = naf[i3];
          assert(z !== 0);
          if (p2.type === "affine") {
            if (z > 0)
              acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else
              acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
          } else {
            if (z > 0)
              acc = acc.add(wnd[z - 1 >> 1]);
            else
              acc = acc.add(wnd[-z - 1 >> 1].neg());
          }
        }
        return p2.type === "affine" ? acc.toP() : acc;
      };
      BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
        var wndWidth = this._wnafT1;
        var wnd = this._wnafT2;
        var naf = this._wnafT3;
        var max = 0;
        var i3;
        var j;
        var p2;
        for (i3 = 0; i3 < len; i3++) {
          p2 = points[i3];
          var nafPoints = p2._getNAFPoints(defW);
          wndWidth[i3] = nafPoints.wnd;
          wnd[i3] = nafPoints.points;
        }
        for (i3 = len - 1; i3 >= 1; i3 -= 2) {
          var a2 = i3 - 1;
          var b2 = i3;
          if (wndWidth[a2] !== 1 || wndWidth[b2] !== 1) {
            naf[a2] = getNAF(coeffs[a2], wndWidth[a2], this._bitLength);
            naf[b2] = getNAF(coeffs[b2], wndWidth[b2], this._bitLength);
            max = Math.max(naf[a2].length, max);
            max = Math.max(naf[b2].length, max);
            continue;
          }
          var comb = [
            points[a2],
            /* 1 */
            null,
            /* 3 */
            null,
            /* 5 */
            points[b2]
            /* 7 */
          ];
          if (points[a2].y.cmp(points[b2].y) === 0) {
            comb[1] = points[a2].add(points[b2]);
            comb[2] = points[a2].toJ().mixedAdd(points[b2].neg());
          } else if (points[a2].y.cmp(points[b2].y.redNeg()) === 0) {
            comb[1] = points[a2].toJ().mixedAdd(points[b2]);
            comb[2] = points[a2].add(points[b2].neg());
          } else {
            comb[1] = points[a2].toJ().mixedAdd(points[b2]);
            comb[2] = points[a2].toJ().mixedAdd(points[b2].neg());
          }
          var index3 = [
            -3,
            /* -1 -1 */
            -1,
            /* -1 0 */
            -5,
            /* -1 1 */
            -7,
            /* 0 -1 */
            0,
            /* 0 0 */
            7,
            /* 0 1 */
            5,
            /* 1 -1 */
            1,
            /* 1 0 */
            3
            /* 1 1 */
          ];
          var jsf = getJSF(coeffs[a2], coeffs[b2]);
          max = Math.max(jsf[0].length, max);
          naf[a2] = new Array(max);
          naf[b2] = new Array(max);
          for (j = 0; j < max; j++) {
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a2][j] = index3[(ja + 1) * 3 + (jb + 1)];
            naf[b2][j] = 0;
            wnd[a2] = comb;
          }
        }
        var acc = this.jpoint(null, null, null);
        var tmp = this._wnafT4;
        for (i3 = max; i3 >= 0; i3--) {
          var k = 0;
          while (i3 >= 0) {
            var zero = true;
            for (j = 0; j < len; j++) {
              tmp[j] = naf[j][i3] | 0;
              if (tmp[j] !== 0)
                zero = false;
            }
            if (!zero)
              break;
            k++;
            i3--;
          }
          if (i3 >= 0)
            k++;
          acc = acc.dblp(k);
          if (i3 < 0)
            break;
          for (j = 0; j < len; j++) {
            var z = tmp[j];
            p2;
            if (z === 0)
              continue;
            else if (z > 0)
              p2 = wnd[j][z - 1 >> 1];
            else if (z < 0)
              p2 = wnd[j][-z - 1 >> 1].neg();
            if (p2.type === "affine")
              acc = acc.mixedAdd(p2);
            else
              acc = acc.add(p2);
          }
        }
        for (i3 = 0; i3 < len; i3++)
          wnd[i3] = null;
        if (jacobianResult)
          return acc;
        else
          return acc.toP();
      };
      function BasePoint(curve, type4) {
        this.curve = curve;
        this.type = type4;
        this.precomputed = null;
      }
      BaseCurve.BasePoint = BasePoint;
      BasePoint.prototype.eq = function eq() {
        throw new Error("Not implemented");
      };
      BasePoint.prototype.validate = function validate2() {
        return this.curve.validate(this);
      };
      BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
        bytes = utils2.toArray(bytes, enc);
        var len = this.p.byteLength();
        if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
          if (bytes[0] === 6)
            assert(bytes[bytes.length - 1] % 2 === 0);
          else if (bytes[0] === 7)
            assert(bytes[bytes.length - 1] % 2 === 1);
          var res = this.point(
            bytes.slice(1, 1 + len),
            bytes.slice(1 + len, 1 + 2 * len)
          );
          return res;
        } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
          return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
        }
        throw new Error("Unknown point format");
      };
      BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
        return this.encode(enc, true);
      };
      BasePoint.prototype._encode = function _encode(compact) {
        var len = this.curve.p.byteLength();
        var x = this.getX().toArray("be", len);
        if (compact)
          return [this.getY().isEven() ? 2 : 3].concat(x);
        return [4].concat(x, this.getY().toArray("be", len));
      };
      BasePoint.prototype.encode = function encode12(enc, compact) {
        return utils2.encode(this._encode(compact), enc);
      };
      BasePoint.prototype.precompute = function precompute(power) {
        if (this.precomputed)
          return this;
        var precomputed = {
          doubles: null,
          naf: null,
          beta: null
        };
        precomputed.naf = this._getNAFPoints(8);
        precomputed.doubles = this._getDoubles(4, power);
        precomputed.beta = this._getBeta();
        this.precomputed = precomputed;
        return this;
      };
      BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
        if (!this.precomputed)
          return false;
        var doubles = this.precomputed.doubles;
        if (!doubles)
          return false;
        return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
      };
      BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
        if (this.precomputed && this.precomputed.doubles)
          return this.precomputed.doubles;
        var doubles = [this];
        var acc = this;
        for (var i3 = 0; i3 < power; i3 += step) {
          for (var j = 0; j < step; j++)
            acc = acc.dbl();
          doubles.push(acc);
        }
        return {
          step,
          points: doubles
        };
      };
      BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
        if (this.precomputed && this.precomputed.naf)
          return this.precomputed.naf;
        var res = [this];
        var max = (1 << wnd) - 1;
        var dbl = max === 1 ? null : this.dbl();
        for (var i3 = 1; i3 < max; i3++)
          res[i3] = res[i3 - 1].add(dbl);
        return {
          wnd,
          points: res
        };
      };
      BasePoint.prototype._getBeta = function _getBeta() {
        return null;
      };
      BasePoint.prototype.dblp = function dblp(k) {
        var r3 = this;
        for (var i3 = 0; i3 < k; i3++)
          r3 = r3.dbl();
        return r3;
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/curve/short.js
  var require_short = __commonJS({
    "node_modules/elliptic/lib/elliptic/curve/short.js"(exports2, module2) {
      "use strict";
      var utils2 = require_utils3();
      var BN = require_bn2();
      var inherits2 = require_inherits_browser();
      var Base2 = require_base();
      var assert = utils2.assert;
      function ShortCurve(conf) {
        Base2.call(this, "short", conf);
        this.a = new BN(conf.a, 16).toRed(this.red);
        this.b = new BN(conf.b, 16).toRed(this.red);
        this.tinv = this.two.redInvm();
        this.zeroA = this.a.fromRed().cmpn(0) === 0;
        this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
        this.endo = this._getEndomorphism(conf);
        this._endoWnafT1 = new Array(4);
        this._endoWnafT2 = new Array(4);
      }
      inherits2(ShortCurve, Base2);
      module2.exports = ShortCurve;
      ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
        if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
          return;
        var beta;
        var lambda;
        if (conf.beta) {
          beta = new BN(conf.beta, 16).toRed(this.red);
        } else {
          var betas = this._getEndoRoots(this.p);
          beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
          beta = beta.toRed(this.red);
        }
        if (conf.lambda) {
          lambda = new BN(conf.lambda, 16);
        } else {
          var lambdas = this._getEndoRoots(this.n);
          if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
            lambda = lambdas[0];
          } else {
            lambda = lambdas[1];
            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
          }
        }
        var basis;
        if (conf.basis) {
          basis = conf.basis.map(function(vec) {
            return {
              a: new BN(vec.a, 16),
              b: new BN(vec.b, 16)
            };
          });
        } else {
          basis = this._getEndoBasis(lambda);
        }
        return {
          beta,
          lambda,
          basis
        };
      };
      ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
        var red2 = num === this.p ? this.red : BN.mont(num);
        var tinv = new BN(2).toRed(red2).redInvm();
        var ntinv = tinv.redNeg();
        var s2 = new BN(3).toRed(red2).redNeg().redSqrt().redMul(tinv);
        var l1 = ntinv.redAdd(s2).fromRed();
        var l2 = ntinv.redSub(s2).fromRed();
        return [l1, l2];
      };
      ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
        var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
        var u2 = lambda;
        var v2 = this.n.clone();
        var x1 = new BN(1);
        var y1 = new BN(0);
        var x2 = new BN(0);
        var y2 = new BN(1);
        var a0;
        var b0;
        var a1;
        var b1;
        var a2;
        var b2;
        var prevR;
        var i3 = 0;
        var r3;
        var x;
        while (u2.cmpn(0) !== 0) {
          var q = v2.div(u2);
          r3 = v2.sub(q.mul(u2));
          x = x2.sub(q.mul(x1));
          var y3 = y2.sub(q.mul(y1));
          if (!a1 && r3.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r3.neg();
            b1 = x;
          } else if (a1 && ++i3 === 2) {
            break;
          }
          prevR = r3;
          v2 = u2;
          u2 = r3;
          x2 = x1;
          x1 = x;
          y2 = y1;
          y1 = y3;
        }
        a2 = r3.neg();
        b2 = x;
        var len1 = a1.sqr().add(b1.sqr());
        var len2 = a2.sqr().add(b2.sqr());
        if (len2.cmp(len1) >= 0) {
          a2 = a0;
          b2 = b0;
        }
        if (a1.negative) {
          a1 = a1.neg();
          b1 = b1.neg();
        }
        if (a2.negative) {
          a2 = a2.neg();
          b2 = b2.neg();
        }
        return [
          { a: a1, b: b1 },
          { a: a2, b: b2 }
        ];
      };
      ShortCurve.prototype._endoSplit = function _endoSplit(k) {
        var basis = this.endo.basis;
        var v1 = basis[0];
        var v2 = basis[1];
        var c1 = v2.b.mul(k).divRound(this.n);
        var c2 = v1.b.neg().mul(k).divRound(this.n);
        var p1 = c1.mul(v1.a);
        var p2 = c2.mul(v2.a);
        var q1 = c1.mul(v1.b);
        var q2 = c2.mul(v2.b);
        var k1 = k.sub(p1).sub(p2);
        var k2 = q1.add(q2).neg();
        return { k1, k2 };
      };
      ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
        x = new BN(x, 16);
        if (!x.red)
          x = x.toRed(this.red);
        var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
        var y3 = y2.redSqrt();
        if (y3.redSqr().redSub(y2).cmp(this.zero) !== 0)
          throw new Error("invalid point");
        var isOdd = y3.fromRed().isOdd();
        if (odd && !isOdd || !odd && isOdd)
          y3 = y3.redNeg();
        return this.point(x, y3);
      };
      ShortCurve.prototype.validate = function validate2(point) {
        if (point.inf)
          return true;
        var x = point.x;
        var y2 = point.y;
        var ax = this.a.redMul(x);
        var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
        return y2.redSqr().redISub(rhs).cmpn(0) === 0;
      };
      ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
        var npoints = this._endoWnafT1;
        var ncoeffs = this._endoWnafT2;
        for (var i3 = 0; i3 < points.length; i3++) {
          var split = this._endoSplit(coeffs[i3]);
          var p2 = points[i3];
          var beta = p2._getBeta();
          if (split.k1.negative) {
            split.k1.ineg();
            p2 = p2.neg(true);
          }
          if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
          }
          npoints[i3 * 2] = p2;
          npoints[i3 * 2 + 1] = beta;
          ncoeffs[i3 * 2] = split.k1;
          ncoeffs[i3 * 2 + 1] = split.k2;
        }
        var res = this._wnafMulAdd(1, npoints, ncoeffs, i3 * 2, jacobianResult);
        for (var j = 0; j < i3 * 2; j++) {
          npoints[j] = null;
          ncoeffs[j] = null;
        }
        return res;
      };
      function Point(curve, x, y2, isRed) {
        Base2.BasePoint.call(this, curve, "affine");
        if (x === null && y2 === null) {
          this.x = null;
          this.y = null;
          this.inf = true;
        } else {
          this.x = new BN(x, 16);
          this.y = new BN(y2, 16);
          if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
          }
          if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
          if (!this.y.red)
            this.y = this.y.toRed(this.curve.red);
          this.inf = false;
        }
      }
      inherits2(Point, Base2.BasePoint);
      ShortCurve.prototype.point = function point(x, y2, isRed) {
        return new Point(this, x, y2, isRed);
      };
      ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red2) {
        return Point.fromJSON(this, obj, red2);
      };
      Point.prototype._getBeta = function _getBeta() {
        if (!this.curve.endo)
          return;
        var pre = this.precomputed;
        if (pre && pre.beta)
          return pre.beta;
        var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
        if (pre) {
          var curve = this.curve;
          var endoMul = function(p2) {
            return curve.point(p2.x.redMul(curve.endo.beta), p2.y);
          };
          pre.beta = beta;
          beta.precomputed = {
            beta: null,
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(endoMul)
            }
          };
        }
        return beta;
      };
      Point.prototype.toJSON = function toJSON2() {
        if (!this.precomputed)
          return [this.x, this.y];
        return [this.x, this.y, this.precomputed && {
          doubles: this.precomputed.doubles && {
            step: this.precomputed.doubles.step,
            points: this.precomputed.doubles.points.slice(1)
          },
          naf: this.precomputed.naf && {
            wnd: this.precomputed.naf.wnd,
            points: this.precomputed.naf.points.slice(1)
          }
        }];
      };
      Point.fromJSON = function fromJSON(curve, obj, red2) {
        if (typeof obj === "string")
          obj = JSON.parse(obj);
        var res = curve.point(obj[0], obj[1], red2);
        if (!obj[2])
          return res;
        function obj2point(obj2) {
          return curve.point(obj2[0], obj2[1], red2);
        }
        var pre = obj[2];
        res.precomputed = {
          beta: null,
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [res].concat(pre.doubles.points.map(obj2point))
          },
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [res].concat(pre.naf.points.map(obj2point))
          }
        };
        return res;
      };
      Point.prototype.inspect = function inspect() {
        if (this.isInfinity())
          return "<EC Point Infinity>";
        return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
      };
      Point.prototype.isInfinity = function isInfinity() {
        return this.inf;
      };
      Point.prototype.add = function add(p2) {
        if (this.inf)
          return p2;
        if (p2.inf)
          return this;
        if (this.eq(p2))
          return this.dbl();
        if (this.neg().eq(p2))
          return this.curve.point(null, null);
        if (this.x.cmp(p2.x) === 0)
          return this.curve.point(null, null);
        var c2 = this.y.redSub(p2.y);
        if (c2.cmpn(0) !== 0)
          c2 = c2.redMul(this.x.redSub(p2.x).redInvm());
        var nx = c2.redSqr().redISub(this.x).redISub(p2.x);
        var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };
      Point.prototype.dbl = function dbl() {
        if (this.inf)
          return this;
        var ys1 = this.y.redAdd(this.y);
        if (ys1.cmpn(0) === 0)
          return this.curve.point(null, null);
        var a2 = this.curve.a;
        var x2 = this.x.redSqr();
        var dyinv = ys1.redInvm();
        var c2 = x2.redAdd(x2).redIAdd(x2).redIAdd(a2).redMul(dyinv);
        var nx = c2.redSqr().redISub(this.x.redAdd(this.x));
        var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };
      Point.prototype.getX = function getX() {
        return this.x.fromRed();
      };
      Point.prototype.getY = function getY() {
        return this.y.fromRed();
      };
      Point.prototype.mul = function mul(k) {
        k = new BN(k, 16);
        if (this.isInfinity())
          return this;
        else if (this._hasDoubles(k))
          return this.curve._fixedNafMul(this, k);
        else if (this.curve.endo)
          return this.curve._endoWnafMulAdd([this], [k]);
        else
          return this.curve._wnafMul(this, k);
      };
      Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo)
          return this.curve._endoWnafMulAdd(points, coeffs);
        else
          return this.curve._wnafMulAdd(1, points, coeffs, 2);
      };
      Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo)
          return this.curve._endoWnafMulAdd(points, coeffs, true);
        else
          return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
      };
      Point.prototype.eq = function eq(p2) {
        return this === p2 || this.inf === p2.inf && (this.inf || this.x.cmp(p2.x) === 0 && this.y.cmp(p2.y) === 0);
      };
      Point.prototype.neg = function neg(_precompute) {
        if (this.inf)
          return this;
        var res = this.curve.point(this.x, this.y.redNeg());
        if (_precompute && this.precomputed) {
          var pre = this.precomputed;
          var negate = function(p2) {
            return p2.neg();
          };
          res.precomputed = {
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(negate)
            }
          };
        }
        return res;
      };
      Point.prototype.toJ = function toJ() {
        if (this.inf)
          return this.curve.jpoint(null, null, null);
        var res = this.curve.jpoint(this.x, this.y, this.curve.one);
        return res;
      };
      function JPoint(curve, x, y2, z) {
        Base2.BasePoint.call(this, curve, "jacobian");
        if (x === null && y2 === null && z === null) {
          this.x = this.curve.one;
          this.y = this.curve.one;
          this.z = new BN(0);
        } else {
          this.x = new BN(x, 16);
          this.y = new BN(y2, 16);
          this.z = new BN(z, 16);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
      }
      inherits2(JPoint, Base2.BasePoint);
      ShortCurve.prototype.jpoint = function jpoint(x, y2, z) {
        return new JPoint(this, x, y2, z);
      };
      JPoint.prototype.toP = function toP() {
        if (this.isInfinity())
          return this.curve.point(null, null);
        var zinv = this.z.redInvm();
        var zinv2 = zinv.redSqr();
        var ax = this.x.redMul(zinv2);
        var ay = this.y.redMul(zinv2).redMul(zinv);
        return this.curve.point(ax, ay);
      };
      JPoint.prototype.neg = function neg() {
        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
      };
      JPoint.prototype.add = function add(p2) {
        if (this.isInfinity())
          return p2;
        if (p2.isInfinity())
          return this;
        var pz2 = p2.z.redSqr();
        var z2 = this.z.redSqr();
        var u1 = this.x.redMul(pz2);
        var u2 = p2.x.redMul(z2);
        var s1 = this.y.redMul(pz2.redMul(p2.z));
        var s2 = p2.y.redMul(z2.redMul(this.z));
        var h2 = u1.redSub(u2);
        var r3 = s1.redSub(s2);
        if (h2.cmpn(0) === 0) {
          if (r3.cmpn(0) !== 0)
            return this.curve.jpoint(null, null, null);
          else
            return this.dbl();
        }
        var h22 = h2.redSqr();
        var h3 = h22.redMul(h2);
        var v2 = u1.redMul(h22);
        var nx = r3.redSqr().redIAdd(h3).redISub(v2).redISub(v2);
        var ny = r3.redMul(v2.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(p2.z).redMul(h2);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.mixedAdd = function mixedAdd(p2) {
        if (this.isInfinity())
          return p2.toJ();
        if (p2.isInfinity())
          return this;
        var z2 = this.z.redSqr();
        var u1 = this.x;
        var u2 = p2.x.redMul(z2);
        var s1 = this.y;
        var s2 = p2.y.redMul(z2).redMul(this.z);
        var h2 = u1.redSub(u2);
        var r3 = s1.redSub(s2);
        if (h2.cmpn(0) === 0) {
          if (r3.cmpn(0) !== 0)
            return this.curve.jpoint(null, null, null);
          else
            return this.dbl();
        }
        var h22 = h2.redSqr();
        var h3 = h22.redMul(h2);
        var v2 = u1.redMul(h22);
        var nx = r3.redSqr().redIAdd(h3).redISub(v2).redISub(v2);
        var ny = r3.redMul(v2.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(h2);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.dblp = function dblp(pow) {
        if (pow === 0)
          return this;
        if (this.isInfinity())
          return this;
        if (!pow)
          return this.dbl();
        var i3;
        if (this.curve.zeroA || this.curve.threeA) {
          var r3 = this;
          for (i3 = 0; i3 < pow; i3++)
            r3 = r3.dbl();
          return r3;
        }
        var a2 = this.curve.a;
        var tinv = this.curve.tinv;
        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();
        var jyd = jy.redAdd(jy);
        for (i3 = 0; i3 < pow; i3++) {
          var jx2 = jx.redSqr();
          var jyd2 = jyd.redSqr();
          var jyd4 = jyd2.redSqr();
          var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a2.redMul(jz4));
          var t1 = jx.redMul(jyd2);
          var nx = c2.redSqr().redISub(t1.redAdd(t1));
          var t22 = t1.redISub(nx);
          var dny = c2.redMul(t22);
          dny = dny.redIAdd(dny).redISub(jyd4);
          var nz = jyd.redMul(jz);
          if (i3 + 1 < pow)
            jz4 = jz4.redMul(jyd4);
          jx = nx;
          jz = nz;
          jyd = dny;
        }
        return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
      };
      JPoint.prototype.dbl = function dbl() {
        if (this.isInfinity())
          return this;
        if (this.curve.zeroA)
          return this._zeroDbl();
        else if (this.curve.threeA)
          return this._threeDbl();
        else
          return this._dbl();
      };
      JPoint.prototype._zeroDbl = function _zeroDbl() {
        var nx;
        var ny;
        var nz;
        if (this.zOne) {
          var xx = this.x.redSqr();
          var yy = this.y.redSqr();
          var yyyy = yy.redSqr();
          var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s2 = s2.redIAdd(s2);
          var m2 = xx.redAdd(xx).redIAdd(xx);
          var t3 = m2.redSqr().redISub(s2).redISub(s2);
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          nx = t3;
          ny = m2.redMul(s2.redISub(t3)).redISub(yyyy8);
          nz = this.y.redAdd(this.y);
        } else {
          var a2 = this.x.redSqr();
          var b2 = this.y.redSqr();
          var c2 = b2.redSqr();
          var d2 = this.x.redAdd(b2).redSqr().redISub(a2).redISub(c2);
          d2 = d2.redIAdd(d2);
          var e3 = a2.redAdd(a2).redIAdd(a2);
          var f2 = e3.redSqr();
          var c8 = c2.redIAdd(c2);
          c8 = c8.redIAdd(c8);
          c8 = c8.redIAdd(c8);
          nx = f2.redISub(d2).redISub(d2);
          ny = e3.redMul(d2.redISub(nx)).redISub(c8);
          nz = this.y.redMul(this.z);
          nz = nz.redIAdd(nz);
        }
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype._threeDbl = function _threeDbl() {
        var nx;
        var ny;
        var nz;
        if (this.zOne) {
          var xx = this.x.redSqr();
          var yy = this.y.redSqr();
          var yyyy = yy.redSqr();
          var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s2 = s2.redIAdd(s2);
          var m2 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
          var t3 = m2.redSqr().redISub(s2).redISub(s2);
          nx = t3;
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          ny = m2.redMul(s2.redISub(t3)).redISub(yyyy8);
          nz = this.y.redAdd(this.y);
        } else {
          var delta = this.z.redSqr();
          var gamma = this.y.redSqr();
          var beta = this.x.redMul(gamma);
          var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
          alpha = alpha.redAdd(alpha).redIAdd(alpha);
          var beta4 = beta.redIAdd(beta);
          beta4 = beta4.redIAdd(beta4);
          var beta8 = beta4.redAdd(beta4);
          nx = alpha.redSqr().redISub(beta8);
          nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
          var ggamma8 = gamma.redSqr();
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
        }
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype._dbl = function _dbl() {
        var a2 = this.curve.a;
        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();
        var jx2 = jx.redSqr();
        var jy2 = jy.redSqr();
        var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a2.redMul(jz4));
        var jxd4 = jx.redAdd(jx);
        jxd4 = jxd4.redIAdd(jxd4);
        var t1 = jxd4.redMul(jy2);
        var nx = c2.redSqr().redISub(t1.redAdd(t1));
        var t22 = t1.redISub(nx);
        var jyd8 = jy2.redSqr();
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        var ny = c2.redMul(t22).redISub(jyd8);
        var nz = jy.redAdd(jy).redMul(jz);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.trpl = function trpl() {
        if (!this.curve.zeroA)
          return this.dbl().add(this);
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var zz = this.z.redSqr();
        var yyyy = yy.redSqr();
        var m2 = xx.redAdd(xx).redIAdd(xx);
        var mm = m2.redSqr();
        var e3 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        e3 = e3.redIAdd(e3);
        e3 = e3.redAdd(e3).redIAdd(e3);
        e3 = e3.redISub(mm);
        var ee = e3.redSqr();
        var t3 = yyyy.redIAdd(yyyy);
        t3 = t3.redIAdd(t3);
        t3 = t3.redIAdd(t3);
        t3 = t3.redIAdd(t3);
        var u2 = m2.redIAdd(e3).redSqr().redISub(mm).redISub(ee).redISub(t3);
        var yyu4 = yy.redMul(u2);
        yyu4 = yyu4.redIAdd(yyu4);
        yyu4 = yyu4.redIAdd(yyu4);
        var nx = this.x.redMul(ee).redISub(yyu4);
        nx = nx.redIAdd(nx);
        nx = nx.redIAdd(nx);
        var ny = this.y.redMul(u2.redMul(t3.redISub(u2)).redISub(e3.redMul(ee)));
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        var nz = this.z.redAdd(e3).redSqr().redISub(zz).redISub(ee);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.mul = function mul(k, kbase) {
        k = new BN(k, kbase);
        return this.curve._wnafMul(this, k);
      };
      JPoint.prototype.eq = function eq(p2) {
        if (p2.type === "affine")
          return this.eq(p2.toJ());
        if (this === p2)
          return true;
        var z2 = this.z.redSqr();
        var pz2 = p2.z.redSqr();
        if (this.x.redMul(pz2).redISub(p2.x.redMul(z2)).cmpn(0) !== 0)
          return false;
        var z3 = z2.redMul(this.z);
        var pz3 = pz2.redMul(p2.z);
        return this.y.redMul(pz3).redISub(p2.y.redMul(z3)).cmpn(0) === 0;
      };
      JPoint.prototype.eqXToP = function eqXToP(x) {
        var zs = this.z.redSqr();
        var rx = x.toRed(this.curve.red).redMul(zs);
        if (this.x.cmp(rx) === 0)
          return true;
        var xc = x.clone();
        var t3 = this.curve.redN.redMul(zs);
        for (; ; ) {
          xc.iadd(this.curve.n);
          if (xc.cmp(this.curve.p) >= 0)
            return false;
          rx.redIAdd(t3);
          if (this.x.cmp(rx) === 0)
            return true;
        }
      };
      JPoint.prototype.inspect = function inspect() {
        if (this.isInfinity())
          return "<EC JPoint Infinity>";
        return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
      };
      JPoint.prototype.isInfinity = function isInfinity() {
        return this.z.cmpn(0) === 0;
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/curve/mont.js
  var require_mont = __commonJS({
    "node_modules/elliptic/lib/elliptic/curve/mont.js"(exports2, module2) {
      "use strict";
      var BN = require_bn2();
      var inherits2 = require_inherits_browser();
      var Base2 = require_base();
      var utils2 = require_utils3();
      function MontCurve(conf) {
        Base2.call(this, "mont", conf);
        this.a = new BN(conf.a, 16).toRed(this.red);
        this.b = new BN(conf.b, 16).toRed(this.red);
        this.i4 = new BN(4).toRed(this.red).redInvm();
        this.two = new BN(2).toRed(this.red);
        this.a24 = this.i4.redMul(this.a.redAdd(this.two));
      }
      inherits2(MontCurve, Base2);
      module2.exports = MontCurve;
      MontCurve.prototype.validate = function validate2(point) {
        var x = point.normalize().x;
        var x2 = x.redSqr();
        var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
        var y2 = rhs.redSqrt();
        return y2.redSqr().cmp(rhs) === 0;
      };
      function Point(curve, x, z) {
        Base2.BasePoint.call(this, curve, "projective");
        if (x === null && z === null) {
          this.x = this.curve.one;
          this.z = this.curve.zero;
        } else {
          this.x = new BN(x, 16);
          this.z = new BN(z, 16);
          if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
          if (!this.z.red)
            this.z = this.z.toRed(this.curve.red);
        }
      }
      inherits2(Point, Base2.BasePoint);
      MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
        return this.point(utils2.toArray(bytes, enc), 1);
      };
      MontCurve.prototype.point = function point(x, z) {
        return new Point(this, x, z);
      };
      MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
        return Point.fromJSON(this, obj);
      };
      Point.prototype.precompute = function precompute() {
      };
      Point.prototype._encode = function _encode() {
        return this.getX().toArray("be", this.curve.p.byteLength());
      };
      Point.fromJSON = function fromJSON(curve, obj) {
        return new Point(curve, obj[0], obj[1] || curve.one);
      };
      Point.prototype.inspect = function inspect() {
        if (this.isInfinity())
          return "<EC Point Infinity>";
        return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
      };
      Point.prototype.isInfinity = function isInfinity() {
        return this.z.cmpn(0) === 0;
      };
      Point.prototype.dbl = function dbl() {
        var a2 = this.x.redAdd(this.z);
        var aa = a2.redSqr();
        var b2 = this.x.redSub(this.z);
        var bb = b2.redSqr();
        var c2 = aa.redSub(bb);
        var nx = aa.redMul(bb);
        var nz = c2.redMul(bb.redAdd(this.curve.a24.redMul(c2)));
        return this.curve.point(nx, nz);
      };
      Point.prototype.add = function add() {
        throw new Error("Not supported on Montgomery curve");
      };
      Point.prototype.diffAdd = function diffAdd(p2, diff) {
        var a2 = this.x.redAdd(this.z);
        var b2 = this.x.redSub(this.z);
        var c2 = p2.x.redAdd(p2.z);
        var d2 = p2.x.redSub(p2.z);
        var da = d2.redMul(a2);
        var cb = c2.redMul(b2);
        var nx = diff.z.redMul(da.redAdd(cb).redSqr());
        var nz = diff.x.redMul(da.redISub(cb).redSqr());
        return this.curve.point(nx, nz);
      };
      Point.prototype.mul = function mul(k) {
        var t3 = k.clone();
        var a2 = this;
        var b2 = this.curve.point(null, null);
        var c2 = this;
        for (var bits = []; t3.cmpn(0) !== 0; t3.iushrn(1))
          bits.push(t3.andln(1));
        for (var i3 = bits.length - 1; i3 >= 0; i3--) {
          if (bits[i3] === 0) {
            a2 = a2.diffAdd(b2, c2);
            b2 = b2.dbl();
          } else {
            b2 = a2.diffAdd(b2, c2);
            a2 = a2.dbl();
          }
        }
        return b2;
      };
      Point.prototype.mulAdd = function mulAdd() {
        throw new Error("Not supported on Montgomery curve");
      };
      Point.prototype.jumlAdd = function jumlAdd() {
        throw new Error("Not supported on Montgomery curve");
      };
      Point.prototype.eq = function eq(other) {
        return this.getX().cmp(other.getX()) === 0;
      };
      Point.prototype.normalize = function normalize2() {
        this.x = this.x.redMul(this.z.redInvm());
        this.z = this.curve.one;
        return this;
      };
      Point.prototype.getX = function getX() {
        this.normalize();
        return this.x.fromRed();
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/curve/edwards.js
  var require_edwards = __commonJS({
    "node_modules/elliptic/lib/elliptic/curve/edwards.js"(exports2, module2) {
      "use strict";
      var utils2 = require_utils3();
      var BN = require_bn2();
      var inherits2 = require_inherits_browser();
      var Base2 = require_base();
      var assert = utils2.assert;
      function EdwardsCurve(conf) {
        this.twisted = (conf.a | 0) !== 1;
        this.mOneA = this.twisted && (conf.a | 0) === -1;
        this.extended = this.mOneA;
        Base2.call(this, "edwards", conf);
        this.a = new BN(conf.a, 16).umod(this.red.m);
        this.a = this.a.toRed(this.red);
        this.c = new BN(conf.c, 16).toRed(this.red);
        this.c2 = this.c.redSqr();
        this.d = new BN(conf.d, 16).toRed(this.red);
        this.dd = this.d.redAdd(this.d);
        assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
        this.oneC = (conf.c | 0) === 1;
      }
      inherits2(EdwardsCurve, Base2);
      module2.exports = EdwardsCurve;
      EdwardsCurve.prototype._mulA = function _mulA(num) {
        if (this.mOneA)
          return num.redNeg();
        else
          return this.a.redMul(num);
      };
      EdwardsCurve.prototype._mulC = function _mulC(num) {
        if (this.oneC)
          return num;
        else
          return this.c.redMul(num);
      };
      EdwardsCurve.prototype.jpoint = function jpoint(x, y2, z, t3) {
        return this.point(x, y2, z, t3);
      };
      EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
        x = new BN(x, 16);
        if (!x.red)
          x = x.toRed(this.red);
        var x2 = x.redSqr();
        var rhs = this.c2.redSub(this.a.redMul(x2));
        var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
        var y2 = rhs.redMul(lhs.redInvm());
        var y3 = y2.redSqrt();
        if (y3.redSqr().redSub(y2).cmp(this.zero) !== 0)
          throw new Error("invalid point");
        var isOdd = y3.fromRed().isOdd();
        if (odd && !isOdd || !odd && isOdd)
          y3 = y3.redNeg();
        return this.point(x, y3);
      };
      EdwardsCurve.prototype.pointFromY = function pointFromY(y2, odd) {
        y2 = new BN(y2, 16);
        if (!y2.red)
          y2 = y2.toRed(this.red);
        var y22 = y2.redSqr();
        var lhs = y22.redSub(this.c2);
        var rhs = y22.redMul(this.d).redMul(this.c2).redSub(this.a);
        var x2 = lhs.redMul(rhs.redInvm());
        if (x2.cmp(this.zero) === 0) {
          if (odd)
            throw new Error("invalid point");
          else
            return this.point(this.zero, y2);
        }
        var x = x2.redSqrt();
        if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
          throw new Error("invalid point");
        if (x.fromRed().isOdd() !== odd)
          x = x.redNeg();
        return this.point(x, y2);
      };
      EdwardsCurve.prototype.validate = function validate2(point) {
        if (point.isInfinity())
          return true;
        point.normalize();
        var x2 = point.x.redSqr();
        var y2 = point.y.redSqr();
        var lhs = x2.redMul(this.a).redAdd(y2);
        var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
        return lhs.cmp(rhs) === 0;
      };
      function Point(curve, x, y2, z, t3) {
        Base2.BasePoint.call(this, curve, "projective");
        if (x === null && y2 === null && z === null) {
          this.x = this.curve.zero;
          this.y = this.curve.one;
          this.z = this.curve.one;
          this.t = this.curve.zero;
          this.zOne = true;
        } else {
          this.x = new BN(x, 16);
          this.y = new BN(y2, 16);
          this.z = z ? new BN(z, 16) : this.curve.one;
          this.t = t3 && new BN(t3, 16);
          if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
          if (!this.y.red)
            this.y = this.y.toRed(this.curve.red);
          if (!this.z.red)
            this.z = this.z.toRed(this.curve.red);
          if (this.t && !this.t.red)
            this.t = this.t.toRed(this.curve.red);
          this.zOne = this.z === this.curve.one;
          if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne)
              this.t = this.t.redMul(this.z.redInvm());
          }
        }
      }
      inherits2(Point, Base2.BasePoint);
      EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
        return Point.fromJSON(this, obj);
      };
      EdwardsCurve.prototype.point = function point(x, y2, z, t3) {
        return new Point(this, x, y2, z, t3);
      };
      Point.fromJSON = function fromJSON(curve, obj) {
        return new Point(curve, obj[0], obj[1], obj[2]);
      };
      Point.prototype.inspect = function inspect() {
        if (this.isInfinity())
          return "<EC Point Infinity>";
        return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
      };
      Point.prototype.isInfinity = function isInfinity() {
        return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
      };
      Point.prototype._extDbl = function _extDbl() {
        var a2 = this.x.redSqr();
        var b2 = this.y.redSqr();
        var c2 = this.z.redSqr();
        c2 = c2.redIAdd(c2);
        var d2 = this.curve._mulA(a2);
        var e3 = this.x.redAdd(this.y).redSqr().redISub(a2).redISub(b2);
        var g2 = d2.redAdd(b2);
        var f2 = g2.redSub(c2);
        var h2 = d2.redSub(b2);
        var nx = e3.redMul(f2);
        var ny = g2.redMul(h2);
        var nt = e3.redMul(h2);
        var nz = f2.redMul(g2);
        return this.curve.point(nx, ny, nz, nt);
      };
      Point.prototype._projDbl = function _projDbl() {
        var b2 = this.x.redAdd(this.y).redSqr();
        var c2 = this.x.redSqr();
        var d2 = this.y.redSqr();
        var nx;
        var ny;
        var nz;
        var e3;
        var h2;
        var j;
        if (this.curve.twisted) {
          e3 = this.curve._mulA(c2);
          var f2 = e3.redAdd(d2);
          if (this.zOne) {
            nx = b2.redSub(c2).redSub(d2).redMul(f2.redSub(this.curve.two));
            ny = f2.redMul(e3.redSub(d2));
            nz = f2.redSqr().redSub(f2).redSub(f2);
          } else {
            h2 = this.z.redSqr();
            j = f2.redSub(h2).redISub(h2);
            nx = b2.redSub(c2).redISub(d2).redMul(j);
            ny = f2.redMul(e3.redSub(d2));
            nz = f2.redMul(j);
          }
        } else {
          e3 = c2.redAdd(d2);
          h2 = this.curve._mulC(this.z).redSqr();
          j = e3.redSub(h2).redSub(h2);
          nx = this.curve._mulC(b2.redISub(e3)).redMul(j);
          ny = this.curve._mulC(e3).redMul(c2.redISub(d2));
          nz = e3.redMul(j);
        }
        return this.curve.point(nx, ny, nz);
      };
      Point.prototype.dbl = function dbl() {
        if (this.isInfinity())
          return this;
        if (this.curve.extended)
          return this._extDbl();
        else
          return this._projDbl();
      };
      Point.prototype._extAdd = function _extAdd(p2) {
        var a2 = this.y.redSub(this.x).redMul(p2.y.redSub(p2.x));
        var b2 = this.y.redAdd(this.x).redMul(p2.y.redAdd(p2.x));
        var c2 = this.t.redMul(this.curve.dd).redMul(p2.t);
        var d2 = this.z.redMul(p2.z.redAdd(p2.z));
        var e3 = b2.redSub(a2);
        var f2 = d2.redSub(c2);
        var g2 = d2.redAdd(c2);
        var h2 = b2.redAdd(a2);
        var nx = e3.redMul(f2);
        var ny = g2.redMul(h2);
        var nt = e3.redMul(h2);
        var nz = f2.redMul(g2);
        return this.curve.point(nx, ny, nz, nt);
      };
      Point.prototype._projAdd = function _projAdd(p2) {
        var a2 = this.z.redMul(p2.z);
        var b2 = a2.redSqr();
        var c2 = this.x.redMul(p2.x);
        var d2 = this.y.redMul(p2.y);
        var e3 = this.curve.d.redMul(c2).redMul(d2);
        var f2 = b2.redSub(e3);
        var g2 = b2.redAdd(e3);
        var tmp = this.x.redAdd(this.y).redMul(p2.x.redAdd(p2.y)).redISub(c2).redISub(d2);
        var nx = a2.redMul(f2).redMul(tmp);
        var ny;
        var nz;
        if (this.curve.twisted) {
          ny = a2.redMul(g2).redMul(d2.redSub(this.curve._mulA(c2)));
          nz = f2.redMul(g2);
        } else {
          ny = a2.redMul(g2).redMul(d2.redSub(c2));
          nz = this.curve._mulC(f2).redMul(g2);
        }
        return this.curve.point(nx, ny, nz);
      };
      Point.prototype.add = function add(p2) {
        if (this.isInfinity())
          return p2;
        if (p2.isInfinity())
          return this;
        if (this.curve.extended)
          return this._extAdd(p2);
        else
          return this._projAdd(p2);
      };
      Point.prototype.mul = function mul(k) {
        if (this._hasDoubles(k))
          return this.curve._fixedNafMul(this, k);
        else
          return this.curve._wnafMul(this, k);
      };
      Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
        return this.curve._wnafMulAdd(1, [this, p2], [k1, k2], 2, false);
      };
      Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
        return this.curve._wnafMulAdd(1, [this, p2], [k1, k2], 2, true);
      };
      Point.prototype.normalize = function normalize2() {
        if (this.zOne)
          return this;
        var zi = this.z.redInvm();
        this.x = this.x.redMul(zi);
        this.y = this.y.redMul(zi);
        if (this.t)
          this.t = this.t.redMul(zi);
        this.z = this.curve.one;
        this.zOne = true;
        return this;
      };
      Point.prototype.neg = function neg() {
        return this.curve.point(
          this.x.redNeg(),
          this.y,
          this.z,
          this.t && this.t.redNeg()
        );
      };
      Point.prototype.getX = function getX() {
        this.normalize();
        return this.x.fromRed();
      };
      Point.prototype.getY = function getY() {
        this.normalize();
        return this.y.fromRed();
      };
      Point.prototype.eq = function eq(other) {
        return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
      };
      Point.prototype.eqXToP = function eqXToP(x) {
        var rx = x.toRed(this.curve.red).redMul(this.z);
        if (this.x.cmp(rx) === 0)
          return true;
        var xc = x.clone();
        var t3 = this.curve.redN.redMul(this.z);
        for (; ; ) {
          xc.iadd(this.curve.n);
          if (xc.cmp(this.curve.p) >= 0)
            return false;
          rx.redIAdd(t3);
          if (this.x.cmp(rx) === 0)
            return true;
        }
      };
      Point.prototype.toP = Point.prototype.normalize;
      Point.prototype.mixedAdd = Point.prototype.add;
    }
  });

  // node_modules/elliptic/lib/elliptic/curve/index.js
  var require_curve = __commonJS({
    "node_modules/elliptic/lib/elliptic/curve/index.js"(exports2) {
      "use strict";
      var curve = exports2;
      curve.base = require_base();
      curve.short = require_short();
      curve.mont = require_mont();
      curve.edwards = require_edwards();
    }
  });

  // node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
  var require_secp256k1 = __commonJS({
    "node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"(exports2, module2) {
      module2.exports = {
        doubles: {
          step: 4,
          points: [
            [
              "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
              "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
            ],
            [
              "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
              "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
            ],
            [
              "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
              "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
            ],
            [
              "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
              "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
            ],
            [
              "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
              "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
            ],
            [
              "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
              "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
            ],
            [
              "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
              "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
            ],
            [
              "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
              "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
            ],
            [
              "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
              "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
            ],
            [
              "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
              "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
            ],
            [
              "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
              "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
            ],
            [
              "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
              "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
            ],
            [
              "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
              "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
            ],
            [
              "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
              "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
            ],
            [
              "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
              "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
            ],
            [
              "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
              "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
            ],
            [
              "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
              "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
            ],
            [
              "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
              "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
            ],
            [
              "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
              "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
            ],
            [
              "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
              "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
            ],
            [
              "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
              "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
            ],
            [
              "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
              "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
            ],
            [
              "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
              "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
            ],
            [
              "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
              "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
            ],
            [
              "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
              "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
            ],
            [
              "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
              "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
            ],
            [
              "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
              "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
            ],
            [
              "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
              "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
            ],
            [
              "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
              "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
            ],
            [
              "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
              "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
            ],
            [
              "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
              "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
            ],
            [
              "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
              "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
            ],
            [
              "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
              "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
            ],
            [
              "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
              "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
            ],
            [
              "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
              "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
            ],
            [
              "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
              "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
            ],
            [
              "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
              "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
            ],
            [
              "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
              "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
            ],
            [
              "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
              "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
            ],
            [
              "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
              "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
            ],
            [
              "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
              "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
            ],
            [
              "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
              "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
            ],
            [
              "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
              "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
            ],
            [
              "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
              "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
            ],
            [
              "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
              "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
            ],
            [
              "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
              "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
            ],
            [
              "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
              "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
            ],
            [
              "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
              "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
            ],
            [
              "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
              "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
            ],
            [
              "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
              "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
            ],
            [
              "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
              "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
            ],
            [
              "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
              "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
            ],
            [
              "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
              "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
            ],
            [
              "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
              "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
            ],
            [
              "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
              "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
            ],
            [
              "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
              "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
            ],
            [
              "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
              "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
            ],
            [
              "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
              "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
            ],
            [
              "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
              "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
            ],
            [
              "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
              "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
            ],
            [
              "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
              "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
            ],
            [
              "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
              "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
            ],
            [
              "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
              "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
            ],
            [
              "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
              "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
            ],
            [
              "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
              "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
            ]
          ]
        },
        naf: {
          wnd: 7,
          points: [
            [
              "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
              "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
            ],
            [
              "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
              "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
            ],
            [
              "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
              "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
            ],
            [
              "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
              "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
            ],
            [
              "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
              "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
            ],
            [
              "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
              "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
            ],
            [
              "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
              "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
            ],
            [
              "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
              "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
            ],
            [
              "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
              "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
            ],
            [
              "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
              "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
            ],
            [
              "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
              "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
            ],
            [
              "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
              "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
            ],
            [
              "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
              "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
            ],
            [
              "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
              "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
            ],
            [
              "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
              "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
            ],
            [
              "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
              "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
            ],
            [
              "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
              "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
            ],
            [
              "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
              "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
            ],
            [
              "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
              "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
            ],
            [
              "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
              "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
            ],
            [
              "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
              "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
            ],
            [
              "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
              "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
            ],
            [
              "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
              "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
            ],
            [
              "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
              "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
            ],
            [
              "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
              "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
            ],
            [
              "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
              "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
            ],
            [
              "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
              "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
            ],
            [
              "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
              "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
            ],
            [
              "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
              "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
            ],
            [
              "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
              "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
            ],
            [
              "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
              "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
            ],
            [
              "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
              "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
            ],
            [
              "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
              "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
            ],
            [
              "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
              "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
            ],
            [
              "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
              "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
            ],
            [
              "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
              "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
            ],
            [
              "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
              "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
            ],
            [
              "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
              "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
            ],
            [
              "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
              "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
            ],
            [
              "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
              "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
            ],
            [
              "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
              "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
            ],
            [
              "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
              "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
            ],
            [
              "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
              "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
            ],
            [
              "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
              "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
            ],
            [
              "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
              "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
            ],
            [
              "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
              "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
            ],
            [
              "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
              "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
            ],
            [
              "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
              "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
            ],
            [
              "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
              "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
            ],
            [
              "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
              "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
            ],
            [
              "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
              "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
            ],
            [
              "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
              "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
            ],
            [
              "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
              "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
            ],
            [
              "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
              "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
            ],
            [
              "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
              "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
            ],
            [
              "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
              "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
            ],
            [
              "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
              "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
            ],
            [
              "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
              "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
            ],
            [
              "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
              "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
            ],
            [
              "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
              "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
            ],
            [
              "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
              "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
            ],
            [
              "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
              "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
            ],
            [
              "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
              "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
            ],
            [
              "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
              "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
            ],
            [
              "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
              "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
            ],
            [
              "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
              "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
            ],
            [
              "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
              "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
            ],
            [
              "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
              "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
            ],
            [
              "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
              "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
            ],
            [
              "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
              "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
            ],
            [
              "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
              "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
            ],
            [
              "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
              "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
            ],
            [
              "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
              "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
            ],
            [
              "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
              "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
            ],
            [
              "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
              "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
            ],
            [
              "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
              "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
            ],
            [
              "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
              "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
            ],
            [
              "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
              "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
            ],
            [
              "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
              "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
            ],
            [
              "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
              "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
            ],
            [
              "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
              "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
            ],
            [
              "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
              "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
            ],
            [
              "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
              "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
            ],
            [
              "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
              "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
            ],
            [
              "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
              "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
            ],
            [
              "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
              "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
            ],
            [
              "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
              "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
            ],
            [
              "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
              "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
            ],
            [
              "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
              "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
            ],
            [
              "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
              "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
            ],
            [
              "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
              "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
            ],
            [
              "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
              "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
            ],
            [
              "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
              "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
            ],
            [
              "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
              "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
            ],
            [
              "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
              "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
            ],
            [
              "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
              "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
            ],
            [
              "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
              "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
            ],
            [
              "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
              "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
            ],
            [
              "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
              "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
            ],
            [
              "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
              "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
            ],
            [
              "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
              "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
            ],
            [
              "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
              "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
            ],
            [
              "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
              "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
            ],
            [
              "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
              "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
            ],
            [
              "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
              "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
            ],
            [
              "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
              "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
            ],
            [
              "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
              "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
            ],
            [
              "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
              "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
            ],
            [
              "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
              "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
            ],
            [
              "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
              "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
            ],
            [
              "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
              "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
            ],
            [
              "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
              "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
            ],
            [
              "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
              "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
            ],
            [
              "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
              "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
            ],
            [
              "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
              "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
            ],
            [
              "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
              "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
            ],
            [
              "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
              "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
            ],
            [
              "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
              "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
            ],
            [
              "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
              "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
            ],
            [
              "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
              "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
            ],
            [
              "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
              "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
            ],
            [
              "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
              "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
            ],
            [
              "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
              "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
            ],
            [
              "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
              "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
            ],
            [
              "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
              "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
            ],
            [
              "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
              "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
            ],
            [
              "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
              "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
            ]
          ]
        }
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/curves.js
  var require_curves = __commonJS({
    "node_modules/elliptic/lib/elliptic/curves.js"(exports2) {
      "use strict";
      var curves = exports2;
      var hash = require_hash();
      var curve = require_curve();
      var utils2 = require_utils3();
      var assert = utils2.assert;
      function PresetCurve(options) {
        if (options.type === "short")
          this.curve = new curve.short(options);
        else if (options.type === "edwards")
          this.curve = new curve.edwards(options);
        else
          this.curve = new curve.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;
        assert(this.g.validate(), "Invalid curve");
        assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
      }
      curves.PresetCurve = PresetCurve;
      function defineCurve(name5, options) {
        Object.defineProperty(curves, name5, {
          configurable: true,
          enumerable: true,
          get: function() {
            var curve2 = new PresetCurve(options);
            Object.defineProperty(curves, name5, {
              configurable: true,
              enumerable: true,
              value: curve2
            });
            return curve2;
          }
        });
      }
      defineCurve("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: hash.sha256,
        gRed: false,
        g: [
          "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
          "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
        ]
      });
      defineCurve("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: hash.sha256,
        gRed: false,
        g: [
          "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
          "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
        ]
      });
      defineCurve("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: hash.sha256,
        gRed: false,
        g: [
          "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
          "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
        ]
      });
      defineCurve("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: hash.sha384,
        gRed: false,
        g: [
          "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
          "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
        ]
      });
      defineCurve("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: hash.sha512,
        gRed: false,
        g: [
          "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
          "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
        ]
      });
      defineCurve("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash.sha256,
        gRed: false,
        g: [
          "9"
        ]
      });
      defineCurve("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        // -121665 * (121666^(-1)) (mod P)
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash.sha256,
        gRed: false,
        g: [
          "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
          // 4/5
          "6666666666666666666666666666666666666666666666666666666666666658"
        ]
      });
      var pre;
      try {
        pre = require_secp256k1();
      } catch (e3) {
        pre = void 0;
      }
      defineCurve("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: hash.sha256,
        // Precomputed endomorphism
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
          {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
          },
          {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
          }
        ],
        gRed: false,
        g: [
          "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
          "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
          pre
        ]
      });
    }
  });

  // node_modules/hmac-drbg/lib/hmac-drbg.js
  var require_hmac_drbg = __commonJS({
    "node_modules/hmac-drbg/lib/hmac-drbg.js"(exports2, module2) {
      "use strict";
      var hash = require_hash();
      var utils2 = require_utils2();
      var assert = require_minimalistic_assert();
      function HmacDRBG(options) {
        if (!(this instanceof HmacDRBG))
          return new HmacDRBG(options);
        this.hash = options.hash;
        this.predResist = !!options.predResist;
        this.outLen = this.hash.outSize;
        this.minEntropy = options.minEntropy || this.hash.hmacStrength;
        this._reseed = null;
        this.reseedInterval = null;
        this.K = null;
        this.V = null;
        var entropy = utils2.toArray(options.entropy, options.entropyEnc || "hex");
        var nonce = utils2.toArray(options.nonce, options.nonceEnc || "hex");
        var pers = utils2.toArray(options.pers, options.persEnc || "hex");
        assert(
          entropy.length >= this.minEntropy / 8,
          "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
        );
        this._init(entropy, nonce, pers);
      }
      module2.exports = HmacDRBG;
      HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
        var seed2 = entropy.concat(nonce).concat(pers);
        this.K = new Array(this.outLen / 8);
        this.V = new Array(this.outLen / 8);
        for (var i3 = 0; i3 < this.V.length; i3++) {
          this.K[i3] = 0;
          this.V[i3] = 1;
        }
        this._update(seed2);
        this._reseed = 1;
        this.reseedInterval = 281474976710656;
      };
      HmacDRBG.prototype._hmac = function hmac() {
        return new hash.hmac(this.hash, this.K);
      };
      HmacDRBG.prototype._update = function update(seed2) {
        var kmac = this._hmac().update(this.V).update([0]);
        if (seed2)
          kmac = kmac.update(seed2);
        this.K = kmac.digest();
        this.V = this._hmac().update(this.V).digest();
        if (!seed2)
          return;
        this.K = this._hmac().update(this.V).update([1]).update(seed2).digest();
        this.V = this._hmac().update(this.V).digest();
      };
      HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
        if (typeof entropyEnc !== "string") {
          addEnc = add;
          add = entropyEnc;
          entropyEnc = null;
        }
        entropy = utils2.toArray(entropy, entropyEnc);
        add = utils2.toArray(add, addEnc);
        assert(
          entropy.length >= this.minEntropy / 8,
          "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
        );
        this._update(entropy.concat(add || []));
        this._reseed = 1;
      };
      HmacDRBG.prototype.generate = function generate3(len, enc, add, addEnc) {
        if (this._reseed > this.reseedInterval)
          throw new Error("Reseed is required");
        if (typeof enc !== "string") {
          addEnc = add;
          add = enc;
          enc = null;
        }
        if (add) {
          add = utils2.toArray(add, addEnc || "hex");
          this._update(add);
        }
        var temp = [];
        while (temp.length < len) {
          this.V = this._hmac().update(this.V).digest();
          temp = temp.concat(this.V);
        }
        var res = temp.slice(0, len);
        this._update(add);
        this._reseed++;
        return utils2.encode(res, enc);
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/ec/key.js
  var require_key = __commonJS({
    "node_modules/elliptic/lib/elliptic/ec/key.js"(exports2, module2) {
      "use strict";
      var BN = require_bn2();
      var utils2 = require_utils3();
      var assert = utils2.assert;
      function KeyPair(ec, options) {
        this.ec = ec;
        this.priv = null;
        this.pub = null;
        if (options.priv)
          this._importPrivate(options.priv, options.privEnc);
        if (options.pub)
          this._importPublic(options.pub, options.pubEnc);
      }
      module2.exports = KeyPair;
      KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
        if (pub instanceof KeyPair)
          return pub;
        return new KeyPair(ec, {
          pub,
          pubEnc: enc
        });
      };
      KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
        if (priv instanceof KeyPair)
          return priv;
        return new KeyPair(ec, {
          priv,
          privEnc: enc
        });
      };
      KeyPair.prototype.validate = function validate2() {
        var pub = this.getPublic();
        if (pub.isInfinity())
          return { result: false, reason: "Invalid public key" };
        if (!pub.validate())
          return { result: false, reason: "Public key is not a point" };
        if (!pub.mul(this.ec.curve.n).isInfinity())
          return { result: false, reason: "Public key * N != O" };
        return { result: true, reason: null };
      };
      KeyPair.prototype.getPublic = function getPublic(compact, enc) {
        if (typeof compact === "string") {
          enc = compact;
          compact = null;
        }
        if (!this.pub)
          this.pub = this.ec.g.mul(this.priv);
        if (!enc)
          return this.pub;
        return this.pub.encode(enc, compact);
      };
      KeyPair.prototype.getPrivate = function getPrivate(enc) {
        if (enc === "hex")
          return this.priv.toString(16, 2);
        else
          return this.priv;
      };
      KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
        this.priv = new BN(key2, enc || 16);
        this.priv = this.priv.umod(this.ec.curve.n);
      };
      KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
        if (key2.x || key2.y) {
          if (this.ec.curve.type === "mont") {
            assert(key2.x, "Need x coordinate");
          } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
            assert(key2.x && key2.y, "Need both x and y coordinate");
          }
          this.pub = this.ec.curve.point(key2.x, key2.y);
          return;
        }
        this.pub = this.ec.curve.decodePoint(key2, enc);
      };
      KeyPair.prototype.derive = function derive(pub) {
        if (!pub.validate()) {
          assert(pub.validate(), "public point not validated");
        }
        return pub.mul(this.priv).getX();
      };
      KeyPair.prototype.sign = function sign(msg, enc, options) {
        return this.ec.sign(msg, this, enc, options);
      };
      KeyPair.prototype.verify = function verify(msg, signature) {
        return this.ec.verify(msg, signature, this);
      };
      KeyPair.prototype.inspect = function inspect() {
        return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/ec/signature.js
  var require_signature = __commonJS({
    "node_modules/elliptic/lib/elliptic/ec/signature.js"(exports2, module2) {
      "use strict";
      var BN = require_bn2();
      var utils2 = require_utils3();
      var assert = utils2.assert;
      function Signature(options, enc) {
        if (options instanceof Signature)
          return options;
        if (this._importDER(options, enc))
          return;
        assert(options.r && options.s, "Signature without r or s");
        this.r = new BN(options.r, 16);
        this.s = new BN(options.s, 16);
        if (options.recoveryParam === void 0)
          this.recoveryParam = null;
        else
          this.recoveryParam = options.recoveryParam;
      }
      module2.exports = Signature;
      function Position() {
        this.place = 0;
      }
      function getLength(buf2, p2) {
        var initial = buf2[p2.place++];
        if (!(initial & 128)) {
          return initial;
        }
        var octetLen = initial & 15;
        if (octetLen === 0 || octetLen > 4) {
          return false;
        }
        var val = 0;
        for (var i3 = 0, off = p2.place; i3 < octetLen; i3++, off++) {
          val <<= 8;
          val |= buf2[off];
          val >>>= 0;
        }
        if (val <= 127) {
          return false;
        }
        p2.place = off;
        return val;
      }
      function rmPadding(buf2) {
        var i3 = 0;
        var len = buf2.length - 1;
        while (!buf2[i3] && !(buf2[i3 + 1] & 128) && i3 < len) {
          i3++;
        }
        if (i3 === 0) {
          return buf2;
        }
        return buf2.slice(i3);
      }
      Signature.prototype._importDER = function _importDER(data, enc) {
        data = utils2.toArray(data, enc);
        var p2 = new Position();
        if (data[p2.place++] !== 48) {
          return false;
        }
        var len = getLength(data, p2);
        if (len === false) {
          return false;
        }
        if (len + p2.place !== data.length) {
          return false;
        }
        if (data[p2.place++] !== 2) {
          return false;
        }
        var rlen = getLength(data, p2);
        if (rlen === false) {
          return false;
        }
        var r3 = data.slice(p2.place, rlen + p2.place);
        p2.place += rlen;
        if (data[p2.place++] !== 2) {
          return false;
        }
        var slen = getLength(data, p2);
        if (slen === false) {
          return false;
        }
        if (data.length !== slen + p2.place) {
          return false;
        }
        var s2 = data.slice(p2.place, slen + p2.place);
        if (r3[0] === 0) {
          if (r3[1] & 128) {
            r3 = r3.slice(1);
          } else {
            return false;
          }
        }
        if (s2[0] === 0) {
          if (s2[1] & 128) {
            s2 = s2.slice(1);
          } else {
            return false;
          }
        }
        this.r = new BN(r3);
        this.s = new BN(s2);
        this.recoveryParam = null;
        return true;
      };
      function constructLength(arr, len) {
        if (len < 128) {
          arr.push(len);
          return;
        }
        var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
        arr.push(octets | 128);
        while (--octets) {
          arr.push(len >>> (octets << 3) & 255);
        }
        arr.push(len);
      }
      Signature.prototype.toDER = function toDER(enc) {
        var r3 = this.r.toArray();
        var s2 = this.s.toArray();
        if (r3[0] & 128)
          r3 = [0].concat(r3);
        if (s2[0] & 128)
          s2 = [0].concat(s2);
        r3 = rmPadding(r3);
        s2 = rmPadding(s2);
        while (!s2[0] && !(s2[1] & 128)) {
          s2 = s2.slice(1);
        }
        var arr = [2];
        constructLength(arr, r3.length);
        arr = arr.concat(r3);
        arr.push(2);
        constructLength(arr, s2.length);
        var backHalf = arr.concat(s2);
        var res = [48];
        constructLength(res, backHalf.length);
        res = res.concat(backHalf);
        return utils2.encode(res, enc);
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/ec/index.js
  var require_ec = __commonJS({
    "node_modules/elliptic/lib/elliptic/ec/index.js"(exports2, module2) {
      "use strict";
      var BN = require_bn2();
      var HmacDRBG = require_hmac_drbg();
      var utils2 = require_utils3();
      var curves = require_curves();
      var rand = require_brorand();
      var assert = utils2.assert;
      var KeyPair = require_key();
      var Signature = require_signature();
      function EC(options) {
        if (!(this instanceof EC))
          return new EC(options);
        if (typeof options === "string") {
          assert(
            Object.prototype.hasOwnProperty.call(curves, options),
            "Unknown curve " + options
          );
          options = curves[options];
        }
        if (options instanceof curves.PresetCurve)
          options = { curve: options };
        this.curve = options.curve.curve;
        this.n = this.curve.n;
        this.nh = this.n.ushrn(1);
        this.g = this.curve.g;
        this.g = options.curve.g;
        this.g.precompute(options.curve.n.bitLength() + 1);
        this.hash = options.hash || options.curve.hash;
      }
      module2.exports = EC;
      EC.prototype.keyPair = function keyPair(options) {
        return new KeyPair(this, options);
      };
      EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
        return KeyPair.fromPrivate(this, priv, enc);
      };
      EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
        return KeyPair.fromPublic(this, pub, enc);
      };
      EC.prototype.genKeyPair = function genKeyPair(options) {
        if (!options)
          options = {};
        var drbg = new HmacDRBG({
          hash: this.hash,
          pers: options.pers,
          persEnc: options.persEnc || "utf8",
          entropy: options.entropy || rand(this.hash.hmacStrength),
          entropyEnc: options.entropy && options.entropyEnc || "utf8",
          nonce: this.n.toArray()
        });
        var bytes = this.n.byteLength();
        var ns2 = this.n.sub(new BN(2));
        for (; ; ) {
          var priv = new BN(drbg.generate(bytes));
          if (priv.cmp(ns2) > 0)
            continue;
          priv.iaddn(1);
          return this.keyFromPrivate(priv);
        }
      };
      EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
        var delta = msg.byteLength() * 8 - this.n.bitLength();
        if (delta > 0)
          msg = msg.ushrn(delta);
        if (!truncOnly && msg.cmp(this.n) >= 0)
          return msg.sub(this.n);
        else
          return msg;
      };
      EC.prototype.sign = function sign(msg, key2, enc, options) {
        if (typeof enc === "object") {
          options = enc;
          enc = null;
        }
        if (!options)
          options = {};
        key2 = this.keyFromPrivate(key2, enc);
        msg = this._truncateToN(new BN(msg, 16));
        var bytes = this.n.byteLength();
        var bkey = key2.getPrivate().toArray("be", bytes);
        var nonce = msg.toArray("be", bytes);
        var drbg = new HmacDRBG({
          hash: this.hash,
          entropy: bkey,
          nonce,
          pers: options.pers,
          persEnc: options.persEnc || "utf8"
        });
        var ns1 = this.n.sub(new BN(1));
        for (var iter = 0; ; iter++) {
          var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
          k = this._truncateToN(k, true);
          if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
            continue;
          var kp = this.g.mul(k);
          if (kp.isInfinity())
            continue;
          var kpX = kp.getX();
          var r3 = kpX.umod(this.n);
          if (r3.cmpn(0) === 0)
            continue;
          var s2 = k.invm(this.n).mul(r3.mul(key2.getPrivate()).iadd(msg));
          s2 = s2.umod(this.n);
          if (s2.cmpn(0) === 0)
            continue;
          var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r3) !== 0 ? 2 : 0);
          if (options.canonical && s2.cmp(this.nh) > 0) {
            s2 = this.n.sub(s2);
            recoveryParam ^= 1;
          }
          return new Signature({ r: r3, s: s2, recoveryParam });
        }
      };
      EC.prototype.verify = function verify(msg, signature, key2, enc) {
        msg = this._truncateToN(new BN(msg, 16));
        key2 = this.keyFromPublic(key2, enc);
        signature = new Signature(signature, "hex");
        var r3 = signature.r;
        var s2 = signature.s;
        if (r3.cmpn(1) < 0 || r3.cmp(this.n) >= 0)
          return false;
        if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0)
          return false;
        var sinv = s2.invm(this.n);
        var u1 = sinv.mul(msg).umod(this.n);
        var u2 = sinv.mul(r3).umod(this.n);
        var p2;
        if (!this.curve._maxwellTrick) {
          p2 = this.g.mulAdd(u1, key2.getPublic(), u2);
          if (p2.isInfinity())
            return false;
          return p2.getX().umod(this.n).cmp(r3) === 0;
        }
        p2 = this.g.jmulAdd(u1, key2.getPublic(), u2);
        if (p2.isInfinity())
          return false;
        return p2.eqXToP(r3);
      };
      EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
        assert((3 & j) === j, "The recovery param is more than two bits");
        signature = new Signature(signature, enc);
        var n3 = this.n;
        var e3 = new BN(msg);
        var r3 = signature.r;
        var s2 = signature.s;
        var isYOdd = j & 1;
        var isSecondKey = j >> 1;
        if (r3.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
          throw new Error("Unable to find sencond key candinate");
        if (isSecondKey)
          r3 = this.curve.pointFromX(r3.add(this.curve.n), isYOdd);
        else
          r3 = this.curve.pointFromX(r3, isYOdd);
        var rInv = signature.r.invm(n3);
        var s1 = n3.sub(e3).mul(rInv).umod(n3);
        var s22 = s2.mul(rInv).umod(n3);
        return this.g.mulAdd(s1, r3, s22);
      };
      EC.prototype.getKeyRecoveryParam = function(e3, signature, Q, enc) {
        signature = new Signature(signature, enc);
        if (signature.recoveryParam !== null)
          return signature.recoveryParam;
        for (var i3 = 0; i3 < 4; i3++) {
          var Qprime;
          try {
            Qprime = this.recoverPubKey(e3, signature, i3);
          } catch (e4) {
            continue;
          }
          if (Qprime.eq(Q))
            return i3;
        }
        throw new Error("Unable to find valid recovery factor");
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/eddsa/key.js
  var require_key2 = __commonJS({
    "node_modules/elliptic/lib/elliptic/eddsa/key.js"(exports2, module2) {
      "use strict";
      var utils2 = require_utils3();
      var assert = utils2.assert;
      var parseBytes = utils2.parseBytes;
      var cachedProperty = utils2.cachedProperty;
      function KeyPair(eddsa, params) {
        this.eddsa = eddsa;
        this._secret = parseBytes(params.secret);
        if (eddsa.isPoint(params.pub))
          this._pub = params.pub;
        else
          this._pubBytes = parseBytes(params.pub);
      }
      KeyPair.fromPublic = function fromPublic(eddsa, pub) {
        if (pub instanceof KeyPair)
          return pub;
        return new KeyPair(eddsa, { pub });
      };
      KeyPair.fromSecret = function fromSecret(eddsa, secret) {
        if (secret instanceof KeyPair)
          return secret;
        return new KeyPair(eddsa, { secret });
      };
      KeyPair.prototype.secret = function secret() {
        return this._secret;
      };
      cachedProperty(KeyPair, "pubBytes", function pubBytes() {
        return this.eddsa.encodePoint(this.pub());
      });
      cachedProperty(KeyPair, "pub", function pub() {
        if (this._pubBytes)
          return this.eddsa.decodePoint(this._pubBytes);
        return this.eddsa.g.mul(this.priv());
      });
      cachedProperty(KeyPair, "privBytes", function privBytes() {
        var eddsa = this.eddsa;
        var hash = this.hash();
        var lastIx = eddsa.encodingLength - 1;
        var a2 = hash.slice(0, eddsa.encodingLength);
        a2[0] &= 248;
        a2[lastIx] &= 127;
        a2[lastIx] |= 64;
        return a2;
      });
      cachedProperty(KeyPair, "priv", function priv() {
        return this.eddsa.decodeInt(this.privBytes());
      });
      cachedProperty(KeyPair, "hash", function hash() {
        return this.eddsa.hash().update(this.secret()).digest();
      });
      cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
        return this.hash().slice(this.eddsa.encodingLength);
      });
      KeyPair.prototype.sign = function sign(message) {
        assert(this._secret, "KeyPair can only verify");
        return this.eddsa.sign(message, this);
      };
      KeyPair.prototype.verify = function verify(message, sig) {
        return this.eddsa.verify(message, sig, this);
      };
      KeyPair.prototype.getSecret = function getSecret(enc) {
        assert(this._secret, "KeyPair is public only");
        return utils2.encode(this.secret(), enc);
      };
      KeyPair.prototype.getPublic = function getPublic(enc) {
        return utils2.encode(this.pubBytes(), enc);
      };
      module2.exports = KeyPair;
    }
  });

  // node_modules/elliptic/lib/elliptic/eddsa/signature.js
  var require_signature2 = __commonJS({
    "node_modules/elliptic/lib/elliptic/eddsa/signature.js"(exports2, module2) {
      "use strict";
      var BN = require_bn2();
      var utils2 = require_utils3();
      var assert = utils2.assert;
      var cachedProperty = utils2.cachedProperty;
      var parseBytes = utils2.parseBytes;
      function Signature(eddsa, sig) {
        this.eddsa = eddsa;
        if (typeof sig !== "object")
          sig = parseBytes(sig);
        if (Array.isArray(sig)) {
          sig = {
            R: sig.slice(0, eddsa.encodingLength),
            S: sig.slice(eddsa.encodingLength)
          };
        }
        assert(sig.R && sig.S, "Signature without R or S");
        if (eddsa.isPoint(sig.R))
          this._R = sig.R;
        if (sig.S instanceof BN)
          this._S = sig.S;
        this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
        this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
      }
      cachedProperty(Signature, "S", function S2() {
        return this.eddsa.decodeInt(this.Sencoded());
      });
      cachedProperty(Signature, "R", function R() {
        return this.eddsa.decodePoint(this.Rencoded());
      });
      cachedProperty(Signature, "Rencoded", function Rencoded() {
        return this.eddsa.encodePoint(this.R());
      });
      cachedProperty(Signature, "Sencoded", function Sencoded() {
        return this.eddsa.encodeInt(this.S());
      });
      Signature.prototype.toBytes = function toBytes2() {
        return this.Rencoded().concat(this.Sencoded());
      };
      Signature.prototype.toHex = function toHex3() {
        return utils2.encode(this.toBytes(), "hex").toUpperCase();
      };
      module2.exports = Signature;
    }
  });

  // node_modules/elliptic/lib/elliptic/eddsa/index.js
  var require_eddsa = __commonJS({
    "node_modules/elliptic/lib/elliptic/eddsa/index.js"(exports2, module2) {
      "use strict";
      var hash = require_hash();
      var curves = require_curves();
      var utils2 = require_utils3();
      var assert = utils2.assert;
      var parseBytes = utils2.parseBytes;
      var KeyPair = require_key2();
      var Signature = require_signature2();
      function EDDSA(curve) {
        assert(curve === "ed25519", "only tested with ed25519 so far");
        if (!(this instanceof EDDSA))
          return new EDDSA(curve);
        curve = curves[curve].curve;
        this.curve = curve;
        this.g = curve.g;
        this.g.precompute(curve.n.bitLength() + 1);
        this.pointClass = curve.point().constructor;
        this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
        this.hash = hash.sha512;
      }
      module2.exports = EDDSA;
      EDDSA.prototype.sign = function sign(message, secret) {
        message = parseBytes(message);
        var key2 = this.keyFromSecret(secret);
        var r3 = this.hashInt(key2.messagePrefix(), message);
        var R = this.g.mul(r3);
        var Rencoded = this.encodePoint(R);
        var s_ = this.hashInt(Rencoded, key2.pubBytes(), message).mul(key2.priv());
        var S2 = r3.add(s_).umod(this.curve.n);
        return this.makeSignature({ R, S: S2, Rencoded });
      };
      EDDSA.prototype.verify = function verify(message, sig, pub) {
        message = parseBytes(message);
        sig = this.makeSignature(sig);
        var key2 = this.keyFromPublic(pub);
        var h2 = this.hashInt(sig.Rencoded(), key2.pubBytes(), message);
        var SG = this.g.mul(sig.S());
        var RplusAh = sig.R().add(key2.pub().mul(h2));
        return RplusAh.eq(SG);
      };
      EDDSA.prototype.hashInt = function hashInt() {
        var hash2 = this.hash();
        for (var i3 = 0; i3 < arguments.length; i3++)
          hash2.update(arguments[i3]);
        return utils2.intFromLE(hash2.digest()).umod(this.curve.n);
      };
      EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
        return KeyPair.fromPublic(this, pub);
      };
      EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
        return KeyPair.fromSecret(this, secret);
      };
      EDDSA.prototype.makeSignature = function makeSignature(sig) {
        if (sig instanceof Signature)
          return sig;
        return new Signature(this, sig);
      };
      EDDSA.prototype.encodePoint = function encodePoint(point) {
        var enc = point.getY().toArray("le", this.encodingLength);
        enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
        return enc;
      };
      EDDSA.prototype.decodePoint = function decodePoint(bytes) {
        bytes = utils2.parseBytes(bytes);
        var lastIx = bytes.length - 1;
        var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
        var xIsOdd = (bytes[lastIx] & 128) !== 0;
        var y2 = utils2.intFromLE(normed);
        return this.curve.pointFromY(y2, xIsOdd);
      };
      EDDSA.prototype.encodeInt = function encodeInt(num) {
        return num.toArray("le", this.encodingLength);
      };
      EDDSA.prototype.decodeInt = function decodeInt(bytes) {
        return utils2.intFromLE(bytes);
      };
      EDDSA.prototype.isPoint = function isPoint(val) {
        return val instanceof this.pointClass;
      };
    }
  });

  // node_modules/elliptic/lib/elliptic.js
  var require_elliptic = __commonJS({
    "node_modules/elliptic/lib/elliptic.js"(exports2) {
      "use strict";
      var elliptic = exports2;
      elliptic.version = require_package().version;
      elliptic.utils = require_utils3();
      elliptic.rand = require_brorand();
      elliptic.curve = require_curve();
      elliptic.curves = require_curves();
      elliptic.ec = require_ec();
      elliptic.eddsa = require_eddsa();
    }
  });

  // node_modules/@ethersproject/signing-key/lib/elliptic.js
  var require_elliptic2 = __commonJS({
    "node_modules/@ethersproject/signing-key/lib/elliptic.js"(exports2) {
      "use strict";
      var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
        return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EC = void 0;
      var elliptic_1 = __importDefault(require_elliptic());
      var EC = elliptic_1.default.ec;
      exports2.EC = EC;
    }
  });

  // node_modules/@ethersproject/signing-key/lib/_version.js
  var require_version14 = __commonJS({
    "node_modules/@ethersproject/signing-key/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "signing-key/5.7.0";
    }
  });

  // node_modules/@ethersproject/signing-key/lib/index.js
  var require_lib18 = __commonJS({
    "node_modules/@ethersproject/signing-key/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.computePublicKey = exports2.recoverPublicKey = exports2.SigningKey = void 0;
      var elliptic_1 = require_elliptic2();
      var bytes_1 = require_lib2();
      var properties_1 = require_lib4();
      var logger_1 = require_lib();
      var _version_1 = require_version14();
      var logger = new logger_1.Logger(_version_1.version);
      var _curve = null;
      function getCurve() {
        if (!_curve) {
          _curve = new elliptic_1.EC("secp256k1");
        }
        return _curve;
      }
      var SigningKey = (
        /** @class */
        function() {
          function SigningKey2(privateKey) {
            (0, properties_1.defineReadOnly)(this, "curve", "secp256k1");
            (0, properties_1.defineReadOnly)(this, "privateKey", (0, bytes_1.hexlify)(privateKey));
            if ((0, bytes_1.hexDataLength)(this.privateKey) !== 32) {
              logger.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
            }
            var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));
            (0, properties_1.defineReadOnly)(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
            (0, properties_1.defineReadOnly)(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
            (0, properties_1.defineReadOnly)(this, "_isSigningKey", true);
          }
          SigningKey2.prototype._addPoint = function(other) {
            var p0 = getCurve().keyFromPublic((0, bytes_1.arrayify)(this.publicKey));
            var p1 = getCurve().keyFromPublic((0, bytes_1.arrayify)(other));
            return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
          };
          SigningKey2.prototype.signDigest = function(digest2) {
            var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));
            var digestBytes = (0, bytes_1.arrayify)(digest2);
            if (digestBytes.length !== 32) {
              logger.throwArgumentError("bad digest length", "digest", digest2);
            }
            var signature = keyPair.sign(digestBytes, { canonical: true });
            return (0, bytes_1.splitSignature)({
              recoveryParam: signature.recoveryParam,
              r: (0, bytes_1.hexZeroPad)("0x" + signature.r.toString(16), 32),
              s: (0, bytes_1.hexZeroPad)("0x" + signature.s.toString(16), 32)
            });
          };
          SigningKey2.prototype.computeSharedSecret = function(otherKey) {
            var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));
            var otherKeyPair = getCurve().keyFromPublic((0, bytes_1.arrayify)(computePublicKey(otherKey)));
            return (0, bytes_1.hexZeroPad)("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
          };
          SigningKey2.isSigningKey = function(value) {
            return !!(value && value._isSigningKey);
          };
          return SigningKey2;
        }()
      );
      exports2.SigningKey = SigningKey;
      function recoverPublicKey(digest2, signature) {
        var sig = (0, bytes_1.splitSignature)(signature);
        var rs = { r: (0, bytes_1.arrayify)(sig.r), s: (0, bytes_1.arrayify)(sig.s) };
        return "0x" + getCurve().recoverPubKey((0, bytes_1.arrayify)(digest2), rs, sig.recoveryParam).encode("hex", false);
      }
      exports2.recoverPublicKey = recoverPublicKey;
      function computePublicKey(key2, compressed) {
        var bytes = (0, bytes_1.arrayify)(key2);
        if (bytes.length === 32) {
          var signingKey = new SigningKey(bytes);
          if (compressed) {
            return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
          }
          return signingKey.publicKey;
        } else if (bytes.length === 33) {
          if (compressed) {
            return (0, bytes_1.hexlify)(bytes);
          }
          return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
        } else if (bytes.length === 65) {
          if (!compressed) {
            return (0, bytes_1.hexlify)(bytes);
          }
          return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
        }
        return logger.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
      }
      exports2.computePublicKey = computePublicKey;
    }
  });

  // node_modules/@ethersproject/transactions/lib/_version.js
  var require_version15 = __commonJS({
    "node_modules/@ethersproject/transactions/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "transactions/5.7.0";
    }
  });

  // node_modules/@ethersproject/transactions/lib/index.js
  var require_lib19 = __commonJS({
    "node_modules/@ethersproject/transactions/lib/index.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o2, k2, { enumerable: true, get: function() {
          return m2[k];
        } });
      } : function(o2, m2, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o2[k2] = m2[k];
      });
      var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v2) {
        Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
      } : function(o2, v2) {
        o2["default"] = v2;
      });
      var __importStar = exports2 && exports2.__importStar || function(mod2) {
        if (mod2 && mod2.__esModule)
          return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k))
              __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.parse = exports2.serialize = exports2.accessListify = exports2.recoverAddress = exports2.computeAddress = exports2.TransactionTypes = void 0;
      var address_1 = require_lib14();
      var bignumber_1 = require_lib3();
      var bytes_1 = require_lib2();
      var constants_1 = require_lib9();
      var keccak256_1 = require_lib10();
      var properties_1 = require_lib4();
      var RLP = __importStar(require_lib13());
      var signing_key_1 = require_lib18();
      var logger_1 = require_lib();
      var _version_1 = require_version15();
      var logger = new logger_1.Logger(_version_1.version);
      var TransactionTypes;
      (function(TransactionTypes2) {
        TransactionTypes2[TransactionTypes2["legacy"] = 0] = "legacy";
        TransactionTypes2[TransactionTypes2["eip2930"] = 1] = "eip2930";
        TransactionTypes2[TransactionTypes2["eip1559"] = 2] = "eip1559";
      })(TransactionTypes = exports2.TransactionTypes || (exports2.TransactionTypes = {}));
      function handleAddress(value) {
        if (value === "0x") {
          return null;
        }
        return (0, address_1.getAddress)(value);
      }
      function handleNumber(value) {
        if (value === "0x") {
          return constants_1.Zero;
        }
        return bignumber_1.BigNumber.from(value);
      }
      var transactionFields = [
        { name: "nonce", maxLength: 32, numeric: true },
        { name: "gasPrice", maxLength: 32, numeric: true },
        { name: "gasLimit", maxLength: 32, numeric: true },
        { name: "to", length: 20 },
        { name: "value", maxLength: 32, numeric: true },
        { name: "data" }
      ];
      var allowedTransactionKeys = {
        chainId: true,
        data: true,
        gasLimit: true,
        gasPrice: true,
        nonce: true,
        to: true,
        type: true,
        value: true
      };
      function computeAddress(key2) {
        var publicKey = (0, signing_key_1.computePublicKey)(key2);
        return (0, address_1.getAddress)((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, bytes_1.hexDataSlice)(publicKey, 1)), 12));
      }
      exports2.computeAddress = computeAddress;
      function recoverAddress(digest2, signature) {
        return computeAddress((0, signing_key_1.recoverPublicKey)((0, bytes_1.arrayify)(digest2), signature));
      }
      exports2.recoverAddress = recoverAddress;
      function formatNumber(value, name5) {
        var result = (0, bytes_1.stripZeros)(bignumber_1.BigNumber.from(value).toHexString());
        if (result.length > 32) {
          logger.throwArgumentError("invalid length for " + name5, "transaction:" + name5, value);
        }
        return result;
      }
      function accessSetify(addr, storageKeys) {
        return {
          address: (0, address_1.getAddress)(addr),
          storageKeys: (storageKeys || []).map(function(storageKey, index3) {
            if ((0, bytes_1.hexDataLength)(storageKey) !== 32) {
              logger.throwArgumentError("invalid access list storageKey", "accessList[" + addr + ":" + index3 + "]", storageKey);
            }
            return storageKey.toLowerCase();
          })
        };
      }
      function accessListify(value) {
        if (Array.isArray(value)) {
          return value.map(function(set2, index3) {
            if (Array.isArray(set2)) {
              if (set2.length > 2) {
                logger.throwArgumentError("access list expected to be [ address, storageKeys[] ]", "value[" + index3 + "]", set2);
              }
              return accessSetify(set2[0], set2[1]);
            }
            return accessSetify(set2.address, set2.storageKeys);
          });
        }
        var result = Object.keys(value).map(function(addr) {
          var storageKeys = value[addr].reduce(function(accum, storageKey) {
            accum[storageKey] = true;
            return accum;
          }, {});
          return accessSetify(addr, Object.keys(storageKeys).sort());
        });
        result.sort(function(a2, b2) {
          return a2.address.localeCompare(b2.address);
        });
        return result;
      }
      exports2.accessListify = accessListify;
      function formatAccessList(value) {
        return accessListify(value).map(function(set2) {
          return [set2.address, set2.storageKeys];
        });
      }
      function _serializeEip1559(transaction, signature) {
        if (transaction.gasPrice != null) {
          var gasPrice = bignumber_1.BigNumber.from(transaction.gasPrice);
          var maxFeePerGas = bignumber_1.BigNumber.from(transaction.maxFeePerGas || 0);
          if (!gasPrice.eq(maxFeePerGas)) {
            logger.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
              gasPrice,
              maxFeePerGas
            });
          }
        }
        var fields = [
          formatNumber(transaction.chainId || 0, "chainId"),
          formatNumber(transaction.nonce || 0, "nonce"),
          formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
          formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
          formatNumber(transaction.gasLimit || 0, "gasLimit"),
          transaction.to != null ? (0, address_1.getAddress)(transaction.to) : "0x",
          formatNumber(transaction.value || 0, "value"),
          transaction.data || "0x",
          formatAccessList(transaction.accessList || [])
        ];
        if (signature) {
          var sig = (0, bytes_1.splitSignature)(signature);
          fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
          fields.push((0, bytes_1.stripZeros)(sig.r));
          fields.push((0, bytes_1.stripZeros)(sig.s));
        }
        return (0, bytes_1.hexConcat)(["0x02", RLP.encode(fields)]);
      }
      function _serializeEip2930(transaction, signature) {
        var fields = [
          formatNumber(transaction.chainId || 0, "chainId"),
          formatNumber(transaction.nonce || 0, "nonce"),
          formatNumber(transaction.gasPrice || 0, "gasPrice"),
          formatNumber(transaction.gasLimit || 0, "gasLimit"),
          transaction.to != null ? (0, address_1.getAddress)(transaction.to) : "0x",
          formatNumber(transaction.value || 0, "value"),
          transaction.data || "0x",
          formatAccessList(transaction.accessList || [])
        ];
        if (signature) {
          var sig = (0, bytes_1.splitSignature)(signature);
          fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
          fields.push((0, bytes_1.stripZeros)(sig.r));
          fields.push((0, bytes_1.stripZeros)(sig.s));
        }
        return (0, bytes_1.hexConcat)(["0x01", RLP.encode(fields)]);
      }
      function _serialize(transaction, signature) {
        (0, properties_1.checkProperties)(transaction, allowedTransactionKeys);
        var raw = [];
        transactionFields.forEach(function(fieldInfo) {
          var value = transaction[fieldInfo.name] || [];
          var options = {};
          if (fieldInfo.numeric) {
            options.hexPad = "left";
          }
          value = (0, bytes_1.arrayify)((0, bytes_1.hexlify)(value, options));
          if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
            logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
          }
          if (fieldInfo.maxLength) {
            value = (0, bytes_1.stripZeros)(value);
            if (value.length > fieldInfo.maxLength) {
              logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
            }
          }
          raw.push((0, bytes_1.hexlify)(value));
        });
        var chainId = 0;
        if (transaction.chainId != null) {
          chainId = transaction.chainId;
          if (typeof chainId !== "number") {
            logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
          }
        } else if (signature && !(0, bytes_1.isBytesLike)(signature) && signature.v > 28) {
          chainId = Math.floor((signature.v - 35) / 2);
        }
        if (chainId !== 0) {
          raw.push((0, bytes_1.hexlify)(chainId));
          raw.push("0x");
          raw.push("0x");
        }
        if (!signature) {
          return RLP.encode(raw);
        }
        var sig = (0, bytes_1.splitSignature)(signature);
        var v2 = 27 + sig.recoveryParam;
        if (chainId !== 0) {
          raw.pop();
          raw.pop();
          raw.pop();
          v2 += chainId * 2 + 8;
          if (sig.v > 28 && sig.v !== v2) {
            logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
          }
        } else if (sig.v !== v2) {
          logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
        }
        raw.push((0, bytes_1.hexlify)(v2));
        raw.push((0, bytes_1.stripZeros)((0, bytes_1.arrayify)(sig.r)));
        raw.push((0, bytes_1.stripZeros)((0, bytes_1.arrayify)(sig.s)));
        return RLP.encode(raw);
      }
      function serialize(transaction, signature) {
        if (transaction.type == null || transaction.type === 0) {
          if (transaction.accessList != null) {
            logger.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
          }
          return _serialize(transaction, signature);
        }
        switch (transaction.type) {
          case 1:
            return _serializeEip2930(transaction, signature);
          case 2:
            return _serializeEip1559(transaction, signature);
          default:
            break;
        }
        return logger.throwError("unsupported transaction type: " + transaction.type, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "serializeTransaction",
          transactionType: transaction.type
        });
      }
      exports2.serialize = serialize;
      function _parseEipSignature(tx, fields, serialize2) {
        try {
          var recid = handleNumber(fields[0]).toNumber();
          if (recid !== 0 && recid !== 1) {
            throw new Error("bad recid");
          }
          tx.v = recid;
        } catch (error) {
          logger.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
        }
        tx.r = (0, bytes_1.hexZeroPad)(fields[1], 32);
        tx.s = (0, bytes_1.hexZeroPad)(fields[2], 32);
        try {
          var digest2 = (0, keccak256_1.keccak256)(serialize2(tx));
          tx.from = recoverAddress(digest2, { r: tx.r, s: tx.s, recoveryParam: tx.v });
        } catch (error) {
        }
      }
      function _parseEip1559(payload) {
        var transaction = RLP.decode(payload.slice(1));
        if (transaction.length !== 9 && transaction.length !== 12) {
          logger.throwArgumentError("invalid component count for transaction type: 2", "payload", (0, bytes_1.hexlify)(payload));
        }
        var maxPriorityFeePerGas = handleNumber(transaction[2]);
        var maxFeePerGas = handleNumber(transaction[3]);
        var tx = {
          type: 2,
          chainId: handleNumber(transaction[0]).toNumber(),
          nonce: handleNumber(transaction[1]).toNumber(),
          maxPriorityFeePerGas,
          maxFeePerGas,
          gasPrice: null,
          gasLimit: handleNumber(transaction[4]),
          to: handleAddress(transaction[5]),
          value: handleNumber(transaction[6]),
          data: transaction[7],
          accessList: accessListify(transaction[8])
        };
        if (transaction.length === 9) {
          return tx;
        }
        tx.hash = (0, keccak256_1.keccak256)(payload);
        _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
        return tx;
      }
      function _parseEip2930(payload) {
        var transaction = RLP.decode(payload.slice(1));
        if (transaction.length !== 8 && transaction.length !== 11) {
          logger.throwArgumentError("invalid component count for transaction type: 1", "payload", (0, bytes_1.hexlify)(payload));
        }
        var tx = {
          type: 1,
          chainId: handleNumber(transaction[0]).toNumber(),
          nonce: handleNumber(transaction[1]).toNumber(),
          gasPrice: handleNumber(transaction[2]),
          gasLimit: handleNumber(transaction[3]),
          to: handleAddress(transaction[4]),
          value: handleNumber(transaction[5]),
          data: transaction[6],
          accessList: accessListify(transaction[7])
        };
        if (transaction.length === 8) {
          return tx;
        }
        tx.hash = (0, keccak256_1.keccak256)(payload);
        _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
        return tx;
      }
      function _parse(rawTransaction) {
        var transaction = RLP.decode(rawTransaction);
        if (transaction.length !== 9 && transaction.length !== 6) {
          logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
        }
        var tx = {
          nonce: handleNumber(transaction[0]).toNumber(),
          gasPrice: handleNumber(transaction[1]),
          gasLimit: handleNumber(transaction[2]),
          to: handleAddress(transaction[3]),
          value: handleNumber(transaction[4]),
          data: transaction[5],
          chainId: 0
        };
        if (transaction.length === 6) {
          return tx;
        }
        try {
          tx.v = bignumber_1.BigNumber.from(transaction[6]).toNumber();
        } catch (error) {
          return tx;
        }
        tx.r = (0, bytes_1.hexZeroPad)(transaction[7], 32);
        tx.s = (0, bytes_1.hexZeroPad)(transaction[8], 32);
        if (bignumber_1.BigNumber.from(tx.r).isZero() && bignumber_1.BigNumber.from(tx.s).isZero()) {
          tx.chainId = tx.v;
          tx.v = 0;
        } else {
          tx.chainId = Math.floor((tx.v - 35) / 2);
          if (tx.chainId < 0) {
            tx.chainId = 0;
          }
          var recoveryParam = tx.v - 27;
          var raw = transaction.slice(0, 6);
          if (tx.chainId !== 0) {
            raw.push((0, bytes_1.hexlify)(tx.chainId));
            raw.push("0x");
            raw.push("0x");
            recoveryParam -= tx.chainId * 2 + 8;
          }
          var digest2 = (0, keccak256_1.keccak256)(RLP.encode(raw));
          try {
            tx.from = recoverAddress(digest2, { r: (0, bytes_1.hexlify)(tx.r), s: (0, bytes_1.hexlify)(tx.s), recoveryParam });
          } catch (error) {
          }
          tx.hash = (0, keccak256_1.keccak256)(rawTransaction);
        }
        tx.type = null;
        return tx;
      }
      function parse(rawTransaction) {
        var payload = (0, bytes_1.arrayify)(rawTransaction);
        if (payload[0] > 127) {
          return _parse(payload);
        }
        switch (payload[0]) {
          case 1:
            return _parseEip2930(payload);
          case 2:
            return _parseEip1559(payload);
          default:
            break;
        }
        return logger.throwError("unsupported transaction type: " + payload[0], logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "parseTransaction",
          transactionType: payload[0]
        });
      }
      exports2.parse = parse;
    }
  });

  // node_modules/@ethersproject/providers/lib/formatter.js
  var require_formatter = __commonJS({
    "node_modules/@ethersproject/providers/lib/formatter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.showThrottleMessage = exports2.isCommunityResource = exports2.isCommunityResourcable = exports2.Formatter = void 0;
      var address_1 = require_lib14();
      var bignumber_1 = require_lib3();
      var bytes_1 = require_lib2();
      var constants_1 = require_lib9();
      var properties_1 = require_lib4();
      var transactions_1 = require_lib19();
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      var Formatter = (
        /** @class */
        function() {
          function Formatter2() {
            this.formats = this.getDefaultFormats();
          }
          Formatter2.prototype.getDefaultFormats = function() {
            var _this = this;
            var formats = {};
            var address = this.address.bind(this);
            var bigNumber = this.bigNumber.bind(this);
            var blockTag = this.blockTag.bind(this);
            var data = this.data.bind(this);
            var hash = this.hash.bind(this);
            var hex2 = this.hex.bind(this);
            var number4 = this.number.bind(this);
            var type4 = this.type.bind(this);
            var strictData = function(v2) {
              return _this.data(v2, true);
            };
            formats.transaction = {
              hash,
              type: type4,
              accessList: Formatter2.allowNull(this.accessList.bind(this), null),
              blockHash: Formatter2.allowNull(hash, null),
              blockNumber: Formatter2.allowNull(number4, null),
              transactionIndex: Formatter2.allowNull(number4, null),
              confirmations: Formatter2.allowNull(number4, null),
              from: address,
              // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
              // must be set
              gasPrice: Formatter2.allowNull(bigNumber),
              maxPriorityFeePerGas: Formatter2.allowNull(bigNumber),
              maxFeePerGas: Formatter2.allowNull(bigNumber),
              gasLimit: bigNumber,
              to: Formatter2.allowNull(address, null),
              value: bigNumber,
              nonce: number4,
              data,
              r: Formatter2.allowNull(this.uint256),
              s: Formatter2.allowNull(this.uint256),
              v: Formatter2.allowNull(number4),
              creates: Formatter2.allowNull(address, null),
              raw: Formatter2.allowNull(data)
            };
            formats.transactionRequest = {
              from: Formatter2.allowNull(address),
              nonce: Formatter2.allowNull(number4),
              gasLimit: Formatter2.allowNull(bigNumber),
              gasPrice: Formatter2.allowNull(bigNumber),
              maxPriorityFeePerGas: Formatter2.allowNull(bigNumber),
              maxFeePerGas: Formatter2.allowNull(bigNumber),
              to: Formatter2.allowNull(address),
              value: Formatter2.allowNull(bigNumber),
              data: Formatter2.allowNull(strictData),
              type: Formatter2.allowNull(number4),
              accessList: Formatter2.allowNull(this.accessList.bind(this), null)
            };
            formats.receiptLog = {
              transactionIndex: number4,
              blockNumber: number4,
              transactionHash: hash,
              address,
              topics: Formatter2.arrayOf(hash),
              data,
              logIndex: number4,
              blockHash: hash
            };
            formats.receipt = {
              to: Formatter2.allowNull(this.address, null),
              from: Formatter2.allowNull(this.address, null),
              contractAddress: Formatter2.allowNull(address, null),
              transactionIndex: number4,
              // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
              root: Formatter2.allowNull(hex2),
              gasUsed: bigNumber,
              logsBloom: Formatter2.allowNull(data),
              blockHash: hash,
              transactionHash: hash,
              logs: Formatter2.arrayOf(this.receiptLog.bind(this)),
              blockNumber: number4,
              confirmations: Formatter2.allowNull(number4, null),
              cumulativeGasUsed: bigNumber,
              effectiveGasPrice: Formatter2.allowNull(bigNumber),
              status: Formatter2.allowNull(number4),
              type: type4
            };
            formats.block = {
              hash: Formatter2.allowNull(hash),
              parentHash: hash,
              number: number4,
              timestamp: number4,
              nonce: Formatter2.allowNull(hex2),
              difficulty: this.difficulty.bind(this),
              gasLimit: bigNumber,
              gasUsed: bigNumber,
              miner: Formatter2.allowNull(address),
              extraData: data,
              transactions: Formatter2.allowNull(Formatter2.arrayOf(hash)),
              baseFeePerGas: Formatter2.allowNull(bigNumber)
            };
            formats.blockWithTransactions = (0, properties_1.shallowCopy)(formats.block);
            formats.blockWithTransactions.transactions = Formatter2.allowNull(Formatter2.arrayOf(this.transactionResponse.bind(this)));
            formats.filter = {
              fromBlock: Formatter2.allowNull(blockTag, void 0),
              toBlock: Formatter2.allowNull(blockTag, void 0),
              blockHash: Formatter2.allowNull(hash, void 0),
              address: Formatter2.allowNull(address, void 0),
              topics: Formatter2.allowNull(this.topics.bind(this), void 0)
            };
            formats.filterLog = {
              blockNumber: Formatter2.allowNull(number4),
              blockHash: Formatter2.allowNull(hash),
              transactionIndex: number4,
              removed: Formatter2.allowNull(this.boolean.bind(this)),
              address,
              data: Formatter2.allowFalsish(data, "0x"),
              topics: Formatter2.arrayOf(hash),
              transactionHash: hash,
              logIndex: number4
            };
            return formats;
          };
          Formatter2.prototype.accessList = function(accessList) {
            return (0, transactions_1.accessListify)(accessList || []);
          };
          Formatter2.prototype.number = function(number4) {
            if (number4 === "0x") {
              return 0;
            }
            return bignumber_1.BigNumber.from(number4).toNumber();
          };
          Formatter2.prototype.type = function(number4) {
            if (number4 === "0x" || number4 == null) {
              return 0;
            }
            return bignumber_1.BigNumber.from(number4).toNumber();
          };
          Formatter2.prototype.bigNumber = function(value) {
            return bignumber_1.BigNumber.from(value);
          };
          Formatter2.prototype.boolean = function(value) {
            if (typeof value === "boolean") {
              return value;
            }
            if (typeof value === "string") {
              value = value.toLowerCase();
              if (value === "true") {
                return true;
              }
              if (value === "false") {
                return false;
              }
            }
            throw new Error("invalid boolean - " + value);
          };
          Formatter2.prototype.hex = function(value, strict) {
            if (typeof value === "string") {
              if (!strict && value.substring(0, 2) !== "0x") {
                value = "0x" + value;
              }
              if ((0, bytes_1.isHexString)(value)) {
                return value.toLowerCase();
              }
            }
            return logger.throwArgumentError("invalid hash", "value", value);
          };
          Formatter2.prototype.data = function(value, strict) {
            var result = this.hex(value, strict);
            if (result.length % 2 !== 0) {
              throw new Error("invalid data; odd-length - " + value);
            }
            return result;
          };
          Formatter2.prototype.address = function(value) {
            return (0, address_1.getAddress)(value);
          };
          Formatter2.prototype.callAddress = function(value) {
            if (!(0, bytes_1.isHexString)(value, 32)) {
              return null;
            }
            var address = (0, address_1.getAddress)((0, bytes_1.hexDataSlice)(value, 12));
            return address === constants_1.AddressZero ? null : address;
          };
          Formatter2.prototype.contractAddress = function(value) {
            return (0, address_1.getContractAddress)(value);
          };
          Formatter2.prototype.blockTag = function(blockTag) {
            if (blockTag == null) {
              return "latest";
            }
            if (blockTag === "earliest") {
              return "0x0";
            }
            switch (blockTag) {
              case "earliest":
                return "0x0";
              case "latest":
              case "pending":
              case "safe":
              case "finalized":
                return blockTag;
            }
            if (typeof blockTag === "number" || (0, bytes_1.isHexString)(blockTag)) {
              return (0, bytes_1.hexValue)(blockTag);
            }
            throw new Error("invalid blockTag");
          };
          Formatter2.prototype.hash = function(value, strict) {
            var result = this.hex(value, strict);
            if ((0, bytes_1.hexDataLength)(result) !== 32) {
              return logger.throwArgumentError("invalid hash", "value", value);
            }
            return result;
          };
          Formatter2.prototype.difficulty = function(value) {
            if (value == null) {
              return null;
            }
            var v2 = bignumber_1.BigNumber.from(value);
            try {
              return v2.toNumber();
            } catch (error) {
            }
            return null;
          };
          Formatter2.prototype.uint256 = function(value) {
            if (!(0, bytes_1.isHexString)(value)) {
              throw new Error("invalid uint256");
            }
            return (0, bytes_1.hexZeroPad)(value, 32);
          };
          Formatter2.prototype._block = function(value, format2) {
            if (value.author != null && value.miner == null) {
              value.miner = value.author;
            }
            var difficulty = value._difficulty != null ? value._difficulty : value.difficulty;
            var result = Formatter2.check(format2, value);
            result._difficulty = difficulty == null ? null : bignumber_1.BigNumber.from(difficulty);
            return result;
          };
          Formatter2.prototype.block = function(value) {
            return this._block(value, this.formats.block);
          };
          Formatter2.prototype.blockWithTransactions = function(value) {
            return this._block(value, this.formats.blockWithTransactions);
          };
          Formatter2.prototype.transactionRequest = function(value) {
            return Formatter2.check(this.formats.transactionRequest, value);
          };
          Formatter2.prototype.transactionResponse = function(transaction) {
            if (transaction.gas != null && transaction.gasLimit == null) {
              transaction.gasLimit = transaction.gas;
            }
            if (transaction.to && bignumber_1.BigNumber.from(transaction.to).isZero()) {
              transaction.to = "0x0000000000000000000000000000000000000000";
            }
            if (transaction.input != null && transaction.data == null) {
              transaction.data = transaction.input;
            }
            if (transaction.to == null && transaction.creates == null) {
              transaction.creates = this.contractAddress(transaction);
            }
            if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
              transaction.accessList = [];
            }
            var result = Formatter2.check(this.formats.transaction, transaction);
            if (transaction.chainId != null) {
              var chainId = transaction.chainId;
              if ((0, bytes_1.isHexString)(chainId)) {
                chainId = bignumber_1.BigNumber.from(chainId).toNumber();
              }
              result.chainId = chainId;
            } else {
              var chainId = transaction.networkId;
              if (chainId == null && result.v == null) {
                chainId = transaction.chainId;
              }
              if ((0, bytes_1.isHexString)(chainId)) {
                chainId = bignumber_1.BigNumber.from(chainId).toNumber();
              }
              if (typeof chainId !== "number" && result.v != null) {
                chainId = (result.v - 35) / 2;
                if (chainId < 0) {
                  chainId = 0;
                }
                chainId = parseInt(chainId);
              }
              if (typeof chainId !== "number") {
                chainId = 0;
              }
              result.chainId = chainId;
            }
            if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
              result.blockHash = null;
            }
            return result;
          };
          Formatter2.prototype.transaction = function(value) {
            return (0, transactions_1.parse)(value);
          };
          Formatter2.prototype.receiptLog = function(value) {
            return Formatter2.check(this.formats.receiptLog, value);
          };
          Formatter2.prototype.receipt = function(value) {
            var result = Formatter2.check(this.formats.receipt, value);
            if (result.root != null) {
              if (result.root.length <= 4) {
                var value_1 = bignumber_1.BigNumber.from(result.root).toNumber();
                if (value_1 === 0 || value_1 === 1) {
                  if (result.status != null && result.status !== value_1) {
                    logger.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
                  }
                  result.status = value_1;
                  delete result.root;
                } else {
                  logger.throwArgumentError("invalid alt-root-status", "value.root", result.root);
                }
              } else if (result.root.length !== 66) {
                logger.throwArgumentError("invalid root hash", "value.root", result.root);
              }
            }
            if (result.status != null) {
              result.byzantium = true;
            }
            return result;
          };
          Formatter2.prototype.topics = function(value) {
            var _this = this;
            if (Array.isArray(value)) {
              return value.map(function(v2) {
                return _this.topics(v2);
              });
            } else if (value != null) {
              return this.hash(value, true);
            }
            return null;
          };
          Formatter2.prototype.filter = function(value) {
            return Formatter2.check(this.formats.filter, value);
          };
          Formatter2.prototype.filterLog = function(value) {
            return Formatter2.check(this.formats.filterLog, value);
          };
          Formatter2.check = function(format2, object4) {
            var result = {};
            for (var key2 in format2) {
              try {
                var value = format2[key2](object4[key2]);
                if (value !== void 0) {
                  result[key2] = value;
                }
              } catch (error) {
                error.checkKey = key2;
                error.checkValue = object4[key2];
                throw error;
              }
            }
            return result;
          };
          Formatter2.allowNull = function(format2, nullValue) {
            return function(value) {
              if (value == null) {
                return nullValue;
              }
              return format2(value);
            };
          };
          Formatter2.allowFalsish = function(format2, replaceValue) {
            return function(value) {
              if (!value) {
                return replaceValue;
              }
              return format2(value);
            };
          };
          Formatter2.arrayOf = function(format2) {
            return function(array4) {
              if (!Array.isArray(array4)) {
                throw new Error("not an array");
              }
              var result = [];
              array4.forEach(function(value) {
                result.push(format2(value));
              });
              return result;
            };
          };
          return Formatter2;
        }()
      );
      exports2.Formatter = Formatter;
      function isCommunityResourcable(value) {
        return value && typeof value.isCommunityResource === "function";
      }
      exports2.isCommunityResourcable = isCommunityResourcable;
      function isCommunityResource(value) {
        return isCommunityResourcable(value) && value.isCommunityResource();
      }
      exports2.isCommunityResource = isCommunityResource;
      var throttleMessage = false;
      function showThrottleMessage() {
        if (throttleMessage) {
          return;
        }
        throttleMessage = true;
        console.log("========= NOTICE =========");
        console.log("Request-Rate Exceeded  (this message will not be repeated)");
        console.log("");
        console.log("The default API keys for each service are provided as a highly-throttled,");
        console.log("community resource for low-traffic projects and early prototyping.");
        console.log("");
        console.log("While your application will continue to function, we highly recommended");
        console.log("signing up for your own API keys to improve performance, increase your");
        console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
        console.log("");
        console.log("For more details: https://docs.ethers.io/api-keys/");
        console.log("==========================");
      }
      exports2.showThrottleMessage = showThrottleMessage;
    }
  });

  // node_modules/@ethersproject/providers/lib/base-provider.js
  var require_base_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/base-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports2 && exports2.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y2, t3, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                return t3;
              if (y2 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t3[1]) {
                    _.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _.label < t3[2]) {
                    _.label = t3[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
        return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BaseProvider = exports2.Resolver = exports2.Event = void 0;
      var abstract_provider_1 = require_lib5();
      var base64_1 = require_lib7();
      var basex_1 = require_lib8();
      var bignumber_1 = require_lib3();
      var bytes_1 = require_lib2();
      var constants_1 = require_lib9();
      var hash_1 = require_lib15();
      var networks_1 = require_lib6();
      var properties_1 = require_lib4();
      var sha2_1 = require_lib16();
      var strings_1 = require_lib11();
      var web_1 = require_lib17();
      var bech32_1 = __importDefault(require_bech32());
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      var formatter_1 = require_formatter();
      var MAX_CCIP_REDIRECTS = 10;
      function checkTopic(topic) {
        if (topic == null) {
          return "null";
        }
        if ((0, bytes_1.hexDataLength)(topic) !== 32) {
          logger.throwArgumentError("invalid topic", "topic", topic);
        }
        return topic.toLowerCase();
      }
      function serializeTopics(topics) {
        topics = topics.slice();
        while (topics.length > 0 && topics[topics.length - 1] == null) {
          topics.pop();
        }
        return topics.map(function(topic) {
          if (Array.isArray(topic)) {
            var unique_1 = {};
            topic.forEach(function(topic2) {
              unique_1[checkTopic(topic2)] = true;
            });
            var sorted = Object.keys(unique_1);
            sorted.sort();
            return sorted.join("|");
          } else {
            return checkTopic(topic);
          }
        }).join("&");
      }
      function deserializeTopics(data) {
        if (data === "") {
          return [];
        }
        return data.split(/&/g).map(function(topic) {
          if (topic === "") {
            return [];
          }
          var comps = topic.split("|").map(function(topic2) {
            return topic2 === "null" ? null : topic2;
          });
          return comps.length === 1 ? comps[0] : comps;
        });
      }
      function getEventTag(eventName) {
        if (typeof eventName === "string") {
          eventName = eventName.toLowerCase();
          if ((0, bytes_1.hexDataLength)(eventName) === 32) {
            return "tx:" + eventName;
          }
          if (eventName.indexOf(":") === -1) {
            return eventName;
          }
        } else if (Array.isArray(eventName)) {
          return "filter:*:" + serializeTopics(eventName);
        } else if (abstract_provider_1.ForkEvent.isForkEvent(eventName)) {
          logger.warn("not implemented");
          throw new Error("not implemented");
        } else if (eventName && typeof eventName === "object") {
          return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
        }
        throw new Error("invalid event - " + eventName);
      }
      function getTime() {
        return (/* @__PURE__ */ new Date()).getTime();
      }
      function stall(duration) {
        return new Promise(function(resolve5) {
          setTimeout(resolve5, duration);
        });
      }
      var PollableEvents = ["block", "network", "pending", "poll"];
      var Event = (
        /** @class */
        function() {
          function Event2(tag, listener, once) {
            (0, properties_1.defineReadOnly)(this, "tag", tag);
            (0, properties_1.defineReadOnly)(this, "listener", listener);
            (0, properties_1.defineReadOnly)(this, "once", once);
            this._lastBlockNumber = -2;
            this._inflight = false;
          }
          Object.defineProperty(Event2.prototype, "event", {
            get: function() {
              switch (this.type) {
                case "tx":
                  return this.hash;
                case "filter":
                  return this.filter;
              }
              return this.tag;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Event2.prototype, "type", {
            get: function() {
              return this.tag.split(":")[0];
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Event2.prototype, "hash", {
            get: function() {
              var comps = this.tag.split(":");
              if (comps[0] !== "tx") {
                return null;
              }
              return comps[1];
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Event2.prototype, "filter", {
            get: function() {
              var comps = this.tag.split(":");
              if (comps[0] !== "filter") {
                return null;
              }
              var address = comps[1];
              var topics = deserializeTopics(comps[2]);
              var filter4 = {};
              if (topics.length > 0) {
                filter4.topics = topics;
              }
              if (address && address !== "*") {
                filter4.address = address;
              }
              return filter4;
            },
            enumerable: false,
            configurable: true
          });
          Event2.prototype.pollable = function() {
            return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
          };
          return Event2;
        }()
      );
      exports2.Event = Event;
      var coinInfos = {
        "0": { symbol: "btc", p2pkh: 0, p2sh: 5, prefix: "bc" },
        "2": { symbol: "ltc", p2pkh: 48, p2sh: 50, prefix: "ltc" },
        "3": { symbol: "doge", p2pkh: 30, p2sh: 22 },
        "60": { symbol: "eth", ilk: "eth" },
        "61": { symbol: "etc", ilk: "eth" },
        "700": { symbol: "xdai", ilk: "eth" }
      };
      function bytes32ify(value) {
        return (0, bytes_1.hexZeroPad)(bignumber_1.BigNumber.from(value).toHexString(), 32);
      }
      function base58Encode(data) {
        return basex_1.Base58.encode((0, bytes_1.concat)([data, (0, bytes_1.hexDataSlice)((0, sha2_1.sha256)((0, sha2_1.sha256)(data)), 0, 4)]));
      }
      var matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
      var matchers2 = [
        new RegExp("^(https)://(.*)$", "i"),
        new RegExp("^(data):(.*)$", "i"),
        matcherIpfs,
        new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
      ];
      function _parseString(result, start) {
        try {
          return (0, strings_1.toUtf8String)(_parseBytes(result, start));
        } catch (error) {
        }
        return null;
      }
      function _parseBytes(result, start) {
        if (result === "0x") {
          return null;
        }
        var offset3 = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(result, start, start + 32)).toNumber();
        var length2 = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(result, offset3, offset3 + 32)).toNumber();
        return (0, bytes_1.hexDataSlice)(result, offset3 + 32, offset3 + 32 + length2);
      }
      function getIpfsLink(link) {
        if (link.match(/^ipfs:\/\/ipfs\//i)) {
          link = link.substring(12);
        } else if (link.match(/^ipfs:\/\//i)) {
          link = link.substring(7);
        } else {
          logger.throwArgumentError("unsupported IPFS format", "link", link);
        }
        return "https://gateway.ipfs.io/ipfs/" + link;
      }
      function numPad(value) {
        var result = (0, bytes_1.arrayify)(value);
        if (result.length > 32) {
          throw new Error("internal; should not happen");
        }
        var padded = new Uint8Array(32);
        padded.set(result, 32 - result.length);
        return padded;
      }
      function bytesPad(value) {
        if (value.length % 32 === 0) {
          return value;
        }
        var result = new Uint8Array(Math.ceil(value.length / 32) * 32);
        result.set(value);
        return result;
      }
      function encodeBytes2(datas) {
        var result = [];
        var byteCount = 0;
        for (var i3 = 0; i3 < datas.length; i3++) {
          result.push(null);
          byteCount += 32;
        }
        for (var i3 = 0; i3 < datas.length; i3++) {
          var data = (0, bytes_1.arrayify)(datas[i3]);
          result[i3] = numPad(byteCount);
          result.push(numPad(data.length));
          result.push(bytesPad(data));
          byteCount += 32 + Math.ceil(data.length / 32) * 32;
        }
        return (0, bytes_1.hexConcat)(result);
      }
      var Resolver = (
        /** @class */
        function() {
          function Resolver2(provider, address, name5, resolvedAddress) {
            (0, properties_1.defineReadOnly)(this, "provider", provider);
            (0, properties_1.defineReadOnly)(this, "name", name5);
            (0, properties_1.defineReadOnly)(this, "address", provider.formatter.address(address));
            (0, properties_1.defineReadOnly)(this, "_resolvedAddress", resolvedAddress);
          }
          Resolver2.prototype.supportsWildcard = function() {
            var _this = this;
            if (!this._supportsEip2544) {
              this._supportsEip2544 = this.provider.call({
                to: this.address,
                data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
              }).then(function(result) {
                return bignumber_1.BigNumber.from(result).eq(1);
              }).catch(function(error) {
                if (error.code === logger_1.Logger.errors.CALL_EXCEPTION) {
                  return false;
                }
                _this._supportsEip2544 = null;
                throw error;
              });
            }
            return this._supportsEip2544;
          };
          Resolver2.prototype._fetch = function(selector, parameters) {
            return __awaiter2(this, void 0, void 0, function() {
              var tx, parseBytes, result, error_1;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    tx = {
                      to: this.address,
                      ccipReadEnabled: true,
                      data: (0, bytes_1.hexConcat)([selector, (0, hash_1.namehash)(this.name), parameters || "0x"])
                    };
                    parseBytes = false;
                    return [4, this.supportsWildcard()];
                  case 1:
                    if (_a.sent()) {
                      parseBytes = true;
                      tx.data = (0, bytes_1.hexConcat)(["0x9061b923", encodeBytes2([(0, hash_1.dnsEncode)(this.name), tx.data])]);
                    }
                    _a.label = 2;
                  case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4, this.provider.call(tx)];
                  case 3:
                    result = _a.sent();
                    if ((0, bytes_1.arrayify)(result).length % 32 === 4) {
                      logger.throwError("resolver threw error", logger_1.Logger.errors.CALL_EXCEPTION, {
                        transaction: tx,
                        data: result
                      });
                    }
                    if (parseBytes) {
                      result = _parseBytes(result, 0);
                    }
                    return [2, result];
                  case 4:
                    error_1 = _a.sent();
                    if (error_1.code === logger_1.Logger.errors.CALL_EXCEPTION) {
                      return [2, null];
                    }
                    throw error_1;
                  case 5:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          Resolver2.prototype._fetchBytes = function(selector, parameters) {
            return __awaiter2(this, void 0, void 0, function() {
              var result;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this._fetch(selector, parameters)];
                  case 1:
                    result = _a.sent();
                    if (result != null) {
                      return [2, _parseBytes(result, 0)];
                    }
                    return [2, null];
                }
              });
            });
          };
          Resolver2.prototype._getAddress = function(coinType, hexBytes) {
            var coinInfo = coinInfos[String(coinType)];
            if (coinInfo == null) {
              logger.throwError("unsupported coin type: " + coinType, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "getAddress(" + coinType + ")"
              });
            }
            if (coinInfo.ilk === "eth") {
              return this.provider.formatter.address(hexBytes);
            }
            var bytes = (0, bytes_1.arrayify)(hexBytes);
            if (coinInfo.p2pkh != null) {
              var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
              if (p2pkh) {
                var length_1 = parseInt(p2pkh[1], 16);
                if (p2pkh[2].length === length_1 * 2 && length_1 >= 1 && length_1 <= 75) {
                  return base58Encode((0, bytes_1.concat)([[coinInfo.p2pkh], "0x" + p2pkh[2]]));
                }
              }
            }
            if (coinInfo.p2sh != null) {
              var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
              if (p2sh) {
                var length_2 = parseInt(p2sh[1], 16);
                if (p2sh[2].length === length_2 * 2 && length_2 >= 1 && length_2 <= 75) {
                  return base58Encode((0, bytes_1.concat)([[coinInfo.p2sh], "0x" + p2sh[2]]));
                }
              }
            }
            if (coinInfo.prefix != null) {
              var length_3 = bytes[1];
              var version_1 = bytes[0];
              if (version_1 === 0) {
                if (length_3 !== 20 && length_3 !== 32) {
                  version_1 = -1;
                }
              } else {
                version_1 = -1;
              }
              if (version_1 >= 0 && bytes.length === 2 + length_3 && length_3 >= 1 && length_3 <= 75) {
                var words = bech32_1.default.toWords(bytes.slice(2));
                words.unshift(version_1);
                return bech32_1.default.encode(coinInfo.prefix, words);
              }
            }
            return null;
          };
          Resolver2.prototype.getAddress = function(coinType) {
            return __awaiter2(this, void 0, void 0, function() {
              var result, error_2, hexBytes, address;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (coinType == null) {
                      coinType = 60;
                    }
                    if (!(coinType === 60))
                      return [3, 4];
                    _a.label = 1;
                  case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4, this._fetch("0x3b3b57de")];
                  case 2:
                    result = _a.sent();
                    if (result === "0x" || result === constants_1.HashZero) {
                      return [2, null];
                    }
                    return [2, this.provider.formatter.callAddress(result)];
                  case 3:
                    error_2 = _a.sent();
                    if (error_2.code === logger_1.Logger.errors.CALL_EXCEPTION) {
                      return [2, null];
                    }
                    throw error_2;
                  case 4:
                    return [4, this._fetchBytes("0xf1cb7e06", bytes32ify(coinType))];
                  case 5:
                    hexBytes = _a.sent();
                    if (hexBytes == null || hexBytes === "0x") {
                      return [2, null];
                    }
                    address = this._getAddress(coinType, hexBytes);
                    if (address == null) {
                      logger.throwError("invalid or unsupported coin data", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "getAddress(" + coinType + ")",
                        coinType,
                        data: hexBytes
                      });
                    }
                    return [2, address];
                }
              });
            });
          };
          Resolver2.prototype.getAvatar = function() {
            return __awaiter2(this, void 0, void 0, function() {
              var linkage, avatar, i3, match2, scheme, _a, selector, owner, _b, comps, addr, tokenId, tokenOwner, _c, _d, balance, _e, _f, tx, metadataUrl, _g, metadata, imageUrl, ipfs, error_3;
              return __generator(this, function(_h) {
                switch (_h.label) {
                  case 0:
                    linkage = [{ type: "name", content: this.name }];
                    _h.label = 1;
                  case 1:
                    _h.trys.push([1, 19, , 20]);
                    return [4, this.getText("avatar")];
                  case 2:
                    avatar = _h.sent();
                    if (avatar == null) {
                      return [2, null];
                    }
                    i3 = 0;
                    _h.label = 3;
                  case 3:
                    if (!(i3 < matchers2.length))
                      return [3, 18];
                    match2 = avatar.match(matchers2[i3]);
                    if (match2 == null) {
                      return [3, 17];
                    }
                    scheme = match2[1].toLowerCase();
                    _a = scheme;
                    switch (_a) {
                      case "https":
                        return [3, 4];
                      case "data":
                        return [3, 5];
                      case "ipfs":
                        return [3, 6];
                      case "erc721":
                        return [3, 7];
                      case "erc1155":
                        return [3, 7];
                    }
                    return [3, 17];
                  case 4:
                    linkage.push({ type: "url", content: avatar });
                    return [2, { linkage, url: avatar }];
                  case 5:
                    linkage.push({ type: "data", content: avatar });
                    return [2, { linkage, url: avatar }];
                  case 6:
                    linkage.push({ type: "ipfs", content: avatar });
                    return [2, { linkage, url: getIpfsLink(avatar) }];
                  case 7:
                    selector = scheme === "erc721" ? "0xc87b56dd" : "0x0e89341c";
                    linkage.push({ type: scheme, content: avatar });
                    _b = this._resolvedAddress;
                    if (_b)
                      return [3, 9];
                    return [4, this.getAddress()];
                  case 8:
                    _b = _h.sent();
                    _h.label = 9;
                  case 9:
                    owner = _b;
                    comps = (match2[2] || "").split("/");
                    if (comps.length !== 2) {
                      return [2, null];
                    }
                    return [4, this.provider.formatter.address(comps[0])];
                  case 10:
                    addr = _h.sent();
                    tokenId = (0, bytes_1.hexZeroPad)(bignumber_1.BigNumber.from(comps[1]).toHexString(), 32);
                    if (!(scheme === "erc721"))
                      return [3, 12];
                    _d = (_c = this.provider.formatter).callAddress;
                    return [4, this.provider.call({
                      to: addr,
                      data: (0, bytes_1.hexConcat)(["0x6352211e", tokenId])
                    })];
                  case 11:
                    tokenOwner = _d.apply(_c, [_h.sent()]);
                    if (owner !== tokenOwner) {
                      return [2, null];
                    }
                    linkage.push({ type: "owner", content: tokenOwner });
                    return [3, 14];
                  case 12:
                    if (!(scheme === "erc1155"))
                      return [3, 14];
                    _f = (_e = bignumber_1.BigNumber).from;
                    return [4, this.provider.call({
                      to: addr,
                      data: (0, bytes_1.hexConcat)(["0x00fdd58e", (0, bytes_1.hexZeroPad)(owner, 32), tokenId])
                    })];
                  case 13:
                    balance = _f.apply(_e, [_h.sent()]);
                    if (balance.isZero()) {
                      return [2, null];
                    }
                    linkage.push({ type: "balance", content: balance.toString() });
                    _h.label = 14;
                  case 14:
                    tx = {
                      to: this.provider.formatter.address(comps[0]),
                      data: (0, bytes_1.hexConcat)([selector, tokenId])
                    };
                    _g = _parseString;
                    return [4, this.provider.call(tx)];
                  case 15:
                    metadataUrl = _g.apply(void 0, [_h.sent(), 0]);
                    if (metadataUrl == null) {
                      return [2, null];
                    }
                    linkage.push({ type: "metadata-url-base", content: metadataUrl });
                    if (scheme === "erc1155") {
                      metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                      linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
                    }
                    if (metadataUrl.match(/^ipfs:/i)) {
                      metadataUrl = getIpfsLink(metadataUrl);
                    }
                    linkage.push({ type: "metadata-url", content: metadataUrl });
                    return [4, (0, web_1.fetchJson)(metadataUrl)];
                  case 16:
                    metadata = _h.sent();
                    if (!metadata) {
                      return [2, null];
                    }
                    linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
                    imageUrl = metadata.image;
                    if (typeof imageUrl !== "string") {
                      return [2, null];
                    }
                    if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                    } else {
                      ipfs = imageUrl.match(matcherIpfs);
                      if (ipfs == null) {
                        return [2, null];
                      }
                      linkage.push({ type: "url-ipfs", content: imageUrl });
                      imageUrl = getIpfsLink(imageUrl);
                    }
                    linkage.push({ type: "url", content: imageUrl });
                    return [2, { linkage, url: imageUrl }];
                  case 17:
                    i3++;
                    return [3, 3];
                  case 18:
                    return [3, 20];
                  case 19:
                    error_3 = _h.sent();
                    return [3, 20];
                  case 20:
                    return [2, null];
                }
              });
            });
          };
          Resolver2.prototype.getContentHash = function() {
            return __awaiter2(this, void 0, void 0, function() {
              var hexBytes, ipfs, length_4, ipns, length_5, swarm, skynet, urlSafe_1, hash;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this._fetchBytes("0xbc1c58d1")];
                  case 1:
                    hexBytes = _a.sent();
                    if (hexBytes == null || hexBytes === "0x") {
                      return [2, null];
                    }
                    ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                    if (ipfs) {
                      length_4 = parseInt(ipfs[3], 16);
                      if (ipfs[4].length === length_4 * 2) {
                        return [2, "ipfs://" + basex_1.Base58.encode("0x" + ipfs[1])];
                      }
                    }
                    ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                    if (ipns) {
                      length_5 = parseInt(ipns[3], 16);
                      if (ipns[4].length === length_5 * 2) {
                        return [2, "ipns://" + basex_1.Base58.encode("0x" + ipns[1])];
                      }
                    }
                    swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
                    if (swarm) {
                      if (swarm[1].length === 32 * 2) {
                        return [2, "bzz://" + swarm[1]];
                      }
                    }
                    skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
                    if (skynet) {
                      if (skynet[1].length === 34 * 2) {
                        urlSafe_1 = { "=": "", "+": "-", "/": "_" };
                        hash = (0, base64_1.encode)("0x" + skynet[1]).replace(/[=+\/]/g, function(a2) {
                          return urlSafe_1[a2];
                        });
                        return [2, "sia://" + hash];
                      }
                    }
                    return [2, logger.throwError("invalid or unsupported content hash data", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                      operation: "getContentHash()",
                      data: hexBytes
                    })];
                }
              });
            });
          };
          Resolver2.prototype.getText = function(key2) {
            return __awaiter2(this, void 0, void 0, function() {
              var keyBytes, hexBytes;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    keyBytes = (0, strings_1.toUtf8Bytes)(key2);
                    keyBytes = (0, bytes_1.concat)([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
                    if (keyBytes.length % 32 !== 0) {
                      keyBytes = (0, bytes_1.concat)([keyBytes, (0, bytes_1.hexZeroPad)("0x", 32 - key2.length % 32)]);
                    }
                    return [4, this._fetchBytes("0x59d1d43c", (0, bytes_1.hexlify)(keyBytes))];
                  case 1:
                    hexBytes = _a.sent();
                    if (hexBytes == null || hexBytes === "0x") {
                      return [2, null];
                    }
                    return [2, (0, strings_1.toUtf8String)(hexBytes)];
                }
              });
            });
          };
          return Resolver2;
        }()
      );
      exports2.Resolver = Resolver;
      var defaultFormatter = null;
      var nextPollId = 1;
      var BaseProvider = (
        /** @class */
        function(_super) {
          __extends(BaseProvider2, _super);
          function BaseProvider2(network) {
            var _newTarget = this.constructor;
            var _this = _super.call(this) || this;
            _this._events = [];
            _this._emitted = { block: -2 };
            _this.disableCcipRead = false;
            _this.formatter = _newTarget.getFormatter();
            (0, properties_1.defineReadOnly)(_this, "anyNetwork", network === "any");
            if (_this.anyNetwork) {
              network = _this.detectNetwork();
            }
            if (network instanceof Promise) {
              _this._networkPromise = network;
              network.catch(function(error) {
              });
              _this._ready().catch(function(error) {
              });
            } else {
              var knownNetwork = (0, properties_1.getStatic)(_newTarget, "getNetwork")(network);
              if (knownNetwork) {
                (0, properties_1.defineReadOnly)(_this, "_network", knownNetwork);
                _this.emit("network", knownNetwork, null);
              } else {
                logger.throwArgumentError("invalid network", "network", network);
              }
            }
            _this._maxInternalBlockNumber = -1024;
            _this._lastBlockNumber = -2;
            _this._maxFilterBlockRange = 10;
            _this._pollingInterval = 4e3;
            _this._fastQueryDate = 0;
            return _this;
          }
          BaseProvider2.prototype._ready = function() {
            return __awaiter2(this, void 0, void 0, function() {
              var network, error_4;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (!(this._network == null))
                      return [3, 7];
                    network = null;
                    if (!this._networkPromise)
                      return [3, 4];
                    _a.label = 1;
                  case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4, this._networkPromise];
                  case 2:
                    network = _a.sent();
                    return [3, 4];
                  case 3:
                    error_4 = _a.sent();
                    return [3, 4];
                  case 4:
                    if (!(network == null))
                      return [3, 6];
                    return [4, this.detectNetwork()];
                  case 5:
                    network = _a.sent();
                    _a.label = 6;
                  case 6:
                    if (!network) {
                      logger.throwError("no network detected", logger_1.Logger.errors.UNKNOWN_ERROR, {});
                    }
                    if (this._network == null) {
                      if (this.anyNetwork) {
                        this._network = network;
                      } else {
                        (0, properties_1.defineReadOnly)(this, "_network", network);
                      }
                      this.emit("network", network, null);
                    }
                    _a.label = 7;
                  case 7:
                    return [2, this._network];
                }
              });
            });
          };
          Object.defineProperty(BaseProvider2.prototype, "ready", {
            // This will always return the most recently established network.
            // For "any", this can change (a "network" event is emitted before
            // any change is reflected); otherwise this cannot change
            get: function() {
              var _this = this;
              return (0, web_1.poll)(function() {
                return _this._ready().then(function(network) {
                  return network;
                }, function(error) {
                  if (error.code === logger_1.Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
                    return void 0;
                  }
                  throw error;
                });
              });
            },
            enumerable: false,
            configurable: true
          });
          BaseProvider2.getFormatter = function() {
            if (defaultFormatter == null) {
              defaultFormatter = new formatter_1.Formatter();
            }
            return defaultFormatter;
          };
          BaseProvider2.getNetwork = function(network) {
            return (0, networks_1.getNetwork)(network == null ? "homestead" : network);
          };
          BaseProvider2.prototype.ccipReadFetch = function(tx, calldata, urls) {
            return __awaiter2(this, void 0, void 0, function() {
              var sender, data, errorMessages, i3, url2, href, json, result, errorMessage;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (this.disableCcipRead || urls.length === 0) {
                      return [2, null];
                    }
                    sender = tx.to.toLowerCase();
                    data = calldata.toLowerCase();
                    errorMessages = [];
                    i3 = 0;
                    _a.label = 1;
                  case 1:
                    if (!(i3 < urls.length))
                      return [3, 4];
                    url2 = urls[i3];
                    href = url2.replace("{sender}", sender).replace("{data}", data);
                    json = url2.indexOf("{data}") >= 0 ? null : JSON.stringify({ data, sender });
                    return [4, (0, web_1.fetchJson)({ url: href, errorPassThrough: true }, json, function(value, response) {
                      value.status = response.statusCode;
                      return value;
                    })];
                  case 2:
                    result = _a.sent();
                    if (result.data) {
                      return [2, result.data];
                    }
                    errorMessage = result.message || "unknown error";
                    if (result.status >= 400 && result.status < 500) {
                      return [2, logger.throwError("response not found during CCIP fetch: " + errorMessage, logger_1.Logger.errors.SERVER_ERROR, { url: url2, errorMessage })];
                    }
                    errorMessages.push(errorMessage);
                    _a.label = 3;
                  case 3:
                    i3++;
                    return [3, 1];
                  case 4:
                    return [2, logger.throwError("error encountered during CCIP fetch: " + errorMessages.map(function(m2) {
                      return JSON.stringify(m2);
                    }).join(", "), logger_1.Logger.errors.SERVER_ERROR, {
                      urls,
                      errorMessages
                    })];
                }
              });
            });
          };
          BaseProvider2.prototype._getInternalBlockNumber = function(maxAge) {
            return __awaiter2(this, void 0, void 0, function() {
              var internalBlockNumber, result, error_5, reqTime, checkInternalBlockNumber;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this._ready()];
                  case 1:
                    _a.sent();
                    if (!(maxAge > 0))
                      return [3, 7];
                    _a.label = 2;
                  case 2:
                    if (!this._internalBlockNumber)
                      return [3, 7];
                    internalBlockNumber = this._internalBlockNumber;
                    _a.label = 3;
                  case 3:
                    _a.trys.push([3, 5, , 6]);
                    return [4, internalBlockNumber];
                  case 4:
                    result = _a.sent();
                    if (getTime() - result.respTime <= maxAge) {
                      return [2, result.blockNumber];
                    }
                    return [3, 7];
                  case 5:
                    error_5 = _a.sent();
                    if (this._internalBlockNumber === internalBlockNumber) {
                      return [3, 7];
                    }
                    return [3, 6];
                  case 6:
                    return [3, 2];
                  case 7:
                    reqTime = getTime();
                    checkInternalBlockNumber = (0, properties_1.resolveProperties)({
                      blockNumber: this.perform("getBlockNumber", {}),
                      networkError: this.getNetwork().then(function(network) {
                        return null;
                      }, function(error) {
                        return error;
                      })
                    }).then(function(_a2) {
                      var blockNumber = _a2.blockNumber, networkError = _a2.networkError;
                      if (networkError) {
                        if (_this._internalBlockNumber === checkInternalBlockNumber) {
                          _this._internalBlockNumber = null;
                        }
                        throw networkError;
                      }
                      var respTime = getTime();
                      blockNumber = bignumber_1.BigNumber.from(blockNumber).toNumber();
                      if (blockNumber < _this._maxInternalBlockNumber) {
                        blockNumber = _this._maxInternalBlockNumber;
                      }
                      _this._maxInternalBlockNumber = blockNumber;
                      _this._setFastBlockNumber(blockNumber);
                      return { blockNumber, reqTime, respTime };
                    });
                    this._internalBlockNumber = checkInternalBlockNumber;
                    checkInternalBlockNumber.catch(function(error) {
                      if (_this._internalBlockNumber === checkInternalBlockNumber) {
                        _this._internalBlockNumber = null;
                      }
                    });
                    return [4, checkInternalBlockNumber];
                  case 8:
                    return [2, _a.sent().blockNumber];
                }
              });
            });
          };
          BaseProvider2.prototype.poll = function() {
            return __awaiter2(this, void 0, void 0, function() {
              var pollId, runners, blockNumber, error_6, i3;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    pollId = nextPollId++;
                    runners = [];
                    blockNumber = null;
                    _a.label = 1;
                  case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4, this._getInternalBlockNumber(100 + this.pollingInterval / 2)];
                  case 2:
                    blockNumber = _a.sent();
                    return [3, 4];
                  case 3:
                    error_6 = _a.sent();
                    this.emit("error", error_6);
                    return [
                      2
                      /*return*/
                    ];
                  case 4:
                    this._setFastBlockNumber(blockNumber);
                    this.emit("poll", pollId, blockNumber);
                    if (blockNumber === this._lastBlockNumber) {
                      this.emit("didPoll", pollId);
                      return [
                        2
                        /*return*/
                      ];
                    }
                    if (this._emitted.block === -2) {
                      this._emitted.block = blockNumber - 1;
                    }
                    if (Math.abs(this._emitted.block - blockNumber) > 1e3) {
                      logger.warn("network block skew detected; skipping block events (emitted=" + this._emitted.block + " blockNumber" + blockNumber + ")");
                      this.emit("error", logger.makeError("network block skew detected", logger_1.Logger.errors.NETWORK_ERROR, {
                        blockNumber,
                        event: "blockSkew",
                        previousBlockNumber: this._emitted.block
                      }));
                      this.emit("block", blockNumber);
                    } else {
                      for (i3 = this._emitted.block + 1; i3 <= blockNumber; i3++) {
                        this.emit("block", i3);
                      }
                    }
                    if (this._emitted.block !== blockNumber) {
                      this._emitted.block = blockNumber;
                      Object.keys(this._emitted).forEach(function(key2) {
                        if (key2 === "block") {
                          return;
                        }
                        var eventBlockNumber = _this._emitted[key2];
                        if (eventBlockNumber === "pending") {
                          return;
                        }
                        if (blockNumber - eventBlockNumber > 12) {
                          delete _this._emitted[key2];
                        }
                      });
                    }
                    if (this._lastBlockNumber === -2) {
                      this._lastBlockNumber = blockNumber - 1;
                    }
                    this._events.forEach(function(event) {
                      switch (event.type) {
                        case "tx": {
                          var hash_2 = event.hash;
                          var runner = _this.getTransactionReceipt(hash_2).then(function(receipt) {
                            if (!receipt || receipt.blockNumber == null) {
                              return null;
                            }
                            _this._emitted["t:" + hash_2] = receipt.blockNumber;
                            _this.emit(hash_2, receipt);
                            return null;
                          }).catch(function(error) {
                            _this.emit("error", error);
                          });
                          runners.push(runner);
                          break;
                        }
                        case "filter": {
                          if (!event._inflight) {
                            event._inflight = true;
                            if (event._lastBlockNumber === -2) {
                              event._lastBlockNumber = blockNumber - 1;
                            }
                            var filter_1 = event.filter;
                            filter_1.fromBlock = event._lastBlockNumber + 1;
                            filter_1.toBlock = blockNumber;
                            var minFromBlock = filter_1.toBlock - _this._maxFilterBlockRange;
                            if (minFromBlock > filter_1.fromBlock) {
                              filter_1.fromBlock = minFromBlock;
                            }
                            if (filter_1.fromBlock < 0) {
                              filter_1.fromBlock = 0;
                            }
                            var runner = _this.getLogs(filter_1).then(function(logs) {
                              event._inflight = false;
                              if (logs.length === 0) {
                                return;
                              }
                              logs.forEach(function(log) {
                                if (log.blockNumber > event._lastBlockNumber) {
                                  event._lastBlockNumber = log.blockNumber;
                                }
                                _this._emitted["b:" + log.blockHash] = log.blockNumber;
                                _this._emitted["t:" + log.transactionHash] = log.blockNumber;
                                _this.emit(filter_1, log);
                              });
                            }).catch(function(error) {
                              _this.emit("error", error);
                              event._inflight = false;
                            });
                            runners.push(runner);
                          }
                          break;
                        }
                      }
                    });
                    this._lastBlockNumber = blockNumber;
                    Promise.all(runners).then(function() {
                      _this.emit("didPoll", pollId);
                    }).catch(function(error) {
                      _this.emit("error", error);
                    });
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          BaseProvider2.prototype.resetEventsBlock = function(blockNumber) {
            this._lastBlockNumber = blockNumber - 1;
            if (this.polling) {
              this.poll();
            }
          };
          Object.defineProperty(BaseProvider2.prototype, "network", {
            get: function() {
              return this._network;
            },
            enumerable: false,
            configurable: true
          });
          BaseProvider2.prototype.detectNetwork = function() {
            return __awaiter2(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                return [2, logger.throwError("provider does not support network detection", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "provider.detectNetwork"
                })];
              });
            });
          };
          BaseProvider2.prototype.getNetwork = function() {
            return __awaiter2(this, void 0, void 0, function() {
              var network, currentNetwork, error;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this._ready()];
                  case 1:
                    network = _a.sent();
                    return [4, this.detectNetwork()];
                  case 2:
                    currentNetwork = _a.sent();
                    if (!(network.chainId !== currentNetwork.chainId))
                      return [3, 5];
                    if (!this.anyNetwork)
                      return [3, 4];
                    this._network = currentNetwork;
                    this._lastBlockNumber = -2;
                    this._fastBlockNumber = null;
                    this._fastBlockNumberPromise = null;
                    this._fastQueryDate = 0;
                    this._emitted.block = -2;
                    this._maxInternalBlockNumber = -1024;
                    this._internalBlockNumber = null;
                    this.emit("network", currentNetwork, network);
                    return [4, stall(0)];
                  case 3:
                    _a.sent();
                    return [2, this._network];
                  case 4:
                    error = logger.makeError("underlying network changed", logger_1.Logger.errors.NETWORK_ERROR, {
                      event: "changed",
                      network,
                      detectedNetwork: currentNetwork
                    });
                    this.emit("error", error);
                    throw error;
                  case 5:
                    return [2, network];
                }
              });
            });
          };
          Object.defineProperty(BaseProvider2.prototype, "blockNumber", {
            get: function() {
              var _this = this;
              this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function(blockNumber) {
                _this._setFastBlockNumber(blockNumber);
              }, function(error) {
              });
              return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(BaseProvider2.prototype, "polling", {
            get: function() {
              return this._poller != null;
            },
            set: function(value) {
              var _this = this;
              if (value && !this._poller) {
                this._poller = setInterval(function() {
                  _this.poll();
                }, this.pollingInterval);
                if (!this._bootstrapPoll) {
                  this._bootstrapPoll = setTimeout(function() {
                    _this.poll();
                    _this._bootstrapPoll = setTimeout(function() {
                      if (!_this._poller) {
                        _this.poll();
                      }
                      _this._bootstrapPoll = null;
                    }, _this.pollingInterval);
                  }, 0);
                }
              } else if (!value && this._poller) {
                clearInterval(this._poller);
                this._poller = null;
              }
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(BaseProvider2.prototype, "pollingInterval", {
            get: function() {
              return this._pollingInterval;
            },
            set: function(value) {
              var _this = this;
              if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) {
                throw new Error("invalid polling interval");
              }
              this._pollingInterval = value;
              if (this._poller) {
                clearInterval(this._poller);
                this._poller = setInterval(function() {
                  _this.poll();
                }, this._pollingInterval);
              }
            },
            enumerable: false,
            configurable: true
          });
          BaseProvider2.prototype._getFastBlockNumber = function() {
            var _this = this;
            var now3 = getTime();
            if (now3 - this._fastQueryDate > 2 * this._pollingInterval) {
              this._fastQueryDate = now3;
              this._fastBlockNumberPromise = this.getBlockNumber().then(function(blockNumber) {
                if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {
                  _this._fastBlockNumber = blockNumber;
                }
                return _this._fastBlockNumber;
              });
            }
            return this._fastBlockNumberPromise;
          };
          BaseProvider2.prototype._setFastBlockNumber = function(blockNumber) {
            if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
              return;
            }
            this._fastQueryDate = getTime();
            if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
              this._fastBlockNumber = blockNumber;
              this._fastBlockNumberPromise = Promise.resolve(blockNumber);
            }
          };
          BaseProvider2.prototype.waitForTransaction = function(transactionHash, confirmations, timeout) {
            return __awaiter2(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                return [2, this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null)];
              });
            });
          };
          BaseProvider2.prototype._waitForTransaction = function(transactionHash, confirmations, timeout, replaceable) {
            return __awaiter2(this, void 0, void 0, function() {
              var receipt;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getTransactionReceipt(transactionHash)];
                  case 1:
                    receipt = _a.sent();
                    if ((receipt ? receipt.confirmations : 0) >= confirmations) {
                      return [2, receipt];
                    }
                    return [2, new Promise(function(resolve5, reject) {
                      var cancelFuncs = [];
                      var done = false;
                      var alreadyDone = function() {
                        if (done) {
                          return true;
                        }
                        done = true;
                        cancelFuncs.forEach(function(func) {
                          func();
                        });
                        return false;
                      };
                      var minedHandler = function(receipt2) {
                        if (receipt2.confirmations < confirmations) {
                          return;
                        }
                        if (alreadyDone()) {
                          return;
                        }
                        resolve5(receipt2);
                      };
                      _this.on(transactionHash, minedHandler);
                      cancelFuncs.push(function() {
                        _this.removeListener(transactionHash, minedHandler);
                      });
                      if (replaceable) {
                        var lastBlockNumber_1 = replaceable.startBlock;
                        var scannedBlock_1 = null;
                        var replaceHandler_1 = function(blockNumber) {
                          return __awaiter2(_this, void 0, void 0, function() {
                            var _this2 = this;
                            return __generator(this, function(_a2) {
                              switch (_a2.label) {
                                case 0:
                                  if (done) {
                                    return [
                                      2
                                      /*return*/
                                    ];
                                  }
                                  return [4, stall(1e3)];
                                case 1:
                                  _a2.sent();
                                  this.getTransactionCount(replaceable.from).then(function(nonce) {
                                    return __awaiter2(_this2, void 0, void 0, function() {
                                      var mined, block, ti, tx, receipt_1, reason;
                                      return __generator(this, function(_a3) {
                                        switch (_a3.label) {
                                          case 0:
                                            if (done) {
                                              return [
                                                2
                                                /*return*/
                                              ];
                                            }
                                            if (!(nonce <= replaceable.nonce))
                                              return [3, 1];
                                            lastBlockNumber_1 = blockNumber;
                                            return [3, 9];
                                          case 1:
                                            return [4, this.getTransaction(transactionHash)];
                                          case 2:
                                            mined = _a3.sent();
                                            if (mined && mined.blockNumber != null) {
                                              return [
                                                2
                                                /*return*/
                                              ];
                                            }
                                            if (scannedBlock_1 == null) {
                                              scannedBlock_1 = lastBlockNumber_1 - 3;
                                              if (scannedBlock_1 < replaceable.startBlock) {
                                                scannedBlock_1 = replaceable.startBlock;
                                              }
                                            }
                                            _a3.label = 3;
                                          case 3:
                                            if (!(scannedBlock_1 <= blockNumber))
                                              return [3, 9];
                                            if (done) {
                                              return [
                                                2
                                                /*return*/
                                              ];
                                            }
                                            return [4, this.getBlockWithTransactions(scannedBlock_1)];
                                          case 4:
                                            block = _a3.sent();
                                            ti = 0;
                                            _a3.label = 5;
                                          case 5:
                                            if (!(ti < block.transactions.length))
                                              return [3, 8];
                                            tx = block.transactions[ti];
                                            if (tx.hash === transactionHash) {
                                              return [
                                                2
                                                /*return*/
                                              ];
                                            }
                                            if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce))
                                              return [3, 7];
                                            if (done) {
                                              return [
                                                2
                                                /*return*/
                                              ];
                                            }
                                            return [4, this.waitForTransaction(tx.hash, confirmations)];
                                          case 6:
                                            receipt_1 = _a3.sent();
                                            if (alreadyDone()) {
                                              return [
                                                2
                                                /*return*/
                                              ];
                                            }
                                            reason = "replaced";
                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                                              reason = "repriced";
                                            } else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                                              reason = "cancelled";
                                            }
                                            reject(logger.makeError("transaction was replaced", logger_1.Logger.errors.TRANSACTION_REPLACED, {
                                              cancelled: reason === "replaced" || reason === "cancelled",
                                              reason,
                                              replacement: this._wrapTransaction(tx),
                                              hash: transactionHash,
                                              receipt: receipt_1
                                            }));
                                            return [
                                              2
                                              /*return*/
                                            ];
                                          case 7:
                                            ti++;
                                            return [3, 5];
                                          case 8:
                                            scannedBlock_1++;
                                            return [3, 3];
                                          case 9:
                                            if (done) {
                                              return [
                                                2
                                                /*return*/
                                              ];
                                            }
                                            this.once("block", replaceHandler_1);
                                            return [
                                              2
                                              /*return*/
                                            ];
                                        }
                                      });
                                    });
                                  }, function(error) {
                                    if (done) {
                                      return;
                                    }
                                    _this2.once("block", replaceHandler_1);
                                  });
                                  return [
                                    2
                                    /*return*/
                                  ];
                              }
                            });
                          });
                        };
                        if (done) {
                          return;
                        }
                        _this.once("block", replaceHandler_1);
                        cancelFuncs.push(function() {
                          _this.removeListener("block", replaceHandler_1);
                        });
                      }
                      if (typeof timeout === "number" && timeout > 0) {
                        var timer_1 = setTimeout(function() {
                          if (alreadyDone()) {
                            return;
                          }
                          reject(logger.makeError("timeout exceeded", logger_1.Logger.errors.TIMEOUT, { timeout }));
                        }, timeout);
                        if (timer_1.unref) {
                          timer_1.unref();
                        }
                        cancelFuncs.push(function() {
                          clearTimeout(timer_1);
                        });
                      }
                    })];
                }
              });
            });
          };
          BaseProvider2.prototype.getBlockNumber = function() {
            return __awaiter2(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                return [2, this._getInternalBlockNumber(0)];
              });
            });
          };
          BaseProvider2.prototype.getGasPrice = function() {
            return __awaiter2(this, void 0, void 0, function() {
              var result;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, this.perform("getGasPrice", {})];
                  case 2:
                    result = _a.sent();
                    try {
                      return [2, bignumber_1.BigNumber.from(result)];
                    } catch (error) {
                      return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                        method: "getGasPrice",
                        result,
                        error
                      })];
                    }
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          BaseProvider2.prototype.getBalance = function(addressOrName, blockTag) {
            return __awaiter2(this, void 0, void 0, function() {
              var params, result;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, (0, properties_1.resolveProperties)({
                      address: this._getAddress(addressOrName),
                      blockTag: this._getBlockTag(blockTag)
                    })];
                  case 2:
                    params = _a.sent();
                    return [4, this.perform("getBalance", params)];
                  case 3:
                    result = _a.sent();
                    try {
                      return [2, bignumber_1.BigNumber.from(result)];
                    } catch (error) {
                      return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                        method: "getBalance",
                        params,
                        result,
                        error
                      })];
                    }
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          BaseProvider2.prototype.getTransactionCount = function(addressOrName, blockTag) {
            return __awaiter2(this, void 0, void 0, function() {
              var params, result;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, (0, properties_1.resolveProperties)({
                      address: this._getAddress(addressOrName),
                      blockTag: this._getBlockTag(blockTag)
                    })];
                  case 2:
                    params = _a.sent();
                    return [4, this.perform("getTransactionCount", params)];
                  case 3:
                    result = _a.sent();
                    try {
                      return [2, bignumber_1.BigNumber.from(result).toNumber()];
                    } catch (error) {
                      return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                        method: "getTransactionCount",
                        params,
                        result,
                        error
                      })];
                    }
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          BaseProvider2.prototype.getCode = function(addressOrName, blockTag) {
            return __awaiter2(this, void 0, void 0, function() {
              var params, result;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, (0, properties_1.resolveProperties)({
                      address: this._getAddress(addressOrName),
                      blockTag: this._getBlockTag(blockTag)
                    })];
                  case 2:
                    params = _a.sent();
                    return [4, this.perform("getCode", params)];
                  case 3:
                    result = _a.sent();
                    try {
                      return [2, (0, bytes_1.hexlify)(result)];
                    } catch (error) {
                      return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                        method: "getCode",
                        params,
                        result,
                        error
                      })];
                    }
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          BaseProvider2.prototype.getStorageAt = function(addressOrName, position, blockTag) {
            return __awaiter2(this, void 0, void 0, function() {
              var params, result;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, (0, properties_1.resolveProperties)({
                      address: this._getAddress(addressOrName),
                      blockTag: this._getBlockTag(blockTag),
                      position: Promise.resolve(position).then(function(p2) {
                        return (0, bytes_1.hexValue)(p2);
                      })
                    })];
                  case 2:
                    params = _a.sent();
                    return [4, this.perform("getStorageAt", params)];
                  case 3:
                    result = _a.sent();
                    try {
                      return [2, (0, bytes_1.hexlify)(result)];
                    } catch (error) {
                      return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                        method: "getStorageAt",
                        params,
                        result,
                        error
                      })];
                    }
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          BaseProvider2.prototype._wrapTransaction = function(tx, hash, startBlock) {
            var _this = this;
            if (hash != null && (0, bytes_1.hexDataLength)(hash) !== 32) {
              throw new Error("invalid response - sendTransaction");
            }
            var result = tx;
            if (hash != null && tx.hash !== hash) {
              logger.throwError("Transaction hash mismatch from Provider.sendTransaction.", logger_1.Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
            }
            result.wait = function(confirms, timeout) {
              return __awaiter2(_this, void 0, void 0, function() {
                var replacement, receipt;
                return __generator(this, function(_a) {
                  switch (_a.label) {
                    case 0:
                      if (confirms == null) {
                        confirms = 1;
                      }
                      if (timeout == null) {
                        timeout = 0;
                      }
                      replacement = void 0;
                      if (confirms !== 0 && startBlock != null) {
                        replacement = {
                          data: tx.data,
                          from: tx.from,
                          nonce: tx.nonce,
                          to: tx.to,
                          value: tx.value,
                          startBlock
                        };
                      }
                      return [4, this._waitForTransaction(tx.hash, confirms, timeout, replacement)];
                    case 1:
                      receipt = _a.sent();
                      if (receipt == null && confirms === 0) {
                        return [2, null];
                      }
                      this._emitted["t:" + tx.hash] = receipt.blockNumber;
                      if (receipt.status === 0) {
                        logger.throwError("transaction failed", logger_1.Logger.errors.CALL_EXCEPTION, {
                          transactionHash: tx.hash,
                          transaction: tx,
                          receipt
                        });
                      }
                      return [2, receipt];
                  }
                });
              });
            };
            return result;
          };
          BaseProvider2.prototype.sendTransaction = function(signedTransaction) {
            return __awaiter2(this, void 0, void 0, function() {
              var hexTx, tx, blockNumber, hash, error_7;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, Promise.resolve(signedTransaction).then(function(t3) {
                      return (0, bytes_1.hexlify)(t3);
                    })];
                  case 2:
                    hexTx = _a.sent();
                    tx = this.formatter.transaction(signedTransaction);
                    if (tx.confirmations == null) {
                      tx.confirmations = 0;
                    }
                    return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                  case 3:
                    blockNumber = _a.sent();
                    _a.label = 4;
                  case 4:
                    _a.trys.push([4, 6, , 7]);
                    return [4, this.perform("sendTransaction", { signedTransaction: hexTx })];
                  case 5:
                    hash = _a.sent();
                    return [2, this._wrapTransaction(tx, hash, blockNumber)];
                  case 6:
                    error_7 = _a.sent();
                    error_7.transaction = tx;
                    error_7.transactionHash = tx.hash;
                    throw error_7;
                  case 7:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          BaseProvider2.prototype._getTransactionRequest = function(transaction) {
            return __awaiter2(this, void 0, void 0, function() {
              var values, tx, _a, _b;
              var _this = this;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    return [4, transaction];
                  case 1:
                    values = _c.sent();
                    tx = {};
                    ["from", "to"].forEach(function(key2) {
                      if (values[key2] == null) {
                        return;
                      }
                      tx[key2] = Promise.resolve(values[key2]).then(function(v2) {
                        return v2 ? _this._getAddress(v2) : null;
                      });
                    });
                    ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach(function(key2) {
                      if (values[key2] == null) {
                        return;
                      }
                      tx[key2] = Promise.resolve(values[key2]).then(function(v2) {
                        return v2 ? bignumber_1.BigNumber.from(v2) : null;
                      });
                    });
                    ["type"].forEach(function(key2) {
                      if (values[key2] == null) {
                        return;
                      }
                      tx[key2] = Promise.resolve(values[key2]).then(function(v2) {
                        return v2 != null ? v2 : null;
                      });
                    });
                    if (values.accessList) {
                      tx.accessList = this.formatter.accessList(values.accessList);
                    }
                    ["data"].forEach(function(key2) {
                      if (values[key2] == null) {
                        return;
                      }
                      tx[key2] = Promise.resolve(values[key2]).then(function(v2) {
                        return v2 ? (0, bytes_1.hexlify)(v2) : null;
                      });
                    });
                    _b = (_a = this.formatter).transactionRequest;
                    return [4, (0, properties_1.resolveProperties)(tx)];
                  case 2:
                    return [2, _b.apply(_a, [_c.sent()])];
                }
              });
            });
          };
          BaseProvider2.prototype._getFilter = function(filter4) {
            return __awaiter2(this, void 0, void 0, function() {
              var result, _a, _b;
              var _this = this;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    return [4, filter4];
                  case 1:
                    filter4 = _c.sent();
                    result = {};
                    if (filter4.address != null) {
                      result.address = this._getAddress(filter4.address);
                    }
                    ["blockHash", "topics"].forEach(function(key2) {
                      if (filter4[key2] == null) {
                        return;
                      }
                      result[key2] = filter4[key2];
                    });
                    ["fromBlock", "toBlock"].forEach(function(key2) {
                      if (filter4[key2] == null) {
                        return;
                      }
                      result[key2] = _this._getBlockTag(filter4[key2]);
                    });
                    _b = (_a = this.formatter).filter;
                    return [4, (0, properties_1.resolveProperties)(result)];
                  case 2:
                    return [2, _b.apply(_a, [_c.sent()])];
                }
              });
            });
          };
          BaseProvider2.prototype._call = function(transaction, blockTag, attempt) {
            return __awaiter2(this, void 0, void 0, function() {
              var txSender, result, data, sender, urls, urlsOffset, urlsLength, urlsData, u2, url2, calldata, callbackSelector, extraData, ccipResult, tx, error_8;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (attempt >= MAX_CCIP_REDIRECTS) {
                      logger.throwError("CCIP read exceeded maximum redirections", logger_1.Logger.errors.SERVER_ERROR, {
                        redirects: attempt,
                        transaction
                      });
                    }
                    txSender = transaction.to;
                    return [4, this.perform("call", { transaction, blockTag })];
                  case 1:
                    result = _a.sent();
                    if (!(attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && (0, bytes_1.hexDataLength)(result) % 32 === 4))
                      return [3, 5];
                    _a.label = 2;
                  case 2:
                    _a.trys.push([2, 4, , 5]);
                    data = (0, bytes_1.hexDataSlice)(result, 4);
                    sender = (0, bytes_1.hexDataSlice)(data, 0, 32);
                    if (!bignumber_1.BigNumber.from(sender).eq(txSender)) {
                      logger.throwError("CCIP Read sender did not match", logger_1.Logger.errors.CALL_EXCEPTION, {
                        name: "OffchainLookup",
                        signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                        transaction,
                        data: result
                      });
                    }
                    urls = [];
                    urlsOffset = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(data, 32, 64)).toNumber();
                    urlsLength = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(data, urlsOffset, urlsOffset + 32)).toNumber();
                    urlsData = (0, bytes_1.hexDataSlice)(data, urlsOffset + 32);
                    for (u2 = 0; u2 < urlsLength; u2++) {
                      url2 = _parseString(urlsData, u2 * 32);
                      if (url2 == null) {
                        logger.throwError("CCIP Read contained corrupt URL string", logger_1.Logger.errors.CALL_EXCEPTION, {
                          name: "OffchainLookup",
                          signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                          transaction,
                          data: result
                        });
                      }
                      urls.push(url2);
                    }
                    calldata = _parseBytes(data, 64);
                    if (!bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(data, 100, 128)).isZero()) {
                      logger.throwError("CCIP Read callback selector included junk", logger_1.Logger.errors.CALL_EXCEPTION, {
                        name: "OffchainLookup",
                        signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                        transaction,
                        data: result
                      });
                    }
                    callbackSelector = (0, bytes_1.hexDataSlice)(data, 96, 100);
                    extraData = _parseBytes(data, 128);
                    return [4, this.ccipReadFetch(transaction, calldata, urls)];
                  case 3:
                    ccipResult = _a.sent();
                    if (ccipResult == null) {
                      logger.throwError("CCIP Read disabled or provided no URLs", logger_1.Logger.errors.CALL_EXCEPTION, {
                        name: "OffchainLookup",
                        signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                        transaction,
                        data: result
                      });
                    }
                    tx = {
                      to: txSender,
                      data: (0, bytes_1.hexConcat)([callbackSelector, encodeBytes2([ccipResult, extraData])])
                    };
                    return [2, this._call(tx, blockTag, attempt + 1)];
                  case 4:
                    error_8 = _a.sent();
                    if (error_8.code === logger_1.Logger.errors.SERVER_ERROR) {
                      throw error_8;
                    }
                    return [3, 5];
                  case 5:
                    try {
                      return [2, (0, bytes_1.hexlify)(result)];
                    } catch (error) {
                      return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                        method: "call",
                        params: { transaction, blockTag },
                        result,
                        error
                      })];
                    }
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          BaseProvider2.prototype.call = function(transaction, blockTag) {
            return __awaiter2(this, void 0, void 0, function() {
              var resolved;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, (0, properties_1.resolveProperties)({
                      transaction: this._getTransactionRequest(transaction),
                      blockTag: this._getBlockTag(blockTag),
                      ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
                    })];
                  case 2:
                    resolved = _a.sent();
                    return [2, this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1)];
                }
              });
            });
          };
          BaseProvider2.prototype.estimateGas = function(transaction) {
            return __awaiter2(this, void 0, void 0, function() {
              var params, result;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, (0, properties_1.resolveProperties)({
                      transaction: this._getTransactionRequest(transaction)
                    })];
                  case 2:
                    params = _a.sent();
                    return [4, this.perform("estimateGas", params)];
                  case 3:
                    result = _a.sent();
                    try {
                      return [2, bignumber_1.BigNumber.from(result)];
                    } catch (error) {
                      return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                        method: "estimateGas",
                        params,
                        result,
                        error
                      })];
                    }
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          BaseProvider2.prototype._getAddress = function(addressOrName) {
            return __awaiter2(this, void 0, void 0, function() {
              var address;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, addressOrName];
                  case 1:
                    addressOrName = _a.sent();
                    if (typeof addressOrName !== "string") {
                      logger.throwArgumentError("invalid address or ENS name", "name", addressOrName);
                    }
                    return [4, this.resolveName(addressOrName)];
                  case 2:
                    address = _a.sent();
                    if (address == null) {
                      logger.throwError("ENS name not configured", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "resolveName(" + JSON.stringify(addressOrName) + ")"
                      });
                    }
                    return [2, address];
                }
              });
            });
          };
          BaseProvider2.prototype._getBlock = function(blockHashOrBlockTag, includeTransactions) {
            return __awaiter2(this, void 0, void 0, function() {
              var blockNumber, params, _a, error_9;
              var _this = this;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _b.sent();
                    return [4, blockHashOrBlockTag];
                  case 2:
                    blockHashOrBlockTag = _b.sent();
                    blockNumber = -128;
                    params = {
                      includeTransactions: !!includeTransactions
                    };
                    if (!(0, bytes_1.isHexString)(blockHashOrBlockTag, 32))
                      return [3, 3];
                    params.blockHash = blockHashOrBlockTag;
                    return [3, 6];
                  case 3:
                    _b.trys.push([3, 5, , 6]);
                    _a = params;
                    return [4, this._getBlockTag(blockHashOrBlockTag)];
                  case 4:
                    _a.blockTag = _b.sent();
                    if ((0, bytes_1.isHexString)(params.blockTag)) {
                      blockNumber = parseInt(params.blockTag.substring(2), 16);
                    }
                    return [3, 6];
                  case 5:
                    error_9 = _b.sent();
                    logger.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
                    return [3, 6];
                  case 6:
                    return [2, (0, web_1.poll)(function() {
                      return __awaiter2(_this, void 0, void 0, function() {
                        var block, blockNumber_1, i3, tx, confirmations, blockWithTxs;
                        var _this2 = this;
                        return __generator(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              return [4, this.perform("getBlock", params)];
                            case 1:
                              block = _a2.sent();
                              if (block == null) {
                                if (params.blockHash != null) {
                                  if (this._emitted["b:" + params.blockHash] == null) {
                                    return [2, null];
                                  }
                                }
                                if (params.blockTag != null) {
                                  if (blockNumber > this._emitted.block) {
                                    return [2, null];
                                  }
                                }
                                return [2, void 0];
                              }
                              if (!includeTransactions)
                                return [3, 8];
                              blockNumber_1 = null;
                              i3 = 0;
                              _a2.label = 2;
                            case 2:
                              if (!(i3 < block.transactions.length))
                                return [3, 7];
                              tx = block.transactions[i3];
                              if (!(tx.blockNumber == null))
                                return [3, 3];
                              tx.confirmations = 0;
                              return [3, 6];
                            case 3:
                              if (!(tx.confirmations == null))
                                return [3, 6];
                              if (!(blockNumber_1 == null))
                                return [3, 5];
                              return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                            case 4:
                              blockNumber_1 = _a2.sent();
                              _a2.label = 5;
                            case 5:
                              confirmations = blockNumber_1 - tx.blockNumber + 1;
                              if (confirmations <= 0) {
                                confirmations = 1;
                              }
                              tx.confirmations = confirmations;
                              _a2.label = 6;
                            case 6:
                              i3++;
                              return [3, 2];
                            case 7:
                              blockWithTxs = this.formatter.blockWithTransactions(block);
                              blockWithTxs.transactions = blockWithTxs.transactions.map(function(tx2) {
                                return _this2._wrapTransaction(tx2);
                              });
                              return [2, blockWithTxs];
                            case 8:
                              return [2, this.formatter.block(block)];
                          }
                        });
                      });
                    }, { oncePoll: this })];
                }
              });
            });
          };
          BaseProvider2.prototype.getBlock = function(blockHashOrBlockTag) {
            return this._getBlock(blockHashOrBlockTag, false);
          };
          BaseProvider2.prototype.getBlockWithTransactions = function(blockHashOrBlockTag) {
            return this._getBlock(blockHashOrBlockTag, true);
          };
          BaseProvider2.prototype.getTransaction = function(transactionHash) {
            return __awaiter2(this, void 0, void 0, function() {
              var params;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, transactionHash];
                  case 2:
                    transactionHash = _a.sent();
                    params = { transactionHash: this.formatter.hash(transactionHash, true) };
                    return [2, (0, web_1.poll)(function() {
                      return __awaiter2(_this, void 0, void 0, function() {
                        var result, tx, blockNumber, confirmations;
                        return __generator(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              return [4, this.perform("getTransaction", params)];
                            case 1:
                              result = _a2.sent();
                              if (result == null) {
                                if (this._emitted["t:" + transactionHash] == null) {
                                  return [2, null];
                                }
                                return [2, void 0];
                              }
                              tx = this.formatter.transactionResponse(result);
                              if (!(tx.blockNumber == null))
                                return [3, 2];
                              tx.confirmations = 0;
                              return [3, 4];
                            case 2:
                              if (!(tx.confirmations == null))
                                return [3, 4];
                              return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                            case 3:
                              blockNumber = _a2.sent();
                              confirmations = blockNumber - tx.blockNumber + 1;
                              if (confirmations <= 0) {
                                confirmations = 1;
                              }
                              tx.confirmations = confirmations;
                              _a2.label = 4;
                            case 4:
                              return [2, this._wrapTransaction(tx)];
                          }
                        });
                      });
                    }, { oncePoll: this })];
                }
              });
            });
          };
          BaseProvider2.prototype.getTransactionReceipt = function(transactionHash) {
            return __awaiter2(this, void 0, void 0, function() {
              var params;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, transactionHash];
                  case 2:
                    transactionHash = _a.sent();
                    params = { transactionHash: this.formatter.hash(transactionHash, true) };
                    return [2, (0, web_1.poll)(function() {
                      return __awaiter2(_this, void 0, void 0, function() {
                        var result, receipt, blockNumber, confirmations;
                        return __generator(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              return [4, this.perform("getTransactionReceipt", params)];
                            case 1:
                              result = _a2.sent();
                              if (result == null) {
                                if (this._emitted["t:" + transactionHash] == null) {
                                  return [2, null];
                                }
                                return [2, void 0];
                              }
                              if (result.blockHash == null) {
                                return [2, void 0];
                              }
                              receipt = this.formatter.receipt(result);
                              if (!(receipt.blockNumber == null))
                                return [3, 2];
                              receipt.confirmations = 0;
                              return [3, 4];
                            case 2:
                              if (!(receipt.confirmations == null))
                                return [3, 4];
                              return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                            case 3:
                              blockNumber = _a2.sent();
                              confirmations = blockNumber - receipt.blockNumber + 1;
                              if (confirmations <= 0) {
                                confirmations = 1;
                              }
                              receipt.confirmations = confirmations;
                              _a2.label = 4;
                            case 4:
                              return [2, receipt];
                          }
                        });
                      });
                    }, { oncePoll: this })];
                }
              });
            });
          };
          BaseProvider2.prototype.getLogs = function(filter4) {
            return __awaiter2(this, void 0, void 0, function() {
              var params, logs;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, (0, properties_1.resolveProperties)({ filter: this._getFilter(filter4) })];
                  case 2:
                    params = _a.sent();
                    return [4, this.perform("getLogs", params)];
                  case 3:
                    logs = _a.sent();
                    logs.forEach(function(log) {
                      if (log.removed == null) {
                        log.removed = false;
                      }
                    });
                    return [2, formatter_1.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs)];
                }
              });
            });
          };
          BaseProvider2.prototype.getEtherPrice = function() {
            return __awaiter2(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [2, this.perform("getEtherPrice", {})];
                }
              });
            });
          };
          BaseProvider2.prototype._getBlockTag = function(blockTag) {
            return __awaiter2(this, void 0, void 0, function() {
              var blockNumber;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, blockTag];
                  case 1:
                    blockTag = _a.sent();
                    if (!(typeof blockTag === "number" && blockTag < 0))
                      return [3, 3];
                    if (blockTag % 1) {
                      logger.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                    }
                    return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                  case 2:
                    blockNumber = _a.sent();
                    blockNumber += blockTag;
                    if (blockNumber < 0) {
                      blockNumber = 0;
                    }
                    return [2, this.formatter.blockTag(blockNumber)];
                  case 3:
                    return [2, this.formatter.blockTag(blockTag)];
                }
              });
            });
          };
          BaseProvider2.prototype.getResolver = function(name5) {
            return __awaiter2(this, void 0, void 0, function() {
              var currentName, addr, resolver, _a;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    currentName = name5;
                    _b.label = 1;
                  case 1:
                    if (false)
                      return [3, 6];
                    if (currentName === "" || currentName === ".") {
                      return [2, null];
                    }
                    if (name5 !== "eth" && currentName === "eth") {
                      return [2, null];
                    }
                    return [4, this._getResolver(currentName, "getResolver")];
                  case 2:
                    addr = _b.sent();
                    if (!(addr != null))
                      return [3, 5];
                    resolver = new Resolver(this, addr, name5);
                    _a = currentName !== name5;
                    if (!_a)
                      return [3, 4];
                    return [4, resolver.supportsWildcard()];
                  case 3:
                    _a = !_b.sent();
                    _b.label = 4;
                  case 4:
                    if (_a) {
                      return [2, null];
                    }
                    return [2, resolver];
                  case 5:
                    currentName = currentName.split(".").slice(1).join(".");
                    return [3, 1];
                  case 6:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          BaseProvider2.prototype._getResolver = function(name5, operation) {
            return __awaiter2(this, void 0, void 0, function() {
              var network, addrData, error_10;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (operation == null) {
                      operation = "ENS";
                    }
                    return [4, this.getNetwork()];
                  case 1:
                    network = _a.sent();
                    if (!network.ensAddress) {
                      logger.throwError("network does not support ENS", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });
                    }
                    _a.label = 2;
                  case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4, this.call({
                      to: network.ensAddress,
                      data: "0x0178b8bf" + (0, hash_1.namehash)(name5).substring(2)
                    })];
                  case 3:
                    addrData = _a.sent();
                    return [2, this.formatter.callAddress(addrData)];
                  case 4:
                    error_10 = _a.sent();
                    return [3, 5];
                  case 5:
                    return [2, null];
                }
              });
            });
          };
          BaseProvider2.prototype.resolveName = function(name5) {
            return __awaiter2(this, void 0, void 0, function() {
              var resolver;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, name5];
                  case 1:
                    name5 = _a.sent();
                    try {
                      return [2, Promise.resolve(this.formatter.address(name5))];
                    } catch (error) {
                      if ((0, bytes_1.isHexString)(name5)) {
                        throw error;
                      }
                    }
                    if (typeof name5 !== "string") {
                      logger.throwArgumentError("invalid ENS name", "name", name5);
                    }
                    return [4, this.getResolver(name5)];
                  case 2:
                    resolver = _a.sent();
                    if (!resolver) {
                      return [2, null];
                    }
                    return [4, resolver.getAddress()];
                  case 3:
                    return [2, _a.sent()];
                }
              });
            });
          };
          BaseProvider2.prototype.lookupAddress = function(address) {
            return __awaiter2(this, void 0, void 0, function() {
              var node, resolverAddr, name5, _a, addr;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    return [4, address];
                  case 1:
                    address = _b.sent();
                    address = this.formatter.address(address);
                    node = address.substring(2).toLowerCase() + ".addr.reverse";
                    return [4, this._getResolver(node, "lookupAddress")];
                  case 2:
                    resolverAddr = _b.sent();
                    if (resolverAddr == null) {
                      return [2, null];
                    }
                    _a = _parseString;
                    return [4, this.call({
                      to: resolverAddr,
                      data: "0x691f3431" + (0, hash_1.namehash)(node).substring(2)
                    })];
                  case 3:
                    name5 = _a.apply(void 0, [_b.sent(), 0]);
                    return [4, this.resolveName(name5)];
                  case 4:
                    addr = _b.sent();
                    if (addr != address) {
                      return [2, null];
                    }
                    return [2, name5];
                }
              });
            });
          };
          BaseProvider2.prototype.getAvatar = function(nameOrAddress) {
            return __awaiter2(this, void 0, void 0, function() {
              var resolver, address, node, resolverAddress, avatar_1, error_11, name_1, _a, error_12, avatar;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    resolver = null;
                    if (!(0, bytes_1.isHexString)(nameOrAddress))
                      return [3, 10];
                    address = this.formatter.address(nameOrAddress);
                    node = address.substring(2).toLowerCase() + ".addr.reverse";
                    return [4, this._getResolver(node, "getAvatar")];
                  case 1:
                    resolverAddress = _b.sent();
                    if (!resolverAddress) {
                      return [2, null];
                    }
                    resolver = new Resolver(this, resolverAddress, node);
                    _b.label = 2;
                  case 2:
                    _b.trys.push([2, 4, , 5]);
                    return [4, resolver.getAvatar()];
                  case 3:
                    avatar_1 = _b.sent();
                    if (avatar_1) {
                      return [2, avatar_1.url];
                    }
                    return [3, 5];
                  case 4:
                    error_11 = _b.sent();
                    if (error_11.code !== logger_1.Logger.errors.CALL_EXCEPTION) {
                      throw error_11;
                    }
                    return [3, 5];
                  case 5:
                    _b.trys.push([5, 8, , 9]);
                    _a = _parseString;
                    return [4, this.call({
                      to: resolverAddress,
                      data: "0x691f3431" + (0, hash_1.namehash)(node).substring(2)
                    })];
                  case 6:
                    name_1 = _a.apply(void 0, [_b.sent(), 0]);
                    return [4, this.getResolver(name_1)];
                  case 7:
                    resolver = _b.sent();
                    return [3, 9];
                  case 8:
                    error_12 = _b.sent();
                    if (error_12.code !== logger_1.Logger.errors.CALL_EXCEPTION) {
                      throw error_12;
                    }
                    return [2, null];
                  case 9:
                    return [3, 12];
                  case 10:
                    return [4, this.getResolver(nameOrAddress)];
                  case 11:
                    resolver = _b.sent();
                    if (!resolver) {
                      return [2, null];
                    }
                    _b.label = 12;
                  case 12:
                    return [4, resolver.getAvatar()];
                  case 13:
                    avatar = _b.sent();
                    if (avatar == null) {
                      return [2, null];
                    }
                    return [2, avatar.url];
                }
              });
            });
          };
          BaseProvider2.prototype.perform = function(method4, params) {
            return logger.throwError(method4 + " not implemented", logger_1.Logger.errors.NOT_IMPLEMENTED, { operation: method4 });
          };
          BaseProvider2.prototype._startEvent = function(event) {
            this.polling = this._events.filter(function(e3) {
              return e3.pollable();
            }).length > 0;
          };
          BaseProvider2.prototype._stopEvent = function(event) {
            this.polling = this._events.filter(function(e3) {
              return e3.pollable();
            }).length > 0;
          };
          BaseProvider2.prototype._addEventListener = function(eventName, listener, once) {
            var event = new Event(getEventTag(eventName), listener, once);
            this._events.push(event);
            this._startEvent(event);
            return this;
          };
          BaseProvider2.prototype.on = function(eventName, listener) {
            return this._addEventListener(eventName, listener, false);
          };
          BaseProvider2.prototype.once = function(eventName, listener) {
            return this._addEventListener(eventName, listener, true);
          };
          BaseProvider2.prototype.emit = function(eventName) {
            var _this = this;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments[_i];
            }
            var result = false;
            var stopped = [];
            var eventTag = getEventTag(eventName);
            this._events = this._events.filter(function(event) {
              if (event.tag !== eventTag) {
                return true;
              }
              setTimeout(function() {
                event.listener.apply(_this, args);
              }, 0);
              result = true;
              if (event.once) {
                stopped.push(event);
                return false;
              }
              return true;
            });
            stopped.forEach(function(event) {
              _this._stopEvent(event);
            });
            return result;
          };
          BaseProvider2.prototype.listenerCount = function(eventName) {
            if (!eventName) {
              return this._events.length;
            }
            var eventTag = getEventTag(eventName);
            return this._events.filter(function(event) {
              return event.tag === eventTag;
            }).length;
          };
          BaseProvider2.prototype.listeners = function(eventName) {
            if (eventName == null) {
              return this._events.map(function(event) {
                return event.listener;
              });
            }
            var eventTag = getEventTag(eventName);
            return this._events.filter(function(event) {
              return event.tag === eventTag;
            }).map(function(event) {
              return event.listener;
            });
          };
          BaseProvider2.prototype.off = function(eventName, listener) {
            var _this = this;
            if (listener == null) {
              return this.removeAllListeners(eventName);
            }
            var stopped = [];
            var found = false;
            var eventTag = getEventTag(eventName);
            this._events = this._events.filter(function(event) {
              if (event.tag !== eventTag || event.listener != listener) {
                return true;
              }
              if (found) {
                return true;
              }
              found = true;
              stopped.push(event);
              return false;
            });
            stopped.forEach(function(event) {
              _this._stopEvent(event);
            });
            return this;
          };
          BaseProvider2.prototype.removeAllListeners = function(eventName) {
            var _this = this;
            var stopped = [];
            if (eventName == null) {
              stopped = this._events;
              this._events = [];
            } else {
              var eventTag_1 = getEventTag(eventName);
              this._events = this._events.filter(function(event) {
                if (event.tag !== eventTag_1) {
                  return true;
                }
                stopped.push(event);
                return false;
              });
            }
            stopped.forEach(function(event) {
              _this._stopEvent(event);
            });
            return this;
          };
          return BaseProvider2;
        }(abstract_provider_1.Provider)
      );
      exports2.BaseProvider = BaseProvider;
    }
  });

  // node_modules/@ethersproject/abstract-signer/lib/_version.js
  var require_version16 = __commonJS({
    "node_modules/@ethersproject/abstract-signer/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "abstract-signer/5.7.0";
    }
  });

  // node_modules/@ethersproject/abstract-signer/lib/index.js
  var require_lib20 = __commonJS({
    "node_modules/@ethersproject/abstract-signer/lib/index.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports2 && exports2.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y2, t3, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                return t3;
              if (y2 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t3[1]) {
                    _.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _.label < t3[2]) {
                    _.label = t3[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.VoidSigner = exports2.Signer = void 0;
      var properties_1 = require_lib4();
      var logger_1 = require_lib();
      var _version_1 = require_version16();
      var logger = new logger_1.Logger(_version_1.version);
      var allowedTransactionKeys = [
        "accessList",
        "ccipReadEnabled",
        "chainId",
        "customData",
        "data",
        "from",
        "gasLimit",
        "gasPrice",
        "maxFeePerGas",
        "maxPriorityFeePerGas",
        "nonce",
        "to",
        "type",
        "value"
      ];
      var forwardErrors = [
        logger_1.Logger.errors.INSUFFICIENT_FUNDS,
        logger_1.Logger.errors.NONCE_EXPIRED,
        logger_1.Logger.errors.REPLACEMENT_UNDERPRICED
      ];
      var Signer = (
        /** @class */
        function() {
          function Signer2() {
            var _newTarget = this.constructor;
            logger.checkAbstract(_newTarget, Signer2);
            (0, properties_1.defineReadOnly)(this, "_isSigner", true);
          }
          Signer2.prototype.getBalance = function(blockTag) {
            return __awaiter2(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("getBalance");
                    return [4, this.provider.getBalance(this.getAddress(), blockTag)];
                  case 1:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.getTransactionCount = function(blockTag) {
            return __awaiter2(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("getTransactionCount");
                    return [4, this.provider.getTransactionCount(this.getAddress(), blockTag)];
                  case 1:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.estimateGas = function(transaction) {
            return __awaiter2(this, void 0, void 0, function() {
              var tx;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("estimateGas");
                    return [4, (0, properties_1.resolveProperties)(this.checkTransaction(transaction))];
                  case 1:
                    tx = _a.sent();
                    return [4, this.provider.estimateGas(tx)];
                  case 2:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.call = function(transaction, blockTag) {
            return __awaiter2(this, void 0, void 0, function() {
              var tx;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("call");
                    return [4, (0, properties_1.resolveProperties)(this.checkTransaction(transaction))];
                  case 1:
                    tx = _a.sent();
                    return [4, this.provider.call(tx, blockTag)];
                  case 2:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.sendTransaction = function(transaction) {
            return __awaiter2(this, void 0, void 0, function() {
              var tx, signedTx;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("sendTransaction");
                    return [4, this.populateTransaction(transaction)];
                  case 1:
                    tx = _a.sent();
                    return [4, this.signTransaction(tx)];
                  case 2:
                    signedTx = _a.sent();
                    return [4, this.provider.sendTransaction(signedTx)];
                  case 3:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.getChainId = function() {
            return __awaiter2(this, void 0, void 0, function() {
              var network;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("getChainId");
                    return [4, this.provider.getNetwork()];
                  case 1:
                    network = _a.sent();
                    return [2, network.chainId];
                }
              });
            });
          };
          Signer2.prototype.getGasPrice = function() {
            return __awaiter2(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("getGasPrice");
                    return [4, this.provider.getGasPrice()];
                  case 1:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.getFeeData = function() {
            return __awaiter2(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("getFeeData");
                    return [4, this.provider.getFeeData()];
                  case 1:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.resolveName = function(name5) {
            return __awaiter2(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("resolveName");
                    return [4, this.provider.resolveName(name5)];
                  case 1:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.checkTransaction = function(transaction) {
            for (var key2 in transaction) {
              if (allowedTransactionKeys.indexOf(key2) === -1) {
                logger.throwArgumentError("invalid transaction key: " + key2, "transaction", transaction);
              }
            }
            var tx = (0, properties_1.shallowCopy)(transaction);
            if (tx.from == null) {
              tx.from = this.getAddress();
            } else {
              tx.from = Promise.all([
                Promise.resolve(tx.from),
                this.getAddress()
              ]).then(function(result) {
                if (result[0].toLowerCase() !== result[1].toLowerCase()) {
                  logger.throwArgumentError("from address mismatch", "transaction", transaction);
                }
                return result[0];
              });
            }
            return tx;
          };
          Signer2.prototype.populateTransaction = function(transaction) {
            return __awaiter2(this, void 0, void 0, function() {
              var tx, hasEip1559, feeData, gasPrice;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, (0, properties_1.resolveProperties)(this.checkTransaction(transaction))];
                  case 1:
                    tx = _a.sent();
                    if (tx.to != null) {
                      tx.to = Promise.resolve(tx.to).then(function(to) {
                        return __awaiter2(_this, void 0, void 0, function() {
                          var address;
                          return __generator(this, function(_a2) {
                            switch (_a2.label) {
                              case 0:
                                if (to == null) {
                                  return [2, null];
                                }
                                return [4, this.resolveName(to)];
                              case 1:
                                address = _a2.sent();
                                if (address == null) {
                                  logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                                }
                                return [2, address];
                            }
                          });
                        });
                      });
                      tx.to.catch(function(error) {
                      });
                    }
                    hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;
                    if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
                      logger.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
                    } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
                      logger.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
                    }
                    if (!((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)))
                      return [3, 2];
                    tx.type = 2;
                    return [3, 5];
                  case 2:
                    if (!(tx.type === 0 || tx.type === 1))
                      return [3, 3];
                    if (tx.gasPrice == null) {
                      tx.gasPrice = this.getGasPrice();
                    }
                    return [3, 5];
                  case 3:
                    return [4, this.getFeeData()];
                  case 4:
                    feeData = _a.sent();
                    if (tx.type == null) {
                      if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                        tx.type = 2;
                        if (tx.gasPrice != null) {
                          gasPrice = tx.gasPrice;
                          delete tx.gasPrice;
                          tx.maxFeePerGas = gasPrice;
                          tx.maxPriorityFeePerGas = gasPrice;
                        } else {
                          if (tx.maxFeePerGas == null) {
                            tx.maxFeePerGas = feeData.maxFeePerGas;
                          }
                          if (tx.maxPriorityFeePerGas == null) {
                            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                          }
                        }
                      } else if (feeData.gasPrice != null) {
                        if (hasEip1559) {
                          logger.throwError("network does not support EIP-1559", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "populateTransaction"
                          });
                        }
                        if (tx.gasPrice == null) {
                          tx.gasPrice = feeData.gasPrice;
                        }
                        tx.type = 0;
                      } else {
                        logger.throwError("failed to get consistent fee data", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                          operation: "signer.getFeeData"
                        });
                      }
                    } else if (tx.type === 2) {
                      if (tx.maxFeePerGas == null) {
                        tx.maxFeePerGas = feeData.maxFeePerGas;
                      }
                      if (tx.maxPriorityFeePerGas == null) {
                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                      }
                    }
                    _a.label = 5;
                  case 5:
                    if (tx.nonce == null) {
                      tx.nonce = this.getTransactionCount("pending");
                    }
                    if (tx.gasLimit == null) {
                      tx.gasLimit = this.estimateGas(tx).catch(function(error) {
                        if (forwardErrors.indexOf(error.code) >= 0) {
                          throw error;
                        }
                        return logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                          error,
                          tx
                        });
                      });
                    }
                    if (tx.chainId == null) {
                      tx.chainId = this.getChainId();
                    } else {
                      tx.chainId = Promise.all([
                        Promise.resolve(tx.chainId),
                        this.getChainId()
                      ]).then(function(results) {
                        if (results[1] !== 0 && results[0] !== results[1]) {
                          logger.throwArgumentError("chainId address mismatch", "transaction", transaction);
                        }
                        return results[0];
                      });
                    }
                    return [4, (0, properties_1.resolveProperties)(tx)];
                  case 6:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype._checkProvider = function(operation) {
            if (!this.provider) {
              logger.throwError("missing provider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: operation || "_checkProvider"
              });
            }
          };
          Signer2.isSigner = function(value) {
            return !!(value && value._isSigner);
          };
          return Signer2;
        }()
      );
      exports2.Signer = Signer;
      var VoidSigner = (
        /** @class */
        function(_super) {
          __extends(VoidSigner2, _super);
          function VoidSigner2(address, provider) {
            var _this = _super.call(this) || this;
            (0, properties_1.defineReadOnly)(_this, "address", address);
            (0, properties_1.defineReadOnly)(_this, "provider", provider || null);
            return _this;
          }
          VoidSigner2.prototype.getAddress = function() {
            return Promise.resolve(this.address);
          };
          VoidSigner2.prototype._fail = function(message, operation) {
            return Promise.resolve().then(function() {
              logger.throwError(message, logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation });
            });
          };
          VoidSigner2.prototype.signMessage = function(message) {
            return this._fail("VoidSigner cannot sign messages", "signMessage");
          };
          VoidSigner2.prototype.signTransaction = function(transaction) {
            return this._fail("VoidSigner cannot sign transactions", "signTransaction");
          };
          VoidSigner2.prototype._signTypedData = function(domain, types3, value) {
            return this._fail("VoidSigner cannot sign typed data", "signTypedData");
          };
          VoidSigner2.prototype.connect = function(provider) {
            return new VoidSigner2(this.address, provider);
          };
          return VoidSigner2;
        }(Signer)
      );
      exports2.VoidSigner = VoidSigner;
    }
  });

  // node_modules/@ethersproject/providers/lib/json-rpc-provider.js
  var require_json_rpc_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/json-rpc-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports2 && exports2.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y2, t3, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                return t3;
              if (y2 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t3[1]) {
                    _.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _.label < t3[2]) {
                    _.label = t3[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.JsonRpcProvider = exports2.JsonRpcSigner = void 0;
      var abstract_signer_1 = require_lib20();
      var bignumber_1 = require_lib3();
      var bytes_1 = require_lib2();
      var hash_1 = require_lib15();
      var properties_1 = require_lib4();
      var strings_1 = require_lib11();
      var transactions_1 = require_lib19();
      var web_1 = require_lib17();
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      var base_provider_1 = require_base_provider();
      var errorGas = ["call", "estimateGas"];
      function spelunk(value, requireData) {
        if (value == null) {
          return null;
        }
        if (typeof value.message === "string" && value.message.match("reverted")) {
          var data = (0, bytes_1.isHexString)(value.data) ? value.data : null;
          if (!requireData || data) {
            return { message: value.message, data };
          }
        }
        if (typeof value === "object") {
          for (var key2 in value) {
            var result = spelunk(value[key2], requireData);
            if (result) {
              return result;
            }
          }
          return null;
        }
        if (typeof value === "string") {
          try {
            return spelunk(JSON.parse(value), requireData);
          } catch (error) {
          }
        }
        return null;
      }
      function checkError(method4, error, params) {
        var transaction = params.transaction || params.signedTransaction;
        if (method4 === "call") {
          var result = spelunk(error, true);
          if (result) {
            return result.data;
          }
          logger.throwError("missing revert data in call exception; Transaction reverted without a reason string", logger_1.Logger.errors.CALL_EXCEPTION, {
            data: "0x",
            transaction,
            error
          });
        }
        if (method4 === "estimateGas") {
          var result = spelunk(error.body, false);
          if (result == null) {
            result = spelunk(error, false);
          }
          if (result) {
            logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
              reason: result.message,
              method: method4,
              transaction,
              error
            });
          }
        }
        var message = error.message;
        if (error.code === logger_1.Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === "string") {
          message = error.error.message;
        } else if (typeof error.body === "string") {
          message = error.body;
        } else if (typeof error.responseText === "string") {
          message = error.responseText;
        }
        message = (message || "").toLowerCase();
        if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {
          logger.throwError("insufficient funds for intrinsic transaction cost", logger_1.Logger.errors.INSUFFICIENT_FUNDS, {
            error,
            method: method4,
            transaction
          });
        }
        if (message.match(/nonce (is )?too low/i)) {
          logger.throwError("nonce has already been used", logger_1.Logger.errors.NONCE_EXPIRED, {
            error,
            method: method4,
            transaction
          });
        }
        if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {
          logger.throwError("replacement fee too low", logger_1.Logger.errors.REPLACEMENT_UNDERPRICED, {
            error,
            method: method4,
            transaction
          });
        }
        if (message.match(/only replay-protected/i)) {
          logger.throwError("legacy pre-eip-155 transactions not supported", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
            error,
            method: method4,
            transaction
          });
        }
        if (errorGas.indexOf(method4) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {
          logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
            error,
            method: method4,
            transaction
          });
        }
        throw error;
      }
      function timer(timeout) {
        return new Promise(function(resolve5) {
          setTimeout(resolve5, timeout);
        });
      }
      function getResult(payload) {
        if (payload.error) {
          var error = new Error(payload.error.message);
          error.code = payload.error.code;
          error.data = payload.error.data;
          throw error;
        }
        return payload.result;
      }
      function getLowerCase(value) {
        if (value) {
          return value.toLowerCase();
        }
        return value;
      }
      var _constructorGuard = {};
      var JsonRpcSigner = (
        /** @class */
        function(_super) {
          __extends(JsonRpcSigner2, _super);
          function JsonRpcSigner2(constructorGuard, provider, addressOrIndex) {
            var _this = _super.call(this) || this;
            if (constructorGuard !== _constructorGuard) {
              throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
            }
            (0, properties_1.defineReadOnly)(_this, "provider", provider);
            if (addressOrIndex == null) {
              addressOrIndex = 0;
            }
            if (typeof addressOrIndex === "string") {
              (0, properties_1.defineReadOnly)(_this, "_address", _this.provider.formatter.address(addressOrIndex));
              (0, properties_1.defineReadOnly)(_this, "_index", null);
            } else if (typeof addressOrIndex === "number") {
              (0, properties_1.defineReadOnly)(_this, "_index", addressOrIndex);
              (0, properties_1.defineReadOnly)(_this, "_address", null);
            } else {
              logger.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
            }
            return _this;
          }
          JsonRpcSigner2.prototype.connect = function(provider) {
            return logger.throwError("cannot alter JSON-RPC Signer connection", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "connect"
            });
          };
          JsonRpcSigner2.prototype.connectUnchecked = function() {
            return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
          };
          JsonRpcSigner2.prototype.getAddress = function() {
            var _this = this;
            if (this._address) {
              return Promise.resolve(this._address);
            }
            return this.provider.send("eth_accounts", []).then(function(accounts) {
              if (accounts.length <= _this._index) {
                logger.throwError("unknown account #" + _this._index, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "getAddress"
                });
              }
              return _this.provider.formatter.address(accounts[_this._index]);
            });
          };
          JsonRpcSigner2.prototype.sendUncheckedTransaction = function(transaction) {
            var _this = this;
            transaction = (0, properties_1.shallowCopy)(transaction);
            var fromAddress = this.getAddress().then(function(address) {
              if (address) {
                address = address.toLowerCase();
              }
              return address;
            });
            if (transaction.gasLimit == null) {
              var estimate = (0, properties_1.shallowCopy)(transaction);
              estimate.from = fromAddress;
              transaction.gasLimit = this.provider.estimateGas(estimate);
            }
            if (transaction.to != null) {
              transaction.to = Promise.resolve(transaction.to).then(function(to) {
                return __awaiter2(_this, void 0, void 0, function() {
                  var address;
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                      case 0:
                        if (to == null) {
                          return [2, null];
                        }
                        return [4, this.provider.resolveName(to)];
                      case 1:
                        address = _a.sent();
                        if (address == null) {
                          logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                        }
                        return [2, address];
                    }
                  });
                });
              });
            }
            return (0, properties_1.resolveProperties)({
              tx: (0, properties_1.resolveProperties)(transaction),
              sender: fromAddress
            }).then(function(_a) {
              var tx = _a.tx, sender = _a.sender;
              if (tx.from != null) {
                if (tx.from.toLowerCase() !== sender) {
                  logger.throwArgumentError("from address mismatch", "transaction", transaction);
                }
              } else {
                tx.from = sender;
              }
              var hexTx = _this.provider.constructor.hexlifyTransaction(tx, { from: true });
              return _this.provider.send("eth_sendTransaction", [hexTx]).then(function(hash) {
                return hash;
              }, function(error) {
                if (typeof error.message === "string" && error.message.match(/user denied/i)) {
                  logger.throwError("user rejected transaction", logger_1.Logger.errors.ACTION_REJECTED, {
                    action: "sendTransaction",
                    transaction: tx
                  });
                }
                return checkError("sendTransaction", error, hexTx);
              });
            });
          };
          JsonRpcSigner2.prototype.signTransaction = function(transaction) {
            return logger.throwError("signing transactions is unsupported", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "signTransaction"
            });
          };
          JsonRpcSigner2.prototype.sendTransaction = function(transaction) {
            return __awaiter2(this, void 0, void 0, function() {
              var blockNumber, hash, error_1;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval)];
                  case 1:
                    blockNumber = _a.sent();
                    return [4, this.sendUncheckedTransaction(transaction)];
                  case 2:
                    hash = _a.sent();
                    _a.label = 3;
                  case 3:
                    _a.trys.push([3, 5, , 6]);
                    return [4, (0, web_1.poll)(function() {
                      return __awaiter2(_this, void 0, void 0, function() {
                        var tx;
                        return __generator(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              return [4, this.provider.getTransaction(hash)];
                            case 1:
                              tx = _a2.sent();
                              if (tx === null) {
                                return [2, void 0];
                              }
                              return [2, this.provider._wrapTransaction(tx, hash, blockNumber)];
                          }
                        });
                      });
                    }, { oncePoll: this.provider })];
                  case 4:
                    return [2, _a.sent()];
                  case 5:
                    error_1 = _a.sent();
                    error_1.transactionHash = hash;
                    throw error_1;
                  case 6:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          JsonRpcSigner2.prototype.signMessage = function(message) {
            return __awaiter2(this, void 0, void 0, function() {
              var data, address, error_2;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    data = typeof message === "string" ? (0, strings_1.toUtf8Bytes)(message) : message;
                    return [4, this.getAddress()];
                  case 1:
                    address = _a.sent();
                    _a.label = 2;
                  case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4, this.provider.send("personal_sign", [(0, bytes_1.hexlify)(data), address.toLowerCase()])];
                  case 3:
                    return [2, _a.sent()];
                  case 4:
                    error_2 = _a.sent();
                    if (typeof error_2.message === "string" && error_2.message.match(/user denied/i)) {
                      logger.throwError("user rejected signing", logger_1.Logger.errors.ACTION_REJECTED, {
                        action: "signMessage",
                        from: address,
                        messageData: message
                      });
                    }
                    throw error_2;
                  case 5:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          JsonRpcSigner2.prototype._legacySignMessage = function(message) {
            return __awaiter2(this, void 0, void 0, function() {
              var data, address, error_3;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    data = typeof message === "string" ? (0, strings_1.toUtf8Bytes)(message) : message;
                    return [4, this.getAddress()];
                  case 1:
                    address = _a.sent();
                    _a.label = 2;
                  case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4, this.provider.send("eth_sign", [address.toLowerCase(), (0, bytes_1.hexlify)(data)])];
                  case 3:
                    return [2, _a.sent()];
                  case 4:
                    error_3 = _a.sent();
                    if (typeof error_3.message === "string" && error_3.message.match(/user denied/i)) {
                      logger.throwError("user rejected signing", logger_1.Logger.errors.ACTION_REJECTED, {
                        action: "_legacySignMessage",
                        from: address,
                        messageData: message
                      });
                    }
                    throw error_3;
                  case 5:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          JsonRpcSigner2.prototype._signTypedData = function(domain, types3, value) {
            return __awaiter2(this, void 0, void 0, function() {
              var populated, address, error_4;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, hash_1._TypedDataEncoder.resolveNames(domain, types3, value, function(name5) {
                      return _this.provider.resolveName(name5);
                    })];
                  case 1:
                    populated = _a.sent();
                    return [4, this.getAddress()];
                  case 2:
                    address = _a.sent();
                    _a.label = 3;
                  case 3:
                    _a.trys.push([3, 5, , 6]);
                    return [4, this.provider.send("eth_signTypedData_v4", [
                      address.toLowerCase(),
                      JSON.stringify(hash_1._TypedDataEncoder.getPayload(populated.domain, types3, populated.value))
                    ])];
                  case 4:
                    return [2, _a.sent()];
                  case 5:
                    error_4 = _a.sent();
                    if (typeof error_4.message === "string" && error_4.message.match(/user denied/i)) {
                      logger.throwError("user rejected signing", logger_1.Logger.errors.ACTION_REJECTED, {
                        action: "_signTypedData",
                        from: address,
                        messageData: { domain: populated.domain, types: types3, value: populated.value }
                      });
                    }
                    throw error_4;
                  case 6:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          JsonRpcSigner2.prototype.unlock = function(password) {
            return __awaiter2(this, void 0, void 0, function() {
              var provider, address;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    provider = this.provider;
                    return [4, this.getAddress()];
                  case 1:
                    address = _a.sent();
                    return [2, provider.send("personal_unlockAccount", [address.toLowerCase(), password, null])];
                }
              });
            });
          };
          return JsonRpcSigner2;
        }(abstract_signer_1.Signer)
      );
      exports2.JsonRpcSigner = JsonRpcSigner;
      var UncheckedJsonRpcSigner = (
        /** @class */
        function(_super) {
          __extends(UncheckedJsonRpcSigner2, _super);
          function UncheckedJsonRpcSigner2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          UncheckedJsonRpcSigner2.prototype.sendTransaction = function(transaction) {
            var _this = this;
            return this.sendUncheckedTransaction(transaction).then(function(hash) {
              return {
                hash,
                nonce: null,
                gasLimit: null,
                gasPrice: null,
                data: null,
                value: null,
                chainId: null,
                confirmations: 0,
                from: null,
                wait: function(confirmations) {
                  return _this.provider.waitForTransaction(hash, confirmations);
                }
              };
            });
          };
          return UncheckedJsonRpcSigner2;
        }(JsonRpcSigner)
      );
      var allowedTransactionKeys = {
        chainId: true,
        data: true,
        gasLimit: true,
        gasPrice: true,
        nonce: true,
        to: true,
        value: true,
        type: true,
        accessList: true,
        maxFeePerGas: true,
        maxPriorityFeePerGas: true
      };
      var JsonRpcProvider = (
        /** @class */
        function(_super) {
          __extends(JsonRpcProvider2, _super);
          function JsonRpcProvider2(url2, network) {
            var _this = this;
            var networkOrReady = network;
            if (networkOrReady == null) {
              networkOrReady = new Promise(function(resolve5, reject) {
                setTimeout(function() {
                  _this.detectNetwork().then(function(network2) {
                    resolve5(network2);
                  }, function(error) {
                    reject(error);
                  });
                }, 0);
              });
            }
            _this = _super.call(this, networkOrReady) || this;
            if (!url2) {
              url2 = (0, properties_1.getStatic)(_this.constructor, "defaultUrl")();
            }
            if (typeof url2 === "string") {
              (0, properties_1.defineReadOnly)(_this, "connection", Object.freeze({
                url: url2
              }));
            } else {
              (0, properties_1.defineReadOnly)(_this, "connection", Object.freeze((0, properties_1.shallowCopy)(url2)));
            }
            _this._nextId = 42;
            return _this;
          }
          Object.defineProperty(JsonRpcProvider2.prototype, "_cache", {
            get: function() {
              if (this._eventLoopCache == null) {
                this._eventLoopCache = {};
              }
              return this._eventLoopCache;
            },
            enumerable: false,
            configurable: true
          });
          JsonRpcProvider2.defaultUrl = function() {
            return "http://localhost:8545";
          };
          JsonRpcProvider2.prototype.detectNetwork = function() {
            var _this = this;
            if (!this._cache["detectNetwork"]) {
              this._cache["detectNetwork"] = this._uncachedDetectNetwork();
              setTimeout(function() {
                _this._cache["detectNetwork"] = null;
              }, 0);
            }
            return this._cache["detectNetwork"];
          };
          JsonRpcProvider2.prototype._uncachedDetectNetwork = function() {
            return __awaiter2(this, void 0, void 0, function() {
              var chainId, error_5, error_6, getNetwork;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, timer(0)];
                  case 1:
                    _a.sent();
                    chainId = null;
                    _a.label = 2;
                  case 2:
                    _a.trys.push([2, 4, , 9]);
                    return [4, this.send("eth_chainId", [])];
                  case 3:
                    chainId = _a.sent();
                    return [3, 9];
                  case 4:
                    error_5 = _a.sent();
                    _a.label = 5;
                  case 5:
                    _a.trys.push([5, 7, , 8]);
                    return [4, this.send("net_version", [])];
                  case 6:
                    chainId = _a.sent();
                    return [3, 8];
                  case 7:
                    error_6 = _a.sent();
                    return [3, 8];
                  case 8:
                    return [3, 9];
                  case 9:
                    if (chainId != null) {
                      getNetwork = (0, properties_1.getStatic)(this.constructor, "getNetwork");
                      try {
                        return [2, getNetwork(bignumber_1.BigNumber.from(chainId).toNumber())];
                      } catch (error) {
                        return [2, logger.throwError("could not detect network", logger_1.Logger.errors.NETWORK_ERROR, {
                          chainId,
                          event: "invalidNetwork",
                          serverError: error
                        })];
                      }
                    }
                    return [2, logger.throwError("could not detect network", logger_1.Logger.errors.NETWORK_ERROR, {
                      event: "noNetwork"
                    })];
                }
              });
            });
          };
          JsonRpcProvider2.prototype.getSigner = function(addressOrIndex) {
            return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
          };
          JsonRpcProvider2.prototype.getUncheckedSigner = function(addressOrIndex) {
            return this.getSigner(addressOrIndex).connectUnchecked();
          };
          JsonRpcProvider2.prototype.listAccounts = function() {
            var _this = this;
            return this.send("eth_accounts", []).then(function(accounts) {
              return accounts.map(function(a2) {
                return _this.formatter.address(a2);
              });
            });
          };
          JsonRpcProvider2.prototype.send = function(method4, params) {
            var _this = this;
            var request = {
              method: method4,
              params,
              id: this._nextId++,
              jsonrpc: "2.0"
            };
            this.emit("debug", {
              action: "request",
              request: (0, properties_1.deepCopy)(request),
              provider: this
            });
            var cache = ["eth_chainId", "eth_blockNumber"].indexOf(method4) >= 0;
            if (cache && this._cache[method4]) {
              return this._cache[method4];
            }
            var result = (0, web_1.fetchJson)(this.connection, JSON.stringify(request), getResult).then(function(result2) {
              _this.emit("debug", {
                action: "response",
                request,
                response: result2,
                provider: _this
              });
              return result2;
            }, function(error) {
              _this.emit("debug", {
                action: "response",
                error,
                request,
                provider: _this
              });
              throw error;
            });
            if (cache) {
              this._cache[method4] = result;
              setTimeout(function() {
                _this._cache[method4] = null;
              }, 0);
            }
            return result;
          };
          JsonRpcProvider2.prototype.prepareRequest = function(method4, params) {
            switch (method4) {
              case "getBlockNumber":
                return ["eth_blockNumber", []];
              case "getGasPrice":
                return ["eth_gasPrice", []];
              case "getBalance":
                return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
              case "getTransactionCount":
                return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
              case "getCode":
                return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
              case "getStorageAt":
                return ["eth_getStorageAt", [getLowerCase(params.address), (0, bytes_1.hexZeroPad)(params.position, 32), params.blockTag]];
              case "sendTransaction":
                return ["eth_sendRawTransaction", [params.signedTransaction]];
              case "getBlock":
                if (params.blockTag) {
                  return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
                } else if (params.blockHash) {
                  return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
                }
                return null;
              case "getTransaction":
                return ["eth_getTransactionByHash", [params.transactionHash]];
              case "getTransactionReceipt":
                return ["eth_getTransactionReceipt", [params.transactionHash]];
              case "call": {
                var hexlifyTransaction = (0, properties_1.getStatic)(this.constructor, "hexlifyTransaction");
                return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
              }
              case "estimateGas": {
                var hexlifyTransaction = (0, properties_1.getStatic)(this.constructor, "hexlifyTransaction");
                return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
              }
              case "getLogs":
                if (params.filter && params.filter.address != null) {
                  params.filter.address = getLowerCase(params.filter.address);
                }
                return ["eth_getLogs", [params.filter]];
              default:
                break;
            }
            return null;
          };
          JsonRpcProvider2.prototype.perform = function(method4, params) {
            return __awaiter2(this, void 0, void 0, function() {
              var tx, feeData, args, error_7;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (!(method4 === "call" || method4 === "estimateGas"))
                      return [3, 2];
                    tx = params.transaction;
                    if (!(tx && tx.type != null && bignumber_1.BigNumber.from(tx.type).isZero()))
                      return [3, 2];
                    if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null))
                      return [3, 2];
                    return [4, this.getFeeData()];
                  case 1:
                    feeData = _a.sent();
                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                      params = (0, properties_1.shallowCopy)(params);
                      params.transaction = (0, properties_1.shallowCopy)(tx);
                      delete params.transaction.type;
                    }
                    _a.label = 2;
                  case 2:
                    args = this.prepareRequest(method4, params);
                    if (args == null) {
                      logger.throwError(method4 + " not implemented", logger_1.Logger.errors.NOT_IMPLEMENTED, { operation: method4 });
                    }
                    _a.label = 3;
                  case 3:
                    _a.trys.push([3, 5, , 6]);
                    return [4, this.send(args[0], args[1])];
                  case 4:
                    return [2, _a.sent()];
                  case 5:
                    error_7 = _a.sent();
                    return [2, checkError(method4, error_7, params)];
                  case 6:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          JsonRpcProvider2.prototype._startEvent = function(event) {
            if (event.tag === "pending") {
              this._startPending();
            }
            _super.prototype._startEvent.call(this, event);
          };
          JsonRpcProvider2.prototype._startPending = function() {
            if (this._pendingFilter != null) {
              return;
            }
            var self2 = this;
            var pendingFilter = this.send("eth_newPendingTransactionFilter", []);
            this._pendingFilter = pendingFilter;
            pendingFilter.then(function(filterId) {
              function poll() {
                self2.send("eth_getFilterChanges", [filterId]).then(function(hashes2) {
                  if (self2._pendingFilter != pendingFilter) {
                    return null;
                  }
                  var seq = Promise.resolve();
                  hashes2.forEach(function(hash) {
                    self2._emitted["t:" + hash.toLowerCase()] = "pending";
                    seq = seq.then(function() {
                      return self2.getTransaction(hash).then(function(tx) {
                        self2.emit("pending", tx);
                        return null;
                      });
                    });
                  });
                  return seq.then(function() {
                    return timer(1e3);
                  });
                }).then(function() {
                  if (self2._pendingFilter != pendingFilter) {
                    self2.send("eth_uninstallFilter", [filterId]);
                    return;
                  }
                  setTimeout(function() {
                    poll();
                  }, 0);
                  return null;
                }).catch(function(error) {
                });
              }
              poll();
              return filterId;
            }).catch(function(error) {
            });
          };
          JsonRpcProvider2.prototype._stopEvent = function(event) {
            if (event.tag === "pending" && this.listenerCount("pending") === 0) {
              this._pendingFilter = null;
            }
            _super.prototype._stopEvent.call(this, event);
          };
          JsonRpcProvider2.hexlifyTransaction = function(transaction, allowExtra) {
            var allowed = (0, properties_1.shallowCopy)(allowedTransactionKeys);
            if (allowExtra) {
              for (var key2 in allowExtra) {
                if (allowExtra[key2]) {
                  allowed[key2] = true;
                }
              }
            }
            (0, properties_1.checkProperties)(transaction, allowed);
            var result = {};
            ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function(key3) {
              if (transaction[key3] == null) {
                return;
              }
              var value = (0, bytes_1.hexValue)(bignumber_1.BigNumber.from(transaction[key3]));
              if (key3 === "gasLimit") {
                key3 = "gas";
              }
              result[key3] = value;
            });
            ["from", "to", "data"].forEach(function(key3) {
              if (transaction[key3] == null) {
                return;
              }
              result[key3] = (0, bytes_1.hexlify)(transaction[key3]);
            });
            if (transaction.accessList) {
              result["accessList"] = (0, transactions_1.accessListify)(transaction.accessList);
            }
            return result;
          };
          return JsonRpcProvider2;
        }(base_provider_1.BaseProvider)
      );
      exports2.JsonRpcProvider = JsonRpcProvider;
    }
  });

  // node_modules/@ethersproject/providers/lib/browser-ws.js
  var require_browser_ws = __commonJS({
    "node_modules/@ethersproject/providers/lib/browser-ws.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.WebSocket = void 0;
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var WS = null;
      exports2.WebSocket = WS;
      try {
        exports2.WebSocket = WS = WebSocket;
        if (WS == null) {
          throw new Error("inject please");
        }
      } catch (error) {
        logger_2 = new logger_1.Logger(_version_1.version);
        exports2.WebSocket = WS = function() {
          logger_2.throwError("WebSockets not supported in this environment", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new WebSocket()"
          });
        };
      }
      var logger_2;
    }
  });

  // node_modules/@ethersproject/providers/lib/websocket-provider.js
  var require_websocket_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/websocket-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports2 && exports2.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y2, t3, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                return t3;
              if (y2 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t3[1]) {
                    _.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _.label < t3[2]) {
                    _.label = t3[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.WebSocketProvider = void 0;
      var bignumber_1 = require_lib3();
      var properties_1 = require_lib4();
      var json_rpc_provider_1 = require_json_rpc_provider();
      var ws_1 = require_browser_ws();
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      var NextId = 1;
      var WebSocketProvider = (
        /** @class */
        function(_super) {
          __extends(WebSocketProvider2, _super);
          function WebSocketProvider2(url2, network) {
            var _this = this;
            if (network === "any") {
              logger.throwError("WebSocketProvider does not support 'any' network yet", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "network:any"
              });
            }
            if (typeof url2 === "string") {
              _this = _super.call(this, url2, network) || this;
            } else {
              _this = _super.call(this, "_websocket", network) || this;
            }
            _this._pollingInterval = -1;
            _this._wsReady = false;
            if (typeof url2 === "string") {
              (0, properties_1.defineReadOnly)(_this, "_websocket", new ws_1.WebSocket(_this.connection.url));
            } else {
              (0, properties_1.defineReadOnly)(_this, "_websocket", url2);
            }
            (0, properties_1.defineReadOnly)(_this, "_requests", {});
            (0, properties_1.defineReadOnly)(_this, "_subs", {});
            (0, properties_1.defineReadOnly)(_this, "_subIds", {});
            (0, properties_1.defineReadOnly)(_this, "_detectNetwork", _super.prototype.detectNetwork.call(_this));
            _this.websocket.onopen = function() {
              _this._wsReady = true;
              Object.keys(_this._requests).forEach(function(id2) {
                _this.websocket.send(_this._requests[id2].payload);
              });
            };
            _this.websocket.onmessage = function(messageEvent) {
              var data = messageEvent.data;
              var result = JSON.parse(data);
              if (result.id != null) {
                var id2 = String(result.id);
                var request = _this._requests[id2];
                delete _this._requests[id2];
                if (result.result !== void 0) {
                  request.callback(null, result.result);
                  _this.emit("debug", {
                    action: "response",
                    request: JSON.parse(request.payload),
                    response: result.result,
                    provider: _this
                  });
                } else {
                  var error = null;
                  if (result.error) {
                    error = new Error(result.error.message || "unknown error");
                    (0, properties_1.defineReadOnly)(error, "code", result.error.code || null);
                    (0, properties_1.defineReadOnly)(error, "response", data);
                  } else {
                    error = new Error("unknown error");
                  }
                  request.callback(error, void 0);
                  _this.emit("debug", {
                    action: "response",
                    error,
                    request: JSON.parse(request.payload),
                    provider: _this
                  });
                }
              } else if (result.method === "eth_subscription") {
                var sub = _this._subs[result.params.subscription];
                if (sub) {
                  sub.processFunc(result.params.result);
                }
              } else {
                console.warn("this should not happen");
              }
            };
            var fauxPoll = setInterval(function() {
              _this.emit("poll");
            }, 1e3);
            if (fauxPoll.unref) {
              fauxPoll.unref();
            }
            return _this;
          }
          Object.defineProperty(WebSocketProvider2.prototype, "websocket", {
            // Cannot narrow the type of _websocket, as that is not backwards compatible
            // so we add a getter and let the WebSocket be a public API.
            get: function() {
              return this._websocket;
            },
            enumerable: false,
            configurable: true
          });
          WebSocketProvider2.prototype.detectNetwork = function() {
            return this._detectNetwork;
          };
          Object.defineProperty(WebSocketProvider2.prototype, "pollingInterval", {
            get: function() {
              return 0;
            },
            set: function(value) {
              logger.throwError("cannot set polling interval on WebSocketProvider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setPollingInterval"
              });
            },
            enumerable: false,
            configurable: true
          });
          WebSocketProvider2.prototype.resetEventsBlock = function(blockNumber) {
            logger.throwError("cannot reset events block on WebSocketProvider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "resetEventBlock"
            });
          };
          WebSocketProvider2.prototype.poll = function() {
            return __awaiter2(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                return [2, null];
              });
            });
          };
          Object.defineProperty(WebSocketProvider2.prototype, "polling", {
            set: function(value) {
              if (!value) {
                return;
              }
              logger.throwError("cannot set polling on WebSocketProvider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setPolling"
              });
            },
            enumerable: false,
            configurable: true
          });
          WebSocketProvider2.prototype.send = function(method4, params) {
            var _this = this;
            var rid = NextId++;
            return new Promise(function(resolve5, reject) {
              function callback(error, result) {
                if (error) {
                  return reject(error);
                }
                return resolve5(result);
              }
              var payload = JSON.stringify({
                method: method4,
                params,
                id: rid,
                jsonrpc: "2.0"
              });
              _this.emit("debug", {
                action: "request",
                request: JSON.parse(payload),
                provider: _this
              });
              _this._requests[String(rid)] = { callback, payload };
              if (_this._wsReady) {
                _this.websocket.send(payload);
              }
            });
          };
          WebSocketProvider2.defaultUrl = function() {
            return "ws://localhost:8546";
          };
          WebSocketProvider2.prototype._subscribe = function(tag, param, processFunc) {
            return __awaiter2(this, void 0, void 0, function() {
              var subIdPromise, subId;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    subIdPromise = this._subIds[tag];
                    if (subIdPromise == null) {
                      subIdPromise = Promise.all(param).then(function(param2) {
                        return _this.send("eth_subscribe", param2);
                      });
                      this._subIds[tag] = subIdPromise;
                    }
                    return [4, subIdPromise];
                  case 1:
                    subId = _a.sent();
                    this._subs[subId] = { tag, processFunc };
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          WebSocketProvider2.prototype._startEvent = function(event) {
            var _this = this;
            switch (event.type) {
              case "block":
                this._subscribe("block", ["newHeads"], function(result) {
                  var blockNumber = bignumber_1.BigNumber.from(result.number).toNumber();
                  _this._emitted.block = blockNumber;
                  _this.emit("block", blockNumber);
                });
                break;
              case "pending":
                this._subscribe("pending", ["newPendingTransactions"], function(result) {
                  _this.emit("pending", result);
                });
                break;
              case "filter":
                this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], function(result) {
                  if (result.removed == null) {
                    result.removed = false;
                  }
                  _this.emit(event.filter, _this.formatter.filterLog(result));
                });
                break;
              case "tx": {
                var emitReceipt_1 = function(event2) {
                  var hash = event2.hash;
                  _this.getTransactionReceipt(hash).then(function(receipt) {
                    if (!receipt) {
                      return;
                    }
                    _this.emit(hash, receipt);
                  });
                };
                emitReceipt_1(event);
                this._subscribe("tx", ["newHeads"], function(result) {
                  _this._events.filter(function(e3) {
                    return e3.type === "tx";
                  }).forEach(emitReceipt_1);
                });
                break;
              }
              case "debug":
              case "poll":
              case "willPoll":
              case "didPoll":
              case "error":
                break;
              default:
                console.log("unhandled:", event);
                break;
            }
          };
          WebSocketProvider2.prototype._stopEvent = function(event) {
            var _this = this;
            var tag = event.tag;
            if (event.type === "tx") {
              if (this._events.filter(function(e3) {
                return e3.type === "tx";
              }).length) {
                return;
              }
              tag = "tx";
            } else if (this.listenerCount(event.event)) {
              return;
            }
            var subId = this._subIds[tag];
            if (!subId) {
              return;
            }
            delete this._subIds[tag];
            subId.then(function(subId2) {
              if (!_this._subs[subId2]) {
                return;
              }
              delete _this._subs[subId2];
              _this.send("eth_unsubscribe", [subId2]);
            });
          };
          WebSocketProvider2.prototype.destroy = function() {
            return __awaiter2(this, void 0, void 0, function() {
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (!(this.websocket.readyState === ws_1.WebSocket.CONNECTING))
                      return [3, 2];
                    return [4, new Promise(function(resolve5) {
                      _this.websocket.onopen = function() {
                        resolve5(true);
                      };
                      _this.websocket.onerror = function() {
                        resolve5(false);
                      };
                    })];
                  case 1:
                    _a.sent();
                    _a.label = 2;
                  case 2:
                    this.websocket.close(1e3);
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          return WebSocketProvider2;
        }(json_rpc_provider_1.JsonRpcProvider)
      );
      exports2.WebSocketProvider = WebSocketProvider;
    }
  });

  // node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js
  var require_url_json_rpc_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports2 && exports2.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y2, t3, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                return t3;
              if (y2 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t3[1]) {
                    _.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _.label < t3[2]) {
                    _.label = t3[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.UrlJsonRpcProvider = exports2.StaticJsonRpcProvider = void 0;
      var properties_1 = require_lib4();
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      var json_rpc_provider_1 = require_json_rpc_provider();
      var StaticJsonRpcProvider = (
        /** @class */
        function(_super) {
          __extends(StaticJsonRpcProvider2, _super);
          function StaticJsonRpcProvider2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          StaticJsonRpcProvider2.prototype.detectNetwork = function() {
            return __awaiter2(this, void 0, void 0, function() {
              var network;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    network = this.network;
                    if (!(network == null))
                      return [3, 2];
                    return [4, _super.prototype.detectNetwork.call(this)];
                  case 1:
                    network = _a.sent();
                    if (!network) {
                      logger.throwError("no network detected", logger_1.Logger.errors.UNKNOWN_ERROR, {});
                    }
                    if (this._network == null) {
                      (0, properties_1.defineReadOnly)(this, "_network", network);
                      this.emit("network", network, null);
                    }
                    _a.label = 2;
                  case 2:
                    return [2, network];
                }
              });
            });
          };
          return StaticJsonRpcProvider2;
        }(json_rpc_provider_1.JsonRpcProvider)
      );
      exports2.StaticJsonRpcProvider = StaticJsonRpcProvider;
      var UrlJsonRpcProvider = (
        /** @class */
        function(_super) {
          __extends(UrlJsonRpcProvider2, _super);
          function UrlJsonRpcProvider2(network, apiKey) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkAbstract(_newTarget, UrlJsonRpcProvider2);
            network = (0, properties_1.getStatic)(_newTarget, "getNetwork")(network);
            apiKey = (0, properties_1.getStatic)(_newTarget, "getApiKey")(apiKey);
            var connection = (0, properties_1.getStatic)(_newTarget, "getUrl")(network, apiKey);
            _this = _super.call(this, connection, network) || this;
            if (typeof apiKey === "string") {
              (0, properties_1.defineReadOnly)(_this, "apiKey", apiKey);
            } else if (apiKey != null) {
              Object.keys(apiKey).forEach(function(key2) {
                (0, properties_1.defineReadOnly)(_this, key2, apiKey[key2]);
              });
            }
            return _this;
          }
          UrlJsonRpcProvider2.prototype._startPending = function() {
            logger.warn("WARNING: API provider does not support pending filters");
          };
          UrlJsonRpcProvider2.prototype.isCommunityResource = function() {
            return false;
          };
          UrlJsonRpcProvider2.prototype.getSigner = function(address) {
            return logger.throwError("API provider does not support signing", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
          };
          UrlJsonRpcProvider2.prototype.listAccounts = function() {
            return Promise.resolve([]);
          };
          UrlJsonRpcProvider2.getApiKey = function(apiKey) {
            return apiKey;
          };
          UrlJsonRpcProvider2.getUrl = function(network, apiKey) {
            return logger.throwError("not implemented; sub-classes must override getUrl", logger_1.Logger.errors.NOT_IMPLEMENTED, {
              operation: "getUrl"
            });
          };
          return UrlJsonRpcProvider2;
        }(StaticJsonRpcProvider)
      );
      exports2.UrlJsonRpcProvider = UrlJsonRpcProvider;
    }
  });

  // node_modules/@ethersproject/providers/lib/alchemy-provider.js
  var require_alchemy_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/alchemy-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.AlchemyProvider = exports2.AlchemyWebSocketProvider = void 0;
      var properties_1 = require_lib4();
      var formatter_1 = require_formatter();
      var websocket_provider_1 = require_websocket_provider();
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      var url_json_rpc_provider_1 = require_url_json_rpc_provider();
      var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
      var AlchemyWebSocketProvider = (
        /** @class */
        function(_super) {
          __extends(AlchemyWebSocketProvider2, _super);
          function AlchemyWebSocketProvider2(network, apiKey) {
            var _this = this;
            var provider = new AlchemyProvider(network, apiKey);
            var url2 = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
            _this = _super.call(this, url2, provider.network) || this;
            (0, properties_1.defineReadOnly)(_this, "apiKey", provider.apiKey);
            return _this;
          }
          AlchemyWebSocketProvider2.prototype.isCommunityResource = function() {
            return this.apiKey === defaultApiKey;
          };
          return AlchemyWebSocketProvider2;
        }(websocket_provider_1.WebSocketProvider)
      );
      exports2.AlchemyWebSocketProvider = AlchemyWebSocketProvider;
      var AlchemyProvider = (
        /** @class */
        function(_super) {
          __extends(AlchemyProvider2, _super);
          function AlchemyProvider2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          AlchemyProvider2.getWebSocketProvider = function(network, apiKey) {
            return new AlchemyWebSocketProvider(network, apiKey);
          };
          AlchemyProvider2.getApiKey = function(apiKey) {
            if (apiKey == null) {
              return defaultApiKey;
            }
            if (apiKey && typeof apiKey !== "string") {
              logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey;
          };
          AlchemyProvider2.getUrl = function(network, apiKey) {
            var host = null;
            switch (network.name) {
              case "homestead":
                host = "eth-mainnet.alchemyapi.io/v2/";
                break;
              case "goerli":
                host = "eth-goerli.g.alchemy.com/v2/";
                break;
              case "matic":
                host = "polygon-mainnet.g.alchemy.com/v2/";
                break;
              case "maticmum":
                host = "polygon-mumbai.g.alchemy.com/v2/";
                break;
              case "arbitrum":
                host = "arb-mainnet.g.alchemy.com/v2/";
                break;
              case "arbitrum-goerli":
                host = "arb-goerli.g.alchemy.com/v2/";
                break;
              case "optimism":
                host = "opt-mainnet.g.alchemy.com/v2/";
                break;
              case "optimism-goerli":
                host = "opt-goerli.g.alchemy.com/v2/";
                break;
              default:
                logger.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return {
              allowGzip: true,
              url: "https://" + host + apiKey,
              throttleCallback: function(attempt, url2) {
                if (apiKey === defaultApiKey) {
                  (0, formatter_1.showThrottleMessage)();
                }
                return Promise.resolve(true);
              }
            };
          };
          AlchemyProvider2.prototype.isCommunityResource = function() {
            return this.apiKey === defaultApiKey;
          };
          return AlchemyProvider2;
        }(url_json_rpc_provider_1.UrlJsonRpcProvider)
      );
      exports2.AlchemyProvider = AlchemyProvider;
    }
  });

  // node_modules/@ethersproject/providers/lib/ankr-provider.js
  var require_ankr_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/ankr-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.AnkrProvider = void 0;
      var formatter_1 = require_formatter();
      var url_json_rpc_provider_1 = require_url_json_rpc_provider();
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      var defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
      function getHost(name5) {
        switch (name5) {
          case "homestead":
            return "rpc.ankr.com/eth/";
          case "ropsten":
            return "rpc.ankr.com/eth_ropsten/";
          case "rinkeby":
            return "rpc.ankr.com/eth_rinkeby/";
          case "goerli":
            return "rpc.ankr.com/eth_goerli/";
          case "matic":
            return "rpc.ankr.com/polygon/";
          case "arbitrum":
            return "rpc.ankr.com/arbitrum/";
        }
        return logger.throwArgumentError("unsupported network", "name", name5);
      }
      var AnkrProvider = (
        /** @class */
        function(_super) {
          __extends(AnkrProvider2, _super);
          function AnkrProvider2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          AnkrProvider2.prototype.isCommunityResource = function() {
            return this.apiKey === defaultApiKey;
          };
          AnkrProvider2.getApiKey = function(apiKey) {
            if (apiKey == null) {
              return defaultApiKey;
            }
            return apiKey;
          };
          AnkrProvider2.getUrl = function(network, apiKey) {
            if (apiKey == null) {
              apiKey = defaultApiKey;
            }
            var connection = {
              allowGzip: true,
              url: "https://" + getHost(network.name) + apiKey,
              throttleCallback: function(attempt, url2) {
                if (apiKey.apiKey === defaultApiKey) {
                  (0, formatter_1.showThrottleMessage)();
                }
                return Promise.resolve(true);
              }
            };
            if (apiKey.projectSecret != null) {
              connection.user = "";
              connection.password = apiKey.projectSecret;
            }
            return connection;
          };
          return AnkrProvider2;
        }(url_json_rpc_provider_1.UrlJsonRpcProvider)
      );
      exports2.AnkrProvider = AnkrProvider;
    }
  });

  // node_modules/@ethersproject/providers/lib/cloudflare-provider.js
  var require_cloudflare_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/cloudflare-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports2 && exports2.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y2, t3, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                return t3;
              if (y2 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t3[1]) {
                    _.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _.label < t3[2]) {
                    _.label = t3[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CloudflareProvider = void 0;
      var url_json_rpc_provider_1 = require_url_json_rpc_provider();
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      var CloudflareProvider = (
        /** @class */
        function(_super) {
          __extends(CloudflareProvider2, _super);
          function CloudflareProvider2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          CloudflareProvider2.getApiKey = function(apiKey) {
            if (apiKey != null) {
              logger.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
            }
            return null;
          };
          CloudflareProvider2.getUrl = function(network, apiKey) {
            var host = null;
            switch (network.name) {
              case "homestead":
                host = "https://cloudflare-eth.com/";
                break;
              default:
                logger.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return host;
          };
          CloudflareProvider2.prototype.perform = function(method4, params) {
            return __awaiter2(this, void 0, void 0, function() {
              var block;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (!(method4 === "getBlockNumber"))
                      return [3, 2];
                    return [4, _super.prototype.perform.call(this, "getBlock", { blockTag: "latest" })];
                  case 1:
                    block = _a.sent();
                    return [2, block.number];
                  case 2:
                    return [2, _super.prototype.perform.call(this, method4, params)];
                }
              });
            });
          };
          return CloudflareProvider2;
        }(url_json_rpc_provider_1.UrlJsonRpcProvider)
      );
      exports2.CloudflareProvider = CloudflareProvider;
    }
  });

  // node_modules/@ethersproject/providers/lib/etherscan-provider.js
  var require_etherscan_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/etherscan-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports2 && exports2.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y2, t3, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                return t3;
              if (y2 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t3[1]) {
                    _.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _.label < t3[2]) {
                    _.label = t3[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EtherscanProvider = void 0;
      var bytes_1 = require_lib2();
      var properties_1 = require_lib4();
      var transactions_1 = require_lib19();
      var web_1 = require_lib17();
      var formatter_1 = require_formatter();
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      var base_provider_1 = require_base_provider();
      function getTransactionPostData(transaction) {
        var result = {};
        for (var key2 in transaction) {
          if (transaction[key2] == null) {
            continue;
          }
          var value = transaction[key2];
          if (key2 === "type" && value === 0) {
            continue;
          }
          if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key2]) {
            value = (0, bytes_1.hexValue)((0, bytes_1.hexlify)(value));
          } else if (key2 === "accessList") {
            value = "[" + (0, transactions_1.accessListify)(value).map(function(set2) {
              return '{address:"' + set2.address + '",storageKeys:["' + set2.storageKeys.join('","') + '"]}';
            }).join(",") + "]";
          } else {
            value = (0, bytes_1.hexlify)(value);
          }
          result[key2] = value;
        }
        return result;
      }
      function getResult(result) {
        if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
          return result.result;
        }
        if (result.status != 1 || typeof result.message !== "string" || !result.message.match(/^OK/)) {
          var error = new Error("invalid response");
          error.result = JSON.stringify(result);
          if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
            error.throttleRetry = true;
          }
          throw error;
        }
        return result.result;
      }
      function getJsonResult(result) {
        if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
          var error = new Error("throttled response");
          error.result = JSON.stringify(result);
          error.throttleRetry = true;
          throw error;
        }
        if (result.jsonrpc != "2.0") {
          var error = new Error("invalid response");
          error.result = JSON.stringify(result);
          throw error;
        }
        if (result.error) {
          var error = new Error(result.error.message || "unknown error");
          if (result.error.code) {
            error.code = result.error.code;
          }
          if (result.error.data) {
            error.data = result.error.data;
          }
          throw error;
        }
        return result.result;
      }
      function checkLogTag(blockTag) {
        if (blockTag === "pending") {
          throw new Error("pending not supported");
        }
        if (blockTag === "latest") {
          return blockTag;
        }
        return parseInt(blockTag.substring(2), 16);
      }
      function checkError(method4, error, transaction) {
        if (method4 === "call" && error.code === logger_1.Logger.errors.SERVER_ERROR) {
          var e3 = error.error;
          if (e3 && (e3.message.match(/reverted/i) || e3.message.match(/VM execution error/i))) {
            var data = e3.data;
            if (data) {
              data = "0x" + data.replace(/^.*0x/i, "");
            }
            if ((0, bytes_1.isHexString)(data)) {
              return data;
            }
            logger.throwError("missing revert data in call exception", logger_1.Logger.errors.CALL_EXCEPTION, {
              error,
              data: "0x"
            });
          }
        }
        var message = error.message;
        if (error.code === logger_1.Logger.errors.SERVER_ERROR) {
          if (error.error && typeof error.error.message === "string") {
            message = error.error.message;
          } else if (typeof error.body === "string") {
            message = error.body;
          } else if (typeof error.responseText === "string") {
            message = error.responseText;
          }
        }
        message = (message || "").toLowerCase();
        if (message.match(/insufficient funds/)) {
          logger.throwError("insufficient funds for intrinsic transaction cost", logger_1.Logger.errors.INSUFFICIENT_FUNDS, {
            error,
            method: method4,
            transaction
          });
        }
        if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
          logger.throwError("nonce has already been used", logger_1.Logger.errors.NONCE_EXPIRED, {
            error,
            method: method4,
            transaction
          });
        }
        if (message.match(/another transaction with same nonce/)) {
          logger.throwError("replacement fee too low", logger_1.Logger.errors.REPLACEMENT_UNDERPRICED, {
            error,
            method: method4,
            transaction
          });
        }
        if (message.match(/execution failed due to an exception|execution reverted/)) {
          logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
            error,
            method: method4,
            transaction
          });
        }
        throw error;
      }
      var EtherscanProvider = (
        /** @class */
        function(_super) {
          __extends(EtherscanProvider2, _super);
          function EtherscanProvider2(network, apiKey) {
            var _this = _super.call(this, network) || this;
            (0, properties_1.defineReadOnly)(_this, "baseUrl", _this.getBaseUrl());
            (0, properties_1.defineReadOnly)(_this, "apiKey", apiKey || null);
            return _this;
          }
          EtherscanProvider2.prototype.getBaseUrl = function() {
            switch (this.network ? this.network.name : "invalid") {
              case "homestead":
                return "https://api.etherscan.io";
              case "goerli":
                return "https://api-goerli.etherscan.io";
              case "sepolia":
                return "https://api-sepolia.etherscan.io";
              case "matic":
                return "https://api.polygonscan.com";
              case "maticmum":
                return "https://api-testnet.polygonscan.com";
              case "arbitrum":
                return "https://api.arbiscan.io";
              case "arbitrum-goerli":
                return "https://api-goerli.arbiscan.io";
              case "optimism":
                return "https://api-optimistic.etherscan.io";
              case "optimism-goerli":
                return "https://api-goerli-optimistic.etherscan.io";
              default:
            }
            return logger.throwArgumentError("unsupported network", "network", this.network.name);
          };
          EtherscanProvider2.prototype.getUrl = function(module3, params) {
            var query = Object.keys(params).reduce(function(accum, key2) {
              var value = params[key2];
              if (value != null) {
                accum += "&" + key2 + "=" + value;
              }
              return accum;
            }, "");
            var apiKey = this.apiKey ? "&apikey=" + this.apiKey : "";
            return this.baseUrl + "/api?module=" + module3 + query + apiKey;
          };
          EtherscanProvider2.prototype.getPostUrl = function() {
            return this.baseUrl + "/api";
          };
          EtherscanProvider2.prototype.getPostData = function(module3, params) {
            params.module = module3;
            params.apikey = this.apiKey;
            return params;
          };
          EtherscanProvider2.prototype.fetch = function(module3, params, post) {
            return __awaiter2(this, void 0, void 0, function() {
              var url2, payload, procFunc, connection, payloadStr, result;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    url2 = post ? this.getPostUrl() : this.getUrl(module3, params);
                    payload = post ? this.getPostData(module3, params) : null;
                    procFunc = module3 === "proxy" ? getJsonResult : getResult;
                    this.emit("debug", {
                      action: "request",
                      request: url2,
                      provider: this
                    });
                    connection = {
                      url: url2,
                      throttleSlotInterval: 1e3,
                      throttleCallback: function(attempt, url3) {
                        if (_this.isCommunityResource()) {
                          (0, formatter_1.showThrottleMessage)();
                        }
                        return Promise.resolve(true);
                      }
                    };
                    payloadStr = null;
                    if (payload) {
                      connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
                      payloadStr = Object.keys(payload).map(function(key2) {
                        return key2 + "=" + payload[key2];
                      }).join("&");
                    }
                    return [4, (0, web_1.fetchJson)(connection, payloadStr, procFunc || getJsonResult)];
                  case 1:
                    result = _a.sent();
                    this.emit("debug", {
                      action: "response",
                      request: url2,
                      response: (0, properties_1.deepCopy)(result),
                      provider: this
                    });
                    return [2, result];
                }
              });
            });
          };
          EtherscanProvider2.prototype.detectNetwork = function() {
            return __awaiter2(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                return [2, this.network];
              });
            });
          };
          EtherscanProvider2.prototype.perform = function(method4, params) {
            return __awaiter2(this, void 0, void 0, function() {
              var _a, postData, error_1, postData, error_2, args, topic0, logs, blocks, i3, log, block, _b;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    _a = method4;
                    switch (_a) {
                      case "getBlockNumber":
                        return [3, 1];
                      case "getGasPrice":
                        return [3, 2];
                      case "getBalance":
                        return [3, 3];
                      case "getTransactionCount":
                        return [3, 4];
                      case "getCode":
                        return [3, 5];
                      case "getStorageAt":
                        return [3, 6];
                      case "sendTransaction":
                        return [3, 7];
                      case "getBlock":
                        return [3, 8];
                      case "getTransaction":
                        return [3, 9];
                      case "getTransactionReceipt":
                        return [3, 10];
                      case "call":
                        return [3, 11];
                      case "estimateGas":
                        return [3, 15];
                      case "getLogs":
                        return [3, 19];
                      case "getEtherPrice":
                        return [3, 26];
                    }
                    return [3, 28];
                  case 1:
                    return [2, this.fetch("proxy", { action: "eth_blockNumber" })];
                  case 2:
                    return [2, this.fetch("proxy", { action: "eth_gasPrice" })];
                  case 3:
                    return [2, this.fetch("account", {
                      action: "balance",
                      address: params.address,
                      tag: params.blockTag
                    })];
                  case 4:
                    return [2, this.fetch("proxy", {
                      action: "eth_getTransactionCount",
                      address: params.address,
                      tag: params.blockTag
                    })];
                  case 5:
                    return [2, this.fetch("proxy", {
                      action: "eth_getCode",
                      address: params.address,
                      tag: params.blockTag
                    })];
                  case 6:
                    return [2, this.fetch("proxy", {
                      action: "eth_getStorageAt",
                      address: params.address,
                      position: params.position,
                      tag: params.blockTag
                    })];
                  case 7:
                    return [2, this.fetch("proxy", {
                      action: "eth_sendRawTransaction",
                      hex: params.signedTransaction
                    }, true).catch(function(error) {
                      return checkError("sendTransaction", error, params.signedTransaction);
                    })];
                  case 8:
                    if (params.blockTag) {
                      return [2, this.fetch("proxy", {
                        action: "eth_getBlockByNumber",
                        tag: params.blockTag,
                        boolean: params.includeTransactions ? "true" : "false"
                      })];
                    }
                    throw new Error("getBlock by blockHash not implemented");
                  case 9:
                    return [2, this.fetch("proxy", {
                      action: "eth_getTransactionByHash",
                      txhash: params.transactionHash
                    })];
                  case 10:
                    return [2, this.fetch("proxy", {
                      action: "eth_getTransactionReceipt",
                      txhash: params.transactionHash
                    })];
                  case 11:
                    if (params.blockTag !== "latest") {
                      throw new Error("EtherscanProvider does not support blockTag for call");
                    }
                    postData = getTransactionPostData(params.transaction);
                    postData.module = "proxy";
                    postData.action = "eth_call";
                    _c.label = 12;
                  case 12:
                    _c.trys.push([12, 14, , 15]);
                    return [4, this.fetch("proxy", postData, true)];
                  case 13:
                    return [2, _c.sent()];
                  case 14:
                    error_1 = _c.sent();
                    return [2, checkError("call", error_1, params.transaction)];
                  case 15:
                    postData = getTransactionPostData(params.transaction);
                    postData.module = "proxy";
                    postData.action = "eth_estimateGas";
                    _c.label = 16;
                  case 16:
                    _c.trys.push([16, 18, , 19]);
                    return [4, this.fetch("proxy", postData, true)];
                  case 17:
                    return [2, _c.sent()];
                  case 18:
                    error_2 = _c.sent();
                    return [2, checkError("estimateGas", error_2, params.transaction)];
                  case 19:
                    args = { action: "getLogs" };
                    if (params.filter.fromBlock) {
                      args.fromBlock = checkLogTag(params.filter.fromBlock);
                    }
                    if (params.filter.toBlock) {
                      args.toBlock = checkLogTag(params.filter.toBlock);
                    }
                    if (params.filter.address) {
                      args.address = params.filter.address;
                    }
                    if (params.filter.topics && params.filter.topics.length > 0) {
                      if (params.filter.topics.length > 1) {
                        logger.throwError("unsupported topic count", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                      }
                      if (params.filter.topics.length === 1) {
                        topic0 = params.filter.topics[0];
                        if (typeof topic0 !== "string" || topic0.length !== 66) {
                          logger.throwError("unsupported topic format", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { topic0 });
                        }
                        args.topic0 = topic0;
                      }
                    }
                    return [4, this.fetch("logs", args)];
                  case 20:
                    logs = _c.sent();
                    blocks = {};
                    i3 = 0;
                    _c.label = 21;
                  case 21:
                    if (!(i3 < logs.length))
                      return [3, 25];
                    log = logs[i3];
                    if (log.blockHash != null) {
                      return [3, 24];
                    }
                    if (!(blocks[log.blockNumber] == null))
                      return [3, 23];
                    return [4, this.getBlock(log.blockNumber)];
                  case 22:
                    block = _c.sent();
                    if (block) {
                      blocks[log.blockNumber] = block.hash;
                    }
                    _c.label = 23;
                  case 23:
                    log.blockHash = blocks[log.blockNumber];
                    _c.label = 24;
                  case 24:
                    i3++;
                    return [3, 21];
                  case 25:
                    return [2, logs];
                  case 26:
                    if (this.network.name !== "homestead") {
                      return [2, 0];
                    }
                    _b = parseFloat;
                    return [4, this.fetch("stats", { action: "ethprice" })];
                  case 27:
                    return [2, _b.apply(void 0, [_c.sent().ethusd])];
                  case 28:
                    return [3, 29];
                  case 29:
                    return [2, _super.prototype.perform.call(this, method4, params)];
                }
              });
            });
          };
          EtherscanProvider2.prototype.getHistory = function(addressOrName, startBlock, endBlock) {
            return __awaiter2(this, void 0, void 0, function() {
              var params, result;
              var _a;
              var _this = this;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    _a = {
                      action: "txlist"
                    };
                    return [4, this.resolveName(addressOrName)];
                  case 1:
                    params = (_a.address = _b.sent(), _a.startblock = startBlock == null ? 0 : startBlock, _a.endblock = endBlock == null ? 99999999 : endBlock, _a.sort = "asc", _a);
                    return [4, this.fetch("account", params)];
                  case 2:
                    result = _b.sent();
                    return [2, result.map(function(tx) {
                      ["contractAddress", "to"].forEach(function(key2) {
                        if (tx[key2] == "") {
                          delete tx[key2];
                        }
                      });
                      if (tx.creates == null && tx.contractAddress != null) {
                        tx.creates = tx.contractAddress;
                      }
                      var item = _this.formatter.transactionResponse(tx);
                      if (tx.timeStamp) {
                        item.timestamp = parseInt(tx.timeStamp);
                      }
                      return item;
                    })];
                }
              });
            });
          };
          EtherscanProvider2.prototype.isCommunityResource = function() {
            return this.apiKey == null;
          };
          return EtherscanProvider2;
        }(base_provider_1.BaseProvider)
      );
      exports2.EtherscanProvider = EtherscanProvider;
    }
  });

  // node_modules/@ethersproject/random/lib/_version.js
  var require_version17 = __commonJS({
    "node_modules/@ethersproject/random/lib/_version.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.version = void 0;
      exports2.version = "random/5.7.0";
    }
  });

  // node_modules/@ethersproject/random/lib/browser-random.js
  var require_browser_random = __commonJS({
    "node_modules/@ethersproject/random/lib/browser-random.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.randomBytes = void 0;
      var bytes_1 = require_lib2();
      var logger_1 = require_lib();
      var _version_1 = require_version17();
      var logger = new logger_1.Logger(_version_1.version);
      function getGlobal() {
        if (typeof self !== "undefined") {
          return self;
        }
        if (typeof window !== "undefined") {
          return window;
        }
        if (typeof global !== "undefined") {
          return global;
        }
        throw new Error("unable to locate global object");
      }
      var anyGlobal = getGlobal();
      var crypto2 = anyGlobal.crypto || anyGlobal.msCrypto;
      if (!crypto2 || !crypto2.getRandomValues) {
        logger.warn("WARNING: Missing strong random number source");
        crypto2 = {
          getRandomValues: function(buffer2) {
            return logger.throwError("no secure random source avaialble", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "crypto.getRandomValues"
            });
          }
        };
      }
      function randomBytes(length2) {
        if (length2 <= 0 || length2 > 1024 || length2 % 1 || length2 != length2) {
          logger.throwArgumentError("invalid length", "length", length2);
        }
        var result = new Uint8Array(length2);
        crypto2.getRandomValues(result);
        return (0, bytes_1.arrayify)(result);
      }
      exports2.randomBytes = randomBytes;
    }
  });

  // node_modules/@ethersproject/random/lib/shuffle.js
  var require_shuffle = __commonJS({
    "node_modules/@ethersproject/random/lib/shuffle.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.shuffled = void 0;
      function shuffled(array4) {
        array4 = array4.slice();
        for (var i3 = array4.length - 1; i3 > 0; i3--) {
          var j = Math.floor(Math.random() * (i3 + 1));
          var tmp = array4[i3];
          array4[i3] = array4[j];
          array4[j] = tmp;
        }
        return array4;
      }
      exports2.shuffled = shuffled;
    }
  });

  // node_modules/@ethersproject/random/lib/index.js
  var require_lib21 = __commonJS({
    "node_modules/@ethersproject/random/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.shuffled = exports2.randomBytes = void 0;
      var random_1 = require_browser_random();
      Object.defineProperty(exports2, "randomBytes", { enumerable: true, get: function() {
        return random_1.randomBytes;
      } });
      var shuffle_1 = require_shuffle();
      Object.defineProperty(exports2, "shuffled", { enumerable: true, get: function() {
        return shuffle_1.shuffled;
      } });
    }
  });

  // node_modules/@ethersproject/providers/lib/fallback-provider.js
  var require_fallback_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/fallback-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports2 && exports2.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y2, t3, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                return t3;
              if (y2 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t3[1]) {
                    _.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _.label < t3[2]) {
                    _.label = t3[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.FallbackProvider = void 0;
      var abstract_provider_1 = require_lib5();
      var bignumber_1 = require_lib3();
      var bytes_1 = require_lib2();
      var properties_1 = require_lib4();
      var random_1 = require_lib21();
      var web_1 = require_lib17();
      var base_provider_1 = require_base_provider();
      var formatter_1 = require_formatter();
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      function now3() {
        return (/* @__PURE__ */ new Date()).getTime();
      }
      function checkNetworks(networks) {
        var result = null;
        for (var i3 = 0; i3 < networks.length; i3++) {
          var network = networks[i3];
          if (network == null) {
            return null;
          }
          if (result) {
            if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
              logger.throwArgumentError("provider mismatch", "networks", networks);
            }
          } else {
            result = network;
          }
        }
        return result;
      }
      function median(values, maxDelta) {
        values = values.slice().sort();
        var middle = Math.floor(values.length / 2);
        if (values.length % 2) {
          return values[middle];
        }
        var a2 = values[middle - 1], b2 = values[middle];
        if (maxDelta != null && Math.abs(a2 - b2) > maxDelta) {
          return null;
        }
        return (a2 + b2) / 2;
      }
      function serialize(value) {
        if (value === null) {
          return "null";
        } else if (typeof value === "number" || typeof value === "boolean") {
          return JSON.stringify(value);
        } else if (typeof value === "string") {
          return value;
        } else if (bignumber_1.BigNumber.isBigNumber(value)) {
          return value.toString();
        } else if (Array.isArray(value)) {
          return JSON.stringify(value.map(function(i3) {
            return serialize(i3);
          }));
        } else if (typeof value === "object") {
          var keys = Object.keys(value);
          keys.sort();
          return "{" + keys.map(function(key2) {
            var v2 = value[key2];
            if (typeof v2 === "function") {
              v2 = "[function]";
            } else {
              v2 = serialize(v2);
            }
            return JSON.stringify(key2) + ":" + v2;
          }).join(",") + "}";
        }
        throw new Error("unknown value type: " + typeof value);
      }
      var nextRid = 1;
      function stall(duration) {
        var cancel2 = null;
        var timer = null;
        var promise = new Promise(function(resolve5) {
          cancel2 = function() {
            if (timer) {
              clearTimeout(timer);
              timer = null;
            }
            resolve5();
          };
          timer = setTimeout(cancel2, duration);
        });
        var wait = function(func) {
          promise = promise.then(func);
          return promise;
        };
        function getPromise() {
          return promise;
        }
        return { cancel: cancel2, getPromise, wait };
      }
      var ForwardErrors = [
        logger_1.Logger.errors.CALL_EXCEPTION,
        logger_1.Logger.errors.INSUFFICIENT_FUNDS,
        logger_1.Logger.errors.NONCE_EXPIRED,
        logger_1.Logger.errors.REPLACEMENT_UNDERPRICED,
        logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT
      ];
      var ForwardProperties = [
        "address",
        "args",
        "errorArgs",
        "errorSignature",
        "method",
        "transaction"
      ];
      function exposeDebugConfig(config, now4) {
        var result = {
          weight: config.weight
        };
        Object.defineProperty(result, "provider", { get: function() {
          return config.provider;
        } });
        if (config.start) {
          result.start = config.start;
        }
        if (now4) {
          result.duration = now4 - config.start;
        }
        if (config.done) {
          if (config.error) {
            result.error = config.error;
          } else {
            result.result = config.result || null;
          }
        }
        return result;
      }
      function normalizedTally(normalize2, quorum) {
        return function(configs) {
          var tally = {};
          configs.forEach(function(c2) {
            var value = normalize2(c2.result);
            if (!tally[value]) {
              tally[value] = { count: 0, result: c2.result };
            }
            tally[value].count++;
          });
          var keys = Object.keys(tally);
          for (var i3 = 0; i3 < keys.length; i3++) {
            var check = tally[keys[i3]];
            if (check.count >= quorum) {
              return check.result;
            }
          }
          return void 0;
        };
      }
      function getProcessFunc(provider, method4, params) {
        var normalize2 = serialize;
        switch (method4) {
          case "getBlockNumber":
            return function(configs) {
              var values = configs.map(function(c2) {
                return c2.result;
              });
              var blockNumber = median(configs.map(function(c2) {
                return c2.result;
              }), 2);
              if (blockNumber == null) {
                return void 0;
              }
              blockNumber = Math.ceil(blockNumber);
              if (values.indexOf(blockNumber + 1) >= 0) {
                blockNumber++;
              }
              if (blockNumber >= provider._highestBlockNumber) {
                provider._highestBlockNumber = blockNumber;
              }
              return provider._highestBlockNumber;
            };
          case "getGasPrice":
            return function(configs) {
              var values = configs.map(function(c2) {
                return c2.result;
              });
              values.sort();
              return values[Math.floor(values.length / 2)];
            };
          case "getEtherPrice":
            return function(configs) {
              return median(configs.map(function(c2) {
                return c2.result;
              }));
            };
          case "getBalance":
          case "getTransactionCount":
          case "getCode":
          case "getStorageAt":
          case "call":
          case "estimateGas":
          case "getLogs":
            break;
          case "getTransaction":
          case "getTransactionReceipt":
            normalize2 = function(tx) {
              if (tx == null) {
                return null;
              }
              tx = (0, properties_1.shallowCopy)(tx);
              tx.confirmations = -1;
              return serialize(tx);
            };
            break;
          case "getBlock":
            if (params.includeTransactions) {
              normalize2 = function(block) {
                if (block == null) {
                  return null;
                }
                block = (0, properties_1.shallowCopy)(block);
                block.transactions = block.transactions.map(function(tx) {
                  tx = (0, properties_1.shallowCopy)(tx);
                  tx.confirmations = -1;
                  return tx;
                });
                return serialize(block);
              };
            } else {
              normalize2 = function(block) {
                if (block == null) {
                  return null;
                }
                return serialize(block);
              };
            }
            break;
          default:
            throw new Error("unknown method: " + method4);
        }
        return normalizedTally(normalize2, provider.quorum);
      }
      function waitForSync(config, blockNumber) {
        return __awaiter2(this, void 0, void 0, function() {
          var provider;
          return __generator(this, function(_a) {
            provider = config.provider;
            if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {
              return [2, provider];
            }
            return [2, (0, web_1.poll)(function() {
              return new Promise(function(resolve5, reject) {
                setTimeout(function() {
                  if (provider.blockNumber >= blockNumber) {
                    return resolve5(provider);
                  }
                  if (config.cancelled) {
                    return resolve5(null);
                  }
                  return resolve5(void 0);
                }, 0);
              });
            }, { oncePoll: provider })];
          });
        });
      }
      function getRunner(config, currentBlockNumber, method4, params) {
        return __awaiter2(this, void 0, void 0, function() {
          var provider, _a, filter4;
          return __generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                provider = config.provider;
                _a = method4;
                switch (_a) {
                  case "getBlockNumber":
                    return [3, 1];
                  case "getGasPrice":
                    return [3, 1];
                  case "getEtherPrice":
                    return [3, 2];
                  case "getBalance":
                    return [3, 3];
                  case "getTransactionCount":
                    return [3, 3];
                  case "getCode":
                    return [3, 3];
                  case "getStorageAt":
                    return [3, 6];
                  case "getBlock":
                    return [3, 9];
                  case "call":
                    return [3, 12];
                  case "estimateGas":
                    return [3, 12];
                  case "getTransaction":
                    return [3, 15];
                  case "getTransactionReceipt":
                    return [3, 15];
                  case "getLogs":
                    return [3, 16];
                }
                return [3, 19];
              case 1:
                return [2, provider[method4]()];
              case 2:
                if (provider.getEtherPrice) {
                  return [2, provider.getEtherPrice()];
                }
                return [3, 19];
              case 3:
                if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag)))
                  return [3, 5];
                return [4, waitForSync(config, currentBlockNumber)];
              case 4:
                provider = _b.sent();
                _b.label = 5;
              case 5:
                return [2, provider[method4](params.address, params.blockTag || "latest")];
              case 6:
                if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag)))
                  return [3, 8];
                return [4, waitForSync(config, currentBlockNumber)];
              case 7:
                provider = _b.sent();
                _b.label = 8;
              case 8:
                return [2, provider.getStorageAt(params.address, params.position, params.blockTag || "latest")];
              case 9:
                if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag)))
                  return [3, 11];
                return [4, waitForSync(config, currentBlockNumber)];
              case 10:
                provider = _b.sent();
                _b.label = 11;
              case 11:
                return [2, provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash)];
              case 12:
                if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag)))
                  return [3, 14];
                return [4, waitForSync(config, currentBlockNumber)];
              case 13:
                provider = _b.sent();
                _b.label = 14;
              case 14:
                if (method4 === "call" && params.blockTag) {
                  return [2, provider[method4](params.transaction, params.blockTag)];
                }
                return [2, provider[method4](params.transaction)];
              case 15:
                return [2, provider[method4](params.transactionHash)];
              case 16:
                filter4 = params.filter;
                if (!(filter4.fromBlock && (0, bytes_1.isHexString)(filter4.fromBlock) || filter4.toBlock && (0, bytes_1.isHexString)(filter4.toBlock)))
                  return [3, 18];
                return [4, waitForSync(config, currentBlockNumber)];
              case 17:
                provider = _b.sent();
                _b.label = 18;
              case 18:
                return [2, provider.getLogs(filter4)];
              case 19:
                return [2, logger.throwError("unknown method error", logger_1.Logger.errors.UNKNOWN_ERROR, {
                  method: method4,
                  params
                })];
            }
          });
        });
      }
      var FallbackProvider = (
        /** @class */
        function(_super) {
          __extends(FallbackProvider2, _super);
          function FallbackProvider2(providers, quorum) {
            var _this = this;
            if (providers.length === 0) {
              logger.throwArgumentError("missing providers", "providers", providers);
            }
            var providerConfigs = providers.map(function(configOrProvider, index3) {
              if (abstract_provider_1.Provider.isProvider(configOrProvider)) {
                var stallTimeout = (0, formatter_1.isCommunityResource)(configOrProvider) ? 2e3 : 750;
                var priority = 1;
                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });
              }
              var config = (0, properties_1.shallowCopy)(configOrProvider);
              if (config.priority == null) {
                config.priority = 1;
              }
              if (config.stallTimeout == null) {
                config.stallTimeout = (0, formatter_1.isCommunityResource)(configOrProvider) ? 2e3 : 750;
              }
              if (config.weight == null) {
                config.weight = 1;
              }
              var weight = config.weight;
              if (weight % 1 || weight > 512 || weight < 1) {
                logger.throwArgumentError("invalid weight; must be integer in [1, 512]", "providers[" + index3 + "].weight", weight);
              }
              return Object.freeze(config);
            });
            var total = providerConfigs.reduce(function(accum, c2) {
              return accum + c2.weight;
            }, 0);
            if (quorum == null) {
              quorum = total / 2;
            } else if (quorum > total) {
              logger.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
            }
            var networkOrReady = checkNetworks(providerConfigs.map(function(c2) {
              return c2.provider.network;
            }));
            if (networkOrReady == null) {
              networkOrReady = new Promise(function(resolve5, reject) {
                setTimeout(function() {
                  _this.detectNetwork().then(resolve5, reject);
                }, 0);
              });
            }
            _this = _super.call(this, networkOrReady) || this;
            (0, properties_1.defineReadOnly)(_this, "providerConfigs", Object.freeze(providerConfigs));
            (0, properties_1.defineReadOnly)(_this, "quorum", quorum);
            _this._highestBlockNumber = -1;
            return _this;
          }
          FallbackProvider2.prototype.detectNetwork = function() {
            return __awaiter2(this, void 0, void 0, function() {
              var networks;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, Promise.all(this.providerConfigs.map(function(c2) {
                      return c2.provider.getNetwork();
                    }))];
                  case 1:
                    networks = _a.sent();
                    return [2, checkNetworks(networks)];
                }
              });
            });
          };
          FallbackProvider2.prototype.perform = function(method4, params) {
            return __awaiter2(this, void 0, void 0, function() {
              var results, i_1, result, processFunc, configs, currentBlockNumber, i3, first, _loop_1, this_1, state_1;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (!(method4 === "sendTransaction"))
                      return [3, 2];
                    return [4, Promise.all(this.providerConfigs.map(function(c2) {
                      return c2.provider.sendTransaction(params.signedTransaction).then(function(result2) {
                        return result2.hash;
                      }, function(error) {
                        return error;
                      });
                    }))];
                  case 1:
                    results = _a.sent();
                    for (i_1 = 0; i_1 < results.length; i_1++) {
                      result = results[i_1];
                      if (typeof result === "string") {
                        return [2, result];
                      }
                    }
                    throw results[0];
                  case 2:
                    if (!(this._highestBlockNumber === -1 && method4 !== "getBlockNumber"))
                      return [3, 4];
                    return [4, this.getBlockNumber()];
                  case 3:
                    _a.sent();
                    _a.label = 4;
                  case 4:
                    processFunc = getProcessFunc(this, method4, params);
                    configs = (0, random_1.shuffled)(this.providerConfigs.map(properties_1.shallowCopy));
                    configs.sort(function(a2, b2) {
                      return a2.priority - b2.priority;
                    });
                    currentBlockNumber = this._highestBlockNumber;
                    i3 = 0;
                    first = true;
                    _loop_1 = function() {
                      var t0, inflightWeight, _loop_2, waiting, results2, result2, errors;
                      return __generator(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            t0 = now3();
                            inflightWeight = configs.filter(function(c2) {
                              return c2.runner && t0 - c2.start < c2.stallTimeout;
                            }).reduce(function(accum, c2) {
                              return accum + c2.weight;
                            }, 0);
                            _loop_2 = function() {
                              var config = configs[i3++];
                              var rid = nextRid++;
                              config.start = now3();
                              config.staller = stall(config.stallTimeout);
                              config.staller.wait(function() {
                                config.staller = null;
                              });
                              config.runner = getRunner(config, currentBlockNumber, method4, params).then(function(result3) {
                                config.done = true;
                                config.result = result3;
                                if (_this.listenerCount("debug")) {
                                  _this.emit("debug", {
                                    action: "request",
                                    rid,
                                    backend: exposeDebugConfig(config, now3()),
                                    request: { method: method4, params: (0, properties_1.deepCopy)(params) },
                                    provider: _this
                                  });
                                }
                              }, function(error) {
                                config.done = true;
                                config.error = error;
                                if (_this.listenerCount("debug")) {
                                  _this.emit("debug", {
                                    action: "request",
                                    rid,
                                    backend: exposeDebugConfig(config, now3()),
                                    request: { method: method4, params: (0, properties_1.deepCopy)(params) },
                                    provider: _this
                                  });
                                }
                              });
                              if (this_1.listenerCount("debug")) {
                                this_1.emit("debug", {
                                  action: "request",
                                  rid,
                                  backend: exposeDebugConfig(config, null),
                                  request: { method: method4, params: (0, properties_1.deepCopy)(params) },
                                  provider: this_1
                                });
                              }
                              inflightWeight += config.weight;
                            };
                            while (inflightWeight < this_1.quorum && i3 < configs.length) {
                              _loop_2();
                            }
                            waiting = [];
                            configs.forEach(function(c2) {
                              if (c2.done || !c2.runner) {
                                return;
                              }
                              waiting.push(c2.runner);
                              if (c2.staller) {
                                waiting.push(c2.staller.getPromise());
                              }
                            });
                            if (!waiting.length)
                              return [3, 2];
                            return [4, Promise.race(waiting)];
                          case 1:
                            _b.sent();
                            _b.label = 2;
                          case 2:
                            results2 = configs.filter(function(c2) {
                              return c2.done && c2.error == null;
                            });
                            if (!(results2.length >= this_1.quorum))
                              return [3, 5];
                            result2 = processFunc(results2);
                            if (result2 !== void 0) {
                              configs.forEach(function(c2) {
                                if (c2.staller) {
                                  c2.staller.cancel();
                                }
                                c2.cancelled = true;
                              });
                              return [2, { value: result2 }];
                            }
                            if (!!first)
                              return [3, 4];
                            return [4, stall(100).getPromise()];
                          case 3:
                            _b.sent();
                            _b.label = 4;
                          case 4:
                            first = false;
                            _b.label = 5;
                          case 5:
                            errors = configs.reduce(function(accum, c2) {
                              if (!c2.done || c2.error == null) {
                                return accum;
                              }
                              var code6 = c2.error.code;
                              if (ForwardErrors.indexOf(code6) >= 0) {
                                if (!accum[code6]) {
                                  accum[code6] = { error: c2.error, weight: 0 };
                                }
                                accum[code6].weight += c2.weight;
                              }
                              return accum;
                            }, {});
                            Object.keys(errors).forEach(function(errorCode) {
                              var tally = errors[errorCode];
                              if (tally.weight < _this.quorum) {
                                return;
                              }
                              configs.forEach(function(c2) {
                                if (c2.staller) {
                                  c2.staller.cancel();
                                }
                                c2.cancelled = true;
                              });
                              var e3 = tally.error;
                              var props = {};
                              ForwardProperties.forEach(function(name5) {
                                if (e3[name5] == null) {
                                  return;
                                }
                                props[name5] = e3[name5];
                              });
                              logger.throwError(e3.reason || e3.message, errorCode, props);
                            });
                            if (configs.filter(function(c2) {
                              return !c2.done;
                            }).length === 0) {
                              return [2, "break"];
                            }
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    };
                    this_1 = this;
                    _a.label = 5;
                  case 5:
                    if (false)
                      return [3, 7];
                    return [5, _loop_1()];
                  case 6:
                    state_1 = _a.sent();
                    if (typeof state_1 === "object")
                      return [2, state_1.value];
                    if (state_1 === "break")
                      return [3, 7];
                    return [3, 5];
                  case 7:
                    configs.forEach(function(c2) {
                      if (c2.staller) {
                        c2.staller.cancel();
                      }
                      c2.cancelled = true;
                    });
                    return [2, logger.throwError("failed to meet quorum", logger_1.Logger.errors.SERVER_ERROR, {
                      method: method4,
                      params,
                      //results: configs.map((c) => c.result),
                      //errors: configs.map((c) => c.error),
                      results: configs.map(function(c2) {
                        return exposeDebugConfig(c2);
                      }),
                      provider: this
                    })];
                }
              });
            });
          };
          return FallbackProvider2;
        }(base_provider_1.BaseProvider)
      );
      exports2.FallbackProvider = FallbackProvider;
    }
  });

  // node_modules/@ethersproject/providers/lib/browser-ipc-provider.js
  var require_browser_ipc_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/browser-ipc-provider.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.IpcProvider = void 0;
      var IpcProvider = null;
      exports2.IpcProvider = IpcProvider;
    }
  });

  // node_modules/@ethersproject/providers/lib/infura-provider.js
  var require_infura_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/infura-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.InfuraProvider = exports2.InfuraWebSocketProvider = void 0;
      var properties_1 = require_lib4();
      var websocket_provider_1 = require_websocket_provider();
      var formatter_1 = require_formatter();
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      var url_json_rpc_provider_1 = require_url_json_rpc_provider();
      var defaultProjectId = "84842078b09946638c03157f83405213";
      var InfuraWebSocketProvider = (
        /** @class */
        function(_super) {
          __extends(InfuraWebSocketProvider2, _super);
          function InfuraWebSocketProvider2(network, apiKey) {
            var _this = this;
            var provider = new InfuraProvider(network, apiKey);
            var connection = provider.connection;
            if (connection.password) {
              logger.throwError("INFURA WebSocket project secrets unsupported", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "InfuraProvider.getWebSocketProvider()"
              });
            }
            var url2 = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
            _this = _super.call(this, url2, network) || this;
            (0, properties_1.defineReadOnly)(_this, "apiKey", provider.projectId);
            (0, properties_1.defineReadOnly)(_this, "projectId", provider.projectId);
            (0, properties_1.defineReadOnly)(_this, "projectSecret", provider.projectSecret);
            return _this;
          }
          InfuraWebSocketProvider2.prototype.isCommunityResource = function() {
            return this.projectId === defaultProjectId;
          };
          return InfuraWebSocketProvider2;
        }(websocket_provider_1.WebSocketProvider)
      );
      exports2.InfuraWebSocketProvider = InfuraWebSocketProvider;
      var InfuraProvider = (
        /** @class */
        function(_super) {
          __extends(InfuraProvider2, _super);
          function InfuraProvider2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          InfuraProvider2.getWebSocketProvider = function(network, apiKey) {
            return new InfuraWebSocketProvider(network, apiKey);
          };
          InfuraProvider2.getApiKey = function(apiKey) {
            var apiKeyObj = {
              apiKey: defaultProjectId,
              projectId: defaultProjectId,
              projectSecret: null
            };
            if (apiKey == null) {
              return apiKeyObj;
            }
            if (typeof apiKey === "string") {
              apiKeyObj.projectId = apiKey;
            } else if (apiKey.projectSecret != null) {
              logger.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
              logger.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
              apiKeyObj.projectId = apiKey.projectId;
              apiKeyObj.projectSecret = apiKey.projectSecret;
            } else if (apiKey.projectId) {
              apiKeyObj.projectId = apiKey.projectId;
            }
            apiKeyObj.apiKey = apiKeyObj.projectId;
            return apiKeyObj;
          };
          InfuraProvider2.getUrl = function(network, apiKey) {
            var host = null;
            switch (network ? network.name : "unknown") {
              case "homestead":
                host = "mainnet.infura.io";
                break;
              case "goerli":
                host = "goerli.infura.io";
                break;
              case "sepolia":
                host = "sepolia.infura.io";
                break;
              case "matic":
                host = "polygon-mainnet.infura.io";
                break;
              case "maticmum":
                host = "polygon-mumbai.infura.io";
                break;
              case "optimism":
                host = "optimism-mainnet.infura.io";
                break;
              case "optimism-goerli":
                host = "optimism-goerli.infura.io";
                break;
              case "arbitrum":
                host = "arbitrum-mainnet.infura.io";
                break;
              case "arbitrum-goerli":
                host = "arbitrum-goerli.infura.io";
                break;
              default:
                logger.throwError("unsupported network", logger_1.Logger.errors.INVALID_ARGUMENT, {
                  argument: "network",
                  value: network
                });
            }
            var connection = {
              allowGzip: true,
              url: "https://" + host + "/v3/" + apiKey.projectId,
              throttleCallback: function(attempt, url2) {
                if (apiKey.projectId === defaultProjectId) {
                  (0, formatter_1.showThrottleMessage)();
                }
                return Promise.resolve(true);
              }
            };
            if (apiKey.projectSecret != null) {
              connection.user = "";
              connection.password = apiKey.projectSecret;
            }
            return connection;
          };
          InfuraProvider2.prototype.isCommunityResource = function() {
            return this.projectId === defaultProjectId;
          };
          return InfuraProvider2;
        }(url_json_rpc_provider_1.UrlJsonRpcProvider)
      );
      exports2.InfuraProvider = InfuraProvider;
    }
  });

  // node_modules/@ethersproject/providers/lib/json-rpc-batch-provider.js
  var require_json_rpc_batch_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/json-rpc-batch-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.JsonRpcBatchProvider = void 0;
      var properties_1 = require_lib4();
      var web_1 = require_lib17();
      var json_rpc_provider_1 = require_json_rpc_provider();
      var JsonRpcBatchProvider = (
        /** @class */
        function(_super) {
          __extends(JsonRpcBatchProvider2, _super);
          function JsonRpcBatchProvider2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          JsonRpcBatchProvider2.prototype.send = function(method4, params) {
            var _this = this;
            var request = {
              method: method4,
              params,
              id: this._nextId++,
              jsonrpc: "2.0"
            };
            if (this._pendingBatch == null) {
              this._pendingBatch = [];
            }
            var inflightRequest = { request, resolve: null, reject: null };
            var promise = new Promise(function(resolve5, reject) {
              inflightRequest.resolve = resolve5;
              inflightRequest.reject = reject;
            });
            this._pendingBatch.push(inflightRequest);
            if (!this._pendingBatchAggregator) {
              this._pendingBatchAggregator = setTimeout(function() {
                var batch3 = _this._pendingBatch;
                _this._pendingBatch = null;
                _this._pendingBatchAggregator = null;
                var request2 = batch3.map(function(inflight) {
                  return inflight.request;
                });
                _this.emit("debug", {
                  action: "requestBatch",
                  request: (0, properties_1.deepCopy)(request2),
                  provider: _this
                });
                return (0, web_1.fetchJson)(_this.connection, JSON.stringify(request2)).then(function(result) {
                  _this.emit("debug", {
                    action: "response",
                    request: request2,
                    response: result,
                    provider: _this
                  });
                  batch3.forEach(function(inflightRequest2, index3) {
                    var payload = result[index3];
                    if (payload.error) {
                      var error = new Error(payload.error.message);
                      error.code = payload.error.code;
                      error.data = payload.error.data;
                      inflightRequest2.reject(error);
                    } else {
                      inflightRequest2.resolve(payload.result);
                    }
                  });
                }, function(error) {
                  _this.emit("debug", {
                    action: "response",
                    error,
                    request: request2,
                    provider: _this
                  });
                  batch3.forEach(function(inflightRequest2) {
                    inflightRequest2.reject(error);
                  });
                });
              }, 10);
            }
            return promise;
          };
          return JsonRpcBatchProvider2;
        }(json_rpc_provider_1.JsonRpcProvider)
      );
      exports2.JsonRpcBatchProvider = JsonRpcBatchProvider;
    }
  });

  // node_modules/@ethersproject/providers/lib/nodesmith-provider.js
  var require_nodesmith_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/nodesmith-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.NodesmithProvider = void 0;
      var url_json_rpc_provider_1 = require_url_json_rpc_provider();
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      var defaultApiKey = "ETHERS_JS_SHARED";
      var NodesmithProvider = (
        /** @class */
        function(_super) {
          __extends(NodesmithProvider2, _super);
          function NodesmithProvider2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          NodesmithProvider2.getApiKey = function(apiKey) {
            if (apiKey && typeof apiKey !== "string") {
              logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey || defaultApiKey;
          };
          NodesmithProvider2.getUrl = function(network, apiKey) {
            logger.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
            var host = null;
            switch (network.name) {
              case "homestead":
                host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                break;
              case "ropsten":
                host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                break;
              case "rinkeby":
                host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                break;
              case "goerli":
                host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                break;
              case "kovan":
                host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                break;
              default:
                logger.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return host + "?apiKey=" + apiKey;
          };
          return NodesmithProvider2;
        }(url_json_rpc_provider_1.UrlJsonRpcProvider)
      );
      exports2.NodesmithProvider = NodesmithProvider;
    }
  });

  // node_modules/@ethersproject/providers/lib/pocket-provider.js
  var require_pocket_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/pocket-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PocketProvider = void 0;
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      var url_json_rpc_provider_1 = require_url_json_rpc_provider();
      var defaultApplicationId = "62e1ad51b37b8e00394bda3b";
      var PocketProvider = (
        /** @class */
        function(_super) {
          __extends(PocketProvider2, _super);
          function PocketProvider2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          PocketProvider2.getApiKey = function(apiKey) {
            var apiKeyObj = {
              applicationId: null,
              loadBalancer: true,
              applicationSecretKey: null
            };
            if (apiKey == null) {
              apiKeyObj.applicationId = defaultApplicationId;
            } else if (typeof apiKey === "string") {
              apiKeyObj.applicationId = apiKey;
            } else if (apiKey.applicationSecretKey != null) {
              apiKeyObj.applicationId = apiKey.applicationId;
              apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
            } else if (apiKey.applicationId) {
              apiKeyObj.applicationId = apiKey.applicationId;
            } else {
              logger.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
            }
            return apiKeyObj;
          };
          PocketProvider2.getUrl = function(network, apiKey) {
            var host = null;
            switch (network ? network.name : "unknown") {
              case "goerli":
                host = "eth-goerli.gateway.pokt.network";
                break;
              case "homestead":
                host = "eth-mainnet.gateway.pokt.network";
                break;
              case "kovan":
                host = "poa-kovan.gateway.pokt.network";
                break;
              case "matic":
                host = "poly-mainnet.gateway.pokt.network";
                break;
              case "maticmum":
                host = "polygon-mumbai-rpc.gateway.pokt.network";
                break;
              case "rinkeby":
                host = "eth-rinkeby.gateway.pokt.network";
                break;
              case "ropsten":
                host = "eth-ropsten.gateway.pokt.network";
                break;
              default:
                logger.throwError("unsupported network", logger_1.Logger.errors.INVALID_ARGUMENT, {
                  argument: "network",
                  value: network
                });
            }
            var url2 = "https://" + host + "/v1/lb/" + apiKey.applicationId;
            var connection = { headers: {}, url: url2 };
            if (apiKey.applicationSecretKey != null) {
              connection.user = "";
              connection.password = apiKey.applicationSecretKey;
            }
            return connection;
          };
          PocketProvider2.prototype.isCommunityResource = function() {
            return this.applicationId === defaultApplicationId;
          };
          return PocketProvider2;
        }(url_json_rpc_provider_1.UrlJsonRpcProvider)
      );
      exports2.PocketProvider = PocketProvider;
    }
  });

  // node_modules/@ethersproject/providers/lib/web3-provider.js
  var require_web3_provider = __commonJS({
    "node_modules/@ethersproject/providers/lib/web3-provider.js"(exports2) {
      "use strict";
      var __extends = exports2 && exports2.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Web3Provider = void 0;
      var properties_1 = require_lib4();
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      var json_rpc_provider_1 = require_json_rpc_provider();
      var _nextId = 1;
      function buildWeb3LegacyFetcher(provider, sendFunc) {
        var fetcher = "Web3LegacyFetcher";
        return function(method4, params) {
          var _this = this;
          var request = {
            method: method4,
            params,
            id: _nextId++,
            jsonrpc: "2.0"
          };
          return new Promise(function(resolve5, reject) {
            _this.emit("debug", {
              action: "request",
              fetcher,
              request: (0, properties_1.deepCopy)(request),
              provider: _this
            });
            sendFunc(request, function(error, response) {
              if (error) {
                _this.emit("debug", {
                  action: "response",
                  fetcher,
                  error,
                  request,
                  provider: _this
                });
                return reject(error);
              }
              _this.emit("debug", {
                action: "response",
                fetcher,
                request,
                response,
                provider: _this
              });
              if (response.error) {
                var error_1 = new Error(response.error.message);
                error_1.code = response.error.code;
                error_1.data = response.error.data;
                return reject(error_1);
              }
              resolve5(response.result);
            });
          });
        };
      }
      function buildEip1193Fetcher(provider) {
        return function(method4, params) {
          var _this = this;
          if (params == null) {
            params = [];
          }
          var request = { method: method4, params };
          this.emit("debug", {
            action: "request",
            fetcher: "Eip1193Fetcher",
            request: (0, properties_1.deepCopy)(request),
            provider: this
          });
          return provider.request(request).then(function(response) {
            _this.emit("debug", {
              action: "response",
              fetcher: "Eip1193Fetcher",
              request,
              response,
              provider: _this
            });
            return response;
          }, function(error) {
            _this.emit("debug", {
              action: "response",
              fetcher: "Eip1193Fetcher",
              request,
              error,
              provider: _this
            });
            throw error;
          });
        };
      }
      var Web3Provider = (
        /** @class */
        function(_super) {
          __extends(Web3Provider2, _super);
          function Web3Provider2(provider, network) {
            var _this = this;
            if (provider == null) {
              logger.throwArgumentError("missing provider", "provider", provider);
            }
            var path2 = null;
            var jsonRpcFetchFunc = null;
            var subprovider = null;
            if (typeof provider === "function") {
              path2 = "unknown:";
              jsonRpcFetchFunc = provider;
            } else {
              path2 = provider.host || provider.path || "";
              if (!path2 && provider.isMetaMask) {
                path2 = "metamask";
              }
              subprovider = provider;
              if (provider.request) {
                if (path2 === "") {
                  path2 = "eip-1193:";
                }
                jsonRpcFetchFunc = buildEip1193Fetcher(provider);
              } else if (provider.sendAsync) {
                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
              } else if (provider.send) {
                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
              } else {
                logger.throwArgumentError("unsupported provider", "provider", provider);
              }
              if (!path2) {
                path2 = "unknown:";
              }
            }
            _this = _super.call(this, path2, network) || this;
            (0, properties_1.defineReadOnly)(_this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
            (0, properties_1.defineReadOnly)(_this, "provider", subprovider);
            return _this;
          }
          Web3Provider2.prototype.send = function(method4, params) {
            return this.jsonRpcFetchFunc(method4, params);
          };
          return Web3Provider2;
        }(json_rpc_provider_1.JsonRpcProvider)
      );
      exports2.Web3Provider = Web3Provider;
    }
  });

  // node_modules/@ethersproject/providers/lib/index.js
  var require_lib22 = __commonJS({
    "node_modules/@ethersproject/providers/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Formatter = exports2.showThrottleMessage = exports2.isCommunityResourcable = exports2.isCommunityResource = exports2.getNetwork = exports2.getDefaultProvider = exports2.JsonRpcSigner = exports2.IpcProvider = exports2.WebSocketProvider = exports2.Web3Provider = exports2.StaticJsonRpcProvider = exports2.PocketProvider = exports2.NodesmithProvider = exports2.JsonRpcBatchProvider = exports2.JsonRpcProvider = exports2.InfuraWebSocketProvider = exports2.InfuraProvider = exports2.EtherscanProvider = exports2.CloudflareProvider = exports2.AnkrProvider = exports2.AlchemyWebSocketProvider = exports2.AlchemyProvider = exports2.FallbackProvider = exports2.UrlJsonRpcProvider = exports2.Resolver = exports2.BaseProvider = exports2.Provider = void 0;
      var abstract_provider_1 = require_lib5();
      Object.defineProperty(exports2, "Provider", { enumerable: true, get: function() {
        return abstract_provider_1.Provider;
      } });
      var networks_1 = require_lib6();
      Object.defineProperty(exports2, "getNetwork", { enumerable: true, get: function() {
        return networks_1.getNetwork;
      } });
      var base_provider_1 = require_base_provider();
      Object.defineProperty(exports2, "BaseProvider", { enumerable: true, get: function() {
        return base_provider_1.BaseProvider;
      } });
      Object.defineProperty(exports2, "Resolver", { enumerable: true, get: function() {
        return base_provider_1.Resolver;
      } });
      var alchemy_provider_1 = require_alchemy_provider();
      Object.defineProperty(exports2, "AlchemyProvider", { enumerable: true, get: function() {
        return alchemy_provider_1.AlchemyProvider;
      } });
      Object.defineProperty(exports2, "AlchemyWebSocketProvider", { enumerable: true, get: function() {
        return alchemy_provider_1.AlchemyWebSocketProvider;
      } });
      var ankr_provider_1 = require_ankr_provider();
      Object.defineProperty(exports2, "AnkrProvider", { enumerable: true, get: function() {
        return ankr_provider_1.AnkrProvider;
      } });
      var cloudflare_provider_1 = require_cloudflare_provider();
      Object.defineProperty(exports2, "CloudflareProvider", { enumerable: true, get: function() {
        return cloudflare_provider_1.CloudflareProvider;
      } });
      var etherscan_provider_1 = require_etherscan_provider();
      Object.defineProperty(exports2, "EtherscanProvider", { enumerable: true, get: function() {
        return etherscan_provider_1.EtherscanProvider;
      } });
      var fallback_provider_1 = require_fallback_provider();
      Object.defineProperty(exports2, "FallbackProvider", { enumerable: true, get: function() {
        return fallback_provider_1.FallbackProvider;
      } });
      var ipc_provider_1 = require_browser_ipc_provider();
      Object.defineProperty(exports2, "IpcProvider", { enumerable: true, get: function() {
        return ipc_provider_1.IpcProvider;
      } });
      var infura_provider_1 = require_infura_provider();
      Object.defineProperty(exports2, "InfuraProvider", { enumerable: true, get: function() {
        return infura_provider_1.InfuraProvider;
      } });
      Object.defineProperty(exports2, "InfuraWebSocketProvider", { enumerable: true, get: function() {
        return infura_provider_1.InfuraWebSocketProvider;
      } });
      var json_rpc_provider_1 = require_json_rpc_provider();
      Object.defineProperty(exports2, "JsonRpcProvider", { enumerable: true, get: function() {
        return json_rpc_provider_1.JsonRpcProvider;
      } });
      Object.defineProperty(exports2, "JsonRpcSigner", { enumerable: true, get: function() {
        return json_rpc_provider_1.JsonRpcSigner;
      } });
      var json_rpc_batch_provider_1 = require_json_rpc_batch_provider();
      Object.defineProperty(exports2, "JsonRpcBatchProvider", { enumerable: true, get: function() {
        return json_rpc_batch_provider_1.JsonRpcBatchProvider;
      } });
      var nodesmith_provider_1 = require_nodesmith_provider();
      Object.defineProperty(exports2, "NodesmithProvider", { enumerable: true, get: function() {
        return nodesmith_provider_1.NodesmithProvider;
      } });
      var pocket_provider_1 = require_pocket_provider();
      Object.defineProperty(exports2, "PocketProvider", { enumerable: true, get: function() {
        return pocket_provider_1.PocketProvider;
      } });
      var url_json_rpc_provider_1 = require_url_json_rpc_provider();
      Object.defineProperty(exports2, "StaticJsonRpcProvider", { enumerable: true, get: function() {
        return url_json_rpc_provider_1.StaticJsonRpcProvider;
      } });
      Object.defineProperty(exports2, "UrlJsonRpcProvider", { enumerable: true, get: function() {
        return url_json_rpc_provider_1.UrlJsonRpcProvider;
      } });
      var web3_provider_1 = require_web3_provider();
      Object.defineProperty(exports2, "Web3Provider", { enumerable: true, get: function() {
        return web3_provider_1.Web3Provider;
      } });
      var websocket_provider_1 = require_websocket_provider();
      Object.defineProperty(exports2, "WebSocketProvider", { enumerable: true, get: function() {
        return websocket_provider_1.WebSocketProvider;
      } });
      var formatter_1 = require_formatter();
      Object.defineProperty(exports2, "Formatter", { enumerable: true, get: function() {
        return formatter_1.Formatter;
      } });
      Object.defineProperty(exports2, "isCommunityResourcable", { enumerable: true, get: function() {
        return formatter_1.isCommunityResourcable;
      } });
      Object.defineProperty(exports2, "isCommunityResource", { enumerable: true, get: function() {
        return formatter_1.isCommunityResource;
      } });
      Object.defineProperty(exports2, "showThrottleMessage", { enumerable: true, get: function() {
        return formatter_1.showThrottleMessage;
      } });
      var logger_1 = require_lib();
      var _version_1 = require_version13();
      var logger = new logger_1.Logger(_version_1.version);
      function getDefaultProvider(network, options) {
        if (network == null) {
          network = "homestead";
        }
        if (typeof network === "string") {
          var match2 = network.match(/^(ws|http)s?:/i);
          if (match2) {
            switch (match2[1].toLowerCase()) {
              case "http":
              case "https":
                return new json_rpc_provider_1.JsonRpcProvider(network);
              case "ws":
              case "wss":
                return new websocket_provider_1.WebSocketProvider(network);
              default:
                logger.throwArgumentError("unsupported URL scheme", "network", network);
            }
          }
        }
        var n3 = (0, networks_1.getNetwork)(network);
        if (!n3 || !n3._defaultProvider) {
          logger.throwError("unsupported getDefaultProvider network", logger_1.Logger.errors.NETWORK_ERROR, {
            operation: "getDefaultProvider",
            network
          });
        }
        return n3._defaultProvider({
          FallbackProvider: fallback_provider_1.FallbackProvider,
          AlchemyProvider: alchemy_provider_1.AlchemyProvider,
          AnkrProvider: ankr_provider_1.AnkrProvider,
          CloudflareProvider: cloudflare_provider_1.CloudflareProvider,
          EtherscanProvider: etherscan_provider_1.EtherscanProvider,
          InfuraProvider: infura_provider_1.InfuraProvider,
          JsonRpcProvider: json_rpc_provider_1.JsonRpcProvider,
          NodesmithProvider: nodesmith_provider_1.NodesmithProvider,
          PocketProvider: pocket_provider_1.PocketProvider,
          Web3Provider: web3_provider_1.Web3Provider,
          IpcProvider: ipc_provider_1.IpcProvider
        }, options);
      }
      exports2.getDefaultProvider = getDefaultProvider;
    }
  });

  // node_modules/form-data/lib/browser.js
  var require_browser = __commonJS({
    "node_modules/form-data/lib/browser.js"(exports2, module2) {
      module2.exports = typeof self == "object" ? self.FormData : window.FormData;
    }
  });

  // node_modules/@web3-react/types/dist/index.js
  var require_dist = __commonJS({
    "node_modules/@web3-react/types/dist/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Connector = void 0;
      var Connector = class {
        /**
         * @param actions - Methods bound to a zustand store that tracks the state of the connector.
         * @param onError - An optional handler which will report errors thrown from event listeners.
         * Actions are used by the connector to report changes in connection status.
         */
        constructor(actions, onError) {
          this.actions = actions;
          this.onError = onError;
        }
        /**
         * Reset the state of the connector without otherwise interacting with the connection.
         */
        resetState() {
          this.actions.resetState();
        }
      };
      exports2.Connector = Connector;
    }
  });

  // node_modules/@metamask/detect-provider/dist/index.js
  var require_dist2 = __commonJS({
    "node_modules/@metamask/detect-provider/dist/index.js"(exports2, module2) {
      "use strict";
      function detectEthereumProvider({ mustBeMetaMask = false, silent = false, timeout = 3e3 } = {}) {
        _validateInputs();
        let handled = false;
        return new Promise((resolve5) => {
          if (window.ethereum) {
            handleEthereum();
          } else {
            window.addEventListener("ethereum#initialized", handleEthereum, { once: true });
            setTimeout(() => {
              handleEthereum();
            }, timeout);
          }
          function handleEthereum() {
            if (handled) {
              return;
            }
            handled = true;
            window.removeEventListener("ethereum#initialized", handleEthereum);
            const { ethereum } = window;
            if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {
              resolve5(ethereum);
            } else {
              const message = mustBeMetaMask && ethereum ? "Non-MetaMask window.ethereum detected." : "Unable to detect window.ethereum.";
              !silent && console.error("@metamask/detect-provider:", message);
              resolve5(null);
            }
          }
        });
        function _validateInputs() {
          if (typeof mustBeMetaMask !== "boolean") {
            throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);
          }
          if (typeof silent !== "boolean") {
            throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);
          }
          if (typeof timeout !== "number") {
            throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);
          }
        }
      }
      module2.exports = detectEthereumProvider;
    }
  });

  // node_modules/@web3-react/metamask/dist/index.js
  var require_dist3 = __commonJS({
    "node_modules/@web3-react/metamask/dist/index.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m2, k);
        if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m2[k];
          } };
        }
        Object.defineProperty(o2, k2, desc);
      } : function(o2, m2, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o2[k2] = m2[k];
      });
      var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v2) {
        Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
      } : function(o2, v2) {
        o2["default"] = v2;
      });
      var __importStar = exports2 && exports2.__importStar || function(mod2) {
        if (mod2 && mod2.__esModule)
          return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k))
              __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.MetaMask = exports2.NoMetaMaskError = void 0;
      var types_1 = require_dist();
      var NoMetaMaskError = class extends Error {
        constructor() {
          super("MetaMask not installed");
          this.name = NoMetaMaskError.name;
          Object.setPrototypeOf(this, NoMetaMaskError.prototype);
        }
      };
      exports2.NoMetaMaskError = NoMetaMaskError;
      function parseChainId(chainId) {
        return Number.parseInt(chainId, 16);
      }
      var MetaMask2 = class extends types_1.Connector {
        constructor({ actions, options, onError }) {
          super(actions, onError);
          this.options = options;
        }
        isomorphicInitialize() {
          return __awaiter2(this, void 0, void 0, function* () {
            if (this.eagerConnection)
              return;
            return this.eagerConnection = Promise.resolve().then(() => __importStar(require_dist2())).then((m2) => __awaiter2(this, void 0, void 0, function* () {
              var _a, _b;
              const provider = yield m2.default(this.options);
              if (provider) {
                this.provider = provider;
                if ((_a = this.provider.providers) === null || _a === void 0 ? void 0 : _a.length) {
                  this.provider = (_b = this.provider.providers.find((p2) => p2.isMetaMask)) !== null && _b !== void 0 ? _b : this.provider.providers[0];
                }
                this.provider.on("connect", ({ chainId }) => {
                  this.actions.update({ chainId: parseChainId(chainId) });
                });
                this.provider.on("disconnect", (error) => {
                  var _a2;
                  this.actions.resetState();
                  (_a2 = this.onError) === null || _a2 === void 0 ? void 0 : _a2.call(this, error);
                });
                this.provider.on("chainChanged", (chainId) => {
                  this.actions.update({ chainId: parseChainId(chainId) });
                });
                this.provider.on("accountsChanged", (accounts) => {
                  if (accounts.length === 0) {
                    this.actions.resetState();
                  } else {
                    this.actions.update({ accounts });
                  }
                });
              }
            }));
          });
        }
        /** {@inheritdoc Connector.connectEagerly} */
        connectEagerly() {
          return __awaiter2(this, void 0, void 0, function* () {
            const cancelActivation = this.actions.startActivation();
            yield this.isomorphicInitialize();
            if (!this.provider)
              return cancelActivation();
            return Promise.all([
              this.provider.request({ method: "eth_chainId" }),
              this.provider.request({ method: "eth_accounts" })
            ]).then(([chainId, accounts]) => {
              if (accounts.length) {
                this.actions.update({ chainId: parseChainId(chainId), accounts });
              } else {
                throw new Error("No accounts returned");
              }
            }).catch((error) => {
              console.debug("Could not connect eagerly", error);
              this.actions.resetState();
            });
          });
        }
        /**
         * Initiates a connection.
         *
         * @param desiredChainIdOrChainParameters - If defined, indicates the desired chain to connect to. If the user is
         * already connected to this chain, no additional steps will be taken. Otherwise, the user will be prompted to switch
         * to the chain, if one of two conditions is met: either they already have it added in their extension, or the
         * argument is of type AddEthereumChainParameter, in which case the user will be prompted to add the chain with the
         * specified parameters first, before being prompted to switch.
         */
        activate(desiredChainIdOrChainParameters) {
          var _a, _b;
          return __awaiter2(this, void 0, void 0, function* () {
            let cancelActivation;
            if (!((_b = (_a = this.provider) === null || _a === void 0 ? void 0 : _a.isConnected) === null || _b === void 0 ? void 0 : _b.call(_a)))
              cancelActivation = this.actions.startActivation();
            return this.isomorphicInitialize().then(() => __awaiter2(this, void 0, void 0, function* () {
              if (!this.provider)
                throw new NoMetaMaskError();
              return Promise.all([
                this.provider.request({ method: "eth_chainId" }),
                this.provider.request({ method: "eth_requestAccounts" })
              ]).then(([chainId, accounts]) => {
                const receivedChainId = parseChainId(chainId);
                const desiredChainId = typeof desiredChainIdOrChainParameters === "number" ? desiredChainIdOrChainParameters : desiredChainIdOrChainParameters === null || desiredChainIdOrChainParameters === void 0 ? void 0 : desiredChainIdOrChainParameters.chainId;
                if (!desiredChainId || receivedChainId === desiredChainId)
                  return this.actions.update({ chainId: receivedChainId, accounts });
                const desiredChainIdHex = `0x${desiredChainId.toString(16)}`;
                return this.provider.request({
                  method: "wallet_switchEthereumChain",
                  params: [{ chainId: desiredChainIdHex }]
                }).catch((error) => {
                  if (error.code === 4902 && typeof desiredChainIdOrChainParameters !== "number") {
                    return this.provider.request({
                      method: "wallet_addEthereumChain",
                      params: [Object.assign(Object.assign({}, desiredChainIdOrChainParameters), { chainId: desiredChainIdHex })]
                    });
                  }
                  throw error;
                }).then(() => this.activate(desiredChainId));
              });
            })).catch((error) => {
              cancelActivation === null || cancelActivation === void 0 ? void 0 : cancelActivation();
              throw error;
            });
          });
        }
        watchAsset({ address, symbol, decimals, image }) {
          return __awaiter2(this, void 0, void 0, function* () {
            if (!this.provider)
              throw new Error("No provider");
            return this.provider.request({
              method: "wallet_watchAsset",
              params: {
                type: "ERC20",
                options: {
                  address,
                  symbol,
                  decimals,
                  image
                  // A string url of the token logo
                }
              }
            }).then((success) => {
              if (!success)
                throw new Error("Rejected");
              return true;
            });
          });
        }
      };
      exports2.MetaMask = MetaMask2;
    }
  });

  // node_modules/zustand/esm/vanilla.mjs
  var import_meta, createStoreImpl, createStore;
  var init_vanilla = __esm({
    "node_modules/zustand/esm/vanilla.mjs"() {
      import_meta = {};
      createStoreImpl = (createState) => {
        let state;
        const listeners = /* @__PURE__ */ new Set();
        const setState = (partial, replace) => {
          const nextState = typeof partial === "function" ? partial(state) : partial;
          if (!Object.is(nextState, state)) {
            const previousState = state;
            state = (replace != null ? replace : typeof nextState !== "object") ? nextState : Object.assign({}, state, nextState);
            listeners.forEach((listener) => listener(state, previousState));
          }
        };
        const getState = () => state;
        const subscribe2 = (listener) => {
          listeners.add(listener);
          return () => listeners.delete(listener);
        };
        const destroy3 = () => {
          if ((import_meta.env && import_meta.env.MODE) !== "production") {
            console.warn(
              "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
            );
          }
          listeners.clear();
        };
        const api3 = { setState, getState, subscribe: subscribe2, destroy: destroy3 };
        state = createState(setState, getState, api3);
        return api3;
      };
      createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
  var require_use_sync_external_store_shim_development = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React292 = require_react();
          var ReactSharedInternals = React292.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          function is2(x, y2) {
            return x === y2 && (x !== 0 || 1 / x === 1 / y2) || x !== x && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          var useState67 = React292.useState, useEffect73 = React292.useEffect, useLayoutEffect6 = React292.useLayoutEffect, useDebugValue2 = React292.useDebugValue;
          var didWarnOld18Alpha = false;
          var didWarnUncachedGetSnapshot = false;
          function useSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot) {
            {
              if (!didWarnOld18Alpha) {
                if (React292.startTransition !== void 0) {
                  didWarnOld18Alpha = true;
                  error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
                }
              }
            }
            var value = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedValue = getSnapshot();
                if (!objectIs(value, cachedValue)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var _useState = useState67({
              inst: {
                value,
                getSnapshot
              }
            }), inst = _useState[0].inst, forceUpdate = _useState[1];
            useLayoutEffect6(function() {
              inst.value = value;
              inst.getSnapshot = getSnapshot;
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            }, [subscribe2, value, getSnapshot]);
            useEffect73(function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
              var handleStoreChange = function() {
                if (checkIfSnapshotChanged(inst)) {
                  forceUpdate({
                    inst
                  });
                }
              };
              return subscribe2(handleStoreChange);
            }, [subscribe2]);
            useDebugValue2(value);
            return value;
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function useSyncExternalStore$1(subscribe2, getSnapshot, getServerSnapshot) {
            return getSnapshot();
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var isServerEnvironment = !canUseDOM;
          var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
          var useSyncExternalStore$2 = React292.useSyncExternalStore !== void 0 ? React292.useSyncExternalStore : shim;
          exports2.useSyncExternalStore = useSyncExternalStore$2;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/use-sync-external-store/shim/index.js
  var require_shim = __commonJS({
    "node_modules/use-sync-external-store/shim/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_use_sync_external_store_shim_development();
      }
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
  var require_with_selector_development = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React292 = require_react();
          var shim = require_shim();
          function is2(x, y2) {
            return x === y2 && (x !== 0 || 1 / x === 1 / y2) || x !== x && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          var useSyncExternalStore = shim.useSyncExternalStore;
          var useRef86 = React292.useRef, useEffect73 = React292.useEffect, useMemo52 = React292.useMemo, useDebugValue2 = React292.useDebugValue;
          function useSyncExternalStoreWithSelector2(subscribe2, getSnapshot, getServerSnapshot, selector, isEqual3) {
            var instRef = useRef86(null);
            var inst;
            if (instRef.current === null) {
              inst = {
                hasValue: false,
                value: null
              };
              instRef.current = inst;
            } else {
              inst = instRef.current;
            }
            var _useMemo = useMemo52(function() {
              var hasMemo = false;
              var memoizedSnapshot;
              var memoizedSelection;
              var memoizedSelector = function(nextSnapshot) {
                if (!hasMemo) {
                  hasMemo = true;
                  memoizedSnapshot = nextSnapshot;
                  var _nextSelection = selector(nextSnapshot);
                  if (isEqual3 !== void 0) {
                    if (inst.hasValue) {
                      var currentSelection = inst.value;
                      if (isEqual3(currentSelection, _nextSelection)) {
                        memoizedSelection = currentSelection;
                        return currentSelection;
                      }
                    }
                  }
                  memoizedSelection = _nextSelection;
                  return _nextSelection;
                }
                var prevSnapshot = memoizedSnapshot;
                var prevSelection = memoizedSelection;
                if (objectIs(prevSnapshot, nextSnapshot)) {
                  return prevSelection;
                }
                var nextSelection = selector(nextSnapshot);
                if (isEqual3 !== void 0 && isEqual3(prevSelection, nextSelection)) {
                  return prevSelection;
                }
                memoizedSnapshot = nextSnapshot;
                memoizedSelection = nextSelection;
                return nextSelection;
              };
              var maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
              var getSnapshotWithSelector = function() {
                return memoizedSelector(getSnapshot());
              };
              var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : function() {
                return memoizedSelector(maybeGetServerSnapshot());
              };
              return [getSnapshotWithSelector, getServerSnapshotWithSelector];
            }, [getSnapshot, getServerSnapshot, selector, isEqual3]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
            var value = useSyncExternalStore(subscribe2, getSelection, getServerSelection);
            useEffect73(function() {
              inst.hasValue = true;
              inst.value = value;
            }, [value]);
            useDebugValue2(value);
            return value;
          }
          exports2.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector2;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/use-sync-external-store/shim/with-selector.js
  var require_with_selector = __commonJS({
    "node_modules/use-sync-external-store/shim/with-selector.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_with_selector_development();
      }
    }
  });

  // node_modules/zustand/esm/index.js
  var esm_exports = {};
  __export(esm_exports, {
    create: () => create,
    createStore: () => createStore,
    default: () => react,
    useStore: () => useStore
  });
  function useStore(api3, selector = api3.getState, equalityFn) {
    const slice2 = useSyncExternalStoreWithSelector(
      api3.subscribe,
      api3.getState,
      api3.getServerState || api3.getState,
      selector,
      equalityFn
    );
    (0, import_react74.useDebugValue)(slice2);
    return slice2;
  }
  var import_react74, import_with_selector, useSyncExternalStoreWithSelector, createImpl, create, react;
  var init_esm = __esm({
    "node_modules/zustand/esm/index.js"() {
      init_vanilla();
      init_vanilla();
      import_react74 = __toESM(require_react());
      import_with_selector = __toESM(require_with_selector());
      ({ useSyncExternalStoreWithSelector } = import_with_selector.default);
      createImpl = (createState) => {
        if (typeof createState !== "function") {
          console.warn(
            "[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."
          );
        }
        const api3 = typeof createState === "function" ? createStore(createState) : createState;
        const useBoundStore = (selector, equalityFn) => useStore(api3, selector, equalityFn);
        Object.assign(useBoundStore, api3);
        return useBoundStore;
      };
      create = (createState) => createState ? createImpl(createState) : createImpl;
      react = (createState) => {
        if (true) {
          console.warn(
            "[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`."
          );
        }
        return create(createState);
      };
    }
  });

  // node_modules/@web3-react/store/dist/index.js
  var require_dist4 = __commonJS({
    "node_modules/@web3-react/store/dist/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.createWeb3ReactStoreAndActions = exports2.MAX_SAFE_CHAIN_ID = void 0;
      var address_1 = require_lib14();
      var zustand_1 = (init_esm(), __toCommonJS(esm_exports));
      exports2.MAX_SAFE_CHAIN_ID = 4503599627370476;
      function validateChainId(chainId) {
        if (!Number.isInteger(chainId) || chainId <= 0 || chainId > exports2.MAX_SAFE_CHAIN_ID) {
          throw new Error(`Invalid chainId ${chainId}`);
        }
      }
      function validateAccount(account) {
        return (0, address_1.getAddress)(account);
      }
      var DEFAULT_STATE = {
        chainId: void 0,
        accounts: void 0,
        activating: false
      };
      function createWeb3ReactStoreAndActions() {
        const store = (0, zustand_1.createStore)()(() => DEFAULT_STATE);
        let nullifier = 0;
        function startActivation() {
          const nullifierCached = ++nullifier;
          store.setState(Object.assign(Object.assign({}, DEFAULT_STATE), { activating: true }));
          return () => {
            if (nullifier === nullifierCached)
              store.setState({ activating: false });
          };
        }
        function update(stateUpdate) {
          if (stateUpdate.chainId !== void 0) {
            validateChainId(stateUpdate.chainId);
          }
          if (stateUpdate.accounts !== void 0) {
            for (let i3 = 0; i3 < stateUpdate.accounts.length; i3++) {
              stateUpdate.accounts[i3] = validateAccount(stateUpdate.accounts[i3]);
            }
          }
          nullifier++;
          store.setState((existingState) => {
            var _a, _b;
            const chainId = (_a = stateUpdate.chainId) !== null && _a !== void 0 ? _a : existingState.chainId;
            const accounts = (_b = stateUpdate.accounts) !== null && _b !== void 0 ? _b : existingState.accounts;
            let activating = existingState.activating;
            if (activating && chainId && accounts) {
              activating = false;
            }
            return { chainId, accounts, activating };
          });
        }
        function resetState() {
          nullifier++;
          store.setState(DEFAULT_STATE);
        }
        return [store, { startActivation, update, resetState }];
      }
      exports2.createWeb3ReactStoreAndActions = createWeb3ReactStoreAndActions;
    }
  });

  // node_modules/@web3-react/core/dist/hooks.js
  var require_hooks = __commonJS({
    "node_modules/@web3-react/core/dist/hooks.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m2, k);
        if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m2[k];
          } };
        }
        Object.defineProperty(o2, k2, desc);
      } : function(o2, m2, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o2[k2] = m2[k];
      });
      var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v2) {
        Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
      } : function(o2, v2) {
        o2["default"] = v2;
      });
      var __importStar = exports2 && exports2.__importStar || function(mod2) {
        if (mod2 && mod2.__esModule)
          return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k))
              __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator2) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve5) {
            resolve5(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve5, reject) {
          function fulfilled(value) {
            try {
              step(generator2.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator2["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
        });
      };
      var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
        return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getPriorityConnector = exports2.getSelectedConnector = exports2.initializeConnector = void 0;
      var store_1 = require_dist4();
      var react_1 = require_react();
      var zustand_1 = __importDefault((init_esm(), __toCommonJS(esm_exports)));
      var DynamicProvider;
      function importProvider() {
        return __awaiter2(this, void 0, void 0, function* () {
          if (DynamicProvider === void 0) {
            try {
              const { Web3Provider } = yield Promise.resolve().then(() => __importStar(require_lib22()));
              DynamicProvider = Web3Provider;
            } catch (_a) {
              console.debug("@ethersproject/providers not available");
              DynamicProvider = null;
            }
          }
        });
      }
      function initializeConnector2(f2) {
        const [store, actions] = (0, store_1.createWeb3ReactStoreAndActions)();
        const connector = f2(actions);
        const useConnector = (0, zustand_1.default)(store);
        const stateHooks = getStateHooks(useConnector);
        const derivedHooks = getDerivedHooks(stateHooks);
        const augmentedHooks = getAugmentedHooks(connector, stateHooks, derivedHooks);
        return [connector, Object.assign(Object.assign(Object.assign({}, stateHooks), derivedHooks), augmentedHooks), store];
      }
      exports2.initializeConnector = initializeConnector2;
      function computeIsActive({ chainId, accounts, activating }) {
        return Boolean(chainId && accounts && !activating);
      }
      function getSelectedConnector(...initializedConnectors) {
        function getIndex(connector) {
          const index3 = initializedConnectors.findIndex(([initializedConnector]) => connector === initializedConnector);
          if (index3 === -1)
            throw new Error("Connector not found");
          return index3;
        }
        function useSelectedStore(connector) {
          const store = initializedConnectors[getIndex(connector)][2];
          if (!store)
            throw new Error("Stores not passed");
          return store;
        }
        function useSelectedChainId(connector) {
          const values = initializedConnectors.map(([, { useChainId }]) => useChainId());
          return values[getIndex(connector)];
        }
        function useSelectedAccounts(connector) {
          const values = initializedConnectors.map(([, { useAccounts }]) => useAccounts());
          return values[getIndex(connector)];
        }
        function useSelectedIsActivating(connector) {
          const values = initializedConnectors.map(([, { useIsActivating }]) => useIsActivating());
          return values[getIndex(connector)];
        }
        function useSelectedAccount(connector) {
          const values = initializedConnectors.map(([, { useAccount }]) => useAccount());
          return values[getIndex(connector)];
        }
        function useSelectedIsActive(connector) {
          const values = initializedConnectors.map(([, { useIsActive }]) => useIsActive());
          return values[getIndex(connector)];
        }
        function useSelectedProvider(connector, network) {
          const index3 = getIndex(connector);
          const values = initializedConnectors.map(([, { useProvider }], i3) => useProvider(network, i3 === index3));
          return values[index3];
        }
        function useSelectedENSNames(connector, provider) {
          const index3 = getIndex(connector);
          const values = initializedConnectors.map(([, { useENSNames }], i3) => (
            // eslint-disable-next-line react-hooks/rules-of-hooks
            useENSNames(i3 === index3 ? provider : void 0)
          ));
          return values[index3];
        }
        function useSelectedENSName(connector, provider) {
          const index3 = getIndex(connector);
          const values = initializedConnectors.map(([, { useENSName }], i3) => useENSName(i3 === index3 ? provider : void 0));
          return values[index3];
        }
        return {
          useSelectedStore,
          useSelectedChainId,
          useSelectedAccounts,
          useSelectedIsActivating,
          useSelectedAccount,
          useSelectedIsActive,
          useSelectedProvider,
          useSelectedENSNames,
          useSelectedENSName
        };
      }
      exports2.getSelectedConnector = getSelectedConnector;
      function getPriorityConnector(...initializedConnectors) {
        const { useSelectedStore, useSelectedChainId, useSelectedAccounts, useSelectedIsActivating, useSelectedAccount, useSelectedIsActive, useSelectedProvider, useSelectedENSNames, useSelectedENSName } = getSelectedConnector(...initializedConnectors);
        function usePriorityConnector() {
          const values = initializedConnectors.map(([, { useIsActive }]) => useIsActive());
          const index3 = values.findIndex((isActive2) => isActive2);
          return initializedConnectors[index3 === -1 ? 0 : index3][0];
        }
        function usePriorityStore() {
          return useSelectedStore(usePriorityConnector());
        }
        function usePriorityChainId() {
          return useSelectedChainId(usePriorityConnector());
        }
        function usePriorityAccounts() {
          return useSelectedAccounts(usePriorityConnector());
        }
        function usePriorityIsActivating() {
          return useSelectedIsActivating(usePriorityConnector());
        }
        function usePriorityAccount() {
          return useSelectedAccount(usePriorityConnector());
        }
        function usePriorityIsActive() {
          return useSelectedIsActive(usePriorityConnector());
        }
        function usePriorityProvider(network) {
          return useSelectedProvider(usePriorityConnector(), network);
        }
        function usePriorityENSNames(provider) {
          return useSelectedENSNames(usePriorityConnector(), provider);
        }
        function usePriorityENSName(provider) {
          return useSelectedENSName(usePriorityConnector(), provider);
        }
        return {
          useSelectedStore,
          useSelectedChainId,
          useSelectedAccounts,
          useSelectedIsActivating,
          useSelectedAccount,
          useSelectedIsActive,
          useSelectedProvider,
          useSelectedENSNames,
          useSelectedENSName,
          usePriorityConnector,
          usePriorityStore,
          usePriorityChainId,
          usePriorityAccounts,
          usePriorityIsActivating,
          usePriorityAccount,
          usePriorityIsActive,
          usePriorityProvider,
          usePriorityENSNames,
          usePriorityENSName
        };
      }
      exports2.getPriorityConnector = getPriorityConnector;
      var CHAIN_ID = ({ chainId }) => chainId;
      var ACCOUNTS = ({ accounts }) => accounts;
      var ACCOUNTS_EQUALITY_CHECKER = (oldAccounts, newAccounts) => oldAccounts === void 0 && newAccounts === void 0 || oldAccounts !== void 0 && oldAccounts.length === (newAccounts === null || newAccounts === void 0 ? void 0 : newAccounts.length) && oldAccounts.every((oldAccount, i3) => oldAccount === newAccounts[i3]);
      var ACTIVATING = ({ activating }) => activating;
      function getStateHooks(useConnector) {
        function useChainId() {
          return useConnector(CHAIN_ID);
        }
        function useAccounts() {
          return useConnector(ACCOUNTS, ACCOUNTS_EQUALITY_CHECKER);
        }
        function useIsActivating() {
          return useConnector(ACTIVATING);
        }
        return { useChainId, useAccounts, useIsActivating };
      }
      function getDerivedHooks({ useChainId, useAccounts, useIsActivating }) {
        function useAccount() {
          var _a;
          return (_a = useAccounts()) === null || _a === void 0 ? void 0 : _a[0];
        }
        function useIsActive() {
          const chainId = useChainId();
          const accounts = useAccounts();
          const activating = useIsActivating();
          return computeIsActive({
            chainId,
            accounts,
            activating
          });
        }
        return { useAccount, useIsActive };
      }
      function useENS(provider, accounts = []) {
        const [ENSNames, setENSNames] = (0, react_1.useState)();
        (0, react_1.useEffect)(() => {
          if (provider && accounts.length) {
            let stale = false;
            Promise.all(accounts.map((account) => provider.lookupAddress(account))).then((ENSNames2) => {
              if (stale)
                return;
              setENSNames(ENSNames2);
            }).catch((error) => {
              if (stale)
                return;
              console.debug("Could not fetch ENS names", error);
              setENSNames(new Array(accounts.length).fill(null));
            });
            return () => {
              stale = true;
              setENSNames(void 0);
            };
          }
        }, [provider, accounts]);
        return ENSNames !== null && ENSNames !== void 0 ? ENSNames : new Array(accounts.length).fill(void 0);
      }
      function getAugmentedHooks(connector, { useAccounts, useChainId }, { useAccount, useIsActive }) {
        function useProvider(network, enabled = true) {
          const isActive2 = useIsActive();
          const chainId = useChainId();
          const [loaded, setLoaded] = (0, react_1.useState)(DynamicProvider !== void 0);
          (0, react_1.useEffect)(() => {
            if (loaded)
              return;
            let stale = false;
            void importProvider().then(() => {
              if (stale)
                return;
              setLoaded(true);
            });
            return () => {
              stale = true;
            };
          }, [loaded]);
          return (0, react_1.useMemo)(() => {
            if (enabled) {
              if (connector.customProvider)
                return connector.customProvider;
              else if (DynamicProvider && connector.provider)
                return new DynamicProvider(connector.provider, network);
            }
          }, [loaded, enabled, isActive2, chainId, network]);
        }
        function useENSNames(provider) {
          const accounts = useAccounts();
          return useENS(provider, accounts);
        }
        function useENSName(provider) {
          var _a;
          const account = useAccount();
          const accounts = (0, react_1.useMemo)(() => account === void 0 ? void 0 : [account], [account]);
          return (_a = useENS(provider, accounts)) === null || _a === void 0 ? void 0 : _a[0];
        }
        return { useProvider, useENSNames, useENSName };
      }
    }
  });

  // node_modules/@web3-react/core/dist/provider.js
  var require_provider = __commonJS({
    "node_modules/@web3-react/core/dist/provider.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m2, k);
        if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m2[k];
          } };
        }
        Object.defineProperty(o2, k2, desc);
      } : function(o2, m2, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o2[k2] = m2[k];
      });
      var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v2) {
        Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
      } : function(o2, v2) {
        o2["default"] = v2;
      });
      var __importStar = exports2 && exports2.__importStar || function(mod2) {
        if (mod2 && mod2.__esModule)
          return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k))
              __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.useWeb3React = exports2.Web3ReactProvider = void 0;
      var react_1 = __importStar(require_react());
      var hooks_1 = require_hooks();
      var Web3Context = (0, react_1.createContext)(void 0);
      function Web3ReactProvider({ children, connectors, connectorOverride, network, lookupENS = true }) {
        const cachedConnectors = (0, react_1.useRef)(connectors);
        if (connectors.length != cachedConnectors.current.length || connectors.some((connector2, i3) => {
          const cachedConnector = cachedConnectors.current[i3];
          return connector2[0] !== cachedConnector[0];
        }))
          throw new Error("The connectors prop passed to Web3ReactProvider must be referentially static. If connectors is changing, try providing a key prop to Web3ReactProvider that changes every time connectors changes.");
        const hooks4 = (0, hooks_1.getPriorityConnector)(...connectors);
        const { usePriorityConnector, useSelectedChainId, useSelectedAccounts, useSelectedIsActivating, useSelectedAccount, useSelectedIsActive, useSelectedProvider, useSelectedENSNames, useSelectedENSName } = hooks4;
        const priorityConnector = usePriorityConnector();
        const connector = connectorOverride !== null && connectorOverride !== void 0 ? connectorOverride : priorityConnector;
        const chainId = useSelectedChainId(connector);
        const accounts = useSelectedAccounts(connector);
        const isActivating = useSelectedIsActivating(connector);
        const account = useSelectedAccount(connector);
        const isActive2 = useSelectedIsActive(connector);
        const provider = useSelectedProvider(connector, network);
        const ENSNames = useSelectedENSNames(connector, lookupENS ? provider : void 0);
        const ENSName = useSelectedENSName(connector, lookupENS ? provider : void 0);
        return react_1.default.createElement(Web3Context.Provider, { value: {
          connector,
          chainId,
          accounts,
          isActivating,
          account,
          isActive: isActive2,
          provider,
          ENSNames,
          ENSName,
          hooks: hooks4
        } }, children);
      }
      exports2.Web3ReactProvider = Web3ReactProvider;
      function useWeb3React() {
        const context = (0, react_1.useContext)(Web3Context);
        if (!context)
          throw Error("useWeb3React can only be used within the Web3ReactProvider component");
        return context;
      }
      exports2.useWeb3React = useWeb3React;
    }
  });

  // node_modules/@web3-react/core/dist/index.js
  var require_dist5 = __commonJS({
    "node_modules/@web3-react/core/dist/index.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m2, k);
        if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m2[k];
          } };
        }
        Object.defineProperty(o2, k2, desc);
      } : function(o2, m2, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o2[k2] = m2[k];
      });
      var __exportStar = exports2 && exports2.__exportStar || function(m2, exports3) {
        for (var p2 in m2)
          if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p2))
            __createBinding(exports3, m2, p2);
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      __exportStar(require_hooks(), exports2);
      __exportStar(require_provider(), exports2);
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React292 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React292.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type4) {
            if (typeof type4 === "string" || typeof type4 === "function") {
              return true;
            }
            if (type4 === REACT_FRAGMENT_TYPE || type4 === REACT_PROFILER_TYPE || enableDebugTracing || type4 === REACT_STRICT_MODE_TYPE || type4 === REACT_SUSPENSE_TYPE || type4 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type4 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type4 === "object" && type4 !== null) {
              if (type4.$$typeof === REACT_LAZY_TYPE || type4.$$typeof === REACT_MEMO_TYPE || type4.$$typeof === REACT_PROVIDER_TYPE || type4.$$typeof === REACT_CONTEXT_TYPE || type4.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type4.$$typeof === REACT_MODULE_REFERENCE || type4.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type4) {
            return type4.displayName || "Context";
          }
          function getComponentNameFromType(type4) {
            if (type4 == null) {
              return null;
            }
            {
              if (typeof type4.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type4 === "function") {
              return type4.displayName || type4.name || null;
            }
            if (typeof type4 === "string") {
              return type4;
            }
            switch (type4) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type4;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type4;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type4, type4.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type4.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type4.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name5, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name5;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name5 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name5 ? describeBuiltInComponentFrame(name5) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component27) {
            var prototype3 = Component27.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type4, source, ownerFn) {
            if (type4 == null) {
              return "";
            }
            if (typeof type4 === "function") {
              {
                return describeNativeComponentFrame(type4, shouldConstruct(type4));
              }
            }
            if (typeof type4 === "string") {
              return describeBuiltInComponentFrame(type4);
            }
            switch (type4) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type4.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type4.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type4 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type4;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type4, key2, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type: type4,
              key: key2,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type4, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key2 = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key2 = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key2 = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type4 && type4.defaultProps) {
                var defaultProps2 = type4.defaultProps;
                for (propName in defaultProps2) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key2 || ref) {
                var displayName = typeof type4 === "function" ? type4.displayName || type4.name || "Unknown" : type4;
                if (key2) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type4, key2, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement19(object4) {
            {
              return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name5 = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name5) {
                  return "\n\nCheck the render method of `" + name5 + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray2(node)) {
                for (var i3 = 0; i3 < node.length; i3++) {
                  var child = node[i3];
                  if (isValidElement19(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement19(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement19(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type4 = element.type;
              if (type4 === null || type4 === void 0 || typeof type4 === "string") {
                return;
              }
              var propTypes;
              if (typeof type4 === "function") {
                propTypes = type4.propTypes;
              } else if (typeof type4 === "object" && (type4.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type4.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type4.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name5 = getComponentNameFromType(type4);
                checkPropTypes(propTypes, element.props, "prop", name5, element);
              } else if (type4.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type4);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type4.getDefaultProps === "function" && !type4.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys.length; i3++) {
                var key2 = keys[i3];
                if (key2 !== "children" && key2 !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key2);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type4, props, key2, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type4);
              if (!validType) {
                var info = "";
                if (type4 === void 0 || typeof type4 === "object" && type4 !== null && Object.keys(type4).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type4 === null) {
                  typeString = "null";
                } else if (isArray2(type4)) {
                  typeString = "array";
                } else if (type4 !== void 0 && type4.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type4.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type4;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type4, props, key2, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray2(children)) {
                      for (var i3 = 0; i3 < children.length; i3++) {
                        validateChildKeys(children[i3], type4);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type4);
                  }
                }
              }
              if (type4 === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type4, props, key2) {
            {
              return jsxWithValidation(type4, props, key2, true);
            }
          }
          function jsxWithValidationDynamic(type4, props, key2) {
            {
              return jsxWithValidation(type4, props, key2, false);
            }
          }
          var jsx9 = jsxWithValidationDynamic;
          var jsxs7 = jsxWithValidationStatic;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.jsx = jsx9;
          exports2.jsxs = jsxs7;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/retry/lib/retry_operation.js
  var require_retry_operation = __commonJS({
    "node_modules/retry/lib/retry_operation.js"(exports2, module2) {
      function RetryOperation(timeouts, options) {
        if (typeof options === "boolean") {
          options = { forever: options };
        }
        this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
        this._timeouts = timeouts;
        this._options = options || {};
        this._maxRetryTime = options && options.maxRetryTime || Infinity;
        this._fn = null;
        this._errors = [];
        this._attempts = 1;
        this._operationTimeout = null;
        this._operationTimeoutCb = null;
        this._timeout = null;
        this._operationStart = null;
        this._timer = null;
        if (this._options.forever) {
          this._cachedTimeouts = this._timeouts.slice(0);
        }
      }
      module2.exports = RetryOperation;
      RetryOperation.prototype.reset = function() {
        this._attempts = 1;
        this._timeouts = this._originalTimeouts.slice(0);
      };
      RetryOperation.prototype.stop = function() {
        if (this._timeout) {
          clearTimeout(this._timeout);
        }
        if (this._timer) {
          clearTimeout(this._timer);
        }
        this._timeouts = [];
        this._cachedTimeouts = null;
      };
      RetryOperation.prototype.retry = function(err) {
        if (this._timeout) {
          clearTimeout(this._timeout);
        }
        if (!err) {
          return false;
        }
        var currentTime = (/* @__PURE__ */ new Date()).getTime();
        if (err && currentTime - this._operationStart >= this._maxRetryTime) {
          this._errors.push(err);
          this._errors.unshift(new Error("RetryOperation timeout occurred"));
          return false;
        }
        this._errors.push(err);
        var timeout = this._timeouts.shift();
        if (timeout === void 0) {
          if (this._cachedTimeouts) {
            this._errors.splice(0, this._errors.length - 1);
            timeout = this._cachedTimeouts.slice(-1);
          } else {
            return false;
          }
        }
        var self2 = this;
        this._timer = setTimeout(function() {
          self2._attempts++;
          if (self2._operationTimeoutCb) {
            self2._timeout = setTimeout(function() {
              self2._operationTimeoutCb(self2._attempts);
            }, self2._operationTimeout);
            if (self2._options.unref) {
              self2._timeout.unref();
            }
          }
          self2._fn(self2._attempts);
        }, timeout);
        if (this._options.unref) {
          this._timer.unref();
        }
        return true;
      };
      RetryOperation.prototype.attempt = function(fn, timeoutOps) {
        this._fn = fn;
        if (timeoutOps) {
          if (timeoutOps.timeout) {
            this._operationTimeout = timeoutOps.timeout;
          }
          if (timeoutOps.cb) {
            this._operationTimeoutCb = timeoutOps.cb;
          }
        }
        var self2 = this;
        if (this._operationTimeoutCb) {
          this._timeout = setTimeout(function() {
            self2._operationTimeoutCb();
          }, self2._operationTimeout);
        }
        this._operationStart = (/* @__PURE__ */ new Date()).getTime();
        this._fn(this._attempts);
      };
      RetryOperation.prototype.try = function(fn) {
        console.log("Using RetryOperation.try() is deprecated");
        this.attempt(fn);
      };
      RetryOperation.prototype.start = function(fn) {
        console.log("Using RetryOperation.start() is deprecated");
        this.attempt(fn);
      };
      RetryOperation.prototype.start = RetryOperation.prototype.try;
      RetryOperation.prototype.errors = function() {
        return this._errors;
      };
      RetryOperation.prototype.attempts = function() {
        return this._attempts;
      };
      RetryOperation.prototype.mainError = function() {
        if (this._errors.length === 0) {
          return null;
        }
        var counts = {};
        var mainError = null;
        var mainErrorCount = 0;
        for (var i3 = 0; i3 < this._errors.length; i3++) {
          var error = this._errors[i3];
          var message = error.message;
          var count2 = (counts[message] || 0) + 1;
          counts[message] = count2;
          if (count2 >= mainErrorCount) {
            mainError = error;
            mainErrorCount = count2;
          }
        }
        return mainError;
      };
    }
  });

  // node_modules/retry/lib/retry.js
  var require_retry = __commonJS({
    "node_modules/retry/lib/retry.js"(exports2) {
      var RetryOperation = require_retry_operation();
      exports2.operation = function(options) {
        var timeouts = exports2.timeouts(options);
        return new RetryOperation(timeouts, {
          forever: options && (options.forever || options.retries === Infinity),
          unref: options && options.unref,
          maxRetryTime: options && options.maxRetryTime
        });
      };
      exports2.timeouts = function(options) {
        if (options instanceof Array) {
          return [].concat(options);
        }
        var opts = {
          retries: 10,
          factor: 2,
          minTimeout: 1 * 1e3,
          maxTimeout: Infinity,
          randomize: false
        };
        for (var key2 in options) {
          opts[key2] = options[key2];
        }
        if (opts.minTimeout > opts.maxTimeout) {
          throw new Error("minTimeout is greater than maxTimeout");
        }
        var timeouts = [];
        for (var i3 = 0; i3 < opts.retries; i3++) {
          timeouts.push(this.createTimeout(i3, opts));
        }
        if (options && options.forever && !timeouts.length) {
          timeouts.push(this.createTimeout(i3, opts));
        }
        timeouts.sort(function(a2, b2) {
          return a2 - b2;
        });
        return timeouts;
      };
      exports2.createTimeout = function(attempt, opts) {
        var random = opts.randomize ? Math.random() + 1 : 1;
        var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));
        timeout = Math.min(timeout, opts.maxTimeout);
        return timeout;
      };
      exports2.wrap = function(obj, options, methods) {
        if (options instanceof Array) {
          methods = options;
          options = null;
        }
        if (!methods) {
          methods = [];
          for (var key2 in obj) {
            if (typeof obj[key2] === "function") {
              methods.push(key2);
            }
          }
        }
        for (var i3 = 0; i3 < methods.length; i3++) {
          var method4 = methods[i3];
          var original = obj[method4];
          obj[method4] = function retryWrapper(original2) {
            var op = exports2.operation(options);
            var args = Array.prototype.slice.call(arguments, 1);
            var callback = args.pop();
            args.push(function(err) {
              if (op.retry(err)) {
                return;
              }
              if (err) {
                arguments[0] = op.mainError();
              }
              callback.apply(this, arguments);
            });
            op.attempt(function() {
              original2.apply(obj, args);
            });
          }.bind(obj, original);
          obj[method4].options = options;
        }
      };
    }
  });

  // node_modules/retry/index.js
  var require_retry2 = __commonJS({
    "node_modules/retry/index.js"(exports2, module2) {
      module2.exports = require_retry();
    }
  });

  // node_modules/p-retry/index.js
  var require_p_retry = __commonJS({
    "node_modules/p-retry/index.js"(exports2, module2) {
      "use strict";
      var retry = require_retry2();
      var networkErrorMsgs = [
        "Failed to fetch",
        // Chrome
        "NetworkError when attempting to fetch resource.",
        // Firefox
        "The Internet connection appears to be offline.",
        // Safari
        "Network request failed"
        // `cross-fetch`
      ];
      var AbortError2 = class extends Error {
        constructor(message) {
          super();
          if (message instanceof Error) {
            this.originalError = message;
            ({ message } = message);
          } else {
            this.originalError = new Error(message);
            this.originalError.stack = this.stack;
          }
          this.name = "AbortError";
          this.message = message;
        }
      };
      var decorateErrorWithCounts = (error, attemptNumber, options) => {
        const retriesLeft = options.retries - (attemptNumber - 1);
        error.attemptNumber = attemptNumber;
        error.retriesLeft = retriesLeft;
        return error;
      };
      var isNetworkError = (errorMessage) => networkErrorMsgs.includes(errorMessage);
      var pRetry2 = (input, options) => new Promise((resolve5, reject) => {
        options = {
          onFailedAttempt: () => {
          },
          retries: 10,
          ...options
        };
        const operation = retry.operation(options);
        operation.attempt(async (attemptNumber) => {
          try {
            resolve5(await input(attemptNumber));
          } catch (error) {
            if (!(error instanceof Error)) {
              reject(new TypeError(`Non-error was thrown: "${error}". You should only throw errors.`));
              return;
            }
            if (error instanceof AbortError2) {
              operation.stop();
              reject(error.originalError);
            } else if (error instanceof TypeError && !isNetworkError(error.message)) {
              operation.stop();
              reject(error);
            } else {
              decorateErrorWithCounts(error, attemptNumber, options);
              try {
                await options.onFailedAttempt(error);
              } catch (error2) {
                reject(error2);
                return;
              }
              if (!operation.retry(error)) {
                reject(operation.mainError());
              }
            }
          }
        });
      });
      module2.exports = pRetry2;
      module2.exports.default = pRetry2;
      module2.exports.AbortError = AbortError2;
    }
  });

  // node_modules/it-last/index.js
  var require_it_last = __commonJS({
    "node_modules/it-last/index.js"(exports2, module2) {
      "use strict";
      var last3 = async (source) => {
        let res;
        for await (const entry of source) {
          res = entry;
        }
        return res;
      };
      module2.exports = last3;
    }
  });

  // node_modules/it-pipe/index.js
  var require_it_pipe = __commonJS({
    "node_modules/it-pipe/index.js"(exports2, module2) {
      var rawPipe = (...fns) => {
        let res;
        while (fns.length) {
          res = fns.shift()(res);
        }
        return res;
      };
      var isIterable2 = (obj) => obj && (typeof obj[Symbol.asyncIterator] === "function" || typeof obj[Symbol.iterator] === "function" || typeof obj.next === "function");
      var isDuplex = (obj) => obj && typeof obj.sink === "function" && isIterable2(obj.source);
      var duplexPipelineFn = (duplex) => (source) => {
        duplex.sink(source);
        return duplex.source;
      };
      var pipe2 = (...fns) => {
        if (isDuplex(fns[0])) {
          const duplex = fns[0];
          fns[0] = () => duplex.source;
        } else if (isIterable2(fns[0])) {
          const source = fns[0];
          fns[0] = () => source;
        }
        if (fns.length > 1) {
          if (isDuplex(fns[fns.length - 1])) {
            fns[fns.length - 1] = fns[fns.length - 1].sink;
          }
        }
        if (fns.length > 2) {
          for (let i3 = 1; i3 < fns.length - 1; i3++) {
            if (isDuplex(fns[i3])) {
              fns[i3] = duplexPipelineFn(fns[i3]);
            }
          }
        }
        return rawPipe(...fns);
      };
      module2.exports = pipe2;
      module2.exports.pipe = pipe2;
      module2.exports.rawPipe = rawPipe;
      module2.exports.isIterable = isIterable2;
      module2.exports.isDuplex = isDuplex;
    }
  });

  // node_modules/varint/encode.js
  var require_encode = __commonJS({
    "node_modules/varint/encode.js"(exports2, module2) {
      module2.exports = encode12;
      var MSB2 = 128;
      var REST2 = 127;
      var MSBALL2 = ~REST2;
      var INT2 = Math.pow(2, 31);
      function encode12(num, out, offset3) {
        if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
          encode12.bytes = 0;
          throw new RangeError("Could not encode varint");
        }
        out = out || [];
        offset3 = offset3 || 0;
        var oldOffset = offset3;
        while (num >= INT2) {
          out[offset3++] = num & 255 | MSB2;
          num /= 128;
        }
        while (num & MSBALL2) {
          out[offset3++] = num & 255 | MSB2;
          num >>>= 7;
        }
        out[offset3] = num | 0;
        encode12.bytes = offset3 - oldOffset + 1;
        return out;
      }
    }
  });

  // node_modules/varint/decode.js
  var require_decode = __commonJS({
    "node_modules/varint/decode.js"(exports2, module2) {
      module2.exports = read2;
      var MSB2 = 128;
      var REST2 = 127;
      function read2(buf2, offset3) {
        var res = 0, offset3 = offset3 || 0, shift = 0, counter = offset3, b2, l2 = buf2.length;
        do {
          if (counter >= l2 || shift > 49) {
            read2.bytes = 0;
            throw new RangeError("Could not decode varint");
          }
          b2 = buf2[counter++];
          res += shift < 28 ? (b2 & REST2) << shift : (b2 & REST2) * Math.pow(2, shift);
          shift += 7;
        } while (b2 >= MSB2);
        read2.bytes = counter - offset3;
        return res;
      }
    }
  });

  // node_modules/varint/length.js
  var require_length = __commonJS({
    "node_modules/varint/length.js"(exports2, module2) {
      var N12 = Math.pow(2, 7);
      var N22 = Math.pow(2, 14);
      var N32 = Math.pow(2, 21);
      var N42 = Math.pow(2, 28);
      var N52 = Math.pow(2, 35);
      var N62 = Math.pow(2, 42);
      var N72 = Math.pow(2, 49);
      var N82 = Math.pow(2, 56);
      var N92 = Math.pow(2, 63);
      module2.exports = function(value) {
        return value < N12 ? 1 : value < N22 ? 2 : value < N32 ? 3 : value < N42 ? 4 : value < N52 ? 5 : value < N62 ? 6 : value < N72 ? 7 : value < N82 ? 8 : value < N92 ? 9 : 10;
      };
    }
  });

  // node_modules/varint/index.js
  var require_varint = __commonJS({
    "node_modules/varint/index.js"(exports2, module2) {
      module2.exports = {
        encode: require_encode(),
        decode: require_decode(),
        encodingLength: require_length()
      };
    }
  });

  // node_modules/multiformats/esm/vendor/varint.js
  function encode3(num, out, offset3) {
    out = out || [];
    offset3 = offset3 || 0;
    var oldOffset = offset3;
    while (num >= INT) {
      out[offset3++] = num & 255 | MSB;
      num /= 128;
    }
    while (num & MSBALL) {
      out[offset3++] = num & 255 | MSB;
      num >>>= 7;
    }
    out[offset3] = num | 0;
    encode3.bytes = offset3 - oldOffset + 1;
    return out;
  }
  function read(buf2, offset3) {
    var res = 0, offset3 = offset3 || 0, shift = 0, counter = offset3, b2, l2 = buf2.length;
    do {
      if (counter >= l2) {
        read.bytes = 0;
        throw new RangeError("Could not decode varint");
      }
      b2 = buf2[counter++];
      res += shift < 28 ? (b2 & REST$1) << shift : (b2 & REST$1) * Math.pow(2, shift);
      shift += 7;
    } while (b2 >= MSB$1);
    read.bytes = counter - offset3;
    return res;
  }
  var encode_1, MSB, REST, MSBALL, INT, decode, MSB$1, REST$1, N1, N2, N3, N4, N5, N6, N7, N8, N9, length, varint, _brrp_varint, varint_default;
  var init_varint = __esm({
    "node_modules/multiformats/esm/vendor/varint.js"() {
      encode_1 = encode3;
      MSB = 128;
      REST = 127;
      MSBALL = ~REST;
      INT = Math.pow(2, 31);
      decode = read;
      MSB$1 = 128;
      REST$1 = 127;
      N1 = Math.pow(2, 7);
      N2 = Math.pow(2, 14);
      N3 = Math.pow(2, 21);
      N4 = Math.pow(2, 28);
      N5 = Math.pow(2, 35);
      N6 = Math.pow(2, 42);
      N7 = Math.pow(2, 49);
      N8 = Math.pow(2, 56);
      N9 = Math.pow(2, 63);
      length = function(value) {
        return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
      };
      varint = {
        encode: encode_1,
        decode,
        encodingLength: length
      };
      _brrp_varint = varint;
      varint_default = _brrp_varint;
    }
  });

  // node_modules/multiformats/esm/src/varint.js
  var decode2, encodeTo, encodingLength;
  var init_varint2 = __esm({
    "node_modules/multiformats/esm/src/varint.js"() {
      init_varint();
      decode2 = (data, offset3 = 0) => {
        const code6 = varint_default.decode(data, offset3);
        return [
          code6,
          varint_default.decode.bytes
        ];
      };
      encodeTo = (int, target, offset3 = 0) => {
        varint_default.encode(int, target, offset3);
        return target;
      };
      encodingLength = (int) => {
        return varint_default.encodingLength(int);
      };
    }
  });

  // node_modules/multiformats/esm/src/bytes.js
  var bytes_exports = {};
  __export(bytes_exports, {
    coerce: () => coerce,
    empty: () => empty2,
    equals: () => equals,
    fromHex: () => fromHex,
    fromString: () => fromString,
    isBinary: () => isBinary,
    toHex: () => toHex2,
    toString: () => toString3
  });
  var empty2, toHex2, fromHex, equals, coerce, isBinary, fromString, toString3;
  var init_bytes = __esm({
    "node_modules/multiformats/esm/src/bytes.js"() {
      empty2 = new Uint8Array(0);
      toHex2 = (d2) => d2.reduce((hex2, byte) => hex2 + byte.toString(16).padStart(2, "0"), "");
      fromHex = (hex2) => {
        const hexes = hex2.match(/../g);
        return hexes ? new Uint8Array(hexes.map((b2) => parseInt(b2, 16))) : empty2;
      };
      equals = (aa, bb) => {
        if (aa === bb)
          return true;
        if (aa.byteLength !== bb.byteLength) {
          return false;
        }
        for (let ii = 0; ii < aa.byteLength; ii++) {
          if (aa[ii] !== bb[ii]) {
            return false;
          }
        }
        return true;
      };
      coerce = (o2) => {
        if (o2 instanceof Uint8Array && o2.constructor.name === "Uint8Array")
          return o2;
        if (o2 instanceof ArrayBuffer)
          return new Uint8Array(o2);
        if (ArrayBuffer.isView(o2)) {
          return new Uint8Array(o2.buffer, o2.byteOffset, o2.byteLength);
        }
        throw new Error("Unknown type, must be binary type");
      };
      isBinary = (o2) => o2 instanceof ArrayBuffer || ArrayBuffer.isView(o2);
      fromString = (str) => new TextEncoder().encode(str);
      toString3 = (b2) => new TextDecoder().decode(b2);
    }
  });

  // node_modules/multiformats/esm/src/hashes/digest.js
  var create2, decode3, equals2, Digest;
  var init_digest = __esm({
    "node_modules/multiformats/esm/src/hashes/digest.js"() {
      init_bytes();
      init_varint2();
      create2 = (code6, digest2) => {
        const size = digest2.byteLength;
        const sizeOffset = encodingLength(code6);
        const digestOffset = sizeOffset + encodingLength(size);
        const bytes = new Uint8Array(digestOffset + size);
        encodeTo(code6, bytes, 0);
        encodeTo(size, bytes, sizeOffset);
        bytes.set(digest2, digestOffset);
        return new Digest(code6, size, digest2, bytes);
      };
      decode3 = (multihash) => {
        const bytes = coerce(multihash);
        const [code6, sizeOffset] = decode2(bytes);
        const [size, digestOffset] = decode2(bytes.subarray(sizeOffset));
        const digest2 = bytes.subarray(sizeOffset + digestOffset);
        if (digest2.byteLength !== size) {
          throw new Error("Incorrect length");
        }
        return new Digest(code6, size, digest2, bytes);
      };
      equals2 = (a2, b2) => {
        if (a2 === b2) {
          return true;
        } else {
          return a2.code === b2.code && a2.size === b2.size && equals(a2.bytes, b2.bytes);
        }
      };
      Digest = class {
        constructor(code6, size, digest2, bytes) {
          this.code = code6;
          this.size = size;
          this.digest = digest2;
          this.bytes = bytes;
        }
      };
    }
  });

  // node_modules/multiformats/esm/vendor/base-x.js
  function base(ALPHABET, name5) {
    if (ALPHABET.length >= 255) {
      throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i3 = 0; i3 < ALPHABET.length; i3++) {
      var x = ALPHABET.charAt(i3);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + " is ambiguous");
      }
      BASE_MAP[xc] = i3;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode12(source) {
      if (source instanceof Uint8Array)
        ;
      else if (ArrayBuffer.isView(source)) {
        source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
      } else if (Array.isArray(source)) {
        source = Uint8Array.from(source);
      }
      if (!(source instanceof Uint8Array)) {
        throw new TypeError("Expected Uint8Array");
      }
      if (source.length === 0) {
        return "";
      }
      var zeroes = 0;
      var length2 = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size);
      while (pbegin !== pend) {
        var carry = source[pbegin];
        var i4 = 0;
        for (var it1 = size - 1; (carry !== 0 || i4 < length2) && it1 !== -1; it1--, i4++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length2 = i4;
        pbegin++;
      }
      var it2 = size - length2;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }
      return str;
    }
    function decodeUnsafe(source) {
      if (typeof source !== "string") {
        throw new TypeError("Expected String");
      }
      if (source.length === 0) {
        return new Uint8Array();
      }
      var psz = 0;
      if (source[psz] === " ") {
        return;
      }
      var zeroes = 0;
      var length2 = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
      var size = (source.length - psz) * FACTOR + 1 >>> 0;
      var b256 = new Uint8Array(size);
      while (source[psz]) {
        var carry = BASE_MAP[source.charCodeAt(psz)];
        if (carry === 255) {
          return;
        }
        var i4 = 0;
        for (var it3 = size - 1; (carry !== 0 || i4 < length2) && it3 !== -1; it3--, i4++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length2 = i4;
        psz++;
      }
      if (source[psz] === " ") {
        return;
      }
      var it4 = size - length2;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = new Uint8Array(zeroes + (size - it4));
      var j2 = zeroes;
      while (it4 !== size) {
        vch[j2++] = b256[it4++];
      }
      return vch;
    }
    function decode11(string4) {
      var buffer2 = decodeUnsafe(string4);
      if (buffer2) {
        return buffer2;
      }
      throw new Error(`Non-${name5} character`);
    }
    return {
      encode: encode12,
      decodeUnsafe,
      decode: decode11
    };
  }
  var src, _brrp__multiformats_scope_baseX, base_x_default;
  var init_base_x = __esm({
    "node_modules/multiformats/esm/vendor/base-x.js"() {
      src = base;
      _brrp__multiformats_scope_baseX = src;
      base_x_default = _brrp__multiformats_scope_baseX;
    }
  });

  // node_modules/multiformats/esm/src/bases/base.js
  var Encoder, Decoder, ComposedDecoder, or, Codec, from, baseX, decode4, encode4, rfc4648;
  var init_base = __esm({
    "node_modules/multiformats/esm/src/bases/base.js"() {
      init_base_x();
      init_bytes();
      Encoder = class {
        constructor(name5, prefix, baseEncode) {
          this.name = name5;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
        }
        encode(bytes) {
          if (bytes instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes)}`;
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
      Decoder = class {
        constructor(name5, prefix, baseDecode) {
          this.name = name5;
          this.prefix = prefix;
          if (prefix.codePointAt(0) === void 0) {
            throw new Error("Invalid prefix character");
          }
          this.prefixCodePoint = prefix.codePointAt(0);
          this.baseDecode = baseDecode;
        }
        decode(text) {
          if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) {
              throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            }
            return this.baseDecode(text.slice(this.prefix.length));
          } else {
            throw Error("Can only multibase decode strings");
          }
        }
        or(decoder) {
          return or(this, decoder);
        }
      };
      ComposedDecoder = class {
        constructor(decoders) {
          this.decoders = decoders;
        }
        or(decoder) {
          return or(this, decoder);
        }
        decode(input) {
          const prefix = input[0];
          const decoder = this.decoders[prefix];
          if (decoder) {
            return decoder.decode(input);
          } else {
            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
          }
        }
      };
      or = (left, right) => new ComposedDecoder({
        ...left.decoders || { [left.prefix]: left },
        ...right.decoders || { [right.prefix]: right }
      });
      Codec = class {
        constructor(name5, prefix, baseEncode, baseDecode) {
          this.name = name5;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
          this.baseDecode = baseDecode;
          this.encoder = new Encoder(name5, prefix, baseEncode);
          this.decoder = new Decoder(name5, prefix, baseDecode);
        }
        encode(input) {
          return this.encoder.encode(input);
        }
        decode(input) {
          return this.decoder.decode(input);
        }
      };
      from = ({ name: name5, prefix, encode: encode12, decode: decode11 }) => new Codec(name5, prefix, encode12, decode11);
      baseX = ({ prefix, name: name5, alphabet: alphabet2 }) => {
        const { encode: encode12, decode: decode11 } = base_x_default(alphabet2, name5);
        return from({
          prefix,
          name: name5,
          encode: encode12,
          decode: (text) => coerce(decode11(text))
        });
      };
      decode4 = (string4, alphabet2, bitsPerChar, name5) => {
        const codes = {};
        for (let i3 = 0; i3 < alphabet2.length; ++i3) {
          codes[alphabet2[i3]] = i3;
        }
        let end = string4.length;
        while (string4[end - 1] === "=") {
          --end;
        }
        const out = new Uint8Array(end * bitsPerChar / 8 | 0);
        let bits = 0;
        let buffer2 = 0;
        let written = 0;
        for (let i3 = 0; i3 < end; ++i3) {
          const value = codes[string4[i3]];
          if (value === void 0) {
            throw new SyntaxError(`Non-${name5} character`);
          }
          buffer2 = buffer2 << bitsPerChar | value;
          bits += bitsPerChar;
          if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer2 >> bits;
          }
        }
        if (bits >= bitsPerChar || 255 & buffer2 << 8 - bits) {
          throw new SyntaxError("Unexpected end of data");
        }
        return out;
      };
      encode4 = (data, alphabet2, bitsPerChar) => {
        const pad = alphabet2[alphabet2.length - 1] === "=";
        const mask = (1 << bitsPerChar) - 1;
        let out = "";
        let bits = 0;
        let buffer2 = 0;
        for (let i3 = 0; i3 < data.length; ++i3) {
          buffer2 = buffer2 << 8 | data[i3];
          bits += 8;
          while (bits > bitsPerChar) {
            bits -= bitsPerChar;
            out += alphabet2[mask & buffer2 >> bits];
          }
        }
        if (bits) {
          out += alphabet2[mask & buffer2 << bitsPerChar - bits];
        }
        if (pad) {
          while (out.length * bitsPerChar & 7) {
            out += "=";
          }
        }
        return out;
      };
      rfc4648 = ({ name: name5, prefix, bitsPerChar, alphabet: alphabet2 }) => {
        return from({
          prefix,
          name: name5,
          encode(input) {
            return encode4(input, alphabet2, bitsPerChar);
          },
          decode(input) {
            return decode4(input, alphabet2, bitsPerChar, name5);
          }
        });
      };
    }
  });

  // node_modules/multiformats/esm/src/bases/base58.js
  var base58_exports = {};
  __export(base58_exports, {
    base58btc: () => base58btc,
    base58flickr: () => base58flickr
  });
  var base58btc, base58flickr;
  var init_base58 = __esm({
    "node_modules/multiformats/esm/src/bases/base58.js"() {
      init_base();
      base58btc = baseX({
        name: "base58btc",
        prefix: "z",
        alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
      });
      base58flickr = baseX({
        name: "base58flickr",
        prefix: "Z",
        alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
      });
    }
  });

  // node_modules/multiformats/esm/src/bases/base32.js
  var base32_exports = {};
  __export(base32_exports, {
    base32: () => base32,
    base32hex: () => base32hex,
    base32hexpad: () => base32hexpad,
    base32hexpadupper: () => base32hexpadupper,
    base32hexupper: () => base32hexupper,
    base32pad: () => base32pad,
    base32padupper: () => base32padupper,
    base32upper: () => base32upper,
    base32z: () => base32z
  });
  var base32, base32upper, base32pad, base32padupper, base32hex, base32hexupper, base32hexpad, base32hexpadupper, base32z;
  var init_base32 = __esm({
    "node_modules/multiformats/esm/src/bases/base32.js"() {
      init_base();
      base32 = rfc4648({
        prefix: "b",
        name: "base32",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567",
        bitsPerChar: 5
      });
      base32upper = rfc4648({
        prefix: "B",
        name: "base32upper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        bitsPerChar: 5
      });
      base32pad = rfc4648({
        prefix: "c",
        name: "base32pad",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
        bitsPerChar: 5
      });
      base32padupper = rfc4648({
        prefix: "C",
        name: "base32padupper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
        bitsPerChar: 5
      });
      base32hex = rfc4648({
        prefix: "v",
        name: "base32hex",
        alphabet: "0123456789abcdefghijklmnopqrstuv",
        bitsPerChar: 5
      });
      base32hexupper = rfc4648({
        prefix: "V",
        name: "base32hexupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
        bitsPerChar: 5
      });
      base32hexpad = rfc4648({
        prefix: "t",
        name: "base32hexpad",
        alphabet: "0123456789abcdefghijklmnopqrstuv=",
        bitsPerChar: 5
      });
      base32hexpadupper = rfc4648({
        prefix: "T",
        name: "base32hexpadupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
        bitsPerChar: 5
      });
      base32z = rfc4648({
        prefix: "h",
        name: "base32z",
        alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
        bitsPerChar: 5
      });
    }
  });

  // node_modules/multiformats/esm/src/cid.js
  var CID, parseCIDtoBytes, toStringV0, toStringV1, DAG_PB_CODE, SHA_256_CODE, encodeCID, cidSymbol, readonly, hidden, version2, deprecate, IS_CID_DEPRECATION;
  var init_cid = __esm({
    "node_modules/multiformats/esm/src/cid.js"() {
      init_varint2();
      init_digest();
      init_base58();
      init_base32();
      init_bytes();
      CID = class {
        constructor(version3, code6, multihash, bytes) {
          this.code = code6;
          this.version = version3;
          this.multihash = multihash;
          this.bytes = bytes;
          this.byteOffset = bytes.byteOffset;
          this.byteLength = bytes.byteLength;
          this.asCID = this;
          this._baseCache = /* @__PURE__ */ new Map();
          Object.defineProperties(this, {
            byteOffset: hidden,
            byteLength: hidden,
            code: readonly,
            version: readonly,
            multihash: readonly,
            bytes: readonly,
            _baseCache: hidden,
            asCID: hidden
          });
        }
        toV0() {
          switch (this.version) {
            case 0: {
              return this;
            }
            default: {
              const { code: code6, multihash } = this;
              if (code6 !== DAG_PB_CODE) {
                throw new Error("Cannot convert a non dag-pb CID to CIDv0");
              }
              if (multihash.code !== SHA_256_CODE) {
                throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
              }
              return CID.createV0(multihash);
            }
          }
        }
        toV1() {
          switch (this.version) {
            case 0: {
              const { code: code6, digest: digest2 } = this.multihash;
              const multihash = create2(code6, digest2);
              return CID.createV1(this.code, multihash);
            }
            case 1: {
              return this;
            }
            default: {
              throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
            }
          }
        }
        equals(other) {
          return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
        }
        toString(base3) {
          const { bytes, version: version3, _baseCache } = this;
          switch (version3) {
            case 0:
              return toStringV0(bytes, _baseCache, base3 || base58btc.encoder);
            default:
              return toStringV1(bytes, _baseCache, base3 || base32.encoder);
          }
        }
        toJSON() {
          return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
          };
        }
        get [Symbol.toStringTag]() {
          return "CID";
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return "CID(" + this.toString() + ")";
        }
        static isCID(value) {
          deprecate(/^0\.0/, IS_CID_DEPRECATION);
          return !!(value && (value[cidSymbol] || value.asCID === value));
        }
        get toBaseEncodedString() {
          throw new Error("Deprecated, use .toString()");
        }
        get codec() {
          throw new Error('"codec" property is deprecated, use integer "code" property instead');
        }
        get buffer() {
          throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
        }
        get multibaseName() {
          throw new Error('"multibaseName" property is deprecated');
        }
        get prefix() {
          throw new Error('"prefix" property is deprecated');
        }
        static asCID(value) {
          if (value instanceof CID) {
            return value;
          } else if (value != null && value.asCID === value) {
            const { version: version3, code: code6, multihash, bytes } = value;
            return new CID(version3, code6, multihash, bytes || encodeCID(version3, code6, multihash.bytes));
          } else if (value != null && value[cidSymbol] === true) {
            const { version: version3, multihash, code: code6 } = value;
            const digest2 = decode3(multihash);
            return CID.create(version3, code6, digest2);
          } else {
            return null;
          }
        }
        static create(version3, code6, digest2) {
          if (typeof code6 !== "number") {
            throw new Error("String codecs are no longer supported");
          }
          switch (version3) {
            case 0: {
              if (code6 !== DAG_PB_CODE) {
                throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
              } else {
                return new CID(version3, code6, digest2, digest2.bytes);
              }
            }
            case 1: {
              const bytes = encodeCID(version3, code6, digest2.bytes);
              return new CID(version3, code6, digest2, bytes);
            }
            default: {
              throw new Error("Invalid version");
            }
          }
        }
        static createV0(digest2) {
          return CID.create(0, DAG_PB_CODE, digest2);
        }
        static createV1(code6, digest2) {
          return CID.create(1, code6, digest2);
        }
        static decode(bytes) {
          const [cid, remainder] = CID.decodeFirst(bytes);
          if (remainder.length) {
            throw new Error("Incorrect length");
          }
          return cid;
        }
        static decodeFirst(bytes) {
          const specs = CID.inspectBytes(bytes);
          const prefixSize = specs.size - specs.multihashSize;
          const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
          if (multihashBytes.byteLength !== specs.multihashSize) {
            throw new Error("Incorrect length");
          }
          const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
          const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
          const cid = specs.version === 0 ? CID.createV0(digest2) : CID.createV1(specs.codec, digest2);
          return [
            cid,
            bytes.subarray(specs.size)
          ];
        }
        static inspectBytes(initialBytes) {
          let offset3 = 0;
          const next = () => {
            const [i3, length2] = decode2(initialBytes.subarray(offset3));
            offset3 += length2;
            return i3;
          };
          let version3 = next();
          let codec = DAG_PB_CODE;
          if (version3 === 18) {
            version3 = 0;
            offset3 = 0;
          } else if (version3 === 1) {
            codec = next();
          }
          if (version3 !== 0 && version3 !== 1) {
            throw new RangeError(`Invalid CID version ${version3}`);
          }
          const prefixSize = offset3;
          const multihashCode = next();
          const digestSize = next();
          const size = offset3 + digestSize;
          const multihashSize = size - prefixSize;
          return {
            version: version3,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
          };
        }
        static parse(source, base3) {
          const [prefix, bytes] = parseCIDtoBytes(source, base3);
          const cid = CID.decode(bytes);
          cid._baseCache.set(prefix, source);
          return cid;
        }
      };
      parseCIDtoBytes = (source, base3) => {
        switch (source[0]) {
          case "Q": {
            const decoder = base3 || base58btc;
            return [
              base58btc.prefix,
              decoder.decode(`${base58btc.prefix}${source}`)
            ];
          }
          case base58btc.prefix: {
            const decoder = base3 || base58btc;
            return [
              base58btc.prefix,
              decoder.decode(source)
            ];
          }
          case base32.prefix: {
            const decoder = base3 || base32;
            return [
              base32.prefix,
              decoder.decode(source)
            ];
          }
          default: {
            if (base3 == null) {
              throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            }
            return [
              source[0],
              base3.decode(source)
            ];
          }
        }
      };
      toStringV0 = (bytes, cache, base3) => {
        const { prefix } = base3;
        if (prefix !== base58btc.prefix) {
          throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
        }
        const cid = cache.get(prefix);
        if (cid == null) {
          const cid2 = base3.encode(bytes).slice(1);
          cache.set(prefix, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      toStringV1 = (bytes, cache, base3) => {
        const { prefix } = base3;
        const cid = cache.get(prefix);
        if (cid == null) {
          const cid2 = base3.encode(bytes);
          cache.set(prefix, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      DAG_PB_CODE = 112;
      SHA_256_CODE = 18;
      encodeCID = (version3, code6, multihash) => {
        const codeOffset = encodingLength(version3);
        const hashOffset = codeOffset + encodingLength(code6);
        const bytes = new Uint8Array(hashOffset + multihash.byteLength);
        encodeTo(version3, bytes, 0);
        encodeTo(code6, bytes, codeOffset);
        bytes.set(multihash, hashOffset);
        return bytes;
      };
      cidSymbol = Symbol.for("@ipld/js-cid/CID");
      readonly = {
        writable: false,
        configurable: false,
        enumerable: true
      };
      hidden = {
        writable: false,
        enumerable: false,
        configurable: false
      };
      version2 = "0.0.0-dev";
      deprecate = (range3, message) => {
        if (range3.test(version2)) {
          console.warn(message);
        } else {
          throw new Error(message);
        }
      };
      IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
    }
  });

  // node_modules/it-batch/index.js
  var require_it_batch = __commonJS({
    "node_modules/it-batch/index.js"(exports2, module2) {
      "use strict";
      async function* batch3(source, size = 1) {
        let things = [];
        if (size < 1) {
          size = 1;
        }
        for await (const thing of source) {
          things.push(thing);
          while (things.length >= size) {
            yield things.slice(0, size);
            things = things.slice(size);
          }
        }
        while (things.length) {
          yield things.slice(0, size);
          things = things.slice(size);
        }
      }
      module2.exports = batch3;
    }
  });

  // node_modules/it-parallel-batch/index.js
  var require_it_parallel_batch = __commonJS({
    "node_modules/it-parallel-batch/index.js"(exports2, module2) {
      "use strict";
      var batch3 = require_it_batch();
      async function* parallelBatch3(source, size = 1) {
        for await (const tasks of batch3(source, size)) {
          const things = tasks.map(
            /**
             * @param {() => Promise<T>} p
             */
            (p2) => {
              return p2().then((value) => ({ ok: true, value }), (err) => ({ ok: false, err }));
            }
          );
          for (let i3 = 0; i3 < things.length; i3++) {
            const result = await things[i3];
            if (result.ok) {
              yield result.value;
            } else {
              throw result.err;
            }
          }
        }
      }
      module2.exports = parallelBatch3;
    }
  });

  // node_modules/is-plain-obj/index.js
  var require_is_plain_obj = __commonJS({
    "node_modules/is-plain-obj/index.js"(exports2, module2) {
      "use strict";
      module2.exports = (value) => {
        if (Object.prototype.toString.call(value) !== "[object Object]") {
          return false;
        }
        const prototype3 = Object.getPrototypeOf(value);
        return prototype3 === null || prototype3 === Object.prototype;
      };
    }
  });

  // node_modules/merge-options/index.js
  var require_merge_options = __commonJS({
    "node_modules/merge-options/index.js"(exports2, module2) {
      "use strict";
      var isOptionObject = require_is_plain_obj();
      var { hasOwnProperty: hasOwnProperty2 } = Object.prototype;
      var { propertyIsEnumerable } = Object;
      var defineProperty = (object4, name5, value) => Object.defineProperty(object4, name5, {
        value,
        writable: true,
        enumerable: true,
        configurable: true
      });
      var globalThis2 = exports2;
      var defaultMergeOptions = {
        concatArrays: false,
        ignoreUndefined: false
      };
      var getEnumerableOwnPropertyKeys = (value) => {
        const keys = [];
        for (const key2 in value) {
          if (hasOwnProperty2.call(value, key2)) {
            keys.push(key2);
          }
        }
        if (Object.getOwnPropertySymbols) {
          const symbols = Object.getOwnPropertySymbols(value);
          for (const symbol of symbols) {
            if (propertyIsEnumerable.call(value, symbol)) {
              keys.push(symbol);
            }
          }
        }
        return keys;
      };
      function clone2(value) {
        if (Array.isArray(value)) {
          return cloneArray(value);
        }
        if (isOptionObject(value)) {
          return cloneOptionObject(value);
        }
        return value;
      }
      function cloneArray(array4) {
        const result = array4.slice(0, 0);
        getEnumerableOwnPropertyKeys(array4).forEach((key2) => {
          defineProperty(result, key2, clone2(array4[key2]));
        });
        return result;
      }
      function cloneOptionObject(object4) {
        const result = Object.getPrototypeOf(object4) === null ? /* @__PURE__ */ Object.create(null) : {};
        getEnumerableOwnPropertyKeys(object4).forEach((key2) => {
          defineProperty(result, key2, clone2(object4[key2]));
        });
        return result;
      }
      var mergeKeys = (merged, source, keys, config) => {
        keys.forEach((key2) => {
          if (typeof source[key2] === "undefined" && config.ignoreUndefined) {
            return;
          }
          if (key2 in merged && merged[key2] !== Object.getPrototypeOf(merged)) {
            defineProperty(merged, key2, merge3(merged[key2], source[key2], config));
          } else {
            defineProperty(merged, key2, clone2(source[key2]));
          }
        });
        return merged;
      };
      var concatArrays = (merged, source, config) => {
        let result = merged.slice(0, 0);
        let resultIndex = 0;
        [merged, source].forEach((array4) => {
          const indices = [];
          for (let k = 0; k < array4.length; k++) {
            if (!hasOwnProperty2.call(array4, k)) {
              continue;
            }
            indices.push(String(k));
            if (array4 === merged) {
              defineProperty(result, resultIndex++, array4[k]);
            } else {
              defineProperty(result, resultIndex++, clone2(array4[k]));
            }
          }
          result = mergeKeys(result, array4, getEnumerableOwnPropertyKeys(array4).filter((key2) => !indices.includes(key2)), config);
        });
        return result;
      };
      function merge3(merged, source, config) {
        if (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {
          return concatArrays(merged, source, config);
        }
        if (!isOptionObject(source) || !isOptionObject(merged)) {
          return clone2(source);
        }
        return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);
      }
      module2.exports = function(...options) {
        const config = merge3(clone2(defaultMergeOptions), this !== globalThis2 && this || {}, defaultMergeOptions);
        let merged = { _: {} };
        for (const option of options) {
          if (option === void 0) {
            continue;
          }
          if (!isOptionObject(option)) {
            throw new TypeError("`" + option + "` is not an Option Object");
          }
          merged = merge3(merged, { _: option }, config);
        }
        return merged._;
      };
    }
  });

  // node_modules/multiformats/esm/src/hashes/hasher.js
  var from2, Hasher;
  var init_hasher = __esm({
    "node_modules/multiformats/esm/src/hashes/hasher.js"() {
      init_digest();
      from2 = ({ name: name5, code: code6, encode: encode12 }) => new Hasher(name5, code6, encode12);
      Hasher = class {
        constructor(name5, code6, encode12) {
          this.name = name5;
          this.code = code6;
          this.encode = encode12;
        }
        digest(input) {
          if (input instanceof Uint8Array) {
            const result = this.encode(input);
            return result instanceof Uint8Array ? create2(this.code, result) : result.then((digest2) => create2(this.code, digest2));
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
    }
  });

  // node_modules/multiformats/esm/src/hashes/sha2-browser.js
  var sha2_browser_exports = {};
  __export(sha2_browser_exports, {
    sha256: () => sha256,
    sha512: () => sha512
  });
  var sha, sha256, sha512;
  var init_sha2_browser = __esm({
    "node_modules/multiformats/esm/src/hashes/sha2-browser.js"() {
      init_hasher();
      sha = (name5) => async (data) => new Uint8Array(await crypto.subtle.digest(name5, data));
      sha256 = from2({
        name: "sha2-256",
        code: 18,
        encode: sha("SHA-256")
      });
      sha512 = from2({
        name: "sha2-512",
        code: 19,
        encode: sha("SHA-512")
      });
    }
  });

  // node_modules/multiformats/esm/src/index.js
  var init_src = __esm({
    "node_modules/multiformats/esm/src/index.js"() {
      init_cid();
      init_varint2();
      init_bytes();
      init_hasher();
      init_digest();
    }
  });

  // node_modules/murmurhash3js-revisited/lib/murmurHash3js.js
  var require_murmurHash3js = __commonJS({
    "node_modules/murmurhash3js-revisited/lib/murmurHash3js.js"(exports2, module2) {
      (function(root2, undefined2) {
        "use strict";
        var library = {
          "version": "3.0.0",
          "x86": {},
          "x64": {},
          "inputValidation": true
        };
        function _validBytes(bytes) {
          if (!Array.isArray(bytes) && !ArrayBuffer.isView(bytes)) {
            return false;
          }
          for (var i3 = 0; i3 < bytes.length; i3++) {
            if (!Number.isInteger(bytes[i3]) || bytes[i3] < 0 || bytes[i3] > 255) {
              return false;
            }
          }
          return true;
        }
        function _x86Multiply(m2, n3) {
          return (m2 & 65535) * n3 + (((m2 >>> 16) * n3 & 65535) << 16);
        }
        function _x86Rotl(m2, n3) {
          return m2 << n3 | m2 >>> 32 - n3;
        }
        function _x86Fmix(h2) {
          h2 ^= h2 >>> 16;
          h2 = _x86Multiply(h2, 2246822507);
          h2 ^= h2 >>> 13;
          h2 = _x86Multiply(h2, 3266489909);
          h2 ^= h2 >>> 16;
          return h2;
        }
        function _x64Add(m2, n3) {
          m2 = [m2[0] >>> 16, m2[0] & 65535, m2[1] >>> 16, m2[1] & 65535];
          n3 = [n3[0] >>> 16, n3[0] & 65535, n3[1] >>> 16, n3[1] & 65535];
          var o2 = [0, 0, 0, 0];
          o2[3] += m2[3] + n3[3];
          o2[2] += o2[3] >>> 16;
          o2[3] &= 65535;
          o2[2] += m2[2] + n3[2];
          o2[1] += o2[2] >>> 16;
          o2[2] &= 65535;
          o2[1] += m2[1] + n3[1];
          o2[0] += o2[1] >>> 16;
          o2[1] &= 65535;
          o2[0] += m2[0] + n3[0];
          o2[0] &= 65535;
          return [o2[0] << 16 | o2[1], o2[2] << 16 | o2[3]];
        }
        function _x64Multiply(m2, n3) {
          m2 = [m2[0] >>> 16, m2[0] & 65535, m2[1] >>> 16, m2[1] & 65535];
          n3 = [n3[0] >>> 16, n3[0] & 65535, n3[1] >>> 16, n3[1] & 65535];
          var o2 = [0, 0, 0, 0];
          o2[3] += m2[3] * n3[3];
          o2[2] += o2[3] >>> 16;
          o2[3] &= 65535;
          o2[2] += m2[2] * n3[3];
          o2[1] += o2[2] >>> 16;
          o2[2] &= 65535;
          o2[2] += m2[3] * n3[2];
          o2[1] += o2[2] >>> 16;
          o2[2] &= 65535;
          o2[1] += m2[1] * n3[3];
          o2[0] += o2[1] >>> 16;
          o2[1] &= 65535;
          o2[1] += m2[2] * n3[2];
          o2[0] += o2[1] >>> 16;
          o2[1] &= 65535;
          o2[1] += m2[3] * n3[1];
          o2[0] += o2[1] >>> 16;
          o2[1] &= 65535;
          o2[0] += m2[0] * n3[3] + m2[1] * n3[2] + m2[2] * n3[1] + m2[3] * n3[0];
          o2[0] &= 65535;
          return [o2[0] << 16 | o2[1], o2[2] << 16 | o2[3]];
        }
        function _x64Rotl(m2, n3) {
          n3 %= 64;
          if (n3 === 32) {
            return [m2[1], m2[0]];
          } else if (n3 < 32) {
            return [m2[0] << n3 | m2[1] >>> 32 - n3, m2[1] << n3 | m2[0] >>> 32 - n3];
          } else {
            n3 -= 32;
            return [m2[1] << n3 | m2[0] >>> 32 - n3, m2[0] << n3 | m2[1] >>> 32 - n3];
          }
        }
        function _x64LeftShift(m2, n3) {
          n3 %= 64;
          if (n3 === 0) {
            return m2;
          } else if (n3 < 32) {
            return [m2[0] << n3 | m2[1] >>> 32 - n3, m2[1] << n3];
          } else {
            return [m2[1] << n3 - 32, 0];
          }
        }
        function _x64Xor(m2, n3) {
          return [m2[0] ^ n3[0], m2[1] ^ n3[1]];
        }
        function _x64Fmix(h2) {
          h2 = _x64Xor(h2, [0, h2[0] >>> 1]);
          h2 = _x64Multiply(h2, [4283543511, 3981806797]);
          h2 = _x64Xor(h2, [0, h2[0] >>> 1]);
          h2 = _x64Multiply(h2, [3301882366, 444984403]);
          h2 = _x64Xor(h2, [0, h2[0] >>> 1]);
          return h2;
        }
        library.x86.hash32 = function(bytes, seed2) {
          if (library.inputValidation && !_validBytes(bytes)) {
            return undefined2;
          }
          seed2 = seed2 || 0;
          var remainder = bytes.length % 4;
          var blocks = bytes.length - remainder;
          var h1 = seed2;
          var k1 = 0;
          var c1 = 3432918353;
          var c2 = 461845907;
          for (var i3 = 0; i3 < blocks; i3 = i3 + 4) {
            k1 = bytes[i3] | bytes[i3 + 1] << 8 | bytes[i3 + 2] << 16 | bytes[i3 + 3] << 24;
            k1 = _x86Multiply(k1, c1);
            k1 = _x86Rotl(k1, 15);
            k1 = _x86Multiply(k1, c2);
            h1 ^= k1;
            h1 = _x86Rotl(h1, 13);
            h1 = _x86Multiply(h1, 5) + 3864292196;
          }
          k1 = 0;
          switch (remainder) {
            case 3:
              k1 ^= bytes[i3 + 2] << 16;
            case 2:
              k1 ^= bytes[i3 + 1] << 8;
            case 1:
              k1 ^= bytes[i3];
              k1 = _x86Multiply(k1, c1);
              k1 = _x86Rotl(k1, 15);
              k1 = _x86Multiply(k1, c2);
              h1 ^= k1;
          }
          h1 ^= bytes.length;
          h1 = _x86Fmix(h1);
          return h1 >>> 0;
        };
        library.x86.hash128 = function(bytes, seed2) {
          if (library.inputValidation && !_validBytes(bytes)) {
            return undefined2;
          }
          seed2 = seed2 || 0;
          var remainder = bytes.length % 16;
          var blocks = bytes.length - remainder;
          var h1 = seed2;
          var h2 = seed2;
          var h3 = seed2;
          var h4 = seed2;
          var k1 = 0;
          var k2 = 0;
          var k3 = 0;
          var k4 = 0;
          var c1 = 597399067;
          var c2 = 2869860233;
          var c3 = 951274213;
          var c4 = 2716044179;
          for (var i3 = 0; i3 < blocks; i3 = i3 + 16) {
            k1 = bytes[i3] | bytes[i3 + 1] << 8 | bytes[i3 + 2] << 16 | bytes[i3 + 3] << 24;
            k2 = bytes[i3 + 4] | bytes[i3 + 5] << 8 | bytes[i3 + 6] << 16 | bytes[i3 + 7] << 24;
            k3 = bytes[i3 + 8] | bytes[i3 + 9] << 8 | bytes[i3 + 10] << 16 | bytes[i3 + 11] << 24;
            k4 = bytes[i3 + 12] | bytes[i3 + 13] << 8 | bytes[i3 + 14] << 16 | bytes[i3 + 15] << 24;
            k1 = _x86Multiply(k1, c1);
            k1 = _x86Rotl(k1, 15);
            k1 = _x86Multiply(k1, c2);
            h1 ^= k1;
            h1 = _x86Rotl(h1, 19);
            h1 += h2;
            h1 = _x86Multiply(h1, 5) + 1444728091;
            k2 = _x86Multiply(k2, c2);
            k2 = _x86Rotl(k2, 16);
            k2 = _x86Multiply(k2, c3);
            h2 ^= k2;
            h2 = _x86Rotl(h2, 17);
            h2 += h3;
            h2 = _x86Multiply(h2, 5) + 197830471;
            k3 = _x86Multiply(k3, c3);
            k3 = _x86Rotl(k3, 17);
            k3 = _x86Multiply(k3, c4);
            h3 ^= k3;
            h3 = _x86Rotl(h3, 15);
            h3 += h4;
            h3 = _x86Multiply(h3, 5) + 2530024501;
            k4 = _x86Multiply(k4, c4);
            k4 = _x86Rotl(k4, 18);
            k4 = _x86Multiply(k4, c1);
            h4 ^= k4;
            h4 = _x86Rotl(h4, 13);
            h4 += h1;
            h4 = _x86Multiply(h4, 5) + 850148119;
          }
          k1 = 0;
          k2 = 0;
          k3 = 0;
          k4 = 0;
          switch (remainder) {
            case 15:
              k4 ^= bytes[i3 + 14] << 16;
            case 14:
              k4 ^= bytes[i3 + 13] << 8;
            case 13:
              k4 ^= bytes[i3 + 12];
              k4 = _x86Multiply(k4, c4);
              k4 = _x86Rotl(k4, 18);
              k4 = _x86Multiply(k4, c1);
              h4 ^= k4;
            case 12:
              k3 ^= bytes[i3 + 11] << 24;
            case 11:
              k3 ^= bytes[i3 + 10] << 16;
            case 10:
              k3 ^= bytes[i3 + 9] << 8;
            case 9:
              k3 ^= bytes[i3 + 8];
              k3 = _x86Multiply(k3, c3);
              k3 = _x86Rotl(k3, 17);
              k3 = _x86Multiply(k3, c4);
              h3 ^= k3;
            case 8:
              k2 ^= bytes[i3 + 7] << 24;
            case 7:
              k2 ^= bytes[i3 + 6] << 16;
            case 6:
              k2 ^= bytes[i3 + 5] << 8;
            case 5:
              k2 ^= bytes[i3 + 4];
              k2 = _x86Multiply(k2, c2);
              k2 = _x86Rotl(k2, 16);
              k2 = _x86Multiply(k2, c3);
              h2 ^= k2;
            case 4:
              k1 ^= bytes[i3 + 3] << 24;
            case 3:
              k1 ^= bytes[i3 + 2] << 16;
            case 2:
              k1 ^= bytes[i3 + 1] << 8;
            case 1:
              k1 ^= bytes[i3];
              k1 = _x86Multiply(k1, c1);
              k1 = _x86Rotl(k1, 15);
              k1 = _x86Multiply(k1, c2);
              h1 ^= k1;
          }
          h1 ^= bytes.length;
          h2 ^= bytes.length;
          h3 ^= bytes.length;
          h4 ^= bytes.length;
          h1 += h2;
          h1 += h3;
          h1 += h4;
          h2 += h1;
          h3 += h1;
          h4 += h1;
          h1 = _x86Fmix(h1);
          h2 = _x86Fmix(h2);
          h3 = _x86Fmix(h3);
          h4 = _x86Fmix(h4);
          h1 += h2;
          h1 += h3;
          h1 += h4;
          h2 += h1;
          h3 += h1;
          h4 += h1;
          return ("00000000" + (h1 >>> 0).toString(16)).slice(-8) + ("00000000" + (h2 >>> 0).toString(16)).slice(-8) + ("00000000" + (h3 >>> 0).toString(16)).slice(-8) + ("00000000" + (h4 >>> 0).toString(16)).slice(-8);
        };
        library.x64.hash128 = function(bytes, seed2) {
          if (library.inputValidation && !_validBytes(bytes)) {
            return undefined2;
          }
          seed2 = seed2 || 0;
          var remainder = bytes.length % 16;
          var blocks = bytes.length - remainder;
          var h1 = [0, seed2];
          var h2 = [0, seed2];
          var k1 = [0, 0];
          var k2 = [0, 0];
          var c1 = [2277735313, 289559509];
          var c2 = [1291169091, 658871167];
          for (var i3 = 0; i3 < blocks; i3 = i3 + 16) {
            k1 = [bytes[i3 + 4] | bytes[i3 + 5] << 8 | bytes[i3 + 6] << 16 | bytes[i3 + 7] << 24, bytes[i3] | bytes[i3 + 1] << 8 | bytes[i3 + 2] << 16 | bytes[i3 + 3] << 24];
            k2 = [bytes[i3 + 12] | bytes[i3 + 13] << 8 | bytes[i3 + 14] << 16 | bytes[i3 + 15] << 24, bytes[i3 + 8] | bytes[i3 + 9] << 8 | bytes[i3 + 10] << 16 | bytes[i3 + 11] << 24];
            k1 = _x64Multiply(k1, c1);
            k1 = _x64Rotl(k1, 31);
            k1 = _x64Multiply(k1, c2);
            h1 = _x64Xor(h1, k1);
            h1 = _x64Rotl(h1, 27);
            h1 = _x64Add(h1, h2);
            h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 1390208809]);
            k2 = _x64Multiply(k2, c2);
            k2 = _x64Rotl(k2, 33);
            k2 = _x64Multiply(k2, c1);
            h2 = _x64Xor(h2, k2);
            h2 = _x64Rotl(h2, 31);
            h2 = _x64Add(h2, h1);
            h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 944331445]);
          }
          k1 = [0, 0];
          k2 = [0, 0];
          switch (remainder) {
            case 15:
              k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i3 + 14]], 48));
            case 14:
              k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i3 + 13]], 40));
            case 13:
              k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i3 + 12]], 32));
            case 12:
              k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i3 + 11]], 24));
            case 11:
              k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i3 + 10]], 16));
            case 10:
              k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i3 + 9]], 8));
            case 9:
              k2 = _x64Xor(k2, [0, bytes[i3 + 8]]);
              k2 = _x64Multiply(k2, c2);
              k2 = _x64Rotl(k2, 33);
              k2 = _x64Multiply(k2, c1);
              h2 = _x64Xor(h2, k2);
            case 8:
              k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i3 + 7]], 56));
            case 7:
              k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i3 + 6]], 48));
            case 6:
              k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i3 + 5]], 40));
            case 5:
              k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i3 + 4]], 32));
            case 4:
              k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i3 + 3]], 24));
            case 3:
              k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i3 + 2]], 16));
            case 2:
              k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i3 + 1]], 8));
            case 1:
              k1 = _x64Xor(k1, [0, bytes[i3]]);
              k1 = _x64Multiply(k1, c1);
              k1 = _x64Rotl(k1, 31);
              k1 = _x64Multiply(k1, c2);
              h1 = _x64Xor(h1, k1);
          }
          h1 = _x64Xor(h1, [0, bytes.length]);
          h2 = _x64Xor(h2, [0, bytes.length]);
          h1 = _x64Add(h1, h2);
          h2 = _x64Add(h2, h1);
          h1 = _x64Fmix(h1);
          h2 = _x64Fmix(h2);
          h1 = _x64Add(h1, h2);
          h2 = _x64Add(h2, h1);
          return ("00000000" + (h1[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h1[1] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[1] >>> 0).toString(16)).slice(-8);
        };
        if (typeof exports2 !== "undefined") {
          if (typeof module2 !== "undefined" && module2.exports) {
            exports2 = module2.exports = library;
          }
          exports2.murmurHash3 = library;
        } else if (typeof define === "function" && define.amd) {
          define([], function() {
            return library;
          });
        } else {
          library._murmurHash3 = root2.murmurHash3;
          library.noConflict = function() {
            root2.murmurHash3 = library._murmurHash3;
            library._murmurHash3 = undefined2;
            library.noConflict = undefined2;
            return library;
          };
          root2.murmurHash3 = library;
        }
      })(exports2);
    }
  });

  // node_modules/murmurhash3js-revisited/index.js
  var require_murmurhash3js_revisited = __commonJS({
    "node_modules/murmurhash3js-revisited/index.js"(exports2, module2) {
      module2.exports = require_murmurHash3js();
    }
  });

  // node_modules/err-code/index.js
  var require_err_code = __commonJS({
    "node_modules/err-code/index.js"(exports2, module2) {
      "use strict";
      function assign(obj, props) {
        for (const key2 in props) {
          Object.defineProperty(obj, key2, {
            value: props[key2],
            enumerable: true,
            configurable: true
          });
        }
        return obj;
      }
      function createError(err, code6, props) {
        if (!err || typeof err === "string") {
          throw new TypeError("Please pass an Error to err-code");
        }
        if (!props) {
          props = {};
        }
        if (typeof code6 === "object") {
          props = code6;
          code6 = "";
        }
        if (code6) {
          props.code = code6;
        }
        try {
          return assign(err, props);
        } catch (_) {
          props.message = err.message;
          props.stack = err.stack;
          const ErrClass = function() {
          };
          ErrClass.prototype = Object.create(Object.getPrototypeOf(err));
          const output = assign(new ErrClass(), props);
          return output;
        }
      }
      module2.exports = createError;
    }
  });

  // node_modules/@protobufjs/aspromise/index.js
  var require_aspromise = __commonJS({
    "node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
      "use strict";
      module2.exports = asPromise;
      function asPromise(fn, ctx) {
        var params = new Array(arguments.length - 1), offset3 = 0, index3 = 2, pending = true;
        while (index3 < arguments.length)
          params[offset3++] = arguments[index3++];
        return new Promise(function executor(resolve5, reject) {
          params[offset3] = function callback(err) {
            if (pending) {
              pending = false;
              if (err)
                reject(err);
              else {
                var params2 = new Array(arguments.length - 1), offset4 = 0;
                while (offset4 < params2.length)
                  params2[offset4++] = arguments[offset4];
                resolve5.apply(null, params2);
              }
            }
          };
          try {
            fn.apply(ctx || null, params);
          } catch (err) {
            if (pending) {
              pending = false;
              reject(err);
            }
          }
        });
      }
    }
  });

  // node_modules/@protobufjs/base64/index.js
  var require_base64 = __commonJS({
    "node_modules/@protobufjs/base64/index.js"(exports2) {
      "use strict";
      var base642 = exports2;
      base642.length = function length2(string4) {
        var p2 = string4.length;
        if (!p2)
          return 0;
        var n3 = 0;
        while (--p2 % 4 > 1 && string4.charAt(p2) === "=")
          ++n3;
        return Math.ceil(string4.length * 3) / 4 - n3;
      };
      var b64 = new Array(64);
      var s64 = new Array(123);
      for (i3 = 0; i3 < 64; )
        s64[b64[i3] = i3 < 26 ? i3 + 65 : i3 < 52 ? i3 + 71 : i3 < 62 ? i3 - 4 : i3 - 59 | 43] = i3++;
      var i3;
      base642.encode = function encode12(buffer2, start, end) {
        var parts = null, chunk = [];
        var i4 = 0, j = 0, t3;
        while (start < end) {
          var b2 = buffer2[start++];
          switch (j) {
            case 0:
              chunk[i4++] = b64[b2 >> 2];
              t3 = (b2 & 3) << 4;
              j = 1;
              break;
            case 1:
              chunk[i4++] = b64[t3 | b2 >> 4];
              t3 = (b2 & 15) << 2;
              j = 2;
              break;
            case 2:
              chunk[i4++] = b64[t3 | b2 >> 6];
              chunk[i4++] = b64[b2 & 63];
              j = 0;
              break;
          }
          if (i4 > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i4 = 0;
          }
        }
        if (j) {
          chunk[i4++] = b64[t3];
          chunk[i4++] = 61;
          if (j === 1)
            chunk[i4++] = 61;
        }
        if (parts) {
          if (i4)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i4)));
          return parts.join("");
        }
        return String.fromCharCode.apply(String, chunk.slice(0, i4));
      };
      var invalidEncoding = "invalid encoding";
      base642.decode = function decode11(string4, buffer2, offset3) {
        var start = offset3;
        var j = 0, t3;
        for (var i4 = 0; i4 < string4.length; ) {
          var c2 = string4.charCodeAt(i4++);
          if (c2 === 61 && j > 1)
            break;
          if ((c2 = s64[c2]) === void 0)
            throw Error(invalidEncoding);
          switch (j) {
            case 0:
              t3 = c2;
              j = 1;
              break;
            case 1:
              buffer2[offset3++] = t3 << 2 | (c2 & 48) >> 4;
              t3 = c2;
              j = 2;
              break;
            case 2:
              buffer2[offset3++] = (t3 & 15) << 4 | (c2 & 60) >> 2;
              t3 = c2;
              j = 3;
              break;
            case 3:
              buffer2[offset3++] = (t3 & 3) << 6 | c2;
              j = 0;
              break;
          }
        }
        if (j === 1)
          throw Error(invalidEncoding);
        return offset3 - start;
      };
      base642.test = function test(string4) {
        return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string4);
      };
    }
  });

  // node_modules/@protobufjs/eventemitter/index.js
  var require_eventemitter = __commonJS({
    "node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
      "use strict";
      module2.exports = EventEmitter;
      function EventEmitter() {
        this._listeners = {};
      }
      EventEmitter.prototype.on = function on(evt, fn, ctx) {
        (this._listeners[evt] || (this._listeners[evt] = [])).push({
          fn,
          ctx: ctx || this
        });
        return this;
      };
      EventEmitter.prototype.off = function off(evt, fn) {
        if (evt === void 0)
          this._listeners = {};
        else {
          if (fn === void 0)
            this._listeners[evt] = [];
          else {
            var listeners = this._listeners[evt];
            for (var i3 = 0; i3 < listeners.length; )
              if (listeners[i3].fn === fn)
                listeners.splice(i3, 1);
              else
                ++i3;
          }
        }
        return this;
      };
      EventEmitter.prototype.emit = function emit(evt) {
        var listeners = this._listeners[evt];
        if (listeners) {
          var args = [], i3 = 1;
          for (; i3 < arguments.length; )
            args.push(arguments[i3++]);
          for (i3 = 0; i3 < listeners.length; )
            listeners[i3].fn.apply(listeners[i3++].ctx, args);
        }
        return this;
      };
    }
  });

  // node_modules/@protobufjs/float/index.js
  var require_float = __commonJS({
    "node_modules/@protobufjs/float/index.js"(exports2, module2) {
      "use strict";
      module2.exports = factory(factory);
      function factory(exports3) {
        if (typeof Float32Array !== "undefined")
          (function() {
            var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
            function writeFloat_f32_cpy(val, buf2, pos) {
              f32[0] = val;
              buf2[pos] = f8b[0];
              buf2[pos + 1] = f8b[1];
              buf2[pos + 2] = f8b[2];
              buf2[pos + 3] = f8b[3];
            }
            function writeFloat_f32_rev(val, buf2, pos) {
              f32[0] = val;
              buf2[pos] = f8b[3];
              buf2[pos + 1] = f8b[2];
              buf2[pos + 2] = f8b[1];
              buf2[pos + 3] = f8b[0];
            }
            exports3.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
            exports3.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
            function readFloat_f32_cpy(buf2, pos) {
              f8b[0] = buf2[pos];
              f8b[1] = buf2[pos + 1];
              f8b[2] = buf2[pos + 2];
              f8b[3] = buf2[pos + 3];
              return f32[0];
            }
            function readFloat_f32_rev(buf2, pos) {
              f8b[3] = buf2[pos];
              f8b[2] = buf2[pos + 1];
              f8b[1] = buf2[pos + 2];
              f8b[0] = buf2[pos + 3];
              return f32[0];
            }
            exports3.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
            exports3.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
          })();
        else
          (function() {
            function writeFloat_ieee754(writeUint, val, buf2, pos) {
              var sign = val < 0 ? 1 : 0;
              if (sign)
                val = -val;
              if (val === 0)
                writeUint(1 / val > 0 ? (
                  /* positive */
                  0
                ) : (
                  /* negative 0 */
                  2147483648
                ), buf2, pos);
              else if (isNaN(val))
                writeUint(2143289344, buf2, pos);
              else if (val > 34028234663852886e22)
                writeUint((sign << 31 | 2139095040) >>> 0, buf2, pos);
              else if (val < 11754943508222875e-54)
                writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf2, pos);
              else {
                var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf2, pos);
              }
            }
            exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
            exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
            function readFloat_ieee754(readUint, buf2, pos) {
              var uint = readUint(buf2, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
              return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
            }
            exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
            exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
          })();
        if (typeof Float64Array !== "undefined")
          (function() {
            var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
            function writeDouble_f64_cpy(val, buf2, pos) {
              f64[0] = val;
              buf2[pos] = f8b[0];
              buf2[pos + 1] = f8b[1];
              buf2[pos + 2] = f8b[2];
              buf2[pos + 3] = f8b[3];
              buf2[pos + 4] = f8b[4];
              buf2[pos + 5] = f8b[5];
              buf2[pos + 6] = f8b[6];
              buf2[pos + 7] = f8b[7];
            }
            function writeDouble_f64_rev(val, buf2, pos) {
              f64[0] = val;
              buf2[pos] = f8b[7];
              buf2[pos + 1] = f8b[6];
              buf2[pos + 2] = f8b[5];
              buf2[pos + 3] = f8b[4];
              buf2[pos + 4] = f8b[3];
              buf2[pos + 5] = f8b[2];
              buf2[pos + 6] = f8b[1];
              buf2[pos + 7] = f8b[0];
            }
            exports3.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
            exports3.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
            function readDouble_f64_cpy(buf2, pos) {
              f8b[0] = buf2[pos];
              f8b[1] = buf2[pos + 1];
              f8b[2] = buf2[pos + 2];
              f8b[3] = buf2[pos + 3];
              f8b[4] = buf2[pos + 4];
              f8b[5] = buf2[pos + 5];
              f8b[6] = buf2[pos + 6];
              f8b[7] = buf2[pos + 7];
              return f64[0];
            }
            function readDouble_f64_rev(buf2, pos) {
              f8b[7] = buf2[pos];
              f8b[6] = buf2[pos + 1];
              f8b[5] = buf2[pos + 2];
              f8b[4] = buf2[pos + 3];
              f8b[3] = buf2[pos + 4];
              f8b[2] = buf2[pos + 5];
              f8b[1] = buf2[pos + 6];
              f8b[0] = buf2[pos + 7];
              return f64[0];
            }
            exports3.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
            exports3.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
          })();
        else
          (function() {
            function writeDouble_ieee754(writeUint, off0, off1, val, buf2, pos) {
              var sign = val < 0 ? 1 : 0;
              if (sign)
                val = -val;
              if (val === 0) {
                writeUint(0, buf2, pos + off0);
                writeUint(1 / val > 0 ? (
                  /* positive */
                  0
                ) : (
                  /* negative 0 */
                  2147483648
                ), buf2, pos + off1);
              } else if (isNaN(val)) {
                writeUint(0, buf2, pos + off0);
                writeUint(2146959360, buf2, pos + off1);
              } else if (val > 17976931348623157e292) {
                writeUint(0, buf2, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf2, pos + off1);
              } else {
                var mantissa;
                if (val < 22250738585072014e-324) {
                  mantissa = val / 5e-324;
                  writeUint(mantissa >>> 0, buf2, pos + off0);
                  writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf2, pos + off1);
                } else {
                  var exponent = Math.floor(Math.log(val) / Math.LN2);
                  if (exponent === 1024)
                    exponent = 1023;
                  mantissa = val * Math.pow(2, -exponent);
                  writeUint(mantissa * 4503599627370496 >>> 0, buf2, pos + off0);
                  writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf2, pos + off1);
                }
              }
            }
            exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
            exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
            function readDouble_ieee754(readUint, off0, off1, buf2, pos) {
              var lo = readUint(buf2, pos + off0), hi = readUint(buf2, pos + off1);
              var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
              return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
            }
            exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
            exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
          })();
        return exports3;
      }
      function writeUintLE(val, buf2, pos) {
        buf2[pos] = val & 255;
        buf2[pos + 1] = val >>> 8 & 255;
        buf2[pos + 2] = val >>> 16 & 255;
        buf2[pos + 3] = val >>> 24;
      }
      function writeUintBE(val, buf2, pos) {
        buf2[pos] = val >>> 24;
        buf2[pos + 1] = val >>> 16 & 255;
        buf2[pos + 2] = val >>> 8 & 255;
        buf2[pos + 3] = val & 255;
      }
      function readUintLE(buf2, pos) {
        return (buf2[pos] | buf2[pos + 1] << 8 | buf2[pos + 2] << 16 | buf2[pos + 3] << 24) >>> 0;
      }
      function readUintBE(buf2, pos) {
        return (buf2[pos] << 24 | buf2[pos + 1] << 16 | buf2[pos + 2] << 8 | buf2[pos + 3]) >>> 0;
      }
    }
  });

  // node_modules/@protobufjs/inquire/index.js
  var require_inquire = __commonJS({
    "node_modules/@protobufjs/inquire/index.js"(exports, module) {
      "use strict";
      module.exports = inquire;
      function inquire(moduleName) {
        try {
          var mod = eval("quire".replace(/^/, "re"))(moduleName);
          if (mod && (mod.length || Object.keys(mod).length))
            return mod;
        } catch (e3) {
        }
        return null;
      }
    }
  });

  // node_modules/@protobufjs/utf8/index.js
  var require_utf82 = __commonJS({
    "node_modules/@protobufjs/utf8/index.js"(exports2) {
      "use strict";
      var utf8 = exports2;
      utf8.length = function utf8_length(string4) {
        var len = 0, c2 = 0;
        for (var i3 = 0; i3 < string4.length; ++i3) {
          c2 = string4.charCodeAt(i3);
          if (c2 < 128)
            len += 1;
          else if (c2 < 2048)
            len += 2;
          else if ((c2 & 64512) === 55296 && (string4.charCodeAt(i3 + 1) & 64512) === 56320) {
            ++i3;
            len += 4;
          } else
            len += 3;
        }
        return len;
      };
      utf8.read = function utf8_read(buffer2, start, end) {
        var len = end - start;
        if (len < 1)
          return "";
        var parts = null, chunk = [], i3 = 0, t3;
        while (start < end) {
          t3 = buffer2[start++];
          if (t3 < 128)
            chunk[i3++] = t3;
          else if (t3 > 191 && t3 < 224)
            chunk[i3++] = (t3 & 31) << 6 | buffer2[start++] & 63;
          else if (t3 > 239 && t3 < 365) {
            t3 = ((t3 & 7) << 18 | (buffer2[start++] & 63) << 12 | (buffer2[start++] & 63) << 6 | buffer2[start++] & 63) - 65536;
            chunk[i3++] = 55296 + (t3 >> 10);
            chunk[i3++] = 56320 + (t3 & 1023);
          } else
            chunk[i3++] = (t3 & 15) << 12 | (buffer2[start++] & 63) << 6 | buffer2[start++] & 63;
          if (i3 > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i3 = 0;
          }
        }
        if (parts) {
          if (i3)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i3)));
          return parts.join("");
        }
        return String.fromCharCode.apply(String, chunk.slice(0, i3));
      };
      utf8.write = function utf8_write(string4, buffer2, offset3) {
        var start = offset3, c1, c2;
        for (var i3 = 0; i3 < string4.length; ++i3) {
          c1 = string4.charCodeAt(i3);
          if (c1 < 128) {
            buffer2[offset3++] = c1;
          } else if (c1 < 2048) {
            buffer2[offset3++] = c1 >> 6 | 192;
            buffer2[offset3++] = c1 & 63 | 128;
          } else if ((c1 & 64512) === 55296 && ((c2 = string4.charCodeAt(i3 + 1)) & 64512) === 56320) {
            c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
            ++i3;
            buffer2[offset3++] = c1 >> 18 | 240;
            buffer2[offset3++] = c1 >> 12 & 63 | 128;
            buffer2[offset3++] = c1 >> 6 & 63 | 128;
            buffer2[offset3++] = c1 & 63 | 128;
          } else {
            buffer2[offset3++] = c1 >> 12 | 224;
            buffer2[offset3++] = c1 >> 6 & 63 | 128;
            buffer2[offset3++] = c1 & 63 | 128;
          }
        }
        return offset3 - start;
      };
    }
  });

  // node_modules/@protobufjs/pool/index.js
  var require_pool = __commonJS({
    "node_modules/@protobufjs/pool/index.js"(exports2, module2) {
      "use strict";
      module2.exports = pool;
      function pool(alloc2, slice2, size) {
        var SIZE = size || 8192;
        var MAX = SIZE >>> 1;
        var slab = null;
        var offset3 = SIZE;
        return function pool_alloc(size2) {
          if (size2 < 1 || size2 > MAX)
            return alloc2(size2);
          if (offset3 + size2 > SIZE) {
            slab = alloc2(SIZE);
            offset3 = 0;
          }
          var buf2 = slice2.call(slab, offset3, offset3 += size2);
          if (offset3 & 7)
            offset3 = (offset3 | 7) + 1;
          return buf2;
        };
      }
    }
  });

  // node_modules/protobufjs/src/util/longbits.js
  var require_longbits = __commonJS({
    "node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
      "use strict";
      module2.exports = LongBits;
      var util = require_minimal();
      function LongBits(lo, hi) {
        this.lo = lo >>> 0;
        this.hi = hi >>> 0;
      }
      var zero = LongBits.zero = new LongBits(0, 0);
      zero.toNumber = function() {
        return 0;
      };
      zero.zzEncode = zero.zzDecode = function() {
        return this;
      };
      zero.length = function() {
        return 1;
      };
      var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
      LongBits.fromNumber = function fromNumber(value) {
        if (value === 0)
          return zero;
        var sign = value < 0;
        if (sign)
          value = -value;
        var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
        if (sign) {
          hi = ~hi >>> 0;
          lo = ~lo >>> 0;
          if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
              hi = 0;
          }
        }
        return new LongBits(lo, hi);
      };
      LongBits.from = function from3(value) {
        if (typeof value === "number")
          return LongBits.fromNumber(value);
        if (util.isString(value)) {
          if (util.Long)
            value = util.Long.fromString(value);
          else
            return LongBits.fromNumber(parseInt(value, 10));
        }
        return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
      };
      LongBits.prototype.toNumber = function toNumber(unsigned) {
        if (!unsigned && this.hi >>> 31) {
          var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
          if (!lo)
            hi = hi + 1 >>> 0;
          return -(lo + hi * 4294967296);
        }
        return this.lo + this.hi * 4294967296;
      };
      LongBits.prototype.toLong = function toLong(unsigned) {
        return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
      };
      var charCodeAt = String.prototype.charCodeAt;
      LongBits.fromHash = function fromHash(hash) {
        if (hash === zeroHash)
          return zero;
        return new LongBits(
          (charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0,
          (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0
        );
      };
      LongBits.prototype.toHash = function toHash() {
        return String.fromCharCode(
          this.lo & 255,
          this.lo >>> 8 & 255,
          this.lo >>> 16 & 255,
          this.lo >>> 24,
          this.hi & 255,
          this.hi >>> 8 & 255,
          this.hi >>> 16 & 255,
          this.hi >>> 24
        );
      };
      LongBits.prototype.zzEncode = function zzEncode() {
        var mask = this.hi >> 31;
        this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
        this.lo = (this.lo << 1 ^ mask) >>> 0;
        return this;
      };
      LongBits.prototype.zzDecode = function zzDecode() {
        var mask = -(this.lo & 1);
        this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
        this.hi = (this.hi >>> 1 ^ mask) >>> 0;
        return this;
      };
      LongBits.prototype.length = function length2() {
        var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
        return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
      };
    }
  });

  // node_modules/protobufjs/src/util/minimal.js
  var require_minimal = __commonJS({
    "node_modules/protobufjs/src/util/minimal.js"(exports2) {
      "use strict";
      var util = exports2;
      util.asPromise = require_aspromise();
      util.base64 = require_base64();
      util.EventEmitter = require_eventemitter();
      util.float = require_float();
      util.inquire = require_inquire();
      util.utf8 = require_utf82();
      util.pool = require_pool();
      util.LongBits = require_longbits();
      util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
      util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || exports2;
      util.emptyArray = Object.freeze ? Object.freeze([]) : (
        /* istanbul ignore next */
        []
      );
      util.emptyObject = Object.freeze ? Object.freeze({}) : (
        /* istanbul ignore next */
        {}
      );
      util.isInteger = Number.isInteger || /* istanbul ignore next */
      function isInteger2(value) {
        return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
      };
      util.isString = function isString4(value) {
        return typeof value === "string" || value instanceof String;
      };
      util.isObject = function isObject3(value) {
        return value && typeof value === "object";
      };
      util.isset = /**
       * Checks if a property on a message is considered to be present.
       * @param {Object} obj Plain object or message instance
       * @param {string} prop Property name
       * @returns {boolean} `true` if considered to be present, otherwise `false`
       */
      util.isSet = function isSet(obj, prop) {
        var value = obj[prop];
        if (value != null && obj.hasOwnProperty(prop))
          return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
        return false;
      };
      util.Buffer = function() {
        try {
          var Buffer2 = util.inquire("buffer").Buffer;
          return Buffer2.prototype.utf8Write ? Buffer2 : (
            /* istanbul ignore next */
            null
          );
        } catch (e3) {
          return null;
        }
      }();
      util._Buffer_from = null;
      util._Buffer_allocUnsafe = null;
      util.newBuffer = function newBuffer(sizeOrArray) {
        return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
      };
      util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      util.Long = /* istanbul ignore next */
      util.global.dcodeIO && /* istanbul ignore next */
      util.global.dcodeIO.Long || /* istanbul ignore next */
      util.global.Long || util.inquire("long");
      util.key2Re = /^true|false|0|1$/;
      util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
      util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
      util.longToHash = function longToHash(value) {
        return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
      };
      util.longFromHash = function longFromHash(hash, unsigned) {
        var bits = util.LongBits.fromHash(hash);
        if (util.Long)
          return util.Long.fromBits(bits.lo, bits.hi, unsigned);
        return bits.toNumber(Boolean(unsigned));
      };
      function merge3(dst, src2, ifNotSet) {
        for (var keys = Object.keys(src2), i3 = 0; i3 < keys.length; ++i3)
          if (dst[keys[i3]] === void 0 || !ifNotSet)
            dst[keys[i3]] = src2[keys[i3]];
        return dst;
      }
      util.merge = merge3;
      util.lcFirst = function lcFirst(str) {
        return str.charAt(0).toLowerCase() + str.substring(1);
      };
      function newError(name5) {
        function CustomError(message, properties) {
          if (!(this instanceof CustomError))
            return new CustomError(message, properties);
          Object.defineProperty(this, "message", { get: function() {
            return message;
          } });
          if (Error.captureStackTrace)
            Error.captureStackTrace(this, CustomError);
          else
            Object.defineProperty(this, "stack", { value: new Error().stack || "" });
          if (properties)
            merge3(this, properties);
        }
        (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
        Object.defineProperty(CustomError.prototype, "name", { get: function() {
          return name5;
        } });
        CustomError.prototype.toString = function toString5() {
          return this.name + ": " + this.message;
        };
        return CustomError;
      }
      util.newError = newError;
      util.ProtocolError = newError("ProtocolError");
      util.oneOfGetter = function getOneOf(fieldNames) {
        var fieldMap = {};
        for (var i3 = 0; i3 < fieldNames.length; ++i3)
          fieldMap[fieldNames[i3]] = 1;
        return function() {
          for (var keys = Object.keys(this), i4 = keys.length - 1; i4 > -1; --i4)
            if (fieldMap[keys[i4]] === 1 && this[keys[i4]] !== void 0 && this[keys[i4]] !== null)
              return keys[i4];
        };
      };
      util.oneOfSetter = function setOneOf(fieldNames) {
        return function(name5) {
          for (var i3 = 0; i3 < fieldNames.length; ++i3)
            if (fieldNames[i3] !== name5)
              delete this[fieldNames[i3]];
        };
      };
      util.toJSONOptions = {
        longs: String,
        enums: String,
        bytes: String,
        json: true
      };
      util._configure = function() {
        var Buffer2 = util.Buffer;
        if (!Buffer2) {
          util._Buffer_from = util._Buffer_allocUnsafe = null;
          return;
        }
        util._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || /* istanbul ignore next */
        function Buffer_from(value, encoding) {
          return new Buffer2(value, encoding);
        };
        util._Buffer_allocUnsafe = Buffer2.allocUnsafe || /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
          return new Buffer2(size);
        };
      };
    }
  });

  // node_modules/protobufjs/src/writer.js
  var require_writer = __commonJS({
    "node_modules/protobufjs/src/writer.js"(exports2, module2) {
      "use strict";
      module2.exports = Writer;
      var util = require_minimal();
      var BufferWriter;
      var LongBits = util.LongBits;
      var base642 = util.base64;
      var utf8 = util.utf8;
      function Op(fn, len, val) {
        this.fn = fn;
        this.len = len;
        this.next = void 0;
        this.val = val;
      }
      function noop6() {
      }
      function State(writer) {
        this.head = writer.head;
        this.tail = writer.tail;
        this.len = writer.len;
        this.next = writer.states;
      }
      function Writer() {
        this.len = 0;
        this.head = new Op(noop6, 0, 0);
        this.tail = this.head;
        this.states = null;
      }
      var create5 = function create6() {
        return util.Buffer ? function create_buffer_setup() {
          return (Writer.create = function create_buffer() {
            return new BufferWriter();
          })();
        } : function create_array() {
          return new Writer();
        };
      };
      Writer.create = create5();
      Writer.alloc = function alloc2(size) {
        return new util.Array(size);
      };
      if (util.Array !== Array)
        Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
      Writer.prototype._push = function push(fn, len, val) {
        this.tail = this.tail.next = new Op(fn, len, val);
        this.len += len;
        return this;
      };
      function writeByte(val, buf2, pos) {
        buf2[pos] = val & 255;
      }
      function writeVarint32(val, buf2, pos) {
        while (val > 127) {
          buf2[pos++] = val & 127 | 128;
          val >>>= 7;
        }
        buf2[pos] = val;
      }
      function VarintOp(len, val) {
        this.len = len;
        this.next = void 0;
        this.val = val;
      }
      VarintOp.prototype = Object.create(Op.prototype);
      VarintOp.prototype.fn = writeVarint32;
      Writer.prototype.uint32 = function write_uint32(value) {
        this.len += (this.tail = this.tail.next = new VarintOp(
          (value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5,
          value
        )).len;
        return this;
      };
      Writer.prototype.int32 = function write_int32(value) {
        return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
      };
      Writer.prototype.sint32 = function write_sint32(value) {
        return this.uint32((value << 1 ^ value >> 31) >>> 0);
      };
      function writeVarint64(val, buf2, pos) {
        while (val.hi) {
          buf2[pos++] = val.lo & 127 | 128;
          val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
          val.hi >>>= 7;
        }
        while (val.lo > 127) {
          buf2[pos++] = val.lo & 127 | 128;
          val.lo = val.lo >>> 7;
        }
        buf2[pos++] = val.lo;
      }
      Writer.prototype.uint64 = function write_uint64(value) {
        var bits = LongBits.from(value);
        return this._push(writeVarint64, bits.length(), bits);
      };
      Writer.prototype.int64 = Writer.prototype.uint64;
      Writer.prototype.sint64 = function write_sint64(value) {
        var bits = LongBits.from(value).zzEncode();
        return this._push(writeVarint64, bits.length(), bits);
      };
      Writer.prototype.bool = function write_bool(value) {
        return this._push(writeByte, 1, value ? 1 : 0);
      };
      function writeFixed32(val, buf2, pos) {
        buf2[pos] = val & 255;
        buf2[pos + 1] = val >>> 8 & 255;
        buf2[pos + 2] = val >>> 16 & 255;
        buf2[pos + 3] = val >>> 24;
      }
      Writer.prototype.fixed32 = function write_fixed32(value) {
        return this._push(writeFixed32, 4, value >>> 0);
      };
      Writer.prototype.sfixed32 = Writer.prototype.fixed32;
      Writer.prototype.fixed64 = function write_fixed64(value) {
        var bits = LongBits.from(value);
        return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
      };
      Writer.prototype.sfixed64 = Writer.prototype.fixed64;
      Writer.prototype.float = function write_float(value) {
        return this._push(util.float.writeFloatLE, 4, value);
      };
      Writer.prototype.double = function write_double(value) {
        return this._push(util.float.writeDoubleLE, 8, value);
      };
      var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf2, pos) {
        buf2.set(val, pos);
      } : function writeBytes_for(val, buf2, pos) {
        for (var i3 = 0; i3 < val.length; ++i3)
          buf2[pos + i3] = val[i3];
      };
      Writer.prototype.bytes = function write_bytes(value) {
        var len = value.length >>> 0;
        if (!len)
          return this._push(writeByte, 1, 0);
        if (util.isString(value)) {
          var buf2 = Writer.alloc(len = base642.length(value));
          base642.decode(value, buf2, 0);
          value = buf2;
        }
        return this.uint32(len)._push(writeBytes, len, value);
      };
      Writer.prototype.string = function write_string(value) {
        var len = utf8.length(value);
        return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
      };
      Writer.prototype.fork = function fork() {
        this.states = new State(this);
        this.head = this.tail = new Op(noop6, 0, 0);
        this.len = 0;
        return this;
      };
      Writer.prototype.reset = function reset() {
        if (this.states) {
          this.head = this.states.head;
          this.tail = this.states.tail;
          this.len = this.states.len;
          this.states = this.states.next;
        } else {
          this.head = this.tail = new Op(noop6, 0, 0);
          this.len = 0;
        }
        return this;
      };
      Writer.prototype.ldelim = function ldelim() {
        var head = this.head, tail = this.tail, len = this.len;
        this.reset().uint32(len);
        if (len) {
          this.tail.next = head.next;
          this.tail = tail;
          this.len += len;
        }
        return this;
      };
      Writer.prototype.finish = function finish() {
        var head = this.head.next, buf2 = this.constructor.alloc(this.len), pos = 0;
        while (head) {
          head.fn(head.val, buf2, pos);
          pos += head.len;
          head = head.next;
        }
        return buf2;
      };
      Writer._configure = function(BufferWriter_) {
        BufferWriter = BufferWriter_;
        Writer.create = create5();
        BufferWriter._configure();
      };
    }
  });

  // node_modules/protobufjs/src/writer_buffer.js
  var require_writer_buffer = __commonJS({
    "node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
      "use strict";
      module2.exports = BufferWriter;
      var Writer = require_writer();
      (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
      var util = require_minimal();
      function BufferWriter() {
        Writer.call(this);
      }
      BufferWriter._configure = function() {
        BufferWriter.alloc = util._Buffer_allocUnsafe;
        BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf2, pos) {
          buf2.set(val, pos);
        } : function writeBytesBuffer_copy(val, buf2, pos) {
          if (val.copy)
            val.copy(buf2, pos, 0, val.length);
          else
            for (var i3 = 0; i3 < val.length; )
              buf2[pos++] = val[i3++];
        };
      };
      BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
        if (util.isString(value))
          value = util._Buffer_from(value, "base64");
        var len = value.length >>> 0;
        this.uint32(len);
        if (len)
          this._push(BufferWriter.writeBytesBuffer, len, value);
        return this;
      };
      function writeStringBuffer(val, buf2, pos) {
        if (val.length < 40)
          util.utf8.write(val, buf2, pos);
        else if (buf2.utf8Write)
          buf2.utf8Write(val, pos);
        else
          buf2.write(val, pos);
      }
      BufferWriter.prototype.string = function write_string_buffer(value) {
        var len = util.Buffer.byteLength(value);
        this.uint32(len);
        if (len)
          this._push(writeStringBuffer, len, value);
        return this;
      };
      BufferWriter._configure();
    }
  });

  // node_modules/protobufjs/src/reader.js
  var require_reader = __commonJS({
    "node_modules/protobufjs/src/reader.js"(exports2, module2) {
      "use strict";
      module2.exports = Reader;
      var util = require_minimal();
      var BufferReader;
      var LongBits = util.LongBits;
      var utf8 = util.utf8;
      function indexOutOfRange(reader, writeLength) {
        return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
      }
      function Reader(buffer2) {
        this.buf = buffer2;
        this.pos = 0;
        this.len = buffer2.length;
      }
      var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer2) {
        if (buffer2 instanceof Uint8Array || Array.isArray(buffer2))
          return new Reader(buffer2);
        throw Error("illegal buffer");
      } : function create_array2(buffer2) {
        if (Array.isArray(buffer2))
          return new Reader(buffer2);
        throw Error("illegal buffer");
      };
      var create5 = function create6() {
        return util.Buffer ? function create_buffer_setup(buffer2) {
          return (Reader.create = function create_buffer(buffer3) {
            return util.Buffer.isBuffer(buffer3) ? new BufferReader(buffer3) : create_array(buffer3);
          })(buffer2);
        } : create_array;
      };
      Reader.create = create5();
      Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */
      util.Array.prototype.slice;
      Reader.prototype.uint32 = function read_uint32_setup() {
        var value = 4294967295;
        return function read_uint32() {
          value = (this.buf[this.pos] & 127) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
          }
          return value;
        };
      }();
      Reader.prototype.int32 = function read_int32() {
        return this.uint32() | 0;
      };
      Reader.prototype.sint32 = function read_sint32() {
        var value = this.uint32();
        return value >>> 1 ^ -(value & 1) | 0;
      };
      function readLongVarint() {
        var bits = new LongBits(0, 0);
        var i3 = 0;
        if (this.len - this.pos > 4) {
          for (; i3 < 4; ++i3) {
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i3 * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
              return bits;
          }
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
          i3 = 0;
        } else {
          for (; i3 < 3; ++i3) {
            if (this.pos >= this.len)
              throw indexOutOfRange(this);
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i3 * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
              return bits;
          }
          bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i3 * 7) >>> 0;
          return bits;
        }
        if (this.len - this.pos > 4) {
          for (; i3 < 5; ++i3) {
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i3 * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
              return bits;
          }
        } else {
          for (; i3 < 5; ++i3) {
            if (this.pos >= this.len)
              throw indexOutOfRange(this);
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i3 * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
              return bits;
          }
        }
        throw Error("invalid varint encoding");
      }
      Reader.prototype.bool = function read_bool() {
        return this.uint32() !== 0;
      };
      function readFixed32_end(buf2, end) {
        return (buf2[end - 4] | buf2[end - 3] << 8 | buf2[end - 2] << 16 | buf2[end - 1] << 24) >>> 0;
      }
      Reader.prototype.fixed32 = function read_fixed32() {
        if (this.pos + 4 > this.len)
          throw indexOutOfRange(this, 4);
        return readFixed32_end(this.buf, this.pos += 4);
      };
      Reader.prototype.sfixed32 = function read_sfixed32() {
        if (this.pos + 4 > this.len)
          throw indexOutOfRange(this, 4);
        return readFixed32_end(this.buf, this.pos += 4) | 0;
      };
      function readFixed64() {
        if (this.pos + 8 > this.len)
          throw indexOutOfRange(this, 8);
        return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
      }
      Reader.prototype.float = function read_float() {
        if (this.pos + 4 > this.len)
          throw indexOutOfRange(this, 4);
        var value = util.float.readFloatLE(this.buf, this.pos);
        this.pos += 4;
        return value;
      };
      Reader.prototype.double = function read_double() {
        if (this.pos + 8 > this.len)
          throw indexOutOfRange(this, 4);
        var value = util.float.readDoubleLE(this.buf, this.pos);
        this.pos += 8;
        return value;
      };
      Reader.prototype.bytes = function read_bytes() {
        var length2 = this.uint32(), start = this.pos, end = this.pos + length2;
        if (end > this.len)
          throw indexOutOfRange(this, length2);
        this.pos += length2;
        if (Array.isArray(this.buf))
          return this.buf.slice(start, end);
        return start === end ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
      };
      Reader.prototype.string = function read_string() {
        var bytes = this.bytes();
        return utf8.read(bytes, 0, bytes.length);
      };
      Reader.prototype.skip = function skip(length2) {
        if (typeof length2 === "number") {
          if (this.pos + length2 > this.len)
            throw indexOutOfRange(this, length2);
          this.pos += length2;
        } else {
          do {
            if (this.pos >= this.len)
              throw indexOutOfRange(this);
          } while (this.buf[this.pos++] & 128);
        }
        return this;
      };
      Reader.prototype.skipType = function(wireType) {
        switch (wireType) {
          case 0:
            this.skip();
            break;
          case 1:
            this.skip(8);
            break;
          case 2:
            this.skip(this.uint32());
            break;
          case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
              this.skipType(wireType);
            }
            break;
          case 5:
            this.skip(4);
            break;
          default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
        }
        return this;
      };
      Reader._configure = function(BufferReader_) {
        BufferReader = BufferReader_;
        Reader.create = create5();
        BufferReader._configure();
        var fn = util.Long ? "toLong" : (
          /* istanbul ignore next */
          "toNumber"
        );
        util.merge(Reader.prototype, {
          int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
          },
          uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
          },
          sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
          },
          fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
          },
          sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
          }
        });
      };
    }
  });

  // node_modules/protobufjs/src/reader_buffer.js
  var require_reader_buffer = __commonJS({
    "node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
      "use strict";
      module2.exports = BufferReader;
      var Reader = require_reader();
      (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
      var util = require_minimal();
      function BufferReader(buffer2) {
        Reader.call(this, buffer2);
      }
      BufferReader._configure = function() {
        if (util.Buffer)
          BufferReader.prototype._slice = util.Buffer.prototype.slice;
      };
      BufferReader.prototype.string = function read_string_buffer() {
        var len = this.uint32();
        return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
      };
      BufferReader._configure();
    }
  });

  // node_modules/protobufjs/src/rpc/service.js
  var require_service = __commonJS({
    "node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
      "use strict";
      module2.exports = Service;
      var util = require_minimal();
      (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
      function Service(rpcImpl, requestDelimited, responseDelimited) {
        if (typeof rpcImpl !== "function")
          throw TypeError("rpcImpl must be a function");
        util.EventEmitter.call(this);
        this.rpcImpl = rpcImpl;
        this.requestDelimited = Boolean(requestDelimited);
        this.responseDelimited = Boolean(responseDelimited);
      }
      Service.prototype.rpcCall = function rpcCall(method4, requestCtor, responseCtor, request, callback) {
        if (!request)
          throw TypeError("request must be specified");
        var self2 = this;
        if (!callback)
          return util.asPromise(rpcCall, self2, method4, requestCtor, responseCtor, request);
        if (!self2.rpcImpl) {
          setTimeout(function() {
            callback(Error("already ended"));
          }, 0);
          return void 0;
        }
        try {
          return self2.rpcImpl(
            method4,
            requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {
              if (err) {
                self2.emit("error", err, method4);
                return callback(err);
              }
              if (response === null) {
                self2.end(
                  /* endedByRPC */
                  true
                );
                return void 0;
              }
              if (!(response instanceof responseCtor)) {
                try {
                  response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
                } catch (err2) {
                  self2.emit("error", err2, method4);
                  return callback(err2);
                }
              }
              self2.emit("data", response, method4);
              return callback(null, response);
            }
          );
        } catch (err) {
          self2.emit("error", err, method4);
          setTimeout(function() {
            callback(err);
          }, 0);
          return void 0;
        }
      };
      Service.prototype.end = function end(endedByRPC) {
        if (this.rpcImpl) {
          if (!endedByRPC)
            this.rpcImpl(null, null, null);
          this.rpcImpl = null;
          this.emit("end").off();
        }
        return this;
      };
    }
  });

  // node_modules/protobufjs/src/rpc.js
  var require_rpc = __commonJS({
    "node_modules/protobufjs/src/rpc.js"(exports2) {
      "use strict";
      var rpc = exports2;
      rpc.Service = require_service();
    }
  });

  // node_modules/protobufjs/src/roots.js
  var require_roots = __commonJS({
    "node_modules/protobufjs/src/roots.js"(exports2, module2) {
      "use strict";
      module2.exports = {};
    }
  });

  // node_modules/protobufjs/src/index-minimal.js
  var require_index_minimal = __commonJS({
    "node_modules/protobufjs/src/index-minimal.js"(exports2) {
      "use strict";
      var protobuf = exports2;
      protobuf.build = "minimal";
      protobuf.Writer = require_writer();
      protobuf.BufferWriter = require_writer_buffer();
      protobuf.Reader = require_reader();
      protobuf.BufferReader = require_reader_buffer();
      protobuf.util = require_minimal();
      protobuf.rpc = require_rpc();
      protobuf.roots = require_roots();
      protobuf.configure = configure;
      function configure() {
        protobuf.util._configure();
        protobuf.Writer._configure(protobuf.BufferWriter);
        protobuf.Reader._configure(protobuf.BufferReader);
      }
      configure();
    }
  });

  // node_modules/protobufjs/minimal.js
  var require_minimal2 = __commonJS({
    "node_modules/protobufjs/minimal.js"(exports2, module2) {
      "use strict";
      module2.exports = require_index_minimal();
    }
  });

  // node_modules/multiformats/esm/src/codecs/raw.js
  var raw_exports = {};
  __export(raw_exports, {
    code: () => code3,
    decode: () => decode8,
    encode: () => encode8,
    name: () => name2
  });
  var name2, code3, encode8, decode8;
  var init_raw = __esm({
    "node_modules/multiformats/esm/src/codecs/raw.js"() {
      init_bytes();
      name2 = "raw";
      code3 = 85;
      encode8 = (node) => coerce(node);
      decode8 = (data) => coerce(data);
    }
  });

  // node_modules/it-all/index.js
  var require_it_all = __commonJS({
    "node_modules/it-all/index.js"(exports2, module2) {
      "use strict";
      var all5 = async (source) => {
        const arr = [];
        for await (const entry of source) {
          arr.push(entry);
        }
        return arr;
      };
      module2.exports = all5;
    }
  });

  // node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/base64-js/index.js"(exports2) {
      "use strict";
      exports2.byteLength = byteLength;
      exports2.toByteArray = toByteArray;
      exports2.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code6 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i3 = 0, len = code6.length; i3 < len; ++i3) {
        lookup[i3] = code6[i3];
        revLookup[code6.charCodeAt(i3)] = i3;
      }
      var i3;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i4;
        for (i4 = 0; i4 < len2; i4 += 4) {
          tmp = revLookup[b64.charCodeAt(i4)] << 18 | revLookup[b64.charCodeAt(i4 + 1)] << 12 | revLookup[b64.charCodeAt(i4 + 2)] << 6 | revLookup[b64.charCodeAt(i4 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i4)] << 2 | revLookup[b64.charCodeAt(i4 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i4)] << 10 | revLookup[b64.charCodeAt(i4 + 1)] << 4 | revLookup[b64.charCodeAt(i4 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i4 = start; i4 < end; i4 += 3) {
          tmp = (uint8[i4] << 16 & 16711680) + (uint8[i4 + 1] << 8 & 65280) + (uint8[i4 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i4 = 0, len22 = len2 - extraBytes; i4 < len22; i4 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i4, i4 + maxChunkLength > len22 ? len22 : i4 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/ieee754/index.js"(exports2) {
      exports2.read = function(buffer2, offset3, isLE, mLen, nBytes) {
        var e3, m2;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i3 = isLE ? nBytes - 1 : 0;
        var d2 = isLE ? -1 : 1;
        var s2 = buffer2[offset3 + i3];
        i3 += d2;
        e3 = s2 & (1 << -nBits) - 1;
        s2 >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e3 = e3 * 256 + buffer2[offset3 + i3], i3 += d2, nBits -= 8) {
        }
        m2 = e3 & (1 << -nBits) - 1;
        e3 >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m2 = m2 * 256 + buffer2[offset3 + i3], i3 += d2, nBits -= 8) {
        }
        if (e3 === 0) {
          e3 = 1 - eBias;
        } else if (e3 === eMax) {
          return m2 ? NaN : (s2 ? -1 : 1) * Infinity;
        } else {
          m2 = m2 + Math.pow(2, mLen);
          e3 = e3 - eBias;
        }
        return (s2 ? -1 : 1) * m2 * Math.pow(2, e3 - mLen);
      };
      exports2.write = function(buffer2, value, offset3, isLE, mLen, nBytes) {
        var e3, m2, c2;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i3 = isLE ? 0 : nBytes - 1;
        var d2 = isLE ? 1 : -1;
        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m2 = isNaN(value) ? 1 : 0;
          e3 = eMax;
        } else {
          e3 = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c2 = Math.pow(2, -e3)) < 1) {
            e3--;
            c2 *= 2;
          }
          if (e3 + eBias >= 1) {
            value += rt / c2;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c2 >= 2) {
            e3++;
            c2 /= 2;
          }
          if (e3 + eBias >= eMax) {
            m2 = 0;
            e3 = eMax;
          } else if (e3 + eBias >= 1) {
            m2 = (value * c2 - 1) * Math.pow(2, mLen);
            e3 = e3 + eBias;
          } else {
            m2 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e3 = 0;
          }
        }
        for (; mLen >= 8; buffer2[offset3 + i3] = m2 & 255, i3 += d2, m2 /= 256, mLen -= 8) {
        }
        e3 = e3 << mLen | m2;
        eLen += mLen;
        for (; eLen > 0; buffer2[offset3 + i3] = e3 & 255, i3 += d2, e3 /= 256, eLen -= 8) {
        }
        buffer2[offset3 + i3 - d2] |= s2 * 128;
      };
    }
  });

  // node_modules/bl/node_modules/buffer/index.js
  var require_buffer2 = __commonJS({
    "node_modules/bl/node_modules/buffer/index.js"(exports2) {
      "use strict";
      var base642 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports2.Buffer = Buffer2;
      exports2.SlowBuffer = SlowBuffer;
      exports2.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports2.kMaxLength = K_MAX_LENGTH;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e3) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length2) {
        if (length2 > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length2 + '" is invalid for option "size"');
        }
        const buf2 = new Uint8Array(length2);
        Object.setPrototypeOf(buf2, Buffer2.prototype);
        return buf2;
      }
      function Buffer2(arg, encodingOrOffset, length2) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe2(arg);
        }
        return from3(arg, encodingOrOffset, length2);
      }
      Buffer2.poolSize = 8192;
      function from3(value, encodingOrOffset, length2) {
        if (typeof value === "string") {
          return fromString4(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length2);
        }
        if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length2);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length2);
        }
        const b2 = fromObject(value);
        if (b2)
          return b2;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length2);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length2) {
        return from3(value, encodingOrOffset, length2);
      };
      Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer2, Uint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc2(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc2(size, fill, encoding);
      };
      function allocUnsafe2(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe2(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe2(size);
      };
      function fromString4(string4, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length2 = byteLength(string4, encoding) | 0;
        let buf2 = createBuffer(length2);
        const actual = buf2.write(string4, encoding);
        if (actual !== length2) {
          buf2 = buf2.slice(0, actual);
        }
        return buf2;
      }
      function fromArrayLike(array4) {
        const length2 = array4.length < 0 ? 0 : checked(array4.length) | 0;
        const buf2 = createBuffer(length2);
        for (let i3 = 0; i3 < length2; i3 += 1) {
          buf2[i3] = array4[i3] & 255;
        }
        return buf2;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy2 = new Uint8Array(arrayView);
          return fromArrayBuffer(copy2.buffer, copy2.byteOffset, copy2.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array4, byteOffset, length2) {
        if (byteOffset < 0 || array4.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array4.byteLength < byteOffset + (length2 || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf2;
        if (byteOffset === void 0 && length2 === void 0) {
          buf2 = new Uint8Array(array4);
        } else if (length2 === void 0) {
          buf2 = new Uint8Array(array4, byteOffset);
        } else {
          buf2 = new Uint8Array(array4, byteOffset, length2);
        }
        Object.setPrototypeOf(buf2, Buffer2.prototype);
        return buf2;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf2 = createBuffer(len);
          if (buf2.length === 0) {
            return buf2;
          }
          obj.copy(buf2, 0, 0, len);
          return buf2;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length2) {
        if (length2 >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length2 | 0;
      }
      function SlowBuffer(length2) {
        if (+length2 != length2) {
          length2 = 0;
        }
        return Buffer2.alloc(+length2);
      }
      Buffer2.isBuffer = function isBuffer4(b2) {
        return b2 != null && b2._isBuffer === true && b2 !== Buffer2.prototype;
      };
      Buffer2.compare = function compare2(a2, b2) {
        if (isInstance(a2, Uint8Array))
          a2 = Buffer2.from(a2, a2.offset, a2.byteLength);
        if (isInstance(b2, Uint8Array))
          b2 = Buffer2.from(b2, b2.offset, b2.byteLength);
        if (!Buffer2.isBuffer(a2) || !Buffer2.isBuffer(b2)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a2 === b2)
          return 0;
        let x = a2.length;
        let y2 = b2.length;
        for (let i3 = 0, len = Math.min(x, y2); i3 < len; ++i3) {
          if (a2[i3] !== b2[i3]) {
            x = a2[i3];
            y2 = b2[i3];
            break;
          }
        }
        if (x < y2)
          return -1;
        if (y2 < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat3(list, length2) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i3;
        if (length2 === void 0) {
          length2 = 0;
          for (i3 = 0; i3 < list.length; ++i3) {
            length2 += list[i3].length;
          }
        }
        const buffer2 = Buffer2.allocUnsafe(length2);
        let pos = 0;
        for (i3 = 0; i3 < list.length; ++i3) {
          let buf2 = list[i3];
          if (isInstance(buf2, Uint8Array)) {
            if (pos + buf2.length > buffer2.length) {
              if (!Buffer2.isBuffer(buf2))
                buf2 = Buffer2.from(buf2);
              buf2.copy(buffer2, pos);
            } else {
              Uint8Array.prototype.set.call(
                buffer2,
                buf2,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf2)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf2.copy(buffer2, pos);
          }
          pos += buf2.length;
        }
        return buffer2;
      };
      function byteLength(string4, encoding) {
        if (Buffer2.isBuffer(string4)) {
          return string4.length;
        }
        if (ArrayBuffer.isView(string4) || isInstance(string4, ArrayBuffer)) {
          return string4.byteLength;
        }
        if (typeof string4 !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string4
          );
        }
        const len = string4.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes2(string4).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string4).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes2(string4).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice2(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap2(b2, n3, m2) {
        const i3 = b2[n3];
        b2[n3] = b2[m2];
        b2[m2] = i3;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i3 = 0; i3 < len; i3 += 2) {
          swap2(this, i3, i3 + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i3 = 0; i3 < len; i3 += 4) {
          swap2(this, i3, i3 + 3);
          swap2(this, i3 + 1, i3 + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i3 = 0; i3 < len; i3 += 8) {
          swap2(this, i3, i3 + 7);
          swap2(this, i3 + 1, i3 + 6);
          swap2(this, i3 + 2, i3 + 5);
          swap2(this, i3 + 3, i3 + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString5() {
        const length2 = this.length;
        if (length2 === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice2(this, 0, length2);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals4(b2) {
        if (!Buffer2.isBuffer(b2))
          throw new TypeError("Argument must be a Buffer");
        if (this === b2)
          return true;
        return Buffer2.compare(this, b2) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = "";
        const max = exports2.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y2 = end - start;
        const len = Math.min(x, y2);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i3 = 0; i3 < len; ++i3) {
          if (thisCopy[i3] !== targetCopy[i3]) {
            x = thisCopy[i3];
            y2 = targetCopy[i3];
            break;
          }
        }
        if (x < y2)
          return -1;
        if (y2 < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
        if (buffer2.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer2.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer2.length + byteOffset;
        if (byteOffset >= buffer2.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer2.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read2(buf2, i4) {
          if (indexSize === 1) {
            return buf2[i4];
          } else {
            return buf2.readUInt16BE(i4 * indexSize);
          }
        }
        let i3;
        if (dir) {
          let foundIndex = -1;
          for (i3 = byteOffset; i3 < arrLength; i3++) {
            if (read2(arr, i3) === read2(val, foundIndex === -1 ? 0 : i3 - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i3;
              if (i3 - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i3 -= i3 - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i3 = byteOffset; i3 >= 0; i3--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read2(arr, i3 + j) !== read2(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i3;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes2(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf2, string4, offset3, length2) {
        offset3 = Number(offset3) || 0;
        const remaining = buf2.length - offset3;
        if (!length2) {
          length2 = remaining;
        } else {
          length2 = Number(length2);
          if (length2 > remaining) {
            length2 = remaining;
          }
        }
        const strLen = string4.length;
        if (length2 > strLen / 2) {
          length2 = strLen / 2;
        }
        let i3;
        for (i3 = 0; i3 < length2; ++i3) {
          const parsed = parseInt(string4.substr(i3 * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i3;
          buf2[offset3 + i3] = parsed;
        }
        return i3;
      }
      function utf8Write(buf2, string4, offset3, length2) {
        return blitBuffer(utf8ToBytes2(string4, buf2.length - offset3), buf2, offset3, length2);
      }
      function asciiWrite(buf2, string4, offset3, length2) {
        return blitBuffer(asciiToBytes(string4), buf2, offset3, length2);
      }
      function base64Write(buf2, string4, offset3, length2) {
        return blitBuffer(base64ToBytes(string4), buf2, offset3, length2);
      }
      function ucs2Write(buf2, string4, offset3, length2) {
        return blitBuffer(utf16leToBytes(string4, buf2.length - offset3), buf2, offset3, length2);
      }
      Buffer2.prototype.write = function write(string4, offset3, length2, encoding) {
        if (offset3 === void 0) {
          encoding = "utf8";
          length2 = this.length;
          offset3 = 0;
        } else if (length2 === void 0 && typeof offset3 === "string") {
          encoding = offset3;
          length2 = this.length;
          offset3 = 0;
        } else if (isFinite(offset3)) {
          offset3 = offset3 >>> 0;
          if (isFinite(length2)) {
            length2 = length2 >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length2;
            length2 = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset3;
        if (length2 === void 0 || length2 > remaining)
          length2 = remaining;
        if (string4.length > 0 && (length2 < 0 || offset3 < 0) || offset3 > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string4, offset3, length2);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string4, offset3, length2);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string4, offset3, length2);
            case "base64":
              return base64Write(this, string4, offset3, length2);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string4, offset3, length2);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON2() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf2, start, end) {
        if (start === 0 && end === buf2.length) {
          return base642.fromByteArray(buf2);
        } else {
          return base642.fromByteArray(buf2.slice(start, end));
        }
      }
      function utf8Slice2(buf2, start, end) {
        end = Math.min(buf2.length, end);
        const res = [];
        let i3 = start;
        while (i3 < end) {
          const firstByte = buf2[i3];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i3 + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf2[i3 + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf2[i3 + 1];
                thirdByte = buf2[i3 + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf2[i3 + 1];
                thirdByte = buf2[i3 + 2];
                fourthByte = buf2[i3 + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i3 += bytesPerSequence;
        }
        return decodeCodePointsArray2(res);
      }
      var MAX_ARGUMENTS_LENGTH2 = 4096;
      function decodeCodePointsArray2(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH2) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i3 = 0;
        while (i3 < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i3, i3 += MAX_ARGUMENTS_LENGTH2)
          );
        }
        return res;
      }
      function asciiSlice(buf2, start, end) {
        let ret = "";
        end = Math.min(buf2.length, end);
        for (let i3 = start; i3 < end; ++i3) {
          ret += String.fromCharCode(buf2[i3] & 127);
        }
        return ret;
      }
      function latin1Slice(buf2, start, end) {
        let ret = "";
        end = Math.min(buf2.length, end);
        for (let i3 = start; i3 < end; ++i3) {
          ret += String.fromCharCode(buf2[i3]);
        }
        return ret;
      }
      function hexSlice(buf2, start, end) {
        const len = buf2.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i3 = start; i3 < end; ++i3) {
          out += hexSliceLookupTable[buf2[i3]];
        }
        return out;
      }
      function utf16leSlice(buf2, start, end) {
        const bytes = buf2.slice(start, end);
        let res = "";
        for (let i3 = 0; i3 < bytes.length - 1; i3 += 2) {
          res += String.fromCharCode(bytes[i3] + bytes[i3 + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice2(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset3, ext, length2) {
        if (offset3 % 1 !== 0 || offset3 < 0)
          throw new RangeError("offset is not uint");
        if (offset3 + ext > length2)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset3, byteLength2, noAssert) {
        offset3 = offset3 >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset3, byteLength2, this.length);
        let val = this[offset3];
        let mul = 1;
        let i3 = 0;
        while (++i3 < byteLength2 && (mul *= 256)) {
          val += this[offset3 + i3] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset3, byteLength2, noAssert) {
        offset3 = offset3 >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset3, byteLength2, this.length);
        }
        let val = this[offset3 + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset3 + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 1, this.length);
        return this[offset3];
      };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 2, this.length);
        return this[offset3] | this[offset3 + 1] << 8;
      };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 2, this.length);
        return this[offset3] << 8 | this[offset3 + 1];
      };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 4, this.length);
        return (this[offset3] | this[offset3 + 1] << 8 | this[offset3 + 2] << 16) + this[offset3 + 3] * 16777216;
      };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 4, this.length);
        return this[offset3] * 16777216 + (this[offset3 + 1] << 16 | this[offset3 + 2] << 8 | this[offset3 + 3]);
      };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset3) {
        offset3 = offset3 >>> 0;
        validateNumber(offset3, "offset");
        const first = this[offset3];
        const last3 = this[offset3 + 7];
        if (first === void 0 || last3 === void 0) {
          boundsError(offset3, this.length - 8);
        }
        const lo = first + this[++offset3] * 2 ** 8 + this[++offset3] * 2 ** 16 + this[++offset3] * 2 ** 24;
        const hi = this[++offset3] + this[++offset3] * 2 ** 8 + this[++offset3] * 2 ** 16 + last3 * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset3) {
        offset3 = offset3 >>> 0;
        validateNumber(offset3, "offset");
        const first = this[offset3];
        const last3 = this[offset3 + 7];
        if (first === void 0 || last3 === void 0) {
          boundsError(offset3, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset3] * 2 ** 16 + this[++offset3] * 2 ** 8 + this[++offset3];
        const lo = this[++offset3] * 2 ** 24 + this[++offset3] * 2 ** 16 + this[++offset3] * 2 ** 8 + last3;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer2.prototype.readIntLE = function readIntLE(offset3, byteLength2, noAssert) {
        offset3 = offset3 >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset3, byteLength2, this.length);
        let val = this[offset3];
        let mul = 1;
        let i3 = 0;
        while (++i3 < byteLength2 && (mul *= 256)) {
          val += this[offset3 + i3] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset3, byteLength2, noAssert) {
        offset3 = offset3 >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset3, byteLength2, this.length);
        let i3 = byteLength2;
        let mul = 1;
        let val = this[offset3 + --i3];
        while (i3 > 0 && (mul *= 256)) {
          val += this[offset3 + --i3] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 1, this.length);
        if (!(this[offset3] & 128))
          return this[offset3];
        return (255 - this[offset3] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 2, this.length);
        const val = this[offset3] | this[offset3 + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 2, this.length);
        const val = this[offset3 + 1] | this[offset3] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 4, this.length);
        return this[offset3] | this[offset3 + 1] << 8 | this[offset3 + 2] << 16 | this[offset3 + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 4, this.length);
        return this[offset3] << 24 | this[offset3 + 1] << 16 | this[offset3 + 2] << 8 | this[offset3 + 3];
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset3) {
        offset3 = offset3 >>> 0;
        validateNumber(offset3, "offset");
        const first = this[offset3];
        const last3 = this[offset3 + 7];
        if (first === void 0 || last3 === void 0) {
          boundsError(offset3, this.length - 8);
        }
        const val = this[offset3 + 4] + this[offset3 + 5] * 2 ** 8 + this[offset3 + 6] * 2 ** 16 + (last3 << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset3] * 2 ** 8 + this[++offset3] * 2 ** 16 + this[++offset3] * 2 ** 24);
      });
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset3) {
        offset3 = offset3 >>> 0;
        validateNumber(offset3, "offset");
        const first = this[offset3];
        const last3 = this[offset3 + 7];
        if (first === void 0 || last3 === void 0) {
          boundsError(offset3, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset3] * 2 ** 16 + this[++offset3] * 2 ** 8 + this[++offset3];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset3] * 2 ** 24 + this[++offset3] * 2 ** 16 + this[++offset3] * 2 ** 8 + last3);
      });
      Buffer2.prototype.readFloatLE = function readFloatLE(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 4, this.length);
        return ieee754.read(this, offset3, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 4, this.length);
        return ieee754.read(this, offset3, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 8, this.length);
        return ieee754.read(this, offset3, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset3, noAssert) {
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkOffset(offset3, 8, this.length);
        return ieee754.read(this, offset3, false, 52, 8);
      };
      function checkInt(buf2, value, offset3, ext, max, min) {
        if (!Buffer2.isBuffer(buf2))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset3 + ext > buf2.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset3, byteLength2, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset3, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i3 = 0;
        this[offset3] = value & 255;
        while (++i3 < byteLength2 && (mul *= 256)) {
          this[offset3 + i3] = value / mul & 255;
        }
        return offset3 + byteLength2;
      };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset3, byteLength2, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset3, byteLength2, maxBytes, 0);
        }
        let i3 = byteLength2 - 1;
        let mul = 1;
        this[offset3 + i3] = value & 255;
        while (--i3 >= 0 && (mul *= 256)) {
          this[offset3 + i3] = value / mul & 255;
        }
        return offset3 + byteLength2;
      };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset3, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset3, 1, 255, 0);
        this[offset3] = value & 255;
        return offset3 + 1;
      };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset3, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset3, 2, 65535, 0);
        this[offset3] = value & 255;
        this[offset3 + 1] = value >>> 8;
        return offset3 + 2;
      };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset3, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset3, 2, 65535, 0);
        this[offset3] = value >>> 8;
        this[offset3 + 1] = value & 255;
        return offset3 + 2;
      };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset3, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset3, 4, 4294967295, 0);
        this[offset3 + 3] = value >>> 24;
        this[offset3 + 2] = value >>> 16;
        this[offset3 + 1] = value >>> 8;
        this[offset3] = value & 255;
        return offset3 + 4;
      };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset3, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset3, 4, 4294967295, 0);
        this[offset3] = value >>> 24;
        this[offset3 + 1] = value >>> 16;
        this[offset3 + 2] = value >>> 8;
        this[offset3 + 3] = value & 255;
        return offset3 + 4;
      };
      function wrtBigUInt64LE(buf2, value, offset3, min, max) {
        checkIntBI(value, min, max, buf2, offset3, 7);
        let lo = Number(value & BigInt(4294967295));
        buf2[offset3++] = lo;
        lo = lo >> 8;
        buf2[offset3++] = lo;
        lo = lo >> 8;
        buf2[offset3++] = lo;
        lo = lo >> 8;
        buf2[offset3++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf2[offset3++] = hi;
        hi = hi >> 8;
        buf2[offset3++] = hi;
        hi = hi >> 8;
        buf2[offset3++] = hi;
        hi = hi >> 8;
        buf2[offset3++] = hi;
        return offset3;
      }
      function wrtBigUInt64BE(buf2, value, offset3, min, max) {
        checkIntBI(value, min, max, buf2, offset3, 7);
        let lo = Number(value & BigInt(4294967295));
        buf2[offset3 + 7] = lo;
        lo = lo >> 8;
        buf2[offset3 + 6] = lo;
        lo = lo >> 8;
        buf2[offset3 + 5] = lo;
        lo = lo >> 8;
        buf2[offset3 + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf2[offset3 + 3] = hi;
        hi = hi >> 8;
        buf2[offset3 + 2] = hi;
        hi = hi >> 8;
        buf2[offset3 + 1] = hi;
        hi = hi >> 8;
        buf2[offset3] = hi;
        return offset3 + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset3 = 0) {
        return wrtBigUInt64LE(this, value, offset3, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset3 = 0) {
        return wrtBigUInt64BE(this, value, offset3, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset3, byteLength2, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset3, byteLength2, limit - 1, -limit);
        }
        let i3 = 0;
        let mul = 1;
        let sub = 0;
        this[offset3] = value & 255;
        while (++i3 < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset3 + i3 - 1] !== 0) {
            sub = 1;
          }
          this[offset3 + i3] = (value / mul >> 0) - sub & 255;
        }
        return offset3 + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset3, byteLength2, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset3, byteLength2, limit - 1, -limit);
        }
        let i3 = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset3 + i3] = value & 255;
        while (--i3 >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset3 + i3 + 1] !== 0) {
            sub = 1;
          }
          this[offset3 + i3] = (value / mul >> 0) - sub & 255;
        }
        return offset3 + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset3, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset3, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset3] = value & 255;
        return offset3 + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset3, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset3, 2, 32767, -32768);
        this[offset3] = value & 255;
        this[offset3 + 1] = value >>> 8;
        return offset3 + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset3, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset3, 2, 32767, -32768);
        this[offset3] = value >>> 8;
        this[offset3 + 1] = value & 255;
        return offset3 + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset3, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset3, 4, 2147483647, -2147483648);
        this[offset3] = value & 255;
        this[offset3 + 1] = value >>> 8;
        this[offset3 + 2] = value >>> 16;
        this[offset3 + 3] = value >>> 24;
        return offset3 + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset3, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset3, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset3] = value >>> 24;
        this[offset3 + 1] = value >>> 16;
        this[offset3 + 2] = value >>> 8;
        this[offset3 + 3] = value & 255;
        return offset3 + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset3 = 0) {
        return wrtBigUInt64LE(this, value, offset3, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset3 = 0) {
        return wrtBigUInt64BE(this, value, offset3, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf2, value, offset3, ext, max, min) {
        if (offset3 + ext > buf2.length)
          throw new RangeError("Index out of range");
        if (offset3 < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf2, value, offset3, littleEndian, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert) {
          checkIEEE754(buf2, value, offset3, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf2, value, offset3, littleEndian, 23, 4);
        return offset3 + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset3, noAssert) {
        return writeFloat(this, value, offset3, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset3, noAssert) {
        return writeFloat(this, value, offset3, false, noAssert);
      };
      function writeDouble(buf2, value, offset3, littleEndian, noAssert) {
        value = +value;
        offset3 = offset3 >>> 0;
        if (!noAssert) {
          checkIEEE754(buf2, value, offset3, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf2, value, offset3, littleEndian, 52, 8);
        return offset3 + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset3, noAssert) {
        return writeDouble(this, value, offset3, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset3, noAssert) {
        return writeDouble(this, value, offset3, false, noAssert);
      };
      Buffer2.prototype.copy = function copy2(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code6 = val.charCodeAt(0);
            if (encoding === "utf8" && code6 < 128 || encoding === "latin1") {
              val = code6;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i3;
        if (typeof val === "number") {
          for (i3 = start; i3 < end; ++i3) {
            this[i3] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i3 = 0; i3 < end - start; ++i3) {
            this[i3 + start] = bytes[i3 % len];
          }
        }
        return this;
      };
      var errors = {};
      function E2(sym, getMessage, Base2) {
        errors[sym] = class NodeError extends Base2 {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E2(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name5) {
          if (name5) {
            return `${name5} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E2(
        "ERR_INVALID_ARG_TYPE",
        function(name5, actual) {
          return `The "${name5}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E2(
        "ERR_OUT_OF_RANGE",
        function(str, range3, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range3}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i3 = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i3 >= start + 4; i3 -= 3) {
          res = `_${val.slice(i3 - 3, i3)}${res}`;
        }
        return `${val.slice(0, i3)}${res}`;
      }
      function checkBounds(buf2, offset3, byteLength2) {
        validateNumber(offset3, "offset");
        if (buf2[offset3] === void 0 || buf2[offset3 + byteLength2] === void 0) {
          boundsError(offset3, buf2.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf2, offset3, byteLength2) {
        if (value > max || value < min) {
          const n3 = typeof min === "bigint" ? "n" : "";
          let range3;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range3 = `>= 0${n3} and < 2${n3} ** ${(byteLength2 + 1) * 8}${n3}`;
            } else {
              range3 = `>= -(2${n3} ** ${(byteLength2 + 1) * 8 - 1}${n3}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n3}`;
            }
          } else {
            range3 = `>= ${min}${n3} and <= ${max}${n3}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range3, value);
        }
        checkBounds(buf2, offset3, byteLength2);
      }
      function validateNumber(value, name5) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name5, "number", value);
        }
      }
      function boundsError(value, length2, type4) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type4);
          throw new errors.ERR_OUT_OF_RANGE(type4 || "offset", "an integer", value);
        }
        if (length2 < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type4 || "offset",
          `>= ${type4 ? 1 : 0} and <= ${length2}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes2(string4, units) {
        units = units || Infinity;
        let codePoint;
        const length2 = string4.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i3 = 0; i3 < length2; ++i3) {
          codePoint = string4.charCodeAt(i3);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i3 + 1 === length2) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i3 = 0; i3 < str.length; ++i3) {
          byteArray.push(str.charCodeAt(i3) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c2, hi, lo;
        const byteArray = [];
        for (let i3 = 0; i3 < str.length; ++i3) {
          if ((units -= 2) < 0)
            break;
          c2 = str.charCodeAt(i3);
          hi = c2 >> 8;
          lo = c2 % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base642.toByteArray(base64clean(str));
      }
      function blitBuffer(src2, dst, offset3, length2) {
        let i3;
        for (i3 = 0; i3 < length2; ++i3) {
          if (i3 + offset3 >= dst.length || i3 >= src2.length)
            break;
          dst[i3 + offset3] = src2[i3];
        }
        return i3;
      }
      function isInstance(obj, type4) {
        return obj instanceof type4 || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type4.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet2 = "0123456789abcdef";
        const table = new Array(256);
        for (let i3 = 0; i3 < 16; ++i3) {
          const i16 = i3 * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet2[i3] + alphabet2[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // node_modules/bl/BufferList.js
  var require_BufferList = __commonJS({
    "node_modules/bl/BufferList.js"(exports2, module2) {
      "use strict";
      var { Buffer: Buffer2 } = require_buffer2();
      var symbol = Symbol.for("BufferList");
      function BufferList3(buf2) {
        if (!(this instanceof BufferList3)) {
          return new BufferList3(buf2);
        }
        BufferList3._init.call(this, buf2);
      }
      BufferList3._init = function _init(buf2) {
        Object.defineProperty(this, symbol, { value: true });
        this._bufs = [];
        this.length = 0;
        if (buf2) {
          this.append(buf2);
        }
      };
      BufferList3.prototype._new = function _new(buf2) {
        return new BufferList3(buf2);
      };
      BufferList3.prototype._offset = function _offset(offset3) {
        if (offset3 === 0) {
          return [0, 0];
        }
        let tot = 0;
        for (let i3 = 0; i3 < this._bufs.length; i3++) {
          const _t = tot + this._bufs[i3].length;
          if (offset3 < _t || i3 === this._bufs.length - 1) {
            return [i3, offset3 - tot];
          }
          tot = _t;
        }
      };
      BufferList3.prototype._reverseOffset = function(blOffset) {
        const bufferId = blOffset[0];
        let offset3 = blOffset[1];
        for (let i3 = 0; i3 < bufferId; i3++) {
          offset3 += this._bufs[i3].length;
        }
        return offset3;
      };
      BufferList3.prototype.get = function get3(index3) {
        if (index3 > this.length || index3 < 0) {
          return void 0;
        }
        const offset3 = this._offset(index3);
        return this._bufs[offset3[0]][offset3[1]];
      };
      BufferList3.prototype.slice = function slice2(start, end) {
        if (typeof start === "number" && start < 0) {
          start += this.length;
        }
        if (typeof end === "number" && end < 0) {
          end += this.length;
        }
        return this.copy(null, 0, start, end);
      };
      BufferList3.prototype.copy = function copy2(dst, dstStart, srcStart, srcEnd) {
        if (typeof srcStart !== "number" || srcStart < 0) {
          srcStart = 0;
        }
        if (typeof srcEnd !== "number" || srcEnd > this.length) {
          srcEnd = this.length;
        }
        if (srcStart >= this.length) {
          return dst || Buffer2.alloc(0);
        }
        if (srcEnd <= 0) {
          return dst || Buffer2.alloc(0);
        }
        const copy3 = !!dst;
        const off = this._offset(srcStart);
        const len = srcEnd - srcStart;
        let bytes = len;
        let bufoff = copy3 && dstStart || 0;
        let start = off[1];
        if (srcStart === 0 && srcEnd === this.length) {
          if (!copy3) {
            return this._bufs.length === 1 ? this._bufs[0] : Buffer2.concat(this._bufs, this.length);
          }
          for (let i3 = 0; i3 < this._bufs.length; i3++) {
            this._bufs[i3].copy(dst, bufoff);
            bufoff += this._bufs[i3].length;
          }
          return dst;
        }
        if (bytes <= this._bufs[off[0]].length - start) {
          return copy3 ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes) : this._bufs[off[0]].slice(start, start + bytes);
        }
        if (!copy3) {
          dst = Buffer2.allocUnsafe(len);
        }
        for (let i3 = off[0]; i3 < this._bufs.length; i3++) {
          const l2 = this._bufs[i3].length - start;
          if (bytes > l2) {
            this._bufs[i3].copy(dst, bufoff, start);
            bufoff += l2;
          } else {
            this._bufs[i3].copy(dst, bufoff, start, start + bytes);
            bufoff += l2;
            break;
          }
          bytes -= l2;
          if (start) {
            start = 0;
          }
        }
        if (dst.length > bufoff)
          return dst.slice(0, bufoff);
        return dst;
      };
      BufferList3.prototype.shallowSlice = function shallowSlice(start, end) {
        start = start || 0;
        end = typeof end !== "number" ? this.length : end;
        if (start < 0) {
          start += this.length;
        }
        if (end < 0) {
          end += this.length;
        }
        if (start === end) {
          return this._new();
        }
        const startOffset = this._offset(start);
        const endOffset = this._offset(end);
        const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);
        if (endOffset[1] === 0) {
          buffers.pop();
        } else {
          buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
        }
        if (startOffset[1] !== 0) {
          buffers[0] = buffers[0].slice(startOffset[1]);
        }
        return this._new(buffers);
      };
      BufferList3.prototype.toString = function toString5(encoding, start, end) {
        return this.slice(start, end).toString(encoding);
      };
      BufferList3.prototype.consume = function consume(bytes) {
        bytes = Math.trunc(bytes);
        if (Number.isNaN(bytes) || bytes <= 0)
          return this;
        while (this._bufs.length) {
          if (bytes >= this._bufs[0].length) {
            bytes -= this._bufs[0].length;
            this.length -= this._bufs[0].length;
            this._bufs.shift();
          } else {
            this._bufs[0] = this._bufs[0].slice(bytes);
            this.length -= bytes;
            break;
          }
        }
        return this;
      };
      BufferList3.prototype.duplicate = function duplicate() {
        const copy2 = this._new();
        for (let i3 = 0; i3 < this._bufs.length; i3++) {
          copy2.append(this._bufs[i3]);
        }
        return copy2;
      };
      BufferList3.prototype.append = function append2(buf2) {
        if (buf2 == null) {
          return this;
        }
        if (buf2.buffer) {
          this._appendBuffer(Buffer2.from(buf2.buffer, buf2.byteOffset, buf2.byteLength));
        } else if (Array.isArray(buf2)) {
          for (let i3 = 0; i3 < buf2.length; i3++) {
            this.append(buf2[i3]);
          }
        } else if (this._isBufferList(buf2)) {
          for (let i3 = 0; i3 < buf2._bufs.length; i3++) {
            this.append(buf2._bufs[i3]);
          }
        } else {
          if (typeof buf2 === "number") {
            buf2 = buf2.toString();
          }
          this._appendBuffer(Buffer2.from(buf2));
        }
        return this;
      };
      BufferList3.prototype._appendBuffer = function appendBuffer(buf2) {
        this._bufs.push(buf2);
        this.length += buf2.length;
      };
      BufferList3.prototype.indexOf = function(search, offset3, encoding) {
        if (encoding === void 0 && typeof offset3 === "string") {
          encoding = offset3;
          offset3 = void 0;
        }
        if (typeof search === "function" || Array.isArray(search)) {
          throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');
        } else if (typeof search === "number") {
          search = Buffer2.from([search]);
        } else if (typeof search === "string") {
          search = Buffer2.from(search, encoding);
        } else if (this._isBufferList(search)) {
          search = search.slice();
        } else if (Array.isArray(search.buffer)) {
          search = Buffer2.from(search.buffer, search.byteOffset, search.byteLength);
        } else if (!Buffer2.isBuffer(search)) {
          search = Buffer2.from(search);
        }
        offset3 = Number(offset3 || 0);
        if (isNaN(offset3)) {
          offset3 = 0;
        }
        if (offset3 < 0) {
          offset3 = this.length + offset3;
        }
        if (offset3 < 0) {
          offset3 = 0;
        }
        if (search.length === 0) {
          return offset3 > this.length ? this.length : offset3;
        }
        const blOffset = this._offset(offset3);
        let blIndex = blOffset[0];
        let buffOffset = blOffset[1];
        for (; blIndex < this._bufs.length; blIndex++) {
          const buff = this._bufs[blIndex];
          while (buffOffset < buff.length) {
            const availableWindow = buff.length - buffOffset;
            if (availableWindow >= search.length) {
              const nativeSearchResult = buff.indexOf(search, buffOffset);
              if (nativeSearchResult !== -1) {
                return this._reverseOffset([blIndex, nativeSearchResult]);
              }
              buffOffset = buff.length - search.length + 1;
            } else {
              const revOffset = this._reverseOffset([blIndex, buffOffset]);
              if (this._match(revOffset, search)) {
                return revOffset;
              }
              buffOffset++;
            }
          }
          buffOffset = 0;
        }
        return -1;
      };
      BufferList3.prototype._match = function(offset3, search) {
        if (this.length - offset3 < search.length) {
          return false;
        }
        for (let searchOffset = 0; searchOffset < search.length; searchOffset++) {
          if (this.get(offset3 + searchOffset) !== search[searchOffset]) {
            return false;
          }
        }
        return true;
      };
      (function() {
        const methods = {
          readDoubleBE: 8,
          readDoubleLE: 8,
          readFloatBE: 4,
          readFloatLE: 4,
          readInt32BE: 4,
          readInt32LE: 4,
          readUInt32BE: 4,
          readUInt32LE: 4,
          readInt16BE: 2,
          readInt16LE: 2,
          readUInt16BE: 2,
          readUInt16LE: 2,
          readInt8: 1,
          readUInt8: 1,
          readIntBE: null,
          readIntLE: null,
          readUIntBE: null,
          readUIntLE: null
        };
        for (const m2 in methods) {
          (function(m3) {
            if (methods[m3] === null) {
              BufferList3.prototype[m3] = function(offset3, byteLength) {
                return this.slice(offset3, offset3 + byteLength)[m3](0, byteLength);
              };
            } else {
              BufferList3.prototype[m3] = function(offset3 = 0) {
                return this.slice(offset3, offset3 + methods[m3])[m3](0);
              };
            }
          })(m2);
        }
      })();
      BufferList3.prototype._isBufferList = function _isBufferList(b2) {
        return b2 instanceof BufferList3 || BufferList3.isBufferList(b2);
      };
      BufferList3.isBufferList = function isBufferList(b2) {
        return b2 != null && b2[symbol];
      };
      module2.exports = BufferList3;
    }
  });

  // node_modules/rabin-wasm/src/rabin.js
  var require_rabin = __commonJS({
    "node_modules/rabin-wasm/src/rabin.js"(exports2, module2) {
      var Rabin = class {
        /**
         * Creates an instance of Rabin.
         * @param { import("./../dist/rabin-wasm") } asModule
         * @param {number} [bits=12]
         * @param {number} [min=8 * 1024]
         * @param {number} [max=32 * 1024]
         * @param {number} polynomial
         * @memberof Rabin
         */
        constructor(asModule, bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, polynomial) {
          this.bits = bits;
          this.min = min;
          this.max = max;
          this.asModule = asModule;
          this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial);
          this.polynomial = polynomial;
        }
        /**
         * Fingerprints the buffer
         *
         * @param {Uint8Array} buf
         * @returns {Array<number>}
         * @memberof Rabin
         */
        fingerprint(buf2) {
          const {
            __retain,
            __release,
            __allocArray,
            __getInt32Array,
            Int32Array_ID,
            Uint8Array_ID
          } = this.asModule;
          const lengths = new Int32Array(Math.ceil(buf2.length / this.min));
          const lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths));
          const pointer = __retain(__allocArray(Uint8Array_ID, buf2));
          const out = this.rabin.fingerprint(pointer, lengthsPtr);
          const processed = __getInt32Array(out);
          __release(pointer);
          __release(lengthsPtr);
          const end = processed.indexOf(0);
          return end >= 0 ? processed.subarray(0, end) : processed;
        }
      };
      module2.exports = Rabin;
    }
  });

  // node_modules/@assemblyscript/loader/index.js
  var require_loader = __commonJS({
    "node_modules/@assemblyscript/loader/index.js"(exports2) {
      "use strict";
      var ID_OFFSET = -8;
      var SIZE_OFFSET = -4;
      var ARRAYBUFFER_ID = 0;
      var STRING_ID = 1;
      var ARRAYBUFFERVIEW = 1 << 0;
      var ARRAY = 1 << 1;
      var SET = 1 << 2;
      var MAP = 1 << 3;
      var VAL_ALIGN_OFFSET = 5;
      var VAL_ALIGN = 1 << VAL_ALIGN_OFFSET;
      var VAL_SIGNED = 1 << 10;
      var VAL_FLOAT = 1 << 11;
      var VAL_NULLABLE = 1 << 12;
      var VAL_MANAGED = 1 << 13;
      var KEY_ALIGN_OFFSET = 14;
      var KEY_ALIGN = 1 << KEY_ALIGN_OFFSET;
      var KEY_SIGNED = 1 << 19;
      var KEY_FLOAT = 1 << 20;
      var KEY_NULLABLE = 1 << 21;
      var KEY_MANAGED = 1 << 22;
      var ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;
      var ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;
      var ARRAYBUFFERVIEW_DATALENGTH_OFFSET = 8;
      var ARRAYBUFFERVIEW_SIZE = 12;
      var ARRAY_LENGTH_OFFSET = 12;
      var ARRAY_SIZE = 16;
      var BIGINT = typeof BigUint64Array !== "undefined";
      var THIS = Symbol();
      var CHUNKSIZE = 1024;
      function getStringImpl(buffer2, ptr) {
        const U32 = new Uint32Array(buffer2);
        const U16 = new Uint16Array(buffer2);
        var length2 = U32[ptr + SIZE_OFFSET >>> 2] >>> 1;
        var offset3 = ptr >>> 1;
        if (length2 <= CHUNKSIZE)
          return String.fromCharCode.apply(String, U16.subarray(offset3, offset3 + length2));
        const parts = [];
        do {
          const last3 = U16[offset3 + CHUNKSIZE - 1];
          const size = last3 >= 55296 && last3 < 56320 ? CHUNKSIZE - 1 : CHUNKSIZE;
          parts.push(String.fromCharCode.apply(String, U16.subarray(offset3, offset3 += size)));
          length2 -= size;
        } while (length2 > CHUNKSIZE);
        return parts.join("") + String.fromCharCode.apply(String, U16.subarray(offset3, offset3 + length2));
      }
      function preInstantiate(imports) {
        const baseModule = {};
        function getString(memory, ptr) {
          if (!memory)
            return "<yet unknown>";
          return getStringImpl(memory.buffer, ptr);
        }
        const env = imports.env = imports.env || {};
        env.abort = env.abort || function abort(mesg, file, line, colm) {
          const memory = baseModule.memory || env.memory;
          throw Error("abort: " + getString(memory, mesg) + " at " + getString(memory, file) + ":" + line + ":" + colm);
        };
        env.trace = env.trace || function trace(mesg, n3) {
          const memory = baseModule.memory || env.memory;
          console.log("trace: " + getString(memory, mesg) + (n3 ? " " : "") + Array.prototype.slice.call(arguments, 2, 2 + n3).join(", "));
        };
        imports.Math = imports.Math || Math;
        imports.Date = imports.Date || Date;
        return baseModule;
      }
      function postInstantiate(baseModule, instance) {
        const rawExports = instance.exports;
        const memory = rawExports.memory;
        const table = rawExports.table;
        const alloc2 = rawExports["__alloc"];
        const retain = rawExports["__retain"];
        const rttiBase = rawExports["__rtti_base"] || ~0;
        function getInfo(id2) {
          const U32 = new Uint32Array(memory.buffer);
          const count2 = U32[rttiBase >>> 2];
          if ((id2 >>>= 0) >= count2)
            throw Error("invalid id: " + id2);
          return U32[(rttiBase + 4 >>> 2) + id2 * 2];
        }
        function getBase(id2) {
          const U32 = new Uint32Array(memory.buffer);
          const count2 = U32[rttiBase >>> 2];
          if ((id2 >>>= 0) >= count2)
            throw Error("invalid id: " + id2);
          return U32[(rttiBase + 4 >>> 2) + id2 * 2 + 1];
        }
        function getValueAlign(info) {
          return 31 - Math.clz32(info >>> VAL_ALIGN_OFFSET & 31);
        }
        function getKeyAlign(info) {
          return 31 - Math.clz32(info >>> KEY_ALIGN_OFFSET & 31);
        }
        function __allocString(str) {
          const length2 = str.length;
          const ptr = alloc2(length2 << 1, STRING_ID);
          const U16 = new Uint16Array(memory.buffer);
          for (var i3 = 0, p2 = ptr >>> 1; i3 < length2; ++i3)
            U16[p2 + i3] = str.charCodeAt(i3);
          return ptr;
        }
        baseModule.__allocString = __allocString;
        function __getString(ptr) {
          const buffer2 = memory.buffer;
          const id2 = new Uint32Array(buffer2)[ptr + ID_OFFSET >>> 2];
          if (id2 !== STRING_ID)
            throw Error("not a string: " + ptr);
          return getStringImpl(buffer2, ptr);
        }
        baseModule.__getString = __getString;
        function getView(alignLog2, signed, float2) {
          const buffer2 = memory.buffer;
          if (float2) {
            switch (alignLog2) {
              case 2:
                return new Float32Array(buffer2);
              case 3:
                return new Float64Array(buffer2);
            }
          } else {
            switch (alignLog2) {
              case 0:
                return new (signed ? Int8Array : Uint8Array)(buffer2);
              case 1:
                return new (signed ? Int16Array : Uint16Array)(buffer2);
              case 2:
                return new (signed ? Int32Array : Uint32Array)(buffer2);
              case 3:
                return new (signed ? BigInt64Array : BigUint64Array)(buffer2);
            }
          }
          throw Error("unsupported align: " + alignLog2);
        }
        function __allocArray(id2, values) {
          const info = getInfo(id2);
          if (!(info & (ARRAYBUFFERVIEW | ARRAY)))
            throw Error("not an array: " + id2 + " @ " + info);
          const align = getValueAlign(info);
          const length2 = values.length;
          const buf2 = alloc2(length2 << align, ARRAYBUFFER_ID);
          const arr = alloc2(info & ARRAY ? ARRAY_SIZE : ARRAYBUFFERVIEW_SIZE, id2);
          const U32 = new Uint32Array(memory.buffer);
          U32[arr + ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = retain(buf2);
          U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf2;
          U32[arr + ARRAYBUFFERVIEW_DATALENGTH_OFFSET >>> 2] = length2 << align;
          if (info & ARRAY)
            U32[arr + ARRAY_LENGTH_OFFSET >>> 2] = length2;
          const view = getView(align, info & VAL_SIGNED, info & VAL_FLOAT);
          if (info & VAL_MANAGED) {
            for (let i3 = 0; i3 < length2; ++i3)
              view[(buf2 >>> align) + i3] = retain(values[i3]);
          } else {
            view.set(values, buf2 >>> align);
          }
          return arr;
        }
        baseModule.__allocArray = __allocArray;
        function __getArrayView(arr) {
          const U32 = new Uint32Array(memory.buffer);
          const id2 = U32[arr + ID_OFFSET >>> 2];
          const info = getInfo(id2);
          if (!(info & ARRAYBUFFERVIEW))
            throw Error("not an array: " + id2);
          const align = getValueAlign(info);
          var buf2 = U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];
          const length2 = info & ARRAY ? U32[arr + ARRAY_LENGTH_OFFSET >>> 2] : U32[buf2 + SIZE_OFFSET >>> 2] >>> align;
          return getView(align, info & VAL_SIGNED, info & VAL_FLOAT).subarray(buf2 >>>= align, buf2 + length2);
        }
        baseModule.__getArrayView = __getArrayView;
        function __getArray(arr) {
          const input = __getArrayView(arr);
          const len = input.length;
          const out = new Array(len);
          for (let i3 = 0; i3 < len; i3++)
            out[i3] = input[i3];
          return out;
        }
        baseModule.__getArray = __getArray;
        function __getArrayBuffer(ptr) {
          const buffer2 = memory.buffer;
          const length2 = new Uint32Array(buffer2)[ptr + SIZE_OFFSET >>> 2];
          return buffer2.slice(ptr, ptr + length2);
        }
        baseModule.__getArrayBuffer = __getArrayBuffer;
        function getTypedArray(Type2, alignLog2, ptr) {
          return new Type2(getTypedArrayView(Type2, alignLog2, ptr));
        }
        function getTypedArrayView(Type2, alignLog2, ptr) {
          const buffer2 = memory.buffer;
          const U32 = new Uint32Array(buffer2);
          const bufPtr = U32[ptr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];
          return new Type2(buffer2, bufPtr, U32[bufPtr + SIZE_OFFSET >>> 2] >>> alignLog2);
        }
        baseModule.__getInt8Array = getTypedArray.bind(null, Int8Array, 0);
        baseModule.__getInt8ArrayView = getTypedArrayView.bind(null, Int8Array, 0);
        baseModule.__getUint8Array = getTypedArray.bind(null, Uint8Array, 0);
        baseModule.__getUint8ArrayView = getTypedArrayView.bind(null, Uint8Array, 0);
        baseModule.__getUint8ClampedArray = getTypedArray.bind(null, Uint8ClampedArray, 0);
        baseModule.__getUint8ClampedArrayView = getTypedArrayView.bind(null, Uint8ClampedArray, 0);
        baseModule.__getInt16Array = getTypedArray.bind(null, Int16Array, 1);
        baseModule.__getInt16ArrayView = getTypedArrayView.bind(null, Int16Array, 1);
        baseModule.__getUint16Array = getTypedArray.bind(null, Uint16Array, 1);
        baseModule.__getUint16ArrayView = getTypedArrayView.bind(null, Uint16Array, 1);
        baseModule.__getInt32Array = getTypedArray.bind(null, Int32Array, 2);
        baseModule.__getInt32ArrayView = getTypedArrayView.bind(null, Int32Array, 2);
        baseModule.__getUint32Array = getTypedArray.bind(null, Uint32Array, 2);
        baseModule.__getUint32ArrayView = getTypedArrayView.bind(null, Uint32Array, 2);
        if (BIGINT) {
          baseModule.__getInt64Array = getTypedArray.bind(null, BigInt64Array, 3);
          baseModule.__getInt64ArrayView = getTypedArrayView.bind(null, BigInt64Array, 3);
          baseModule.__getUint64Array = getTypedArray.bind(null, BigUint64Array, 3);
          baseModule.__getUint64ArrayView = getTypedArrayView.bind(null, BigUint64Array, 3);
        }
        baseModule.__getFloat32Array = getTypedArray.bind(null, Float32Array, 2);
        baseModule.__getFloat32ArrayView = getTypedArrayView.bind(null, Float32Array, 2);
        baseModule.__getFloat64Array = getTypedArray.bind(null, Float64Array, 3);
        baseModule.__getFloat64ArrayView = getTypedArrayView.bind(null, Float64Array, 3);
        function __instanceof(ptr, baseId) {
          const U32 = new Uint32Array(memory.buffer);
          var id2 = U32[ptr + ID_OFFSET >>> 2];
          if (id2 <= U32[rttiBase >>> 2]) {
            do
              if (id2 == baseId)
                return true;
            while (id2 = getBase(id2));
          }
          return false;
        }
        baseModule.__instanceof = __instanceof;
        baseModule.memory = baseModule.memory || memory;
        baseModule.table = baseModule.table || table;
        return demangle(rawExports, baseModule);
      }
      function isResponse(o2) {
        return typeof Response !== "undefined" && o2 instanceof Response;
      }
      async function instantiate(source, imports) {
        if (isResponse(source = await source))
          return instantiateStreaming(source, imports);
        return postInstantiate(
          preInstantiate(imports || (imports = {})),
          await WebAssembly.instantiate(
            source instanceof WebAssembly.Module ? source : await WebAssembly.compile(source),
            imports
          )
        );
      }
      exports2.instantiate = instantiate;
      function instantiateSync(source, imports) {
        return postInstantiate(
          preInstantiate(imports || (imports = {})),
          new WebAssembly.Instance(
            source instanceof WebAssembly.Module ? source : new WebAssembly.Module(source),
            imports
          )
        );
      }
      exports2.instantiateSync = instantiateSync;
      async function instantiateStreaming(source, imports) {
        if (!WebAssembly.instantiateStreaming) {
          return instantiate(
            isResponse(source = await source) ? source.arrayBuffer() : source,
            imports
          );
        }
        return postInstantiate(
          preInstantiate(imports || (imports = {})),
          (await WebAssembly.instantiateStreaming(source, imports)).instance
        );
      }
      exports2.instantiateStreaming = instantiateStreaming;
      function demangle(exports3, baseModule) {
        var module3 = baseModule ? Object.create(baseModule) : {};
        var setArgumentsLength = exports3["__argumentsLength"] ? function(length2) {
          exports3["__argumentsLength"].value = length2;
        } : exports3["__setArgumentsLength"] || exports3["__setargc"] || function() {
        };
        for (let internalName in exports3) {
          if (!Object.prototype.hasOwnProperty.call(exports3, internalName))
            continue;
          const elem = exports3[internalName];
          let parts = internalName.split(".");
          let curr = module3;
          while (parts.length > 1) {
            let part = parts.shift();
            if (!Object.prototype.hasOwnProperty.call(curr, part))
              curr[part] = {};
            curr = curr[part];
          }
          let name5 = parts[0];
          let hash = name5.indexOf("#");
          if (hash >= 0) {
            let className = name5.substring(0, hash);
            let classElem = curr[className];
            if (typeof classElem === "undefined" || !classElem.prototype) {
              let ctor = function(...args) {
                return ctor.wrap(ctor.prototype.constructor(0, ...args));
              };
              ctor.prototype = {
                valueOf: function valueOf() {
                  return this[THIS];
                }
              };
              ctor.wrap = function(thisValue) {
                return Object.create(ctor.prototype, { [THIS]: { value: thisValue, writable: false } });
              };
              if (classElem)
                Object.getOwnPropertyNames(classElem).forEach(
                  (name6) => Object.defineProperty(ctor, name6, Object.getOwnPropertyDescriptor(classElem, name6))
                );
              curr[className] = ctor;
            }
            name5 = name5.substring(hash + 1);
            curr = curr[className].prototype;
            if (/^(get|set):/.test(name5)) {
              if (!Object.prototype.hasOwnProperty.call(curr, name5 = name5.substring(4))) {
                let getter = exports3[internalName.replace("set:", "get:")];
                let setter = exports3[internalName.replace("get:", "set:")];
                Object.defineProperty(curr, name5, {
                  get: function() {
                    return getter(this[THIS]);
                  },
                  set: function(value) {
                    setter(this[THIS], value);
                  },
                  enumerable: true
                });
              }
            } else {
              if (name5 === "constructor") {
                (curr[name5] = (...args) => {
                  setArgumentsLength(args.length);
                  return elem(...args);
                }).original = elem;
              } else {
                (curr[name5] = function(...args) {
                  setArgumentsLength(args.length);
                  return elem(this[THIS], ...args);
                }).original = elem;
              }
            }
          } else {
            if (/^(get|set):/.test(name5)) {
              if (!Object.prototype.hasOwnProperty.call(curr, name5 = name5.substring(4))) {
                Object.defineProperty(curr, name5, {
                  get: exports3[internalName.replace("set:", "get:")],
                  set: exports3[internalName.replace("get:", "set:")],
                  enumerable: true
                });
              }
            } else if (typeof elem === "function" && elem !== setArgumentsLength) {
              (curr[name5] = (...args) => {
                setArgumentsLength(args.length);
                return elem(...args);
              }).original = elem;
            } else {
              curr[name5] = elem;
            }
          }
        }
        return module3;
      }
      exports2.demangle = demangle;
    }
  });

  // node_modules/rabin-wasm/dist/rabin-wasm.js
  var require_rabin_wasm = __commonJS({
    "node_modules/rabin-wasm/dist/rabin-wasm.js"(exports2, module2) {
      var { instantiate } = require_loader();
      loadWebAssembly.supported = typeof WebAssembly !== "undefined";
      function loadWebAssembly(imp = {}) {
        if (!loadWebAssembly.supported)
          return null;
        var wasm = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 78, 14, 96, 2, 127, 126, 0, 96, 1, 127, 1, 126, 96, 2, 127, 127, 0, 96, 1, 127, 1, 127, 96, 1, 127, 0, 96, 2, 127, 127, 1, 127, 96, 3, 127, 127, 127, 1, 127, 96, 0, 0, 96, 3, 127, 127, 127, 0, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 0, 96, 5, 127, 127, 127, 127, 127, 1, 127, 96, 1, 126, 1, 127, 96, 2, 126, 126, 1, 126, 2, 13, 1, 3, 101, 110, 118, 5, 97, 98, 111, 114, 116, 0, 10, 3, 54, 53, 2, 2, 8, 9, 3, 5, 2, 8, 6, 5, 3, 4, 2, 6, 9, 12, 13, 2, 5, 11, 3, 2, 3, 2, 3, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 7, 7, 4, 4, 5, 3, 1, 0, 1, 6, 47, 9, 127, 1, 65, 0, 11, 127, 1, 65, 0, 11, 127, 0, 65, 3, 11, 127, 0, 65, 4, 11, 127, 1, 65, 0, 11, 127, 1, 65, 0, 11, 127, 1, 65, 0, 11, 127, 0, 65, 240, 2, 11, 127, 0, 65, 6, 11, 7, 240, 5, 41, 6, 109, 101, 109, 111, 114, 121, 2, 0, 7, 95, 95, 97, 108, 108, 111, 99, 0, 10, 8, 95, 95, 114, 101, 116, 97, 105, 110, 0, 11, 9, 95, 95, 114, 101, 108, 101, 97, 115, 101, 0, 12, 9, 95, 95, 99, 111, 108, 108, 101, 99, 116, 0, 51, 11, 95, 95, 114, 116, 116, 105, 95, 98, 97, 115, 101, 3, 7, 13, 73, 110, 116, 51, 50, 65, 114, 114, 97, 121, 95, 73, 68, 3, 2, 13, 85, 105, 110, 116, 56, 65, 114, 114, 97, 121, 95, 73, 68, 3, 3, 6, 100, 101, 103, 114, 101, 101, 0, 16, 3, 109, 111, 100, 0, 17, 5, 82, 97, 98, 105, 110, 3, 8, 16, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 119, 105, 110, 100, 111, 119, 0, 21, 16, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 119, 105, 110, 100, 111, 119, 0, 22, 21, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 119, 105, 110, 100, 111, 119, 95, 115, 105, 122, 101, 0, 23, 21, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 119, 105, 110, 100, 111, 119, 95, 115, 105, 122, 101, 0, 24, 14, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 119, 112, 111, 115, 0, 25, 14, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 119, 112, 111, 115, 0, 26, 15, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 99, 111, 117, 110, 116, 0, 27, 15, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 99, 111, 117, 110, 116, 0, 28, 13, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 112, 111, 115, 0, 29, 13, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 112, 111, 115, 0, 30, 15, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 115, 116, 97, 114, 116, 0, 31, 15, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 115, 116, 97, 114, 116, 0, 32, 16, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 100, 105, 103, 101, 115, 116, 0, 33, 16, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 100, 105, 103, 101, 115, 116, 0, 34, 21, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 99, 104, 117, 110, 107, 95, 115, 116, 97, 114, 116, 0, 35, 21, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 99, 104, 117, 110, 107, 95, 115, 116, 97, 114, 116, 0, 36, 22, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 99, 104, 117, 110, 107, 95, 108, 101, 110, 103, 116, 104, 0, 37, 22, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 99, 104, 117, 110, 107, 95, 108, 101, 110, 103, 116, 104, 0, 38, 31, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 99, 104, 117, 110, 107, 95, 99, 117, 116, 95, 102, 105, 110, 103, 101, 114, 112, 114, 105, 110, 116, 0, 39, 31, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 99, 104, 117, 110, 107, 95, 99, 117, 116, 95, 102, 105, 110, 103, 101, 114, 112, 114, 105, 110, 116, 0, 40, 20, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 0, 41, 20, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 0, 42, 17, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 109, 105, 110, 115, 105, 122, 101, 0, 43, 17, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 109, 105, 110, 115, 105, 122, 101, 0, 44, 17, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 109, 97, 120, 115, 105, 122, 101, 0, 45, 17, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 109, 97, 120, 115, 105, 122, 101, 0, 46, 14, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 109, 97, 115, 107, 0, 47, 14, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 109, 97, 115, 107, 0, 48, 17, 82, 97, 98, 105, 110, 35, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 0, 20, 17, 82, 97, 98, 105, 110, 35, 102, 105, 110, 103, 101, 114, 112, 114, 105, 110, 116, 0, 49, 8, 1, 50, 10, 165, 31, 53, 199, 1, 1, 4, 127, 32, 1, 40, 2, 0, 65, 124, 113, 34, 2, 65, 128, 2, 73, 4, 127, 32, 2, 65, 4, 118, 33, 4, 65, 0, 5, 32, 2, 65, 31, 32, 2, 103, 107, 34, 3, 65, 4, 107, 118, 65, 16, 115, 33, 4, 32, 3, 65, 7, 107, 11, 33, 3, 32, 1, 40, 2, 20, 33, 2, 32, 1, 40, 2, 16, 34, 5, 4, 64, 32, 5, 32, 2, 54, 2, 20, 11, 32, 2, 4, 64, 32, 2, 32, 5, 54, 2, 16, 11, 32, 1, 32, 0, 32, 4, 32, 3, 65, 4, 116, 106, 65, 2, 116, 106, 40, 2, 96, 70, 4, 64, 32, 0, 32, 4, 32, 3, 65, 4, 116, 106, 65, 2, 116, 106, 32, 2, 54, 2, 96, 32, 2, 69, 4, 64, 32, 0, 32, 3, 65, 2, 116, 106, 32, 0, 32, 3, 65, 2, 116, 106, 40, 2, 4, 65, 1, 32, 4, 116, 65, 127, 115, 113, 34, 1, 54, 2, 4, 32, 1, 69, 4, 64, 32, 0, 32, 0, 40, 2, 0, 65, 1, 32, 3, 116, 65, 127, 115, 113, 54, 2, 0, 11, 11, 11, 11, 226, 2, 1, 6, 127, 32, 1, 40, 2, 0, 33, 3, 32, 1, 65, 16, 106, 32, 1, 40, 2, 0, 65, 124, 113, 106, 34, 4, 40, 2, 0, 34, 5, 65, 1, 113, 4, 64, 32, 3, 65, 124, 113, 65, 16, 106, 32, 5, 65, 124, 113, 106, 34, 2, 65, 240, 255, 255, 255, 3, 73, 4, 64, 32, 0, 32, 4, 16, 1, 32, 1, 32, 2, 32, 3, 65, 3, 113, 114, 34, 3, 54, 2, 0, 32, 1, 65, 16, 106, 32, 1, 40, 2, 0, 65, 124, 113, 106, 34, 4, 40, 2, 0, 33, 5, 11, 11, 32, 3, 65, 2, 113, 4, 64, 32, 1, 65, 4, 107, 40, 2, 0, 34, 2, 40, 2, 0, 34, 6, 65, 124, 113, 65, 16, 106, 32, 3, 65, 124, 113, 106, 34, 7, 65, 240, 255, 255, 255, 3, 73, 4, 64, 32, 0, 32, 2, 16, 1, 32, 2, 32, 7, 32, 6, 65, 3, 113, 114, 34, 3, 54, 2, 0, 32, 2, 33, 1, 11, 11, 32, 4, 32, 5, 65, 2, 114, 54, 2, 0, 32, 4, 65, 4, 107, 32, 1, 54, 2, 0, 32, 0, 32, 3, 65, 124, 113, 34, 2, 65, 128, 2, 73, 4, 127, 32, 2, 65, 4, 118, 33, 4, 65, 0, 5, 32, 2, 65, 31, 32, 2, 103, 107, 34, 2, 65, 4, 107, 118, 65, 16, 115, 33, 4, 32, 2, 65, 7, 107, 11, 34, 3, 65, 4, 116, 32, 4, 106, 65, 2, 116, 106, 40, 2, 96, 33, 2, 32, 1, 65, 0, 54, 2, 16, 32, 1, 32, 2, 54, 2, 20, 32, 2, 4, 64, 32, 2, 32, 1, 54, 2, 16, 11, 32, 0, 32, 4, 32, 3, 65, 4, 116, 106, 65, 2, 116, 106, 32, 1, 54, 2, 96, 32, 0, 32, 0, 40, 2, 0, 65, 1, 32, 3, 116, 114, 54, 2, 0, 32, 0, 32, 3, 65, 2, 116, 106, 32, 0, 32, 3, 65, 2, 116, 106, 40, 2, 4, 65, 1, 32, 4, 116, 114, 54, 2, 4, 11, 119, 1, 1, 127, 32, 2, 2, 127, 32, 0, 40, 2, 160, 12, 34, 2, 4, 64, 32, 2, 32, 1, 65, 16, 107, 70, 4, 64, 32, 2, 40, 2, 0, 33, 3, 32, 1, 65, 16, 107, 33, 1, 11, 11, 32, 1, 11, 107, 34, 2, 65, 48, 73, 4, 64, 15, 11, 32, 1, 32, 3, 65, 2, 113, 32, 2, 65, 32, 107, 65, 1, 114, 114, 54, 2, 0, 32, 1, 65, 0, 54, 2, 16, 32, 1, 65, 0, 54, 2, 20, 32, 1, 32, 2, 106, 65, 16, 107, 34, 2, 65, 2, 54, 2, 0, 32, 0, 32, 2, 54, 2, 160, 12, 32, 0, 32, 1, 16, 2, 11, 155, 1, 1, 3, 127, 35, 0, 34, 0, 69, 4, 64, 65, 1, 63, 0, 34, 0, 74, 4, 127, 65, 1, 32, 0, 107, 64, 0, 65, 0, 72, 5, 65, 0, 11, 4, 64, 0, 11, 65, 176, 3, 34, 0, 65, 0, 54, 2, 0, 65, 208, 15, 65, 0, 54, 2, 0, 3, 64, 32, 1, 65, 23, 73, 4, 64, 32, 1, 65, 2, 116, 65, 176, 3, 106, 65, 0, 54, 2, 4, 65, 0, 33, 2, 3, 64, 32, 2, 65, 16, 73, 4, 64, 32, 1, 65, 4, 116, 32, 2, 106, 65, 2, 116, 65, 176, 3, 106, 65, 0, 54, 2, 96, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 176, 3, 65, 224, 15, 63, 0, 65, 16, 116, 16, 3, 65, 176, 3, 36, 0, 11, 32, 0, 11, 45, 0, 32, 0, 65, 240, 255, 255, 255, 3, 79, 4, 64, 65, 32, 65, 224, 0, 65, 201, 3, 65, 29, 16, 0, 0, 11, 32, 0, 65, 15, 106, 65, 112, 113, 34, 0, 65, 16, 32, 0, 65, 16, 75, 27, 11, 169, 1, 1, 1, 127, 32, 0, 32, 1, 65, 128, 2, 73, 4, 127, 32, 1, 65, 4, 118, 33, 1, 65, 0, 5, 32, 1, 65, 248, 255, 255, 255, 1, 73, 4, 64, 32, 1, 65, 1, 65, 27, 32, 1, 103, 107, 116, 106, 65, 1, 107, 33, 1, 11, 32, 1, 65, 31, 32, 1, 103, 107, 34, 2, 65, 4, 107, 118, 65, 16, 115, 33, 1, 32, 2, 65, 7, 107, 11, 34, 2, 65, 2, 116, 106, 40, 2, 4, 65, 127, 32, 1, 116, 113, 34, 1, 4, 127, 32, 0, 32, 1, 104, 32, 2, 65, 4, 116, 106, 65, 2, 116, 106, 40, 2, 96, 5, 32, 0, 40, 2, 0, 65, 127, 32, 2, 65, 1, 106, 116, 113, 34, 1, 4, 127, 32, 0, 32, 0, 32, 1, 104, 34, 0, 65, 2, 116, 106, 40, 2, 4, 104, 32, 0, 65, 4, 116, 106, 65, 2, 116, 106, 40, 2, 96, 5, 65, 0, 11, 11, 11, 111, 1, 1, 127, 63, 0, 34, 2, 32, 1, 65, 248, 255, 255, 255, 1, 73, 4, 127, 32, 1, 65, 1, 65, 27, 32, 1, 103, 107, 116, 65, 1, 107, 106, 5, 32, 1, 11, 65, 16, 32, 0, 40, 2, 160, 12, 32, 2, 65, 16, 116, 65, 16, 107, 71, 116, 106, 65, 255, 255, 3, 106, 65, 128, 128, 124, 113, 65, 16, 118, 34, 1, 32, 2, 32, 1, 74, 27, 64, 0, 65, 0, 72, 4, 64, 32, 1, 64, 0, 65, 0, 72, 4, 64, 0, 11, 11, 32, 0, 32, 2, 65, 16, 116, 63, 0, 65, 16, 116, 16, 3, 11, 113, 1, 2, 127, 32, 1, 40, 2, 0, 34, 3, 65, 124, 113, 32, 2, 107, 34, 4, 65, 32, 79, 4, 64, 32, 1, 32, 2, 32, 3, 65, 2, 113, 114, 54, 2, 0, 32, 2, 32, 1, 65, 16, 106, 106, 34, 1, 32, 4, 65, 16, 107, 65, 1, 114, 54, 2, 0, 32, 0, 32, 1, 16, 2, 5, 32, 1, 32, 3, 65, 126, 113, 54, 2, 0, 32, 1, 65, 16, 106, 32, 1, 40, 2, 0, 65, 124, 113, 106, 32, 1, 65, 16, 106, 32, 1, 40, 2, 0, 65, 124, 113, 106, 40, 2, 0, 65, 125, 113, 54, 2, 0, 11, 11, 91, 1, 2, 127, 32, 0, 32, 1, 16, 5, 34, 4, 16, 6, 34, 3, 69, 4, 64, 65, 1, 36, 1, 65, 0, 36, 1, 32, 0, 32, 4, 16, 6, 34, 3, 69, 4, 64, 32, 0, 32, 4, 16, 7, 32, 0, 32, 4, 16, 6, 33, 3, 11, 11, 32, 3, 65, 0, 54, 2, 4, 32, 3, 32, 2, 54, 2, 8, 32, 3, 32, 1, 54, 2, 12, 32, 0, 32, 3, 16, 1, 32, 0, 32, 3, 32, 4, 16, 8, 32, 3, 11, 13, 0, 16, 4, 32, 0, 32, 1, 16, 9, 65, 16, 106, 11, 33, 1, 1, 127, 32, 0, 65, 172, 3, 75, 4, 64, 32, 0, 65, 16, 107, 34, 1, 32, 1, 40, 2, 4, 65, 1, 106, 54, 2, 4, 11, 32, 0, 11, 18, 0, 32, 0, 65, 172, 3, 75, 4, 64, 32, 0, 65, 16, 107, 16, 52, 11, 11, 140, 3, 1, 1, 127, 2, 64, 32, 1, 69, 13, 0, 32, 0, 65, 0, 58, 0, 0, 32, 0, 32, 1, 106, 65, 1, 107, 65, 0, 58, 0, 0, 32, 1, 65, 2, 77, 13, 0, 32, 0, 65, 1, 106, 65, 0, 58, 0, 0, 32, 0, 65, 2, 106, 65, 0, 58, 0, 0, 32, 0, 32, 1, 106, 34, 2, 65, 2, 107, 65, 0, 58, 0, 0, 32, 2, 65, 3, 107, 65, 0, 58, 0, 0, 32, 1, 65, 6, 77, 13, 0, 32, 0, 65, 3, 106, 65, 0, 58, 0, 0, 32, 0, 32, 1, 106, 65, 4, 107, 65, 0, 58, 0, 0, 32, 1, 65, 8, 77, 13, 0, 32, 1, 65, 0, 32, 0, 107, 65, 3, 113, 34, 1, 107, 33, 2, 32, 0, 32, 1, 106, 34, 0, 65, 0, 54, 2, 0, 32, 0, 32, 2, 65, 124, 113, 34, 1, 106, 65, 4, 107, 65, 0, 54, 2, 0, 32, 1, 65, 8, 77, 13, 0, 32, 0, 65, 4, 106, 65, 0, 54, 2, 0, 32, 0, 65, 8, 106, 65, 0, 54, 2, 0, 32, 0, 32, 1, 106, 34, 2, 65, 12, 107, 65, 0, 54, 2, 0, 32, 2, 65, 8, 107, 65, 0, 54, 2, 0, 32, 1, 65, 24, 77, 13, 0, 32, 0, 65, 12, 106, 65, 0, 54, 2, 0, 32, 0, 65, 16, 106, 65, 0, 54, 2, 0, 32, 0, 65, 20, 106, 65, 0, 54, 2, 0, 32, 0, 65, 24, 106, 65, 0, 54, 2, 0, 32, 0, 32, 1, 106, 34, 2, 65, 28, 107, 65, 0, 54, 2, 0, 32, 2, 65, 24, 107, 65, 0, 54, 2, 0, 32, 2, 65, 20, 107, 65, 0, 54, 2, 0, 32, 2, 65, 16, 107, 65, 0, 54, 2, 0, 32, 0, 32, 0, 65, 4, 113, 65, 24, 106, 34, 2, 106, 33, 0, 32, 1, 32, 2, 107, 33, 1, 3, 64, 32, 1, 65, 32, 79, 4, 64, 32, 0, 66, 0, 55, 3, 0, 32, 0, 65, 8, 106, 66, 0, 55, 3, 0, 32, 0, 65, 16, 106, 66, 0, 55, 3, 0, 32, 0, 65, 24, 106, 66, 0, 55, 3, 0, 32, 1, 65, 32, 107, 33, 1, 32, 0, 65, 32, 106, 33, 0, 12, 1, 11, 11, 11, 11, 178, 1, 1, 3, 127, 32, 1, 65, 240, 255, 255, 255, 3, 32, 2, 118, 75, 4, 64, 65, 144, 1, 65, 192, 1, 65, 23, 65, 56, 16, 0, 0, 11, 32, 1, 32, 2, 116, 34, 3, 65, 0, 16, 10, 34, 2, 32, 3, 16, 13, 32, 0, 69, 4, 64, 65, 12, 65, 2, 16, 10, 34, 0, 65, 172, 3, 75, 4, 64, 32, 0, 65, 16, 107, 34, 1, 32, 1, 40, 2, 4, 65, 1, 106, 54, 2, 4, 11, 11, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 65, 0, 54, 2, 8, 32, 2, 34, 1, 32, 0, 40, 2, 0, 34, 4, 71, 4, 64, 32, 1, 65, 172, 3, 75, 4, 64, 32, 1, 65, 16, 107, 34, 5, 32, 5, 40, 2, 4, 65, 1, 106, 54, 2, 4, 11, 32, 4, 16, 12, 11, 32, 0, 32, 1, 54, 2, 0, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 3, 54, 2, 8, 32, 0, 11, 46, 1, 2, 127, 65, 12, 65, 5, 16, 10, 34, 0, 65, 172, 3, 75, 4, 64, 32, 0, 65, 16, 107, 34, 1, 32, 1, 40, 2, 4, 65, 1, 106, 54, 2, 4, 11, 32, 0, 65, 128, 2, 65, 3, 16, 14, 11, 9, 0, 65, 63, 32, 0, 121, 167, 107, 11, 49, 1, 2, 127, 65, 63, 32, 1, 121, 167, 107, 33, 2, 3, 64, 65, 63, 32, 0, 121, 167, 107, 32, 2, 107, 34, 3, 65, 0, 78, 4, 64, 32, 0, 32, 1, 32, 3, 172, 134, 133, 33, 0, 12, 1, 11, 11, 32, 0, 11, 40, 0, 32, 1, 32, 0, 40, 2, 8, 79, 4, 64, 65, 128, 2, 65, 192, 2, 65, 163, 1, 65, 44, 16, 0, 0, 11, 32, 1, 32, 0, 40, 2, 4, 106, 65, 0, 58, 0, 0, 11, 38, 0, 32, 1, 32, 0, 40, 2, 8, 79, 4, 64, 65, 128, 2, 65, 192, 2, 65, 152, 1, 65, 44, 16, 0, 0, 11, 32, 1, 32, 0, 40, 2, 4, 106, 45, 0, 0, 11, 254, 5, 2, 1, 127, 4, 126, 32, 0, 69, 4, 64, 65, 232, 0, 65, 6, 16, 10, 34, 0, 65, 172, 3, 75, 4, 64, 32, 0, 65, 16, 107, 34, 5, 32, 5, 40, 2, 4, 65, 1, 106, 54, 2, 4, 11, 11, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 65, 0, 54, 2, 8, 32, 0, 66, 0, 55, 3, 16, 32, 0, 66, 0, 55, 3, 24, 32, 0, 66, 0, 55, 3, 32, 32, 0, 66, 0, 55, 3, 40, 32, 0, 66, 0, 55, 3, 48, 32, 0, 66, 0, 55, 3, 56, 32, 0, 66, 0, 55, 3, 64, 32, 0, 66, 0, 55, 3, 72, 32, 0, 66, 0, 55, 3, 80, 32, 0, 66, 0, 55, 3, 88, 32, 0, 66, 0, 55, 3, 96, 32, 0, 32, 2, 173, 55, 3, 80, 32, 0, 32, 3, 173, 55, 3, 88, 65, 12, 65, 4, 16, 10, 34, 2, 65, 172, 3, 75, 4, 64, 32, 2, 65, 16, 107, 34, 3, 32, 3, 40, 2, 4, 65, 1, 106, 54, 2, 4, 11, 32, 2, 32, 4, 65, 0, 16, 14, 33, 2, 32, 0, 40, 2, 0, 16, 12, 32, 0, 32, 2, 54, 2, 0, 32, 0, 32, 4, 54, 2, 4, 32, 0, 66, 1, 32, 1, 173, 134, 66, 1, 125, 55, 3, 96, 32, 0, 66, 243, 130, 183, 218, 216, 230, 232, 30, 55, 3, 72, 35, 4, 69, 4, 64, 65, 0, 33, 2, 3, 64, 32, 2, 65, 128, 2, 72, 4, 64, 32, 2, 65, 255, 1, 113, 173, 33, 6, 32, 0, 41, 3, 72, 34, 7, 33, 8, 65, 63, 32, 7, 121, 167, 107, 33, 1, 3, 64, 65, 63, 32, 6, 121, 167, 107, 32, 1, 107, 34, 3, 65, 0, 78, 4, 64, 32, 6, 32, 8, 32, 3, 172, 134, 133, 33, 6, 12, 1, 11, 11, 65, 0, 33, 4, 3, 64, 32, 4, 32, 0, 40, 2, 4, 65, 1, 107, 72, 4, 64, 32, 6, 66, 8, 134, 33, 6, 32, 0, 41, 3, 72, 34, 7, 33, 8, 65, 63, 32, 7, 121, 167, 107, 33, 1, 3, 64, 65, 63, 32, 6, 121, 167, 107, 32, 1, 107, 34, 3, 65, 0, 78, 4, 64, 32, 6, 32, 8, 32, 3, 172, 134, 133, 33, 6, 12, 1, 11, 11, 32, 4, 65, 1, 106, 33, 4, 12, 1, 11, 11, 35, 6, 40, 2, 4, 32, 2, 65, 3, 116, 106, 32, 6, 55, 3, 0, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 63, 32, 0, 41, 3, 72, 121, 167, 107, 172, 33, 7, 65, 0, 33, 2, 3, 64, 32, 2, 65, 128, 2, 72, 4, 64, 35, 5, 33, 1, 32, 2, 172, 32, 7, 134, 34, 8, 33, 6, 65, 63, 32, 0, 41, 3, 72, 34, 9, 121, 167, 107, 33, 3, 3, 64, 65, 63, 32, 6, 121, 167, 107, 32, 3, 107, 34, 4, 65, 0, 78, 4, 64, 32, 6, 32, 9, 32, 4, 172, 134, 133, 33, 6, 12, 1, 11, 11, 32, 1, 40, 2, 4, 32, 2, 65, 3, 116, 106, 32, 6, 32, 8, 132, 55, 3, 0, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 1, 36, 4, 11, 32, 0, 66, 0, 55, 3, 24, 32, 0, 66, 0, 55, 3, 32, 65, 0, 33, 2, 3, 64, 32, 2, 32, 0, 40, 2, 4, 72, 4, 64, 32, 0, 40, 2, 0, 32, 2, 16, 18, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 32, 0, 66, 0, 55, 3, 40, 32, 0, 65, 0, 54, 2, 8, 32, 0, 66, 0, 55, 3, 16, 32, 0, 66, 0, 55, 3, 40, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 16, 19, 33, 1, 32, 0, 40, 2, 8, 32, 0, 40, 2, 0, 40, 2, 4, 106, 65, 1, 58, 0, 0, 32, 0, 32, 0, 41, 3, 40, 35, 6, 40, 2, 4, 32, 1, 65, 3, 116, 106, 41, 3, 0, 133, 55, 3, 40, 32, 0, 32, 0, 40, 2, 8, 65, 1, 106, 32, 0, 40, 2, 4, 111, 54, 2, 8, 32, 0, 35, 5, 40, 2, 4, 32, 0, 41, 3, 40, 34, 6, 66, 45, 136, 167, 65, 3, 116, 106, 41, 3, 0, 32, 6, 66, 8, 134, 66, 1, 132, 133, 55, 3, 40, 32, 0, 11, 38, 1, 1, 127, 32, 0, 40, 2, 0, 34, 0, 65, 172, 3, 75, 4, 64, 32, 0, 65, 16, 107, 34, 1, 32, 1, 40, 2, 4, 65, 1, 106, 54, 2, 4, 11, 32, 0, 11, 55, 1, 2, 127, 32, 1, 32, 0, 40, 2, 0, 34, 2, 71, 4, 64, 32, 1, 65, 172, 3, 75, 4, 64, 32, 1, 65, 16, 107, 34, 3, 32, 3, 40, 2, 4, 65, 1, 106, 54, 2, 4, 11, 32, 2, 16, 12, 11, 32, 0, 32, 1, 54, 2, 0, 11, 7, 0, 32, 0, 40, 2, 4, 11, 9, 0, 32, 0, 32, 1, 54, 2, 4, 11, 7, 0, 32, 0, 40, 2, 8, 11, 9, 0, 32, 0, 32, 1, 54, 2, 8, 11, 7, 0, 32, 0, 41, 3, 16, 11, 9, 0, 32, 0, 32, 1, 55, 3, 16, 11, 7, 0, 32, 0, 41, 3, 24, 11, 9, 0, 32, 0, 32, 1, 55, 3, 24, 11, 7, 0, 32, 0, 41, 3, 32, 11, 9, 0, 32, 0, 32, 1, 55, 3, 32, 11, 7, 0, 32, 0, 41, 3, 40, 11, 9, 0, 32, 0, 32, 1, 55, 3, 40, 11, 7, 0, 32, 0, 41, 3, 48, 11, 9, 0, 32, 0, 32, 1, 55, 3, 48, 11, 7, 0, 32, 0, 41, 3, 56, 11, 9, 0, 32, 0, 32, 1, 55, 3, 56, 11, 7, 0, 32, 0, 41, 3, 64, 11, 9, 0, 32, 0, 32, 1, 55, 3, 64, 11, 7, 0, 32, 0, 41, 3, 72, 11, 9, 0, 32, 0, 32, 1, 55, 3, 72, 11, 7, 0, 32, 0, 41, 3, 80, 11, 9, 0, 32, 0, 32, 1, 55, 3, 80, 11, 7, 0, 32, 0, 41, 3, 88, 11, 9, 0, 32, 0, 32, 1, 55, 3, 88, 11, 7, 0, 32, 0, 41, 3, 96, 11, 9, 0, 32, 0, 32, 1, 55, 3, 96, 11, 172, 4, 2, 5, 127, 1, 126, 32, 2, 65, 172, 3, 75, 4, 64, 32, 2, 65, 16, 107, 34, 4, 32, 4, 40, 2, 4, 65, 1, 106, 54, 2, 4, 11, 32, 2, 33, 4, 65, 0, 33, 2, 32, 1, 40, 2, 8, 33, 5, 32, 1, 40, 2, 4, 33, 6, 3, 64, 2, 127, 65, 0, 33, 3, 3, 64, 32, 3, 32, 5, 72, 4, 64, 32, 3, 32, 6, 106, 45, 0, 0, 33, 1, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 16, 19, 33, 7, 32, 0, 40, 2, 8, 32, 0, 40, 2, 0, 40, 2, 4, 106, 32, 1, 58, 0, 0, 32, 0, 32, 0, 41, 3, 40, 35, 6, 40, 2, 4, 32, 7, 65, 3, 116, 106, 41, 3, 0, 133, 55, 3, 40, 32, 0, 32, 0, 40, 2, 8, 65, 1, 106, 32, 0, 40, 2, 4, 111, 54, 2, 8, 32, 0, 35, 5, 40, 2, 4, 32, 0, 41, 3, 40, 34, 8, 66, 45, 136, 167, 65, 3, 116, 106, 41, 3, 0, 32, 1, 173, 32, 8, 66, 8, 134, 132, 133, 55, 3, 40, 32, 0, 32, 0, 41, 3, 16, 66, 1, 124, 55, 3, 16, 32, 0, 32, 0, 41, 3, 24, 66, 1, 124, 55, 3, 24, 32, 0, 41, 3, 16, 32, 0, 41, 3, 80, 90, 4, 127, 32, 0, 41, 3, 40, 32, 0, 41, 3, 96, 131, 80, 5, 65, 0, 11, 4, 127, 65, 1, 5, 32, 0, 41, 3, 16, 32, 0, 41, 3, 88, 90, 11, 4, 64, 32, 0, 32, 0, 41, 3, 32, 55, 3, 48, 32, 0, 32, 0, 41, 3, 16, 55, 3, 56, 32, 0, 32, 0, 41, 3, 40, 55, 3, 64, 65, 0, 33, 1, 3, 64, 32, 1, 32, 0, 40, 2, 4, 72, 4, 64, 32, 0, 40, 2, 0, 32, 1, 16, 18, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 32, 0, 66, 0, 55, 3, 40, 32, 0, 65, 0, 54, 2, 8, 32, 0, 66, 0, 55, 3, 16, 32, 0, 66, 0, 55, 3, 40, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 16, 19, 33, 1, 32, 0, 40, 2, 8, 32, 0, 40, 2, 0, 40, 2, 4, 106, 65, 1, 58, 0, 0, 32, 0, 32, 0, 41, 3, 40, 35, 6, 40, 2, 4, 32, 1, 65, 3, 116, 106, 41, 3, 0, 133, 55, 3, 40, 32, 0, 32, 0, 40, 2, 8, 65, 1, 106, 32, 0, 40, 2, 4, 111, 54, 2, 8, 32, 0, 35, 5, 40, 2, 4, 32, 0, 41, 3, 40, 34, 8, 66, 45, 136, 167, 65, 3, 116, 106, 41, 3, 0, 32, 8, 66, 8, 134, 66, 1, 132, 133, 55, 3, 40, 32, 3, 65, 1, 106, 12, 3, 11, 32, 3, 65, 1, 106, 33, 3, 12, 1, 11, 11, 65, 127, 11, 34, 1, 65, 0, 78, 4, 64, 32, 5, 32, 1, 107, 33, 5, 32, 1, 32, 6, 106, 33, 6, 32, 2, 34, 1, 65, 1, 106, 33, 2, 32, 4, 40, 2, 4, 32, 1, 65, 2, 116, 106, 32, 0, 41, 3, 56, 62, 2, 0, 12, 1, 11, 11, 32, 4, 11, 10, 0, 16, 15, 36, 5, 16, 15, 36, 6, 11, 3, 0, 1, 11, 73, 1, 2, 127, 32, 0, 40, 2, 4, 34, 1, 65, 255, 255, 255, 255, 0, 113, 34, 2, 65, 1, 70, 4, 64, 32, 0, 65, 16, 106, 16, 53, 32, 0, 32, 0, 40, 2, 0, 65, 1, 114, 54, 2, 0, 35, 0, 32, 0, 16, 2, 5, 32, 0, 32, 2, 65, 1, 107, 32, 1, 65, 128, 128, 128, 128, 127, 113, 114, 54, 2, 4, 11, 11, 58, 0, 2, 64, 2, 64, 2, 64, 32, 0, 65, 8, 107, 40, 2, 0, 14, 7, 0, 0, 1, 1, 1, 1, 1, 2, 11, 15, 11, 32, 0, 40, 2, 0, 34, 0, 4, 64, 32, 0, 65, 172, 3, 79, 4, 64, 32, 0, 65, 16, 107, 16, 52, 11, 11, 15, 11, 0, 11, 11, 137, 3, 7, 0, 65, 16, 11, 55, 40, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 40, 0, 0, 0, 97, 0, 108, 0, 108, 0, 111, 0, 99, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 32, 0, 116, 0, 111, 0, 111, 0, 32, 0, 108, 0, 97, 0, 114, 0, 103, 0, 101, 0, 65, 208, 0, 11, 45, 30, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 30, 0, 0, 0, 126, 0, 108, 0, 105, 0, 98, 0, 47, 0, 114, 0, 116, 0, 47, 0, 116, 0, 108, 0, 115, 0, 102, 0, 46, 0, 116, 0, 115, 0, 65, 128, 1, 11, 43, 28, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 28, 0, 0, 0, 73, 0, 110, 0, 118, 0, 97, 0, 108, 0, 105, 0, 100, 0, 32, 0, 108, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 65, 176, 1, 11, 53, 38, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 38, 0, 0, 0, 126, 0, 108, 0, 105, 0, 98, 0, 47, 0, 97, 0, 114, 0, 114, 0, 97, 0, 121, 0, 98, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 46, 0, 116, 0, 115, 0, 65, 240, 1, 11, 51, 36, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 36, 0, 0, 0, 73, 0, 110, 0, 100, 0, 101, 0, 120, 0, 32, 0, 111, 0, 117, 0, 116, 0, 32, 0, 111, 0, 102, 0, 32, 0, 114, 0, 97, 0, 110, 0, 103, 0, 101, 0, 65, 176, 2, 11, 51, 36, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 36, 0, 0, 0, 126, 0, 108, 0, 105, 0, 98, 0, 47, 0, 116, 0, 121, 0, 112, 0, 101, 0, 100, 0, 97, 0, 114, 0, 114, 0, 97, 0, 121, 0, 46, 0, 116, 0, 115, 0, 65, 240, 2, 11, 53, 7, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 145, 4, 0, 0, 2, 0, 0, 0, 49, 0, 0, 0, 2, 0, 0, 0, 17, 1, 0, 0, 2, 0, 0, 0, 16, 0, 34, 16, 115, 111, 117, 114, 99, 101, 77, 97, 112, 112, 105, 110, 103, 85, 82, 76, 16, 46, 47, 114, 97, 98, 105, 110, 46, 119, 97, 115, 109, 46, 109, 97, 112]);
        return instantiate(new Response(new Blob([wasm], { type: "application/wasm" })), imp);
      }
      module2.exports = loadWebAssembly;
    }
  });

  // node_modules/rabin-wasm/src/index.js
  var require_src = __commonJS({
    "node_modules/rabin-wasm/src/index.js"(exports2, module2) {
      var Rabin = require_rabin();
      var getRabin = require_rabin_wasm();
      var create5 = async (avg, min, max, windowSize, polynomial) => {
        const compiled = await getRabin();
        return new Rabin(compiled, avg, min, max, windowSize, polynomial);
      };
      module2.exports = {
        Rabin,
        create: create5
      };
    }
  });

  // node_modules/multiformats/esm/src/bases/identity.js
  var identity_exports = {};
  __export(identity_exports, {
    identity: () => identity
  });
  var identity;
  var init_identity = __esm({
    "node_modules/multiformats/esm/src/bases/identity.js"() {
      init_base();
      init_bytes();
      identity = from({
        prefix: "\0",
        name: "identity",
        encode: (buf2) => toString3(buf2),
        decode: (str) => fromString(str)
      });
    }
  });

  // node_modules/multiformats/esm/src/bases/base2.js
  var base2_exports = {};
  __export(base2_exports, {
    base2: () => base2
  });
  var base2;
  var init_base2 = __esm({
    "node_modules/multiformats/esm/src/bases/base2.js"() {
      init_base();
      base2 = rfc4648({
        prefix: "0",
        name: "base2",
        alphabet: "01",
        bitsPerChar: 1
      });
    }
  });

  // node_modules/multiformats/esm/src/bases/base8.js
  var base8_exports = {};
  __export(base8_exports, {
    base8: () => base8
  });
  var base8;
  var init_base8 = __esm({
    "node_modules/multiformats/esm/src/bases/base8.js"() {
      init_base();
      base8 = rfc4648({
        prefix: "7",
        name: "base8",
        alphabet: "01234567",
        bitsPerChar: 3
      });
    }
  });

  // node_modules/multiformats/esm/src/bases/base10.js
  var base10_exports = {};
  __export(base10_exports, {
    base10: () => base10
  });
  var base10;
  var init_base10 = __esm({
    "node_modules/multiformats/esm/src/bases/base10.js"() {
      init_base();
      base10 = baseX({
        prefix: "9",
        name: "base10",
        alphabet: "0123456789"
      });
    }
  });

  // node_modules/multiformats/esm/src/bases/base16.js
  var base16_exports = {};
  __export(base16_exports, {
    base16: () => base16,
    base16upper: () => base16upper
  });
  var base16, base16upper;
  var init_base16 = __esm({
    "node_modules/multiformats/esm/src/bases/base16.js"() {
      init_base();
      base16 = rfc4648({
        prefix: "f",
        name: "base16",
        alphabet: "0123456789abcdef",
        bitsPerChar: 4
      });
      base16upper = rfc4648({
        prefix: "F",
        name: "base16upper",
        alphabet: "0123456789ABCDEF",
        bitsPerChar: 4
      });
    }
  });

  // node_modules/multiformats/esm/src/bases/base36.js
  var base36_exports = {};
  __export(base36_exports, {
    base36: () => base36,
    base36upper: () => base36upper
  });
  var base36, base36upper;
  var init_base36 = __esm({
    "node_modules/multiformats/esm/src/bases/base36.js"() {
      init_base();
      base36 = baseX({
        prefix: "k",
        name: "base36",
        alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
      });
      base36upper = baseX({
        prefix: "K",
        name: "base36upper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      });
    }
  });

  // node_modules/multiformats/esm/src/bases/base64.js
  var base64_exports = {};
  __export(base64_exports, {
    base64: () => base64,
    base64pad: () => base64pad,
    base64url: () => base64url,
    base64urlpad: () => base64urlpad
  });
  var base64, base64pad, base64url, base64urlpad;
  var init_base64 = __esm({
    "node_modules/multiformats/esm/src/bases/base64.js"() {
      init_base();
      base64 = rfc4648({
        prefix: "m",
        name: "base64",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        bitsPerChar: 6
      });
      base64pad = rfc4648({
        prefix: "M",
        name: "base64pad",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
        bitsPerChar: 6
      });
      base64url = rfc4648({
        prefix: "u",
        name: "base64url",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
        bitsPerChar: 6
      });
      base64urlpad = rfc4648({
        prefix: "U",
        name: "base64urlpad",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
        bitsPerChar: 6
      });
    }
  });

  // node_modules/multiformats/esm/src/bases/base256emoji.js
  var base256emoji_exports = {};
  __export(base256emoji_exports, {
    base256emoji: () => base256emoji
  });
  function encode9(data) {
    return data.reduce((p2, c2) => {
      p2 += alphabetBytesToChars[c2];
      return p2;
    }, "");
  }
  function decode9(str) {
    const byts = [];
    for (const char of str) {
      const byt = alphabetCharsToBytes[char.codePointAt(0)];
      if (byt === void 0) {
        throw new Error(`Non-base256emoji character: ${char}`);
      }
      byts.push(byt);
    }
    return new Uint8Array(byts);
  }
  var alphabet, alphabetBytesToChars, alphabetCharsToBytes, base256emoji;
  var init_base256emoji = __esm({
    "node_modules/multiformats/esm/src/bases/base256emoji.js"() {
      init_base();
      alphabet = Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}");
      alphabetBytesToChars = alphabet.reduce((p2, c2, i3) => {
        p2[i3] = c2;
        return p2;
      }, []);
      alphabetCharsToBytes = alphabet.reduce((p2, c2, i3) => {
        p2[c2.codePointAt(0)] = i3;
        return p2;
      }, []);
      base256emoji = from({
        prefix: "\u{1F680}",
        name: "base256emoji",
        encode: encode9,
        decode: decode9
      });
    }
  });

  // node_modules/multiformats/esm/src/hashes/identity.js
  var identity_exports2 = {};
  __export(identity_exports2, {
    identity: () => identity2
  });
  var code4, name3, encode10, digest, identity2;
  var init_identity2 = __esm({
    "node_modules/multiformats/esm/src/hashes/identity.js"() {
      init_bytes();
      init_digest();
      code4 = 0;
      name3 = "identity";
      encode10 = coerce;
      digest = (input) => create2(code4, encode10(input));
      identity2 = {
        code: code4,
        name: name3,
        encode: encode10,
        digest
      };
    }
  });

  // node_modules/multiformats/esm/src/codecs/json.js
  var textEncoder4, textDecoder3;
  var init_json = __esm({
    "node_modules/multiformats/esm/src/codecs/json.js"() {
      textEncoder4 = new TextEncoder();
      textDecoder3 = new TextDecoder();
    }
  });

  // node_modules/multiformats/esm/src/basics.js
  var bases, hashes;
  var init_basics = __esm({
    "node_modules/multiformats/esm/src/basics.js"() {
      init_identity();
      init_base2();
      init_base8();
      init_base10();
      init_base16();
      init_base32();
      init_base36();
      init_base58();
      init_base64();
      init_base256emoji();
      init_sha2_browser();
      init_identity2();
      init_raw();
      init_json();
      init_src();
      bases = {
        ...identity_exports,
        ...base2_exports,
        ...base8_exports,
        ...base10_exports,
        ...base16_exports,
        ...base32_exports,
        ...base36_exports,
        ...base58_exports,
        ...base64_exports,
        ...base256emoji_exports
      };
      hashes = {
        ...sha2_browser_exports,
        ...identity_exports2
      };
    }
  });

  // node_modules/uint8arrays/esm/src/util/as-uint8array.js
  function asUint8Array(buf2) {
    if (globalThis.Buffer != null) {
      return new Uint8Array(buf2.buffer, buf2.byteOffset, buf2.byteLength);
    }
    return buf2;
  }
  var init_as_uint8array = __esm({
    "node_modules/uint8arrays/esm/src/util/as-uint8array.js"() {
    }
  });

  // node_modules/uint8arrays/esm/src/alloc.js
  function allocUnsafe(size = 0) {
    if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
      return asUint8Array(globalThis.Buffer.allocUnsafe(size));
    }
    return new Uint8Array(size);
  }
  var init_alloc = __esm({
    "node_modules/uint8arrays/esm/src/alloc.js"() {
      init_as_uint8array();
    }
  });

  // node_modules/uint8arrays/esm/src/util/bases.js
  function createCodec(name5, prefix, encode12, decode11) {
    return {
      name: name5,
      prefix,
      encoder: {
        name: name5,
        prefix,
        encode: encode12
      },
      decoder: { decode: decode11 }
    };
  }
  var string3, ascii, BASES, bases_default;
  var init_bases = __esm({
    "node_modules/uint8arrays/esm/src/util/bases.js"() {
      init_basics();
      init_alloc();
      string3 = createCodec("utf8", "u", (buf2) => {
        const decoder = new TextDecoder("utf8");
        return "u" + decoder.decode(buf2);
      }, (str) => {
        const encoder = new TextEncoder();
        return encoder.encode(str.substring(1));
      });
      ascii = createCodec("ascii", "a", (buf2) => {
        let string4 = "a";
        for (let i3 = 0; i3 < buf2.length; i3++) {
          string4 += String.fromCharCode(buf2[i3]);
        }
        return string4;
      }, (str) => {
        str = str.substring(1);
        const buf2 = allocUnsafe(str.length);
        for (let i3 = 0; i3 < str.length; i3++) {
          buf2[i3] = str.charCodeAt(i3);
        }
        return buf2;
      });
      BASES = {
        utf8: string3,
        "utf-8": string3,
        hex: bases.base16,
        latin1: ascii,
        ascii,
        binary: ascii,
        ...bases
      };
      bases_default = BASES;
    }
  });

  // node_modules/uint8arrays/esm/src/from-string.js
  var from_string_exports = {};
  __export(from_string_exports, {
    fromString: () => fromString3
  });
  function fromString3(string4, encoding = "utf8") {
    const base3 = bases_default[encoding];
    if (!base3) {
      throw new Error(`Unsupported encoding "${encoding}"`);
    }
    if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
      return asUint8Array(globalThis.Buffer.from(string4, "utf-8"));
    }
    return base3.decoder.decode(`${base3.prefix}${string4}`);
  }
  var init_from_string = __esm({
    "node_modules/uint8arrays/esm/src/from-string.js"() {
      init_bases();
      init_as_uint8array();
    }
  });

  // node_modules/sparse-array/index.js
  var require_sparse_array = __commonJS({
    "node_modules/sparse-array/index.js"(exports2, module2) {
      "use strict";
      var BITS_PER_BYTE = 7;
      module2.exports = class SparseArray {
        constructor() {
          this._bitArrays = [];
          this._data = [];
          this._length = 0;
          this._changedLength = false;
          this._changedData = false;
        }
        set(index3, value) {
          let pos = this._internalPositionFor(index3, false);
          if (value === void 0) {
            if (pos !== -1) {
              this._unsetInternalPos(pos);
              this._unsetBit(index3);
              this._changedLength = true;
              this._changedData = true;
            }
          } else {
            let needsSort = false;
            if (pos === -1) {
              pos = this._data.length;
              this._setBit(index3);
              this._changedData = true;
            } else {
              needsSort = true;
            }
            this._setInternalPos(pos, index3, value, needsSort);
            this._changedLength = true;
          }
        }
        unset(index3) {
          this.set(index3, void 0);
        }
        get(index3) {
          this._sortData();
          const pos = this._internalPositionFor(index3, true);
          if (pos === -1) {
            return void 0;
          }
          return this._data[pos][1];
        }
        push(value) {
          this.set(this.length, value);
          return this.length;
        }
        get length() {
          this._sortData();
          if (this._changedLength) {
            const last3 = this._data[this._data.length - 1];
            this._length = last3 ? last3[0] + 1 : 0;
            this._changedLength = false;
          }
          return this._length;
        }
        forEach(iterator) {
          let i3 = 0;
          while (i3 < this.length) {
            iterator(this.get(i3), i3, this);
            i3++;
          }
        }
        map(iterator) {
          let i3 = 0;
          let mapped = new Array(this.length);
          while (i3 < this.length) {
            mapped[i3] = iterator(this.get(i3), i3, this);
            i3++;
          }
          return mapped;
        }
        reduce(reducer, initialValue) {
          let i3 = 0;
          let acc = initialValue;
          while (i3 < this.length) {
            const value = this.get(i3);
            acc = reducer(acc, value, i3);
            i3++;
          }
          return acc;
        }
        find(finder) {
          let i3 = 0, found, last3;
          while (i3 < this.length && !found) {
            last3 = this.get(i3);
            found = finder(last3);
            i3++;
          }
          return found ? last3 : void 0;
        }
        _internalPositionFor(index3, noCreate) {
          const bytePos = this._bytePosFor(index3, noCreate);
          if (bytePos >= this._bitArrays.length) {
            return -1;
          }
          const byte = this._bitArrays[bytePos];
          const bitPos = index3 - bytePos * BITS_PER_BYTE;
          const exists = (byte & 1 << bitPos) > 0;
          if (!exists) {
            return -1;
          }
          const previousPopCount = this._bitArrays.slice(0, bytePos).reduce(popCountReduce, 0);
          const mask = ~(4294967295 << bitPos + 1);
          const bytePopCount = popCount(byte & mask);
          const arrayPos = previousPopCount + bytePopCount - 1;
          return arrayPos;
        }
        _bytePosFor(index3, noCreate) {
          const bytePos = Math.floor(index3 / BITS_PER_BYTE);
          const targetLength = bytePos + 1;
          while (!noCreate && this._bitArrays.length < targetLength) {
            this._bitArrays.push(0);
          }
          return bytePos;
        }
        _setBit(index3) {
          const bytePos = this._bytePosFor(index3, false);
          this._bitArrays[bytePos] |= 1 << index3 - bytePos * BITS_PER_BYTE;
        }
        _unsetBit(index3) {
          const bytePos = this._bytePosFor(index3, false);
          this._bitArrays[bytePos] &= ~(1 << index3 - bytePos * BITS_PER_BYTE);
        }
        _setInternalPos(pos, index3, value, needsSort) {
          const data = this._data;
          const elem = [index3, value];
          if (needsSort) {
            this._sortData();
            data[pos] = elem;
          } else {
            if (data.length) {
              if (data[data.length - 1][0] >= index3) {
                data.push(elem);
              } else if (data[0][0] <= index3) {
                data.unshift(elem);
              } else {
                const randomIndex = Math.round(data.length / 2);
                this._data = data.slice(0, randomIndex).concat(elem).concat(data.slice(randomIndex));
              }
            } else {
              this._data.push(elem);
            }
            this._changedData = true;
            this._changedLength = true;
          }
        }
        _unsetInternalPos(pos) {
          this._data.splice(pos, 1);
        }
        _sortData() {
          if (this._changedData) {
            this._data.sort(sortInternal);
          }
          this._changedData = false;
        }
        bitField() {
          const bytes = [];
          let pendingBitsForResultingByte = 8;
          let pendingBitsForNewByte = 0;
          let resultingByte = 0;
          let newByte;
          const pending = this._bitArrays.slice();
          while (pending.length || pendingBitsForNewByte) {
            if (pendingBitsForNewByte === 0) {
              newByte = pending.shift();
              pendingBitsForNewByte = 7;
            }
            const usingBits = Math.min(pendingBitsForNewByte, pendingBitsForResultingByte);
            const mask = ~(255 << usingBits);
            const masked = newByte & mask;
            resultingByte |= masked << 8 - pendingBitsForResultingByte;
            newByte = newByte >>> usingBits;
            pendingBitsForNewByte -= usingBits;
            pendingBitsForResultingByte -= usingBits;
            if (!pendingBitsForResultingByte || !pendingBitsForNewByte && !pending.length) {
              bytes.push(resultingByte);
              resultingByte = 0;
              pendingBitsForResultingByte = 8;
            }
          }
          for (var i3 = bytes.length - 1; i3 > 0; i3--) {
            const value = bytes[i3];
            if (value === 0) {
              bytes.pop();
            } else {
              break;
            }
          }
          return bytes;
        }
        compactArray() {
          this._sortData();
          return this._data.map(valueOnly);
        }
      };
      function popCountReduce(count2, byte) {
        return count2 + popCount(byte);
      }
      function popCount(_v) {
        let v2 = _v;
        v2 = v2 - (v2 >> 1 & 1431655765);
        v2 = (v2 & 858993459) + (v2 >> 2 & 858993459);
        return (v2 + (v2 >> 4) & 252645135) * 16843009 >> 24;
      }
      function sortInternal(a2, b2) {
        return a2[0] - b2[0];
      }
      function valueOnly(elem) {
        return elem[1];
      }
    }
  });

  // node_modules/hamt-sharding/src/bucket.js
  var require_bucket = __commonJS({
    "node_modules/hamt-sharding/src/bucket.js"(exports2, module2) {
      "use strict";
      var SparseArray = require_sparse_array();
      var { fromString: uint8ArrayFromString } = (init_from_string(), __toCommonJS(from_string_exports));
      var Bucket3 = class {
        /**
         * @param {BucketOptions} options
         * @param {Bucket<T>} [parent]
         * @param {number} [posAtParent=0]
         */
        constructor(options, parent, posAtParent = 0) {
          this._options = options;
          this._popCount = 0;
          this._parent = parent;
          this._posAtParent = posAtParent;
          this._children = new SparseArray();
          this.key = null;
        }
        /**
         * @param {string} key
         * @param {T} value
         */
        async put(key2, value) {
          const place = await this._findNewBucketAndPos(key2);
          await place.bucket._putAt(place, key2, value);
        }
        /**
         * @param {string} key
         */
        async get(key2) {
          const child = await this._findChild(key2);
          if (child) {
            return child.value;
          }
        }
        /**
         * @param {string} key
         */
        async del(key2) {
          const place = await this._findPlace(key2);
          const child = place.bucket._at(place.pos);
          if (child && child.key === key2) {
            place.bucket._delAt(place.pos);
          }
        }
        /**
         * @returns {number}
         */
        leafCount() {
          const children = this._children.compactArray();
          return children.reduce((acc, child) => {
            if (child instanceof Bucket3) {
              return acc + child.leafCount();
            }
            return acc + 1;
          }, 0);
        }
        childrenCount() {
          return this._children.length;
        }
        onlyChild() {
          return this._children.get(0);
        }
        /**
         * @returns {Iterable<BucketChild<T>>}
         */
        *eachLeafSeries() {
          const children = this._children.compactArray();
          for (const child of children) {
            if (child instanceof Bucket3) {
              yield* child.eachLeafSeries();
            } else {
              yield child;
            }
          }
          return [];
        }
        /**
         * @param {(value: BucketChild<T>, index: number) => T} map
         * @param {(reduced: any) => any} reduce
         */
        serialize(map3, reduce2) {
          const acc = [];
          return reduce2(this._children.reduce((acc2, child, index3) => {
            if (child) {
              if (child instanceof Bucket3) {
                acc2.push(child.serialize(map3, reduce2));
              } else {
                acc2.push(map3(child, index3));
              }
            }
            return acc2;
          }, acc));
        }
        /**
         * @param {(value: BucketChild<T>) => Promise<T[]>} asyncMap
         * @param {(reduced: any) => Promise<any>} asyncReduce
         */
        asyncTransform(asyncMap2, asyncReduce) {
          return asyncTransformBucket(this, asyncMap2, asyncReduce);
        }
        toJSON() {
          return this.serialize(mapNode, reduceNodes);
        }
        prettyPrint() {
          return JSON.stringify(this.toJSON(), null, "  ");
        }
        tableSize() {
          return Math.pow(2, this._options.bits);
        }
        /**
         * @param {string} key
         * @returns {Promise<BucketChild<T> | undefined>}
         */
        async _findChild(key2) {
          const result = await this._findPlace(key2);
          const child = result.bucket._at(result.pos);
          if (child instanceof Bucket3) {
            return void 0;
          }
          if (child && child.key === key2) {
            return child;
          }
        }
        /**
         * @param {string | InfiniteHash} key
         * @returns {Promise<BucketPosition<T>>}
         */
        async _findPlace(key2) {
          const hashValue = this._options.hash(typeof key2 === "string" ? uint8ArrayFromString(key2) : key2);
          const index3 = await hashValue.take(this._options.bits);
          const child = this._children.get(index3);
          if (child instanceof Bucket3) {
            return child._findPlace(hashValue);
          }
          return {
            bucket: this,
            pos: index3,
            hash: hashValue,
            existingChild: child
          };
        }
        /**
         * @param {string | InfiniteHash} key
         * @returns {Promise<BucketPosition<T>>}
         */
        async _findNewBucketAndPos(key2) {
          const place = await this._findPlace(key2);
          if (place.existingChild && place.existingChild.key !== key2) {
            const bucket = new Bucket3(this._options, place.bucket, place.pos);
            place.bucket._putObjectAt(place.pos, bucket);
            const newPlace = await bucket._findPlace(place.existingChild.hash);
            newPlace.bucket._putAt(newPlace, place.existingChild.key, place.existingChild.value);
            return bucket._findNewBucketAndPos(place.hash);
          }
          return place;
        }
        /**
         * @param {BucketPosition<T>} place
         * @param {string} key
         * @param {T} value
         */
        _putAt(place, key2, value) {
          this._putObjectAt(place.pos, {
            key: key2,
            value,
            hash: place.hash
          });
        }
        /**
         * @param {number} pos
         * @param {Bucket<T> | BucketChild<T>} object
         */
        _putObjectAt(pos, object4) {
          if (!this._children.get(pos)) {
            this._popCount++;
          }
          this._children.set(pos, object4);
        }
        /**
         * @param {number} pos
         */
        _delAt(pos) {
          if (pos === -1) {
            throw new Error("Invalid position");
          }
          if (this._children.get(pos)) {
            this._popCount--;
          }
          this._children.unset(pos);
          this._level();
        }
        _level() {
          if (this._parent && this._popCount <= 1) {
            if (this._popCount === 1) {
              const onlyChild = this._children.find(exists);
              if (onlyChild && !(onlyChild instanceof Bucket3)) {
                const hash = onlyChild.hash;
                hash.untake(this._options.bits);
                const place = {
                  pos: this._posAtParent,
                  hash,
                  bucket: this._parent
                };
                this._parent._putAt(place, onlyChild.key, onlyChild.value);
              }
            } else {
              this._parent._delAt(this._posAtParent);
            }
          }
        }
        /**
         * @param {number} index
         * @returns {BucketChild<T> | Bucket<T> | undefined}
         */
        _at(index3) {
          return this._children.get(index3);
        }
      };
      function exists(o2) {
        return Boolean(o2);
      }
      function mapNode(node, index3) {
        return node.key;
      }
      function reduceNodes(nodes) {
        return nodes;
      }
      async function asyncTransformBucket(bucket, asyncMap2, asyncReduce) {
        const output = [];
        for (const child of bucket._children.compactArray()) {
          if (child instanceof Bucket3) {
            await asyncTransformBucket(child, asyncMap2, asyncReduce);
          } else {
            const mappedChildren = await asyncMap2(child);
            output.push({
              bitField: bucket._children.bitField(),
              children: mappedChildren
            });
          }
        }
        return asyncReduce(output);
      }
      module2.exports = Bucket3;
    }
  });

  // node_modules/hamt-sharding/src/consumable-buffer.js
  var require_consumable_buffer = __commonJS({
    "node_modules/hamt-sharding/src/consumable-buffer.js"(exports2, module2) {
      "use strict";
      var START_MASKS = [
        255,
        254,
        252,
        248,
        240,
        224,
        192,
        128
      ];
      var STOP_MASKS = [
        1,
        3,
        7,
        15,
        31,
        63,
        127,
        255
      ];
      module2.exports = class ConsumableBuffer {
        /**
         * @param {Uint8Array} value
         */
        constructor(value) {
          this._value = value;
          this._currentBytePos = value.length - 1;
          this._currentBitPos = 7;
        }
        availableBits() {
          return this._currentBitPos + 1 + this._currentBytePos * 8;
        }
        totalBits() {
          return this._value.length * 8;
        }
        /**
         * @param {number} bits
         */
        take(bits) {
          let pendingBits = bits;
          let result = 0;
          while (pendingBits && this._haveBits()) {
            const byte = this._value[this._currentBytePos];
            const availableBits = this._currentBitPos + 1;
            const taking = Math.min(availableBits, pendingBits);
            const value = byteBitsToInt(byte, availableBits - taking, taking);
            result = (result << taking) + value;
            pendingBits -= taking;
            this._currentBitPos -= taking;
            if (this._currentBitPos < 0) {
              this._currentBitPos = 7;
              this._currentBytePos--;
            }
          }
          return result;
        }
        /**
         * @param {number} bits
         */
        untake(bits) {
          this._currentBitPos += bits;
          while (this._currentBitPos > 7) {
            this._currentBitPos -= 8;
            this._currentBytePos += 1;
          }
        }
        _haveBits() {
          return this._currentBytePos >= 0;
        }
      };
      function byteBitsToInt(byte, start, length2) {
        const mask = maskFor(start, length2);
        return (byte & mask) >>> start;
      }
      function maskFor(start, length2) {
        return START_MASKS[start] & STOP_MASKS[Math.min(length2 + start - 1, 7)];
      }
    }
  });

  // node_modules/uint8arrays/esm/src/concat.js
  var concat_exports = {};
  __export(concat_exports, {
    concat: () => concat2
  });
  function concat2(arrays, length2) {
    if (!length2) {
      length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
    }
    const output = allocUnsafe(length2);
    let offset3 = 0;
    for (const arr of arrays) {
      output.set(arr, offset3);
      offset3 += arr.length;
    }
    return asUint8Array(output);
  }
  var init_concat = __esm({
    "node_modules/uint8arrays/esm/src/concat.js"() {
      init_alloc();
      init_as_uint8array();
    }
  });

  // node_modules/hamt-sharding/src/consumable-hash.js
  var require_consumable_hash = __commonJS({
    "node_modules/hamt-sharding/src/consumable-hash.js"(exports2, module2) {
      "use strict";
      var ConsumableBuffer = require_consumable_buffer();
      var { concat: uint8ArrayConcat } = (init_concat(), __toCommonJS(concat_exports));
      function wrapHash(hashFn2) {
        function hashing(value) {
          if (value instanceof InfiniteHash) {
            return value;
          } else {
            return new InfiniteHash(value, hashFn2);
          }
        }
        return hashing;
      }
      var InfiniteHash = class {
        /**
         *
         * @param {Uint8Array} value
         * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn
         */
        constructor(value, hashFn2) {
          if (!(value instanceof Uint8Array)) {
            throw new Error("can only hash Uint8Arrays");
          }
          this._value = value;
          this._hashFn = hashFn2;
          this._depth = -1;
          this._availableBits = 0;
          this._currentBufferIndex = 0;
          this._buffers = [];
        }
        /**
         * @param {number} bits
         */
        async take(bits) {
          let pendingBits = bits;
          while (this._availableBits < pendingBits) {
            await this._produceMoreBits();
          }
          let result = 0;
          while (pendingBits > 0) {
            const hash = this._buffers[this._currentBufferIndex];
            const available = Math.min(hash.availableBits(), pendingBits);
            const took = hash.take(available);
            result = (result << available) + took;
            pendingBits -= available;
            this._availableBits -= available;
            if (hash.availableBits() === 0) {
              this._currentBufferIndex++;
            }
          }
          return result;
        }
        /**
         * @param {number} bits
         */
        untake(bits) {
          let pendingBits = bits;
          while (pendingBits > 0) {
            const hash = this._buffers[this._currentBufferIndex];
            const availableForUntake = Math.min(hash.totalBits() - hash.availableBits(), pendingBits);
            hash.untake(availableForUntake);
            pendingBits -= availableForUntake;
            this._availableBits += availableForUntake;
            if (this._currentBufferIndex > 0 && hash.totalBits() === hash.availableBits()) {
              this._depth--;
              this._currentBufferIndex--;
            }
          }
        }
        async _produceMoreBits() {
          this._depth++;
          const value = this._depth ? uint8ArrayConcat([this._value, Uint8Array.from([this._depth])]) : this._value;
          const hashValue = await this._hashFn(value);
          const buffer2 = new ConsumableBuffer(hashValue);
          this._buffers.push(buffer2);
          this._availableBits += buffer2.availableBits();
        }
      };
      module2.exports = wrapHash;
      module2.exports.InfiniteHash = InfiniteHash;
    }
  });

  // node_modules/hamt-sharding/src/index.js
  var require_src2 = __commonJS({
    "node_modules/hamt-sharding/src/index.js"(exports2, module2) {
      "use strict";
      var Bucket3 = require_bucket();
      var wrapHash = require_consumable_hash();
      function createHAMT3(options) {
        if (!options || !options.hashFn) {
          throw new Error("please define an options.hashFn");
        }
        const bucketOptions = {
          bits: options.bits || 8,
          hash: wrapHash(options.hashFn)
        };
        return new Bucket3(bucketOptions);
      }
      module2.exports = {
        createHAMT: createHAMT3,
        Bucket: Bucket3
      };
    }
  });

  // node_modules/browser-readablestream-to-it/index.js
  var require_browser_readablestream_to_it = __commonJS({
    "node_modules/browser-readablestream-to-it/index.js"(exports2, module2) {
      "use strict";
      async function* browserReadableStreamToIt(stream, options = {}) {
        const reader = stream.getReader();
        try {
          while (true) {
            const result = await reader.read();
            if (result.done) {
              return;
            }
            yield result.value;
          }
        } finally {
          if (options.preventCancel !== true) {
            reader.cancel();
          }
          reader.releaseLock();
        }
      }
      module2.exports = browserReadableStreamToIt;
    }
  });

  // node_modules/blob-to-it/index.js
  var require_blob_to_it = __commonJS({
    "node_modules/blob-to-it/index.js"(exports2, module2) {
      "use strict";
      var browserReadableStreamToIt = require_browser_readablestream_to_it();
      function blobToIt2(blob) {
        if (typeof blob.stream === "function") {
          return browserReadableStreamToIt(blob.stream());
        }
        return browserReadableStreamToIt(new Response(blob).body);
      }
      module2.exports = blobToIt2;
    }
  });

  // node_modules/it-peekable/index.js
  var require_it_peekable = __commonJS({
    "node_modules/it-peekable/index.js"(exports2, module2) {
      "use strict";
      function peekableIterator(iterable) {
        const [iterator, symbol] = iterable[Symbol.asyncIterator] ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator] : [iterable[Symbol.iterator](), Symbol.iterator];
        const queue = [];
        return {
          peek: () => {
            return iterator.next();
          },
          push: (value) => {
            queue.push(value);
          },
          next: () => {
            if (queue.length) {
              return {
                done: false,
                value: queue.shift()
              };
            }
            return iterator.next();
          },
          [symbol]() {
            return this;
          }
        };
      }
      module2.exports = peekableIterator;
    }
  });

  // node_modules/it-map/index.js
  var require_it_map = __commonJS({
    "node_modules/it-map/index.js"(exports2, module2) {
      "use strict";
      var map3 = async function* (source, func) {
        for await (const val of source) {
          yield func(val);
        }
      };
      module2.exports = map3;
    }
  });

  // node_modules/it-drain/index.js
  var require_it_drain = __commonJS({
    "node_modules/it-drain/index.js"(exports2, module2) {
      "use strict";
      var drain2 = async (source) => {
        for await (const _ of source) {
        }
      };
      module2.exports = drain2;
    }
  });

  // node_modules/it-filter/index.js
  var require_it_filter = __commonJS({
    "node_modules/it-filter/index.js"(exports2, module2) {
      "use strict";
      var filter4 = async function* (source, fn) {
        for await (const entry of source) {
          if (await fn(entry)) {
            yield entry;
          }
        }
      };
      module2.exports = filter4;
    }
  });

  // node_modules/it-take/index.js
  var require_it_take = __commonJS({
    "node_modules/it-take/index.js"(exports2, module2) {
      "use strict";
      var take2 = async function* (source, limit) {
        let items = 0;
        if (limit < 1) {
          return;
        }
        for await (const entry of source) {
          yield entry;
          items++;
          if (items === limit) {
            return;
          }
        }
      };
      module2.exports = take2;
    }
  });

  // node_modules/throttled-queue/dist/throttledQueue.js
  var require_throttledQueue = __commonJS({
    "node_modules/throttled-queue/dist/throttledQueue.js"(exports2, module2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      function throttledQueue2(maxRequestsPerInterval, interval, evenlySpaced) {
        if (evenlySpaced === void 0) {
          evenlySpaced = false;
        }
        if (evenlySpaced) {
          interval = interval / maxRequestsPerInterval;
          maxRequestsPerInterval = 1;
        }
        var queue = [];
        var lastIntervalStart = 0;
        var numRequestsPerInterval = 0;
        var timeout;
        var dequeue = function() {
          var intervalEnd = lastIntervalStart + interval;
          var now3 = Date.now();
          if (now3 < intervalEnd) {
            timeout !== void 0 && clearTimeout(timeout);
            timeout = setTimeout(dequeue, intervalEnd - now3);
            return;
          }
          lastIntervalStart = now3;
          numRequestsPerInterval = 0;
          for (var _i = 0, _a = queue.splice(0, maxRequestsPerInterval); _i < _a.length; _i++) {
            var callback = _a[_i];
            numRequestsPerInterval++;
            void callback();
          }
          if (queue.length) {
            timeout = setTimeout(dequeue, interval);
          } else {
            timeout = void 0;
          }
        };
        return function(fn) {
          return new Promise(function(resolve5, reject) {
            var callback = function() {
              return Promise.resolve().then(fn).then(resolve5).catch(reject);
            };
            var now3 = Date.now();
            if (timeout === void 0 && now3 - lastIntervalStart > interval) {
              lastIntervalStart = now3;
              numRequestsPerInterval = 0;
            }
            if (numRequestsPerInterval++ < maxRequestsPerInterval) {
              void callback();
            } else {
              queue.push(callback);
              if (timeout === void 0) {
                timeout = setTimeout(dequeue, lastIntervalStart + interval - now3);
              }
            }
          });
        };
      }
      module2.exports = throttledQueue2;
      exports2.default = throttledQueue2;
    }
  });

  // node_modules/web-vitals/dist/web-vitals.js
  var web_vitals_exports = {};
  __export(web_vitals_exports, {
    getCLS: () => h,
    getFCP: () => d,
    getFID: () => L,
    getLCP: () => F,
    getTTFB: () => P
  });
  var e2, t2, n2, i2, r2, a, o, u, c, f, s, m, v, d, p, l, h, T, y, g, E, S, w, L, b, F, P;
  var init_web_vitals = __esm({
    "node_modules/web-vitals/dist/web-vitals.js"() {
      r2 = function(e3, t3) {
        return { name: e3, value: void 0 === t3 ? -1 : t3, delta: 0, entries: [], id: "v2-".concat(Date.now(), "-").concat(Math.floor(8999999999999 * Math.random()) + 1e12) };
      };
      a = function(e3, t3) {
        try {
          if (PerformanceObserver.supportedEntryTypes.includes(e3)) {
            if ("first-input" === e3 && !("PerformanceEventTiming" in self))
              return;
            var n3 = new PerformanceObserver(function(e4) {
              return e4.getEntries().map(t3);
            });
            return n3.observe({ type: e3, buffered: true }), n3;
          }
        } catch (e4) {
        }
      };
      o = function(e3, t3) {
        var n3 = function n4(i3) {
          "pagehide" !== i3.type && "hidden" !== document.visibilityState || (e3(i3), t3 && (removeEventListener("visibilitychange", n4, true), removeEventListener("pagehide", n4, true)));
        };
        addEventListener("visibilitychange", n3, true), addEventListener("pagehide", n3, true);
      };
      u = function(e3) {
        addEventListener("pageshow", function(t3) {
          t3.persisted && e3(t3);
        }, true);
      };
      c = function(e3, t3, n3) {
        var i3;
        return function(r3) {
          t3.value >= 0 && (r3 || n3) && (t3.delta = t3.value - (i3 || 0), (t3.delta || void 0 === i3) && (i3 = t3.value, e3(t3)));
        };
      };
      f = -1;
      s = function() {
        return "hidden" === document.visibilityState ? 0 : 1 / 0;
      };
      m = function() {
        o(function(e3) {
          var t3 = e3.timeStamp;
          f = t3;
        }, true);
      };
      v = function() {
        return f < 0 && (f = s(), m(), u(function() {
          setTimeout(function() {
            f = s(), m();
          }, 0);
        })), { get firstHiddenTime() {
          return f;
        } };
      };
      d = function(e3, t3) {
        var n3, i3 = v(), o2 = r2("FCP"), f2 = function(e4) {
          "first-contentful-paint" === e4.name && (m2 && m2.disconnect(), e4.startTime < i3.firstHiddenTime && (o2.value = e4.startTime, o2.entries.push(e4), n3(true)));
        }, s2 = window.performance && performance.getEntriesByName && performance.getEntriesByName("first-contentful-paint")[0], m2 = s2 ? null : a("paint", f2);
        (s2 || m2) && (n3 = c(e3, o2, t3), s2 && f2(s2), u(function(i4) {
          o2 = r2("FCP"), n3 = c(e3, o2, t3), requestAnimationFrame(function() {
            requestAnimationFrame(function() {
              o2.value = performance.now() - i4.timeStamp, n3(true);
            });
          });
        }));
      };
      p = false;
      l = -1;
      h = function(e3, t3) {
        p || (d(function(e4) {
          l = e4.value;
        }), p = true);
        var n3, i3 = function(t4) {
          l > -1 && e3(t4);
        }, f2 = r2("CLS", 0), s2 = 0, m2 = [], v2 = function(e4) {
          if (!e4.hadRecentInput) {
            var t4 = m2[0], i4 = m2[m2.length - 1];
            s2 && e4.startTime - i4.startTime < 1e3 && e4.startTime - t4.startTime < 5e3 ? (s2 += e4.value, m2.push(e4)) : (s2 = e4.value, m2 = [e4]), s2 > f2.value && (f2.value = s2, f2.entries = m2, n3());
          }
        }, h2 = a("layout-shift", v2);
        h2 && (n3 = c(i3, f2, t3), o(function() {
          h2.takeRecords().map(v2), n3(true);
        }), u(function() {
          s2 = 0, l = -1, f2 = r2("CLS", 0), n3 = c(i3, f2, t3);
        }));
      };
      T = { passive: true, capture: true };
      y = /* @__PURE__ */ new Date();
      g = function(i3, r3) {
        e2 || (e2 = r3, t2 = i3, n2 = /* @__PURE__ */ new Date(), w(removeEventListener), E());
      };
      E = function() {
        if (t2 >= 0 && t2 < n2 - y) {
          var r3 = { entryType: "first-input", name: e2.type, target: e2.target, cancelable: e2.cancelable, startTime: e2.timeStamp, processingStart: e2.timeStamp + t2 };
          i2.forEach(function(e3) {
            e3(r3);
          }), i2 = [];
        }
      };
      S = function(e3) {
        if (e3.cancelable) {
          var t3 = (e3.timeStamp > 1e12 ? /* @__PURE__ */ new Date() : performance.now()) - e3.timeStamp;
          "pointerdown" == e3.type ? function(e4, t4) {
            var n3 = function() {
              g(e4, t4), r3();
            }, i3 = function() {
              r3();
            }, r3 = function() {
              removeEventListener("pointerup", n3, T), removeEventListener("pointercancel", i3, T);
            };
            addEventListener("pointerup", n3, T), addEventListener("pointercancel", i3, T);
          }(t3, e3) : g(t3, e3);
        }
      };
      w = function(e3) {
        ["mousedown", "keydown", "touchstart", "pointerdown"].forEach(function(t3) {
          return e3(t3, S, T);
        });
      };
      L = function(n3, f2) {
        var s2, m2 = v(), d2 = r2("FID"), p2 = function(e3) {
          e3.startTime < m2.firstHiddenTime && (d2.value = e3.processingStart - e3.startTime, d2.entries.push(e3), s2(true));
        }, l2 = a("first-input", p2);
        s2 = c(n3, d2, f2), l2 && o(function() {
          l2.takeRecords().map(p2), l2.disconnect();
        }, true), l2 && u(function() {
          var a2;
          d2 = r2("FID"), s2 = c(n3, d2, f2), i2 = [], t2 = -1, e2 = null, w(addEventListener), a2 = p2, i2.push(a2), E();
        });
      };
      b = {};
      F = function(e3, t3) {
        var n3, i3 = v(), f2 = r2("LCP"), s2 = function(e4) {
          var t4 = e4.startTime;
          t4 < i3.firstHiddenTime && (f2.value = t4, f2.entries.push(e4), n3());
        }, m2 = a("largest-contentful-paint", s2);
        if (m2) {
          n3 = c(e3, f2, t3);
          var d2 = function() {
            b[f2.id] || (m2.takeRecords().map(s2), m2.disconnect(), b[f2.id] = true, n3(true));
          };
          ["keydown", "click"].forEach(function(e4) {
            addEventListener(e4, d2, { once: true, capture: true });
          }), o(d2, true), u(function(i4) {
            f2 = r2("LCP"), n3 = c(e3, f2, t3), requestAnimationFrame(function() {
              requestAnimationFrame(function() {
                f2.value = performance.now() - i4.timeStamp, b[f2.id] = true, n3(true);
              });
            });
          });
        }
      };
      P = function(e3) {
        var t3, n3 = r2("TTFB");
        t3 = function() {
          try {
            var t4 = performance.getEntriesByType("navigation")[0] || function() {
              var e4 = performance.timing, t5 = { entryType: "navigation", startTime: 0 };
              for (var n4 in e4)
                "navigationStart" !== n4 && "toJSON" !== n4 && (t5[n4] = Math.max(e4[n4] - e4.navigationStart, 0));
              return t5;
            }();
            if (n3.value = n3.delta = t4.responseStart, n3.value < 0 || n3.value > performance.now())
              return;
            n3.entries = [t4], e3(n3);
          } catch (e4) {
          }
        }, "complete" === document.readyState ? setTimeout(t3, 0) : addEventListener("load", function() {
          return setTimeout(t3, 0);
        });
      };
    }
  });

  // src/index.tsx
  var import_react83 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // src/App.tsx
  var import_react82 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key2 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  }

  // node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  // node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  function _toPropertyKey(arg) {
    var key2 = _toPrimitive(arg, "string");
    return _typeof(key2) === "symbol" ? key2 : String(key2);
  }

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(obj, key2, value) {
    key2 = _toPropertyKey(key2);
    if (key2 in obj) {
      Object.defineProperty(obj, key2, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key2] = value;
    }
    return obj;
  }

  // node_modules/@babel/runtime/helpers/esm/classCallCheck.js
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  // node_modules/@babel/runtime/helpers/esm/createClass.js
  function _defineProperties(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o2, p2) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf(o2, p2);
  }

  // node_modules/@babel/runtime/helpers/esm/inherits.js
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }

  // node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
  function _getPrototypeOf(o2) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf(o2);
  }

  // node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }

  // node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
  function _possibleConstructorReturn(self2, call2) {
    if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
      return call2;
    } else if (call2 !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self2);
  }

  // node_modules/@babel/runtime/helpers/esm/createSuper.js
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }

  // node_modules/rc-resize-observer/es/index.js
  var React7 = __toESM(require_react());

  // node_modules/rc-util/es/Children/toArray.js
  var import_react = __toESM(require_react());
  var import_react_is = __toESM(require_react_is());
  function toArray(children) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var ret = [];
    import_react.default.Children.forEach(children, function(child) {
      if ((child === void 0 || child === null) && !option.keepEmpty) {
        return;
      }
      if (Array.isArray(child)) {
        ret = ret.concat(toArray(child));
      } else if ((0, import_react_is.isFragment)(child) && child.props) {
        ret = ret.concat(toArray(child.props.children, option));
      } else {
        ret.push(child);
      }
    });
    return ret;
  }

  // node_modules/rc-util/es/warning.js
  var warned = {};
  var preWarningFns = [];
  var preMessage = function preMessage2(fn) {
    preWarningFns.push(fn);
  };
  function warning(valid, message) {
    if (!valid && console !== void 0) {
      var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
        return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "warning");
      }, message);
      if (finalMessage) {
        console.error("Warning: ".concat(finalMessage));
      }
    }
  }
  function note(valid, message) {
    if (!valid && console !== void 0) {
      var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
        return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "note");
      }, message);
      if (finalMessage) {
        console.warn("Note: ".concat(finalMessage));
      }
    }
  }
  function resetWarned() {
    warned = {};
  }
  function call(method4, valid, message) {
    if (!valid && !warned[message]) {
      method4(false, message);
      warned[message] = true;
    }
  }
  function warningOnce(valid, message) {
    call(warning, valid, message);
  }
  function noteOnce(valid, message) {
    call(note, valid, message);
  }
  warningOnce.preMessage = preMessage;
  warningOnce.resetWarned = resetWarned;
  warningOnce.noteOnce = noteOnce;
  var warning_default = warningOnce;

  // node_modules/@babel/runtime/helpers/esm/objectSpread2.js
  function ownKeys(object4, enumerableOnly) {
    var keys = Object.keys(object4);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object4);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = null != arguments[i3] ? arguments[i3] : {};
      i3 % 2 ? ownKeys(Object(source), true).forEach(function(key2) {
        _defineProperty(target, key2, source[key2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
      });
    }
    return target;
  }

  // node_modules/rc-util/es/ref.js
  var import_react_is2 = __toESM(require_react_is());

  // node_modules/rc-util/es/hooks/useMemo.js
  var React2 = __toESM(require_react());
  function useMemo(getValue4, condition, shouldUpdate) {
    var cacheRef = React2.useRef({});
    if (!("value" in cacheRef.current) || shouldUpdate(cacheRef.current.condition, condition)) {
      cacheRef.current.value = getValue4();
      cacheRef.current.condition = condition;
    }
    return cacheRef.current.value;
  }

  // node_modules/rc-util/es/ref.js
  function fillRef(ref, node) {
    if (typeof ref === "function") {
      ref(node);
    } else if (_typeof(ref) === "object" && ref && "current" in ref) {
      ref.current = node;
    }
  }
  function composeRef() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }
    var refList = refs.filter(function(ref) {
      return ref;
    });
    if (refList.length <= 1) {
      return refList[0];
    }
    return function(node) {
      refs.forEach(function(ref) {
        fillRef(ref, node);
      });
    };
  }
  function useComposeRef() {
    for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      refs[_key2] = arguments[_key2];
    }
    return useMemo(function() {
      return composeRef.apply(void 0, refs);
    }, refs, function(prev, next) {
      return prev.length === next.length && prev.every(function(ref, i3) {
        return ref === next[i3];
      });
    });
  }
  function supportRef(nodeOrComponent) {
    var _type$prototype, _nodeOrComponent$prot;
    var type4 = (0, import_react_is2.isMemo)(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type;
    if (typeof type4 === "function" && !((_type$prototype = type4.prototype) !== null && _type$prototype !== void 0 && _type$prototype.render)) {
      return false;
    }
    if (typeof nodeOrComponent === "function" && !((_nodeOrComponent$prot = nodeOrComponent.prototype) !== null && _nodeOrComponent$prot !== void 0 && _nodeOrComponent$prot.render)) {
      return false;
    }
    return true;
  }

  // node_modules/rc-resize-observer/es/SingleObserver/index.js
  var React6 = __toESM(require_react());

  // node_modules/rc-util/es/Dom/findDOMNode.js
  var import_react2 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());
  function isDOM(node) {
    return node instanceof HTMLElement || node instanceof SVGElement;
  }
  function findDOMNode(node) {
    if (isDOM(node)) {
      return node;
    }
    if (node instanceof import_react2.default.Component) {
      return import_react_dom.default.findDOMNode(node);
    }
    return null;
  }

  // node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
  var MapShim = function() {
    if (typeof Map !== "undefined") {
      return Map;
    }
    function getIndex(arr, key2) {
      var result = -1;
      arr.some(function(entry, index3) {
        if (entry[0] === key2) {
          result = index3;
          return true;
        }
        return false;
      });
      return result;
    }
    return (
      /** @class */
      function() {
        function class_1() {
          this.__entries__ = [];
        }
        Object.defineProperty(class_1.prototype, "size", {
          /**
           * @returns {boolean}
           */
          get: function() {
            return this.__entries__.length;
          },
          enumerable: true,
          configurable: true
        });
        class_1.prototype.get = function(key2) {
          var index3 = getIndex(this.__entries__, key2);
          var entry = this.__entries__[index3];
          return entry && entry[1];
        };
        class_1.prototype.set = function(key2, value) {
          var index3 = getIndex(this.__entries__, key2);
          if (~index3) {
            this.__entries__[index3][1] = value;
          } else {
            this.__entries__.push([key2, value]);
          }
        };
        class_1.prototype.delete = function(key2) {
          var entries = this.__entries__;
          var index3 = getIndex(entries, key2);
          if (~index3) {
            entries.splice(index3, 1);
          }
        };
        class_1.prototype.has = function(key2) {
          return !!~getIndex(this.__entries__, key2);
        };
        class_1.prototype.clear = function() {
          this.__entries__.splice(0);
        };
        class_1.prototype.forEach = function(callback, ctx) {
          if (ctx === void 0) {
            ctx = null;
          }
          for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
            var entry = _a[_i];
            callback.call(ctx, entry[1], entry[0]);
          }
        };
        return class_1;
      }()
    );
  }();
  var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
  var global$1 = function() {
    if (typeof global !== "undefined" && global.Math === Math) {
      return global;
    }
    if (typeof self !== "undefined" && self.Math === Math) {
      return self;
    }
    if (typeof window !== "undefined" && window.Math === Math) {
      return window;
    }
    return Function("return this")();
  }();
  var requestAnimationFrame$1 = function() {
    if (typeof requestAnimationFrame === "function") {
      return requestAnimationFrame.bind(global$1);
    }
    return function(callback) {
      return setTimeout(function() {
        return callback(Date.now());
      }, 1e3 / 60);
    };
  }();
  var trailingTimeout = 2;
  function throttle(callback, delay) {
    var leadingCall = false, trailingCall = false, lastCallTime = 0;
    function resolvePending() {
      if (leadingCall) {
        leadingCall = false;
        callback();
      }
      if (trailingCall) {
        proxy();
      }
    }
    function timeoutCallback() {
      requestAnimationFrame$1(resolvePending);
    }
    function proxy() {
      var timeStamp = Date.now();
      if (leadingCall) {
        if (timeStamp - lastCallTime < trailingTimeout) {
          return;
        }
        trailingCall = true;
      } else {
        leadingCall = true;
        trailingCall = false;
        setTimeout(timeoutCallback, delay);
      }
      lastCallTime = timeStamp;
    }
    return proxy;
  }
  var REFRESH_DELAY = 20;
  var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
  var mutationObserverSupported = typeof MutationObserver !== "undefined";
  var ResizeObserverController = (
    /** @class */
    function() {
      function ResizeObserverController2() {
        this.connected_ = false;
        this.mutationEventsAdded_ = false;
        this.mutationsObserver_ = null;
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
      }
      ResizeObserverController2.prototype.addObserver = function(observer) {
        if (!~this.observers_.indexOf(observer)) {
          this.observers_.push(observer);
        }
        if (!this.connected_) {
          this.connect_();
        }
      };
      ResizeObserverController2.prototype.removeObserver = function(observer) {
        var observers2 = this.observers_;
        var index3 = observers2.indexOf(observer);
        if (~index3) {
          observers2.splice(index3, 1);
        }
        if (!observers2.length && this.connected_) {
          this.disconnect_();
        }
      };
      ResizeObserverController2.prototype.refresh = function() {
        var changesDetected = this.updateObservers_();
        if (changesDetected) {
          this.refresh();
        }
      };
      ResizeObserverController2.prototype.updateObservers_ = function() {
        var activeObservers = this.observers_.filter(function(observer) {
          return observer.gatherActive(), observer.hasActive();
        });
        activeObservers.forEach(function(observer) {
          return observer.broadcastActive();
        });
        return activeObservers.length > 0;
      };
      ResizeObserverController2.prototype.connect_ = function() {
        if (!isBrowser || this.connected_) {
          return;
        }
        document.addEventListener("transitionend", this.onTransitionEnd_);
        window.addEventListener("resize", this.refresh);
        if (mutationObserverSupported) {
          this.mutationsObserver_ = new MutationObserver(this.refresh);
          this.mutationsObserver_.observe(document, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
        } else {
          document.addEventListener("DOMSubtreeModified", this.refresh);
          this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
      };
      ResizeObserverController2.prototype.disconnect_ = function() {
        if (!isBrowser || !this.connected_) {
          return;
        }
        document.removeEventListener("transitionend", this.onTransitionEnd_);
        window.removeEventListener("resize", this.refresh);
        if (this.mutationsObserver_) {
          this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
          document.removeEventListener("DOMSubtreeModified", this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
      };
      ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
        var isReflowProperty = transitionKeys.some(function(key2) {
          return !!~propertyName.indexOf(key2);
        });
        if (isReflowProperty) {
          this.refresh();
        }
      };
      ResizeObserverController2.getInstance = function() {
        if (!this.instance_) {
          this.instance_ = new ResizeObserverController2();
        }
        return this.instance_;
      };
      ResizeObserverController2.instance_ = null;
      return ResizeObserverController2;
    }()
  );
  var defineConfigurable = function(target, props) {
    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
      var key2 = _a[_i];
      Object.defineProperty(target, key2, {
        value: props[key2],
        enumerable: false,
        writable: false,
        configurable: true
      });
    }
    return target;
  };
  var getWindowOf = function(target) {
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
    return ownerGlobal || global$1;
  };
  var emptyRect = createRectInit(0, 0, 0, 0);
  function toFloat(value) {
    return parseFloat(value) || 0;
  }
  function getBordersSize(styles) {
    var positions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      positions[_i - 1] = arguments[_i];
    }
    return positions.reduce(function(size, position) {
      var value = styles["border-" + position + "-width"];
      return size + toFloat(value);
    }, 0);
  }
  function getPaddings(styles) {
    var positions = ["top", "right", "bottom", "left"];
    var paddings = {};
    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
      var position = positions_1[_i];
      var value = styles["padding-" + position];
      paddings[position] = toFloat(value);
    }
    return paddings;
  }
  function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
  }
  function getHTMLElementContentRect(target) {
    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
    if (!clientWidth && !clientHeight) {
      return emptyRect;
    }
    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;
    var width = toFloat(styles.width), height = toFloat(styles.height);
    if (styles.boxSizing === "border-box") {
      if (Math.round(width + horizPad) !== clientWidth) {
        width -= getBordersSize(styles, "left", "right") + horizPad;
      }
      if (Math.round(height + vertPad) !== clientHeight) {
        height -= getBordersSize(styles, "top", "bottom") + vertPad;
      }
    }
    if (!isDocumentElement(target)) {
      var vertScrollbar = Math.round(width + horizPad) - clientWidth;
      var horizScrollbar = Math.round(height + vertPad) - clientHeight;
      if (Math.abs(vertScrollbar) !== 1) {
        width -= vertScrollbar;
      }
      if (Math.abs(horizScrollbar) !== 1) {
        height -= horizScrollbar;
      }
    }
    return createRectInit(paddings.left, paddings.top, width, height);
  }
  var isSVGGraphicsElement = function() {
    if (typeof SVGGraphicsElement !== "undefined") {
      return function(target) {
        return target instanceof getWindowOf(target).SVGGraphicsElement;
      };
    }
    return function(target) {
      return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
    };
  }();
  function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
  }
  function getContentRect(target) {
    if (!isBrowser) {
      return emptyRect;
    }
    if (isSVGGraphicsElement(target)) {
      return getSVGContentRect(target);
    }
    return getHTMLElementContentRect(target);
  }
  function createReadOnlyRect(_a) {
    var x = _a.x, y2 = _a.y, width = _a.width, height = _a.height;
    var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);
    defineConfigurable(rect, {
      x,
      y: y2,
      width,
      height,
      top: y2,
      right: x + width,
      bottom: height + y2,
      left: x
    });
    return rect;
  }
  function createRectInit(x, y2, width, height) {
    return { x, y: y2, width, height };
  }
  var ResizeObservation = (
    /** @class */
    function() {
      function ResizeObservation2(target) {
        this.broadcastWidth = 0;
        this.broadcastHeight = 0;
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
      }
      ResizeObservation2.prototype.isActive = function() {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
      };
      ResizeObservation2.prototype.broadcastRect = function() {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
      };
      return ResizeObservation2;
    }()
  );
  var ResizeObserverEntry = (
    /** @class */
    function() {
      function ResizeObserverEntry2(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        defineConfigurable(this, { target, contentRect });
      }
      return ResizeObserverEntry2;
    }()
  );
  var ResizeObserverSPI = (
    /** @class */
    function() {
      function ResizeObserverSPI2(callback, controller, callbackCtx) {
        this.activeObservations_ = [];
        this.observations_ = new MapShim();
        if (typeof callback !== "function") {
          throw new TypeError("The callback provided as parameter 1 is not a function.");
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
      }
      ResizeObserverSPI2.prototype.observe = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (observations.has(target)) {
          return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        this.controller_.refresh();
      };
      ResizeObserverSPI2.prototype.unobserve = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (!observations.has(target)) {
          return;
        }
        observations.delete(target);
        if (!observations.size) {
          this.controller_.removeObserver(this);
        }
      };
      ResizeObserverSPI2.prototype.disconnect = function() {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
      };
      ResizeObserverSPI2.prototype.gatherActive = function() {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function(observation) {
          if (observation.isActive()) {
            _this.activeObservations_.push(observation);
          }
        });
      };
      ResizeObserverSPI2.prototype.broadcastActive = function() {
        if (!this.hasActive()) {
          return;
        }
        var ctx = this.callbackCtx_;
        var entries = this.activeObservations_.map(function(observation) {
          return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
      };
      ResizeObserverSPI2.prototype.clearActive = function() {
        this.activeObservations_.splice(0);
      };
      ResizeObserverSPI2.prototype.hasActive = function() {
        return this.activeObservations_.length > 0;
      };
      return ResizeObserverSPI2;
    }()
  );
  var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
  var ResizeObserver = (
    /** @class */
    function() {
      function ResizeObserver3(callback) {
        if (!(this instanceof ResizeObserver3)) {
          throw new TypeError("Cannot call a class as a function.");
        }
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
      }
      return ResizeObserver3;
    }()
  );
  [
    "observe",
    "unobserve",
    "disconnect"
  ].forEach(function(method4) {
    ResizeObserver.prototype[method4] = function() {
      var _a;
      return (_a = observers.get(this))[method4].apply(_a, arguments);
    };
  });
  var index = function() {
    if (typeof global$1.ResizeObserver !== "undefined") {
      return global$1.ResizeObserver;
    }
    return ResizeObserver;
  }();
  var ResizeObserver_es_default = index;

  // node_modules/rc-resize-observer/es/utils/observerUtil.js
  var elementListeners = /* @__PURE__ */ new Map();
  function onResize(entities) {
    entities.forEach(function(entity) {
      var _elementListeners$get;
      var target = entity.target;
      (_elementListeners$get = elementListeners.get(target)) === null || _elementListeners$get === void 0 ? void 0 : _elementListeners$get.forEach(function(listener) {
        return listener(target);
      });
    });
  }
  var resizeObserver = new ResizeObserver_es_default(onResize);
  function observe(element, callback) {
    if (!elementListeners.has(element)) {
      elementListeners.set(element, /* @__PURE__ */ new Set());
      resizeObserver.observe(element);
    }
    elementListeners.get(element).add(callback);
  }
  function unobserve(element, callback) {
    if (elementListeners.has(element)) {
      elementListeners.get(element).delete(callback);
      if (!elementListeners.get(element).size) {
        resizeObserver.unobserve(element);
        elementListeners.delete(element);
      }
    }
  }

  // node_modules/rc-resize-observer/es/SingleObserver/DomWrapper.js
  var React4 = __toESM(require_react());
  var DomWrapper = /* @__PURE__ */ function(_React$Component) {
    _inherits(DomWrapper3, _React$Component);
    var _super = _createSuper(DomWrapper3);
    function DomWrapper3() {
      _classCallCheck(this, DomWrapper3);
      return _super.apply(this, arguments);
    }
    _createClass(DomWrapper3, [{
      key: "render",
      value: function render4() {
        return this.props.children;
      }
    }]);
    return DomWrapper3;
  }(React4.Component);

  // node_modules/rc-resize-observer/es/Collection.js
  var React5 = __toESM(require_react());
  var CollectionContext = /* @__PURE__ */ React5.createContext(null);
  function Collection(_ref) {
    var children = _ref.children, onBatchResize = _ref.onBatchResize;
    var resizeIdRef = React5.useRef(0);
    var resizeInfosRef = React5.useRef([]);
    var onCollectionResize = React5.useContext(CollectionContext);
    var onResize2 = React5.useCallback(function(size, element, data) {
      resizeIdRef.current += 1;
      var currentId = resizeIdRef.current;
      resizeInfosRef.current.push({
        size,
        element,
        data
      });
      Promise.resolve().then(function() {
        if (currentId === resizeIdRef.current) {
          onBatchResize === null || onBatchResize === void 0 ? void 0 : onBatchResize(resizeInfosRef.current);
          resizeInfosRef.current = [];
        }
      });
      onCollectionResize === null || onCollectionResize === void 0 ? void 0 : onCollectionResize(size, element, data);
    }, [onBatchResize, onCollectionResize]);
    return /* @__PURE__ */ React5.createElement(CollectionContext.Provider, {
      value: onResize2
    }, children);
  }

  // node_modules/rc-resize-observer/es/SingleObserver/index.js
  function SingleObserver(props, ref) {
    var children = props.children, disabled = props.disabled;
    var elementRef = React6.useRef(null);
    var wrapperRef = React6.useRef(null);
    var onCollectionResize = React6.useContext(CollectionContext);
    var isRenderProps = typeof children === "function";
    var mergedChildren = isRenderProps ? children(elementRef) : children;
    var sizeRef = React6.useRef({
      width: -1,
      height: -1,
      offsetWidth: -1,
      offsetHeight: -1
    });
    var canRef = !isRenderProps && /* @__PURE__ */ React6.isValidElement(mergedChildren) && supportRef(mergedChildren);
    var originRef = canRef ? mergedChildren.ref : null;
    var mergedRef = React6.useMemo(function() {
      return composeRef(originRef, elementRef);
    }, [originRef, elementRef]);
    var getDom = function getDom2() {
      return findDOMNode(elementRef.current) || findDOMNode(wrapperRef.current);
    };
    React6.useImperativeHandle(ref, function() {
      return getDom();
    });
    var propsRef = React6.useRef(props);
    propsRef.current = props;
    var onInternalResize = React6.useCallback(function(target) {
      var _propsRef$current = propsRef.current, onResize2 = _propsRef$current.onResize, data = _propsRef$current.data;
      var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
      var offsetWidth = target.offsetWidth, offsetHeight = target.offsetHeight;
      var fixedWidth = Math.floor(width);
      var fixedHeight = Math.floor(height);
      if (sizeRef.current.width !== fixedWidth || sizeRef.current.height !== fixedHeight || sizeRef.current.offsetWidth !== offsetWidth || sizeRef.current.offsetHeight !== offsetHeight) {
        var size = {
          width: fixedWidth,
          height: fixedHeight,
          offsetWidth,
          offsetHeight
        };
        sizeRef.current = size;
        var mergedOffsetWidth = offsetWidth === Math.round(width) ? width : offsetWidth;
        var mergedOffsetHeight = offsetHeight === Math.round(height) ? height : offsetHeight;
        var sizeInfo = _objectSpread2(_objectSpread2({}, size), {}, {
          offsetWidth: mergedOffsetWidth,
          offsetHeight: mergedOffsetHeight
        });
        onCollectionResize === null || onCollectionResize === void 0 ? void 0 : onCollectionResize(sizeInfo, target, data);
        if (onResize2) {
          Promise.resolve().then(function() {
            onResize2(sizeInfo, target);
          });
        }
      }
    }, []);
    React6.useEffect(function() {
      var currentElement = getDom();
      if (currentElement && !disabled) {
        observe(currentElement, onInternalResize);
      }
      return function() {
        return unobserve(currentElement, onInternalResize);
      };
    }, [elementRef.current, disabled]);
    return /* @__PURE__ */ React6.createElement(DomWrapper, {
      ref: wrapperRef
    }, canRef ? /* @__PURE__ */ React6.cloneElement(mergedChildren, {
      ref: mergedRef
    }) : mergedChildren);
  }
  var RefSingleObserver = /* @__PURE__ */ React6.forwardRef(SingleObserver);
  if (true) {
    RefSingleObserver.displayName = "SingleObserver";
  }
  var SingleObserver_default = RefSingleObserver;

  // node_modules/rc-resize-observer/es/index.js
  var INTERNAL_PREFIX_KEY = "rc-observer-key";
  function ResizeObserver2(props, ref) {
    var children = props.children;
    var childNodes = typeof children === "function" ? [children] : toArray(children);
    if (true) {
      if (childNodes.length > 1) {
        warning(false, "Find more than one child node with `children` in ResizeObserver. Please use ResizeObserver.Collection instead.");
      } else if (childNodes.length === 0) {
        warning(false, "`children` of ResizeObserver is empty. Nothing is in observe.");
      }
    }
    return childNodes.map(function(child, index3) {
      var key2 = (child === null || child === void 0 ? void 0 : child.key) || "".concat(INTERNAL_PREFIX_KEY, "-").concat(index3);
      return /* @__PURE__ */ React7.createElement(SingleObserver_default, _extends({}, props, {
        key: key2,
        ref: index3 === 0 ? ref : void 0
      }), child);
    });
  }
  var RefResizeObserver = /* @__PURE__ */ React7.forwardRef(ResizeObserver2);
  if (true) {
    RefResizeObserver.displayName = "ResizeObserver";
  }
  RefResizeObserver.Collection = Collection;
  var es_default = RefResizeObserver;

  // node_modules/rc-util/es/omit.js
  function omit(obj, fields) {
    var clone2 = _objectSpread2({}, obj);
    if (Array.isArray(fields)) {
      fields.forEach(function(key2) {
        delete clone2[key2];
      });
    }
    return clone2;
  }

  // node_modules/@ant-design/icons/es/components/Context.js
  var import_react3 = __toESM(require_react());
  var IconContext = /* @__PURE__ */ (0, import_react3.createContext)({});
  var Context_default = IconContext;

  // node_modules/rc-field-form/es/index.js
  var React16 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key2, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key2 = sourceKeys[i3];
      if (excluded.indexOf(key2) >= 0)
        continue;
      target[key2] = source[key2];
    }
    return target;
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key2, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key2 = sourceSymbolKeys[i3];
        if (excluded.indexOf(key2) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key2))
          continue;
        target[key2] = source[key2];
      }
    }
    return target;
  }

  // node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++)
      arr2[i3] = arr[i3];
    return arr2;
  }

  // node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArray.js
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }

  // node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray(o2, minLen);
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  // node_modules/rc-field-form/es/Field.js
  var React10 = __toESM(require_react());

  // node_modules/rc-field-form/es/FieldContext.js
  var React8 = __toESM(require_react());
  var HOOK_MARK = "RC_FORM_INTERNAL_HOOKS";
  var warningFunc = function warningFunc2() {
    warning_default(false, "Can not find FormContext. Please make sure you wrap Field under Form.");
  };
  var Context = /* @__PURE__ */ React8.createContext({
    getFieldValue: warningFunc,
    getFieldsValue: warningFunc,
    getFieldError: warningFunc,
    getFieldWarning: warningFunc,
    getFieldsError: warningFunc,
    isFieldsTouched: warningFunc,
    isFieldTouched: warningFunc,
    isFieldValidating: warningFunc,
    isFieldsValidating: warningFunc,
    resetFields: warningFunc,
    setFields: warningFunc,
    setFieldValue: warningFunc,
    setFieldsValue: warningFunc,
    validateFields: warningFunc,
    submit: warningFunc,
    getInternalHooks: function getInternalHooks() {
      warningFunc();
      return {
        dispatch: warningFunc,
        initEntityValue: warningFunc,
        registerField: warningFunc,
        useSubscribe: warningFunc,
        setInitialValues: warningFunc,
        destroyForm: warningFunc,
        setCallbacks: warningFunc,
        registerWatch: warningFunc,
        getFields: warningFunc,
        setValidateMessages: warningFunc,
        setPreserve: warningFunc,
        getInitialValue: warningFunc
      };
    }
  });
  var FieldContext_default = Context;

  // node_modules/rc-field-form/es/utils/typeUtil.js
  function toArray2(value) {
    if (value === void 0 || value === null) {
      return [];
    }
    return Array.isArray(value) ? value : [value];
  }

  // node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js
  function _regeneratorRuntime() {
    "use strict";
    _regeneratorRuntime = function _regeneratorRuntime2() {
      return exports2;
    };
    var exports2 = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function(obj, key2, desc) {
      obj[key2] = desc.value;
    }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define2(obj, key2, value) {
      return Object.defineProperty(obj, key2, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      }), obj[key2];
    }
    try {
      define2({}, "");
    } catch (err) {
      define2 = function define3(obj, key2, value) {
        return obj[key2] = value;
      };
    }
    function wrap(innerFn, outerFn, self2, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator2 = Object.create(protoGenerator.prototype), context = new Context4(tryLocsList || []);
      return defineProperty(generator2, "_invoke", {
        value: makeInvokeMethod(innerFn, self2, context)
      }), generator2;
    }
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
    exports2.wrap = wrap;
    var ContinueSentinel = {};
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    var IteratorPrototype = {};
    define2(IteratorPrototype, iteratorSymbol, function() {
      return this;
    });
    var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    function defineIteratorMethods(prototype3) {
      ["next", "throw", "return"].forEach(function(method4) {
        define2(prototype3, method4, function(arg) {
          return this._invoke(method4, arg);
        });
      });
    }
    function AsyncIterator(generator2, PromiseImpl) {
      function invoke(method4, arg, resolve5, reject) {
        var record = tryCatch(generator2[method4], generator2, arg);
        if ("throw" !== record.type) {
          var result = record.arg, value = result.value;
          return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
            invoke("next", value2, resolve5, reject);
          }, function(err) {
            invoke("throw", err, resolve5, reject);
          }) : PromiseImpl.resolve(value).then(function(unwrapped) {
            result.value = unwrapped, resolve5(result);
          }, function(error) {
            return invoke("throw", error, resolve5, reject);
          });
        }
        reject(record.arg);
      }
      var previousPromise;
      defineProperty(this, "_invoke", {
        value: function value(method4, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function(resolve5, reject) {
              invoke(method4, arg, resolve5, reject);
            });
          }
          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(innerFn, self2, context) {
      var state = "suspendedStart";
      return function(method4, arg) {
        if ("executing" === state)
          throw new Error("Generator is already running");
        if ("completed" === state) {
          if ("throw" === method4)
            throw arg;
          return doneResult();
        }
        for (context.method = method4, context.arg = arg; ; ) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel)
                continue;
              return delegateResult;
            }
          }
          if ("next" === context.method)
            context.sent = context._sent = context.arg;
          else if ("throw" === context.method) {
            if ("suspendedStart" === state)
              throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else
            "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self2, context);
          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
              continue;
            return {
              value: record.arg,
              done: context.done
            };
          }
          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }
    function maybeInvokeDelegate(delegate, context) {
      var methodName = context.method, method4 = delegate.iterator[methodName];
      if (void 0 === method4)
        return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
      var record = tryCatch(method4, delegate.iterator, context.arg);
      if ("throw" === record.type)
        return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal", delete record.arg, entry.completion = record;
    }
    function Context4(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
    }
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod)
          return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next)
          return iterable;
        if (!isNaN(iterable.length)) {
          var i3 = -1, next = function next2() {
            for (; ++i3 < iterable.length; )
              if (hasOwn.call(iterable, i3))
                return next2.value = iterable[i3], next2.done = false, next2;
            return next2.value = void 0, next2.done = true, next2;
          };
          return next.next = next;
        }
      }
      return {
        next: doneResult
      };
    }
    function doneResult() {
      return {
        value: void 0,
        done: true
      };
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: true
    }), defineProperty(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: true
    }), GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports2.isGeneratorFunction = function(genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports2.mark = function(genFun) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define2(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports2.awrap = function(arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define2(AsyncIterator.prototype, asyncIteratorSymbol, function() {
      return this;
    }), exports2.AsyncIterator = AsyncIterator, exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
      return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define2(Gp, toStringTagSymbol, "Generator"), define2(Gp, iteratorSymbol, function() {
      return this;
    }), define2(Gp, "toString", function() {
      return "[object Generator]";
    }), exports2.keys = function(val) {
      var object4 = Object(val), keys = [];
      for (var key2 in object4)
        keys.push(key2);
      return keys.reverse(), function next() {
        for (; keys.length; ) {
          var key3 = keys.pop();
          if (key3 in object4)
            return next.value = key3, next.done = false, next;
        }
        return next.done = true, next;
      };
    }, exports2.values = values, Context4.prototype = {
      constructor: Context4,
      reset: function reset(skipTempReset) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
          for (var name5 in this)
            "t" === name5.charAt(0) && hasOwn.call(this, name5) && !isNaN(+name5.slice(1)) && (this[name5] = void 0);
      },
      stop: function stop() {
        this.done = true;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type)
          throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done)
          throw exception;
        var context = this;
        function handle(loc, caught) {
          return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
        }
        for (var i3 = this.tryEntries.length - 1; i3 >= 0; --i3) {
          var entry = this.tryEntries[i3], record = entry.completion;
          if ("root" === entry.tryLoc)
            return handle("end");
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc)
                return handle(entry.catchLoc, true);
              if (this.prev < entry.finallyLoc)
                return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc)
                return handle(entry.catchLoc, true);
            } else {
              if (!hasFinally)
                throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc)
                return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function abrupt(type4, arg) {
        for (var i3 = this.tryEntries.length - 1; i3 >= 0; --i3) {
          var entry = this.tryEntries[i3];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        finallyEntry && ("break" === type4 || "continue" === type4) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return record.type = type4, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if ("throw" === record.type)
          throw record.arg;
        return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i3 = this.tryEntries.length - 1; i3 >= 0; --i3) {
          var entry = this.tryEntries[i3];
          if (entry.finallyLoc === finallyLoc)
            return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i3 = this.tryEntries.length - 1; i3 >= 0; --i3) {
          var entry = this.tryEntries[i3];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        return this.delegate = {
          iterator: values(iterable),
          resultName,
          nextLoc
        }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
      }
    }, exports2;
  }

  // node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
  function asyncGeneratorStep(gen, resolve5, reject, _next, _throw, key2, arg) {
    try {
      var info = gen[key2](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve5(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function() {
      var self2 = this, args = arguments;
      return new Promise(function(resolve5, reject) {
        var gen = fn.apply(self2, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve5, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve5, reject, _next, _throw, "throw", err);
        }
        _next(void 0);
      });
    };
  }

  // node_modules/async-validator/dist-web/index.js
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key2 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf2(subClass, superClass);
  }
  function _getPrototypeOf2(o2) {
    _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf2(o2);
  }
  function _setPrototypeOf2(o2, p2) {
    _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf2(o2, p2);
  }
  function _isNativeReflectConstruct2() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct2()) {
      _construct = Reflect.construct.bind();
    } else {
      _construct = function _construct2(Parent2, args2, Class2) {
        var a2 = [null];
        a2.push.apply(a2, args2);
        var Constructor = Function.bind.apply(Parent2, a2);
        var instance = new Constructor();
        if (Class2)
          _setPrototypeOf2(instance, Class2.prototype);
        return instance;
      };
    }
    return _construct.apply(null, arguments);
  }
  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }
  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
    _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
      if (Class2 === null || !_isNativeFunction(Class2))
        return Class2;
      if (typeof Class2 !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class2))
          return _cache.get(Class2);
        _cache.set(Class2, Wrapper);
      }
      function Wrapper() {
        return _construct(Class2, arguments, _getPrototypeOf2(this).constructor);
      }
      Wrapper.prototype = Object.create(Class2.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf2(Wrapper, Class2);
    };
    return _wrapNativeSuper(Class);
  }
  var formatRegExp = /%[sdj%]/g;
  var warning2 = function warning3() {
  };
  if (typeof process !== "undefined" && process.env && true && typeof window !== "undefined" && typeof document !== "undefined") {
    warning2 = function warning6(type4, errors) {
      if (typeof console !== "undefined" && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING === "undefined") {
        if (errors.every(function(e3) {
          return typeof e3 === "string";
        })) {
          console.warn(type4, errors);
        }
      }
    };
  }
  function convertFieldsError(errors) {
    if (!errors || !errors.length)
      return null;
    var fields = {};
    errors.forEach(function(error) {
      var field = error.field;
      fields[field] = fields[field] || [];
      fields[field].push(error);
    });
    return fields;
  }
  function format(template) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var i3 = 0;
    var len = args.length;
    if (typeof template === "function") {
      return template.apply(null, args);
    }
    if (typeof template === "string") {
      var str = template.replace(formatRegExp, function(x) {
        if (x === "%%") {
          return "%";
        }
        if (i3 >= len) {
          return x;
        }
        switch (x) {
          case "%s":
            return String(args[i3++]);
          case "%d":
            return Number(args[i3++]);
          case "%j":
            try {
              return JSON.stringify(args[i3++]);
            } catch (_) {
              return "[Circular]";
            }
            break;
          default:
            return x;
        }
      });
      return str;
    }
    return template;
  }
  function isNativeStringType(type4) {
    return type4 === "string" || type4 === "url" || type4 === "hex" || type4 === "email" || type4 === "date" || type4 === "pattern";
  }
  function isEmptyValue(value, type4) {
    if (value === void 0 || value === null) {
      return true;
    }
    if (type4 === "array" && Array.isArray(value) && !value.length) {
      return true;
    }
    if (isNativeStringType(type4) && typeof value === "string" && !value) {
      return true;
    }
    return false;
  }
  function asyncParallelArray(arr, func, callback) {
    var results = [];
    var total = 0;
    var arrLength = arr.length;
    function count2(errors) {
      results.push.apply(results, errors || []);
      total++;
      if (total === arrLength) {
        callback(results);
      }
    }
    arr.forEach(function(a2) {
      func(a2, count2);
    });
  }
  function asyncSerialArray(arr, func, callback) {
    var index3 = 0;
    var arrLength = arr.length;
    function next(errors) {
      if (errors && errors.length) {
        callback(errors);
        return;
      }
      var original = index3;
      index3 = index3 + 1;
      if (original < arrLength) {
        func(arr[original], next);
      } else {
        callback([]);
      }
    }
    next([]);
  }
  function flattenObjArr(objArr) {
    var ret = [];
    Object.keys(objArr).forEach(function(k) {
      ret.push.apply(ret, objArr[k] || []);
    });
    return ret;
  }
  var AsyncValidationError = /* @__PURE__ */ function(_Error) {
    _inheritsLoose(AsyncValidationError2, _Error);
    function AsyncValidationError2(errors, fields) {
      var _this;
      _this = _Error.call(this, "Async Validation Error") || this;
      _this.errors = errors;
      _this.fields = fields;
      return _this;
    }
    return AsyncValidationError2;
  }(/* @__PURE__ */ _wrapNativeSuper(Error));
  function asyncMap(objArr, option, func, callback, source) {
    if (option.first) {
      var _pending = new Promise(function(resolve5, reject) {
        var next = function next2(errors) {
          callback(errors);
          return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve5(source);
        };
        var flattenArr = flattenObjArr(objArr);
        asyncSerialArray(flattenArr, func, next);
      });
      _pending["catch"](function(e3) {
        return e3;
      });
      return _pending;
    }
    var firstFields = option.firstFields === true ? Object.keys(objArr) : option.firstFields || [];
    var objArrKeys = Object.keys(objArr);
    var objArrLength = objArrKeys.length;
    var total = 0;
    var results = [];
    var pending = new Promise(function(resolve5, reject) {
      var next = function next2(errors) {
        results.push.apply(results, errors);
        total++;
        if (total === objArrLength) {
          callback(results);
          return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve5(source);
        }
      };
      if (!objArrKeys.length) {
        callback(results);
        resolve5(source);
      }
      objArrKeys.forEach(function(key2) {
        var arr = objArr[key2];
        if (firstFields.indexOf(key2) !== -1) {
          asyncSerialArray(arr, func, next);
        } else {
          asyncParallelArray(arr, func, next);
        }
      });
    });
    pending["catch"](function(e3) {
      return e3;
    });
    return pending;
  }
  function isErrorObj(obj) {
    return !!(obj && obj.message !== void 0);
  }
  function getValue(value, path2) {
    var v2 = value;
    for (var i3 = 0; i3 < path2.length; i3++) {
      if (v2 == void 0) {
        return v2;
      }
      v2 = v2[path2[i3]];
    }
    return v2;
  }
  function complementError(rule, source) {
    return function(oe) {
      var fieldValue;
      if (rule.fullFields) {
        fieldValue = getValue(source, rule.fullFields);
      } else {
        fieldValue = source[oe.field || rule.fullField];
      }
      if (isErrorObj(oe)) {
        oe.field = oe.field || rule.fullField;
        oe.fieldValue = fieldValue;
        return oe;
      }
      return {
        message: typeof oe === "function" ? oe() : oe,
        fieldValue,
        field: oe.field || rule.fullField
      };
    };
  }
  function deepMerge(target, source) {
    if (source) {
      for (var s2 in source) {
        if (source.hasOwnProperty(s2)) {
          var value = source[s2];
          if (typeof value === "object" && typeof target[s2] === "object") {
            target[s2] = _extends2({}, target[s2], value);
          } else {
            target[s2] = value;
          }
        }
      }
    }
    return target;
  }
  var required$1 = function required(rule, value, source, errors, options, type4) {
    if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type4 || rule.type))) {
      errors.push(format(options.messages.required, rule.fullField));
    }
  };
  var whitespace = function whitespace2(rule, value, source, errors, options) {
    if (/^\s+$/.test(value) || value === "") {
      errors.push(format(options.messages.whitespace, rule.fullField));
    }
  };
  var urlReg;
  var getUrlRegex = function() {
    if (urlReg) {
      return urlReg;
    }
    var word = "[a-fA-F\\d:]";
    var b2 = function b3(options) {
      return options && options.includeBoundaries ? "(?:(?<=\\s|^)(?=" + word + ")|(?<=" + word + ")(?=\\s|$))" : "";
    };
    var v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
    var v6seg = "[a-fA-F\\d]{1,4}";
    var v6 = ("\n(?:\n(?:" + v6seg + ":){7}(?:" + v6seg + "|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:" + v6seg + ":){6}(?:" + v4 + "|:" + v6seg + "|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:" + v6seg + ":){5}(?::" + v4 + "|(?::" + v6seg + "){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:" + v6seg + ":){4}(?:(?::" + v6seg + "){0,1}:" + v4 + "|(?::" + v6seg + "){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:" + v6seg + ":){3}(?:(?::" + v6seg + "){0,2}:" + v4 + "|(?::" + v6seg + "){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:" + v6seg + ":){2}(?:(?::" + v6seg + "){0,3}:" + v4 + "|(?::" + v6seg + "){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:" + v6seg + ":){1}(?:(?::" + v6seg + "){0,4}:" + v4 + "|(?::" + v6seg + "){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::" + v6seg + "){0,5}:" + v4 + "|(?::" + v6seg + "){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
    var v46Exact = new RegExp("(?:^" + v4 + "$)|(?:^" + v6 + "$)");
    var v4exact = new RegExp("^" + v4 + "$");
    var v6exact = new RegExp("^" + v6 + "$");
    var ip = function ip2(options) {
      return options && options.exact ? v46Exact : new RegExp("(?:" + b2(options) + v4 + b2(options) + ")|(?:" + b2(options) + v6 + b2(options) + ")", "g");
    };
    ip.v4 = function(options) {
      return options && options.exact ? v4exact : new RegExp("" + b2(options) + v4 + b2(options), "g");
    };
    ip.v6 = function(options) {
      return options && options.exact ? v6exact : new RegExp("" + b2(options) + v6 + b2(options), "g");
    };
    var protocol = "(?:(?:[a-z]+:)?//)";
    var auth = "(?:\\S+(?::\\S*)?@)?";
    var ipv4 = ip.v4().source;
    var ipv6 = ip.v6().source;
    var host = "(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)";
    var domain = "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*";
    var tld = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";
    var port = "(?::\\d{2,5})?";
    var path2 = '(?:[/?#][^\\s"]*)?';
    var regex = "(?:" + protocol + "|www\\.)" + auth + "(?:localhost|" + ipv4 + "|" + ipv6 + "|" + host + domain + tld + ")" + port + path2;
    urlReg = new RegExp("(?:^" + regex + "$)", "i");
    return urlReg;
  };
  var pattern$2 = {
    // http://emailregex.com/
    email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
    // url: new RegExp(
    //   '^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$',
    //   'i',
    // ),
    hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
  };
  var types = {
    integer: function integer(value) {
      return types.number(value) && parseInt(value, 10) === value;
    },
    "float": function float(value) {
      return types.number(value) && !types.integer(value);
    },
    array: function array(value) {
      return Array.isArray(value);
    },
    regexp: function regexp(value) {
      if (value instanceof RegExp) {
        return true;
      }
      try {
        return !!new RegExp(value);
      } catch (e3) {
        return false;
      }
    },
    date: function date(value) {
      return typeof value.getTime === "function" && typeof value.getMonth === "function" && typeof value.getYear === "function" && !isNaN(value.getTime());
    },
    number: function number(value) {
      if (isNaN(value)) {
        return false;
      }
      return typeof value === "number";
    },
    object: function object(value) {
      return typeof value === "object" && !types.array(value);
    },
    method: function method(value) {
      return typeof value === "function";
    },
    email: function email(value) {
      return typeof value === "string" && value.length <= 320 && !!value.match(pattern$2.email);
    },
    url: function url(value) {
      return typeof value === "string" && value.length <= 2048 && !!value.match(getUrlRegex());
    },
    hex: function hex(value) {
      return typeof value === "string" && !!value.match(pattern$2.hex);
    }
  };
  var type$1 = function type(rule, value, source, errors, options) {
    if (rule.required && value === void 0) {
      required$1(rule, value, source, errors, options);
      return;
    }
    var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
    var ruleType = rule.type;
    if (custom.indexOf(ruleType) > -1) {
      if (!types[ruleType](value)) {
        errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
      }
    } else if (ruleType && typeof value !== rule.type) {
      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  };
  var range = function range2(rule, value, source, errors, options) {
    var len = typeof rule.len === "number";
    var min = typeof rule.min === "number";
    var max = typeof rule.max === "number";
    var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var val = value;
    var key2 = null;
    var num = typeof value === "number";
    var str = typeof value === "string";
    var arr = Array.isArray(value);
    if (num) {
      key2 = "number";
    } else if (str) {
      key2 = "string";
    } else if (arr) {
      key2 = "array";
    }
    if (!key2) {
      return false;
    }
    if (arr) {
      val = value.length;
    }
    if (str) {
      val = value.replace(spRegexp, "_").length;
    }
    if (len) {
      if (val !== rule.len) {
        errors.push(format(options.messages[key2].len, rule.fullField, rule.len));
      }
    } else if (min && !max && val < rule.min) {
      errors.push(format(options.messages[key2].min, rule.fullField, rule.min));
    } else if (max && !min && val > rule.max) {
      errors.push(format(options.messages[key2].max, rule.fullField, rule.max));
    } else if (min && max && (val < rule.min || val > rule.max)) {
      errors.push(format(options.messages[key2].range, rule.fullField, rule.min, rule.max));
    }
  };
  var ENUM$1 = "enum";
  var enumerable$1 = function enumerable(rule, value, source, errors, options) {
    rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
    if (rule[ENUM$1].indexOf(value) === -1) {
      errors.push(format(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(", ")));
    }
  };
  var pattern$1 = function pattern(rule, value, source, errors, options) {
    if (rule.pattern) {
      if (rule.pattern instanceof RegExp) {
        rule.pattern.lastIndex = 0;
        if (!rule.pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      } else if (typeof rule.pattern === "string") {
        var _pattern = new RegExp(rule.pattern);
        if (!_pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      }
    }
  };
  var rules = {
    required: required$1,
    whitespace,
    type: type$1,
    range,
    "enum": enumerable$1,
    pattern: pattern$1
  };
  var string = function string2(rule, value, callback, source, options) {
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, "string");
      if (!isEmptyValue(value, "string")) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
        rules.pattern(rule, value, source, errors, options);
        if (rule.whitespace === true) {
          rules.whitespace(rule, value, source, errors, options);
        }
      }
    }
    callback(errors);
  };
  var method2 = function method3(rule, value, callback, source, options) {
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var number2 = function number3(rule, value, callback, source, options) {
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (value === "") {
        value = void 0;
      }
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var _boolean = function _boolean2(rule, value, callback, source, options) {
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var regexp2 = function regexp3(rule, value, callback, source, options) {
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value)) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var integer2 = function integer3(rule, value, callback, source, options) {
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var floatFn = function floatFn2(rule, value, callback, source, options) {
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var array2 = function array3(rule, value, callback, source, options) {
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if ((value === void 0 || value === null) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, "array");
      if (value !== void 0 && value !== null) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var object2 = function object3(rule, value, callback, source, options) {
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var ENUM = "enum";
  var enumerable2 = function enumerable3(rule, value, callback, source, options) {
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules[ENUM](rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var pattern2 = function pattern3(rule, value, callback, source, options) {
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value, "string")) {
        rules.pattern(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var date2 = function date3(rule, value, callback, source, options) {
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value, "date") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value, "date")) {
        var dateObject;
        if (value instanceof Date) {
          dateObject = value;
        } else {
          dateObject = new Date(value);
        }
        rules.type(rule, dateObject, source, errors, options);
        if (dateObject) {
          rules.range(rule, dateObject.getTime(), source, errors, options);
        }
      }
    }
    callback(errors);
  };
  var required2 = function required3(rule, value, callback, source, options) {
    var errors = [];
    var type4 = Array.isArray(value) ? "array" : typeof value;
    rules.required(rule, value, source, errors, options, type4);
    callback(errors);
  };
  var type2 = function type3(rule, value, callback, source, options) {
    var ruleType = rule.type;
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value, ruleType) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, ruleType);
      if (!isEmptyValue(value, ruleType)) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var any = function any2(rule, value, callback, source, options) {
    var errors = [];
    var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
    }
    callback(errors);
  };
  var validators = {
    string,
    method: method2,
    number: number2,
    "boolean": _boolean,
    regexp: regexp2,
    integer: integer2,
    "float": floatFn,
    array: array2,
    object: object2,
    "enum": enumerable2,
    pattern: pattern2,
    date: date2,
    url: type2,
    hex: type2,
    email: type2,
    required: required2,
    any
  };
  function newMessages() {
    return {
      "default": "Validation error on field %s",
      required: "%s is required",
      "enum": "%s must be one of %s",
      whitespace: "%s cannot be empty",
      date: {
        format: "%s date %s is invalid for format %s",
        parse: "%s date could not be parsed, %s is invalid ",
        invalid: "%s date %s is invalid"
      },
      types: {
        string: "%s is not a %s",
        method: "%s is not a %s (function)",
        array: "%s is not an %s",
        object: "%s is not an %s",
        number: "%s is not a %s",
        date: "%s is not a %s",
        "boolean": "%s is not a %s",
        integer: "%s is not an %s",
        "float": "%s is not a %s",
        regexp: "%s is not a valid %s",
        email: "%s is not a valid %s",
        url: "%s is not a valid %s",
        hex: "%s is not a valid %s"
      },
      string: {
        len: "%s must be exactly %s characters",
        min: "%s must be at least %s characters",
        max: "%s cannot be longer than %s characters",
        range: "%s must be between %s and %s characters"
      },
      number: {
        len: "%s must equal %s",
        min: "%s cannot be less than %s",
        max: "%s cannot be greater than %s",
        range: "%s must be between %s and %s"
      },
      array: {
        len: "%s must be exactly %s in length",
        min: "%s cannot be less than %s in length",
        max: "%s cannot be greater than %s in length",
        range: "%s must be between %s and %s in length"
      },
      pattern: {
        mismatch: "%s value %s does not match pattern %s"
      },
      clone: function clone2() {
        var cloned = JSON.parse(JSON.stringify(this));
        cloned.clone = this.clone;
        return cloned;
      }
    };
  }
  var messages = newMessages();
  var Schema = /* @__PURE__ */ function() {
    function Schema2(descriptor) {
      this.rules = null;
      this._messages = messages;
      this.define(descriptor);
    }
    var _proto = Schema2.prototype;
    _proto.define = function define2(rules2) {
      var _this = this;
      if (!rules2) {
        throw new Error("Cannot configure a schema with no rules");
      }
      if (typeof rules2 !== "object" || Array.isArray(rules2)) {
        throw new Error("Rules must be an object");
      }
      this.rules = {};
      Object.keys(rules2).forEach(function(name5) {
        var item = rules2[name5];
        _this.rules[name5] = Array.isArray(item) ? item : [item];
      });
    };
    _proto.messages = function messages2(_messages) {
      if (_messages) {
        this._messages = deepMerge(newMessages(), _messages);
      }
      return this._messages;
    };
    _proto.validate = function validate2(source_, o2, oc) {
      var _this2 = this;
      if (o2 === void 0) {
        o2 = {};
      }
      if (oc === void 0) {
        oc = function oc2() {
        };
      }
      var source = source_;
      var options = o2;
      var callback = oc;
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      if (!this.rules || Object.keys(this.rules).length === 0) {
        if (callback) {
          callback(null, source);
        }
        return Promise.resolve(source);
      }
      function complete(results) {
        var errors = [];
        var fields = {};
        function add(e3) {
          if (Array.isArray(e3)) {
            var _errors;
            errors = (_errors = errors).concat.apply(_errors, e3);
          } else {
            errors.push(e3);
          }
        }
        for (var i3 = 0; i3 < results.length; i3++) {
          add(results[i3]);
        }
        if (!errors.length) {
          callback(null, source);
        } else {
          fields = convertFieldsError(errors);
          callback(errors, fields);
        }
      }
      if (options.messages) {
        var messages$1 = this.messages();
        if (messages$1 === messages) {
          messages$1 = newMessages();
        }
        deepMerge(messages$1, options.messages);
        options.messages = messages$1;
      } else {
        options.messages = this.messages();
      }
      var series = {};
      var keys = options.keys || Object.keys(this.rules);
      keys.forEach(function(z) {
        var arr = _this2.rules[z];
        var value = source[z];
        arr.forEach(function(r3) {
          var rule = r3;
          if (typeof rule.transform === "function") {
            if (source === source_) {
              source = _extends2({}, source);
            }
            value = source[z] = rule.transform(value);
          }
          if (typeof rule === "function") {
            rule = {
              validator: rule
            };
          } else {
            rule = _extends2({}, rule);
          }
          rule.validator = _this2.getValidationMethod(rule);
          if (!rule.validator) {
            return;
          }
          rule.field = z;
          rule.fullField = rule.fullField || z;
          rule.type = _this2.getType(rule);
          series[z] = series[z] || [];
          series[z].push({
            rule,
            value,
            source,
            field: z
          });
        });
      });
      var errorFields = {};
      return asyncMap(series, options, function(data, doIt) {
        var rule = data.rule;
        var deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
        deep = deep && (rule.required || !rule.required && data.value);
        rule.field = data.field;
        function addFullField(key2, schema) {
          return _extends2({}, schema, {
            fullField: rule.fullField + "." + key2,
            fullFields: rule.fullFields ? [].concat(rule.fullFields, [key2]) : [key2]
          });
        }
        function cb(e3) {
          if (e3 === void 0) {
            e3 = [];
          }
          var errorList = Array.isArray(e3) ? e3 : [e3];
          if (!options.suppressWarning && errorList.length) {
            Schema2.warning("async-validator:", errorList);
          }
          if (errorList.length && rule.message !== void 0) {
            errorList = [].concat(rule.message);
          }
          var filledErrors = errorList.map(complementError(rule, source));
          if (options.first && filledErrors.length) {
            errorFields[rule.field] = 1;
            return doIt(filledErrors);
          }
          if (!deep) {
            doIt(filledErrors);
          } else {
            if (rule.required && !data.value) {
              if (rule.message !== void 0) {
                filledErrors = [].concat(rule.message).map(complementError(rule, source));
              } else if (options.error) {
                filledErrors = [options.error(rule, format(options.messages.required, rule.field))];
              }
              return doIt(filledErrors);
            }
            var fieldsSchema = {};
            if (rule.defaultField) {
              Object.keys(data.value).map(function(key2) {
                fieldsSchema[key2] = rule.defaultField;
              });
            }
            fieldsSchema = _extends2({}, fieldsSchema, data.rule.fields);
            var paredFieldsSchema = {};
            Object.keys(fieldsSchema).forEach(function(field) {
              var fieldSchema = fieldsSchema[field];
              var fieldSchemaList = Array.isArray(fieldSchema) ? fieldSchema : [fieldSchema];
              paredFieldsSchema[field] = fieldSchemaList.map(addFullField.bind(null, field));
            });
            var schema = new Schema2(paredFieldsSchema);
            schema.messages(options.messages);
            if (data.rule.options) {
              data.rule.options.messages = options.messages;
              data.rule.options.error = options.error;
            }
            schema.validate(data.value, data.rule.options || options, function(errs) {
              var finalErrors = [];
              if (filledErrors && filledErrors.length) {
                finalErrors.push.apply(finalErrors, filledErrors);
              }
              if (errs && errs.length) {
                finalErrors.push.apply(finalErrors, errs);
              }
              doIt(finalErrors.length ? finalErrors : null);
            });
          }
        }
        var res;
        if (rule.asyncValidator) {
          res = rule.asyncValidator(rule, data.value, cb, data.source, options);
        } else if (rule.validator) {
          try {
            res = rule.validator(rule, data.value, cb, data.source, options);
          } catch (error) {
            console.error == null ? void 0 : console.error(error);
            if (!options.suppressValidatorError) {
              setTimeout(function() {
                throw error;
              }, 0);
            }
            cb(error.message);
          }
          if (res === true) {
            cb();
          } else if (res === false) {
            cb(typeof rule.message === "function" ? rule.message(rule.fullField || rule.field) : rule.message || (rule.fullField || rule.field) + " fails");
          } else if (res instanceof Array) {
            cb(res);
          } else if (res instanceof Error) {
            cb(res.message);
          }
        }
        if (res && res.then) {
          res.then(function() {
            return cb();
          }, function(e3) {
            return cb(e3);
          });
        }
      }, function(results) {
        complete(results);
      }, source);
    };
    _proto.getType = function getType(rule) {
      if (rule.type === void 0 && rule.pattern instanceof RegExp) {
        rule.type = "pattern";
      }
      if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
        throw new Error(format("Unknown rule type %s", rule.type));
      }
      return rule.type || "string";
    };
    _proto.getValidationMethod = function getValidationMethod(rule) {
      if (typeof rule.validator === "function") {
        return rule.validator;
      }
      var keys = Object.keys(rule);
      var messageIndex = keys.indexOf("message");
      if (messageIndex !== -1) {
        keys.splice(messageIndex, 1);
      }
      if (keys.length === 1 && keys[0] === "required") {
        return validators.required;
      }
      return validators[this.getType(rule)] || void 0;
    };
    return Schema2;
  }();
  Schema.register = function register(type4, validator) {
    if (typeof validator !== "function") {
      throw new Error("Cannot register a validator by type, validator is not a function");
    }
    validators[type4] = validator;
  };
  Schema.warning = warning2;
  Schema.messages = messages;
  Schema.validators = validators;

  // node_modules/rc-field-form/es/utils/validateUtil.js
  var React9 = __toESM(require_react());

  // node_modules/rc-field-form/es/utils/messages.js
  var typeTemplate = "'${name}' is not a valid ${type}";
  var defaultValidateMessages = {
    default: "Validation error on field '${name}'",
    required: "'${name}' is required",
    enum: "'${name}' must be one of [${enum}]",
    whitespace: "'${name}' cannot be empty",
    date: {
      format: "'${name}' is invalid for format date",
      parse: "'${name}' could not be parsed as date",
      invalid: "'${name}' is invalid date"
    },
    types: {
      string: typeTemplate,
      method: typeTemplate,
      array: typeTemplate,
      object: typeTemplate,
      number: typeTemplate,
      date: typeTemplate,
      boolean: typeTemplate,
      integer: typeTemplate,
      float: typeTemplate,
      regexp: typeTemplate,
      email: typeTemplate,
      url: typeTemplate,
      hex: typeTemplate
    },
    string: {
      len: "'${name}' must be exactly ${len} characters",
      min: "'${name}' must be at least ${min} characters",
      max: "'${name}' cannot be longer than ${max} characters",
      range: "'${name}' must be between ${min} and ${max} characters"
    },
    number: {
      len: "'${name}' must equal ${len}",
      min: "'${name}' cannot be less than ${min}",
      max: "'${name}' cannot be greater than ${max}",
      range: "'${name}' must be between ${min} and ${max}"
    },
    array: {
      len: "'${name}' must be exactly ${len} in length",
      min: "'${name}' cannot be less than ${min} in length",
      max: "'${name}' cannot be greater than ${max} in length",
      range: "'${name}' must be between ${min} and ${max} in length"
    },
    pattern: {
      mismatch: "'${name}' does not match pattern ${pattern}"
    }
  };

  // node_modules/rc-util/es/utils/get.js
  function get(entity, path2) {
    var current = entity;
    for (var i3 = 0; i3 < path2.length; i3 += 1) {
      if (current === null || current === void 0) {
        return void 0;
      }
      current = current[path2[i3]];
    }
    return current;
  }

  // node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/toArray.js
  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
  }

  // node_modules/rc-util/es/utils/set.js
  function internalSet(entity, paths, value, removeIfUndefined) {
    if (!paths.length) {
      return value;
    }
    var _paths = _toArray(paths), path2 = _paths[0], restPath = _paths.slice(1);
    var clone2;
    if (!entity && typeof path2 === "number") {
      clone2 = [];
    } else if (Array.isArray(entity)) {
      clone2 = _toConsumableArray(entity);
    } else {
      clone2 = _objectSpread2({}, entity);
    }
    if (removeIfUndefined && value === void 0 && restPath.length === 1) {
      delete clone2[path2][restPath[0]];
    } else {
      clone2[path2] = internalSet(clone2[path2], restPath, value, removeIfUndefined);
    }
    return clone2;
  }
  function set(entity, paths, value) {
    var removeIfUndefined = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    if (paths.length && removeIfUndefined && value === void 0 && !get(entity, paths.slice(0, -1))) {
      return entity;
    }
    return internalSet(entity, paths, value, removeIfUndefined);
  }

  // node_modules/rc-field-form/es/utils/cloneDeep.js
  function cloneDeep(val) {
    if (Array.isArray(val)) {
      return cloneArrayDeep(val);
    } else if (_typeof(val) === "object" && val !== null) {
      return cloneObjectDeep(val);
    }
    return val;
  }
  function cloneObjectDeep(val) {
    if (Object.getPrototypeOf(val) === Object.prototype) {
      var res = {};
      for (var key2 in val) {
        res[key2] = cloneDeep(val[key2]);
      }
      return res;
    }
    return val;
  }
  function cloneArrayDeep(val) {
    return val.map(function(item) {
      return cloneDeep(item);
    });
  }
  var cloneDeep_default = cloneDeep;

  // node_modules/rc-field-form/es/utils/valueUtil.js
  function getNamePath(path2) {
    return toArray2(path2);
  }
  function getValue2(store, namePath) {
    var value = get(store, namePath);
    return value;
  }
  function setValue(store, namePath, value) {
    var removeIfUndefined = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    var newStore = set(store, namePath, value, removeIfUndefined);
    return newStore;
  }
  function cloneByNamePathList(store, namePathList) {
    var newStore = {};
    namePathList.forEach(function(namePath) {
      var value = getValue2(store, namePath);
      newStore = setValue(newStore, namePath, value);
    });
    return newStore;
  }
  function containsNamePath(namePathList, namePath) {
    return namePathList && namePathList.some(function(path2) {
      return matchNamePath(path2, namePath);
    });
  }
  function isObject(obj) {
    return _typeof(obj) === "object" && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;
  }
  function internalSetValues(store, values) {
    var newStore = Array.isArray(store) ? _toConsumableArray(store) : _objectSpread2({}, store);
    if (!values) {
      return newStore;
    }
    Object.keys(values).forEach(function(key2) {
      var prevValue = newStore[key2];
      var value = values[key2];
      var recursive2 = isObject(prevValue) && isObject(value);
      newStore[key2] = recursive2 ? internalSetValues(prevValue, value || {}) : cloneDeep_default(value);
    });
    return newStore;
  }
  function setValues(store) {
    for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      restValues[_key - 1] = arguments[_key];
    }
    return restValues.reduce(function(current, newStore) {
      return internalSetValues(current, newStore);
    }, store);
  }
  function matchNamePath(namePath, changedNamePath) {
    if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {
      return false;
    }
    return namePath.every(function(nameUnit, i3) {
      return changedNamePath[i3] === nameUnit;
    });
  }
  function isSimilar(source, target) {
    if (source === target) {
      return true;
    }
    if (!source && target || source && !target) {
      return false;
    }
    if (!source || !target || _typeof(source) !== "object" || _typeof(target) !== "object") {
      return false;
    }
    var sourceKeys = Object.keys(source);
    var targetKeys = Object.keys(target);
    var keys = new Set([].concat(sourceKeys, targetKeys));
    return _toConsumableArray(keys).every(function(key2) {
      var sourceValue = source[key2];
      var targetValue = target[key2];
      if (typeof sourceValue === "function" && typeof targetValue === "function") {
        return true;
      }
      return sourceValue === targetValue;
    });
  }
  function defaultGetValueFromEvent(valuePropName) {
    var event = arguments.length <= 1 ? void 0 : arguments[1];
    if (event && event.target && _typeof(event.target) === "object" && valuePropName in event.target) {
      return event.target[valuePropName];
    }
    return event;
  }
  function move(array4, moveIndex, toIndex) {
    var length2 = array4.length;
    if (moveIndex < 0 || moveIndex >= length2 || toIndex < 0 || toIndex >= length2) {
      return array4;
    }
    var item = array4[moveIndex];
    var diff = moveIndex - toIndex;
    if (diff > 0) {
      return [].concat(_toConsumableArray(array4.slice(0, toIndex)), [item], _toConsumableArray(array4.slice(toIndex, moveIndex)), _toConsumableArray(array4.slice(moveIndex + 1, length2)));
    }
    if (diff < 0) {
      return [].concat(_toConsumableArray(array4.slice(0, moveIndex)), _toConsumableArray(array4.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array4.slice(toIndex + 1, length2)));
    }
    return array4;
  }

  // node_modules/rc-field-form/es/utils/validateUtil.js
  var AsyncValidator = Schema;
  function replaceMessage(template, kv) {
    return template.replace(/\$\{\w+\}/g, function(str) {
      var key2 = str.slice(2, -1);
      return kv[key2];
    });
  }
  var CODE_LOGIC_ERROR = "CODE_LOGIC_ERROR";
  function validateRule(_x, _x2, _x3, _x4, _x5) {
    return _validateRule.apply(this, arguments);
  }
  function _validateRule() {
    _validateRule = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2(name5, value, rule, options, messageVariables) {
      var cloneRule, originValidator, subRuleField, validator, messages2, result, subResults, kv, fillVariableResult;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              cloneRule = _objectSpread2({}, rule);
              delete cloneRule.ruleIndex;
              if (cloneRule.validator) {
                originValidator = cloneRule.validator;
                cloneRule.validator = function() {
                  try {
                    return originValidator.apply(void 0, arguments);
                  } catch (error) {
                    console.error(error);
                    return Promise.reject(CODE_LOGIC_ERROR);
                  }
                };
              }
              subRuleField = null;
              if (cloneRule && cloneRule.type === "array" && cloneRule.defaultField) {
                subRuleField = cloneRule.defaultField;
                delete cloneRule.defaultField;
              }
              validator = new AsyncValidator(_defineProperty({}, name5, [cloneRule]));
              messages2 = setValues({}, defaultValidateMessages, options.validateMessages);
              validator.messages(messages2);
              result = [];
              _context2.prev = 9;
              _context2.next = 12;
              return Promise.resolve(validator.validate(_defineProperty({}, name5, value), _objectSpread2({}, options)));
            case 12:
              _context2.next = 17;
              break;
            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](9);
              if (_context2.t0.errors) {
                result = _context2.t0.errors.map(function(_ref4, index3) {
                  var message = _ref4.message;
                  var mergedMessage = message === CODE_LOGIC_ERROR ? messages2.default : message;
                  return /* @__PURE__ */ React9.isValidElement(mergedMessage) ? (
                    // Wrap ReactNode with `key`
                    /* @__PURE__ */ React9.cloneElement(mergedMessage, {
                      key: "error_".concat(index3)
                    })
                  ) : mergedMessage;
                });
              }
            case 17:
              if (!(!result.length && subRuleField)) {
                _context2.next = 22;
                break;
              }
              _context2.next = 20;
              return Promise.all(value.map(function(subValue, i3) {
                return validateRule("".concat(name5, ".").concat(i3), subValue, subRuleField, options, messageVariables);
              }));
            case 20:
              subResults = _context2.sent;
              return _context2.abrupt("return", subResults.reduce(function(prev, errors) {
                return [].concat(_toConsumableArray(prev), _toConsumableArray(errors));
              }, []));
            case 22:
              kv = _objectSpread2(_objectSpread2({}, rule), {}, {
                name: name5,
                enum: (rule.enum || []).join(", ")
              }, messageVariables);
              fillVariableResult = result.map(function(error) {
                if (typeof error === "string") {
                  return replaceMessage(error, kv);
                }
                return error;
              });
              return _context2.abrupt("return", fillVariableResult);
            case 25:
            case "end":
              return _context2.stop();
          }
      }, _callee2, null, [[9, 14]]);
    }));
    return _validateRule.apply(this, arguments);
  }
  function validateRules(namePath, value, rules2, options, validateFirst, messageVariables) {
    var name5 = namePath.join(".");
    var filledRules = rules2.map(function(currentRule, ruleIndex) {
      var originValidatorFunc = currentRule.validator;
      var cloneRule = _objectSpread2(_objectSpread2({}, currentRule), {}, {
        ruleIndex
      });
      if (originValidatorFunc) {
        cloneRule.validator = function(rule, val, callback) {
          var hasPromise = false;
          var wrappedCallback = function wrappedCallback2() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            Promise.resolve().then(function() {
              warning_default(!hasPromise, "Your validator function has already return a promise. `callback` will be ignored.");
              if (!hasPromise) {
                callback.apply(void 0, args);
              }
            });
          };
          var promise = originValidatorFunc(rule, val, wrappedCallback);
          hasPromise = promise && typeof promise.then === "function" && typeof promise.catch === "function";
          warning_default(hasPromise, "`callback` is deprecated. Please return a promise instead.");
          if (hasPromise) {
            promise.then(function() {
              callback();
            }).catch(function(err) {
              callback(err || " ");
            });
          }
        };
      }
      return cloneRule;
    }).sort(function(_ref, _ref2) {
      var w1 = _ref.warningOnly, i1 = _ref.ruleIndex;
      var w2 = _ref2.warningOnly, i22 = _ref2.ruleIndex;
      if (!!w1 === !!w2) {
        return i1 - i22;
      }
      if (w1) {
        return 1;
      }
      return -1;
    });
    var summaryPromise;
    if (validateFirst === true) {
      summaryPromise = new Promise(/* @__PURE__ */ function() {
        var _ref3 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(resolve5, reject) {
          var i3, rule, errors;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1)
              switch (_context.prev = _context.next) {
                case 0:
                  i3 = 0;
                case 1:
                  if (!(i3 < filledRules.length)) {
                    _context.next = 12;
                    break;
                  }
                  rule = filledRules[i3];
                  _context.next = 5;
                  return validateRule(name5, value, rule, options, messageVariables);
                case 5:
                  errors = _context.sent;
                  if (!errors.length) {
                    _context.next = 9;
                    break;
                  }
                  reject([{
                    errors,
                    rule
                  }]);
                  return _context.abrupt("return");
                case 9:
                  i3 += 1;
                  _context.next = 1;
                  break;
                case 12:
                  resolve5([]);
                case 13:
                case "end":
                  return _context.stop();
              }
          }, _callee);
        }));
        return function(_x6, _x7) {
          return _ref3.apply(this, arguments);
        };
      }());
    } else {
      var rulePromises = filledRules.map(function(rule) {
        return validateRule(name5, value, rule, options, messageVariables).then(function(errors) {
          return {
            errors,
            rule
          };
        });
      });
      summaryPromise = (validateFirst ? finishOnFirstFailed(rulePromises) : finishOnAllFailed(rulePromises)).then(function(errors) {
        return Promise.reject(errors);
      });
    }
    summaryPromise.catch(function(e3) {
      return e3;
    });
    return summaryPromise;
  }
  function finishOnAllFailed(_x8) {
    return _finishOnAllFailed.apply(this, arguments);
  }
  function _finishOnAllFailed() {
    _finishOnAllFailed = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee3(rulePromises) {
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1)
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", Promise.all(rulePromises).then(function(errorsList) {
                var _ref5;
                var errors = (_ref5 = []).concat.apply(_ref5, _toConsumableArray(errorsList));
                return errors;
              }));
            case 1:
            case "end":
              return _context3.stop();
          }
      }, _callee3);
    }));
    return _finishOnAllFailed.apply(this, arguments);
  }
  function finishOnFirstFailed(_x9) {
    return _finishOnFirstFailed.apply(this, arguments);
  }
  function _finishOnFirstFailed() {
    _finishOnFirstFailed = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee4(rulePromises) {
      var count2;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1)
          switch (_context4.prev = _context4.next) {
            case 0:
              count2 = 0;
              return _context4.abrupt("return", new Promise(function(resolve5) {
                rulePromises.forEach(function(promise) {
                  promise.then(function(ruleError) {
                    if (ruleError.errors.length) {
                      resolve5([ruleError]);
                    }
                    count2 += 1;
                    if (count2 === rulePromises.length) {
                      resolve5([]);
                    }
                  });
                });
              }));
            case 2:
            case "end":
              return _context4.stop();
          }
      }, _callee4);
    }));
    return _finishOnFirstFailed.apply(this, arguments);
  }

  // node_modules/rc-field-form/es/Field.js
  var _excluded = ["name"];
  var EMPTY_ERRORS = [];
  function requireUpdate(shouldUpdate, prev, next, prevValue, nextValue, info) {
    if (typeof shouldUpdate === "function") {
      return shouldUpdate(prev, next, "source" in info ? {
        source: info.source
      } : {});
    }
    return prevValue !== nextValue;
  }
  var Field = /* @__PURE__ */ function(_React$Component) {
    _inherits(Field2, _React$Component);
    var _super = _createSuper(Field2);
    function Field2(props) {
      var _this;
      _classCallCheck(this, Field2);
      _this = _super.call(this, props);
      _this.state = {
        resetCount: 0
      };
      _this.cancelRegisterFunc = null;
      _this.mounted = false;
      _this.touched = false;
      _this.dirty = false;
      _this.validatePromise = null;
      _this.prevValidating = void 0;
      _this.errors = EMPTY_ERRORS;
      _this.warnings = EMPTY_ERRORS;
      _this.cancelRegister = function() {
        var _this$props = _this.props, preserve = _this$props.preserve, isListField = _this$props.isListField, name5 = _this$props.name;
        if (_this.cancelRegisterFunc) {
          _this.cancelRegisterFunc(isListField, preserve, getNamePath(name5));
        }
        _this.cancelRegisterFunc = null;
      };
      _this.getNamePath = function() {
        var _this$props2 = _this.props, name5 = _this$props2.name, fieldContext = _this$props2.fieldContext;
        var _fieldContext$prefixN = fieldContext.prefixName, prefixName = _fieldContext$prefixN === void 0 ? [] : _fieldContext$prefixN;
        return name5 !== void 0 ? [].concat(_toConsumableArray(prefixName), _toConsumableArray(name5)) : [];
      };
      _this.getRules = function() {
        var _this$props3 = _this.props, _this$props3$rules = _this$props3.rules, rules2 = _this$props3$rules === void 0 ? [] : _this$props3$rules, fieldContext = _this$props3.fieldContext;
        return rules2.map(function(rule) {
          if (typeof rule === "function") {
            return rule(fieldContext);
          }
          return rule;
        });
      };
      _this.refresh = function() {
        if (!_this.mounted)
          return;
        _this.setState(function(_ref) {
          var resetCount = _ref.resetCount;
          return {
            resetCount: resetCount + 1
          };
        });
      };
      _this.triggerMetaEvent = function(destroy3) {
        var onMetaChange = _this.props.onMetaChange;
        onMetaChange === null || onMetaChange === void 0 ? void 0 : onMetaChange(_objectSpread2(_objectSpread2({}, _this.getMeta()), {}, {
          destroy: destroy3
        }));
      };
      _this.onStoreChange = function(prevStore, namePathList, info) {
        var _this$props4 = _this.props, shouldUpdate = _this$props4.shouldUpdate, _this$props4$dependen = _this$props4.dependencies, dependencies = _this$props4$dependen === void 0 ? [] : _this$props4$dependen, onReset = _this$props4.onReset;
        var store = info.store;
        var namePath = _this.getNamePath();
        var prevValue = _this.getValue(prevStore);
        var curValue = _this.getValue(store);
        var namePathMatch = namePathList && containsNamePath(namePathList, namePath);
        if (info.type === "valueUpdate" && info.source === "external" && prevValue !== curValue) {
          _this.touched = true;
          _this.dirty = true;
          _this.validatePromise = null;
          _this.errors = EMPTY_ERRORS;
          _this.warnings = EMPTY_ERRORS;
          _this.triggerMetaEvent();
        }
        switch (info.type) {
          case "reset":
            if (!namePathList || namePathMatch) {
              _this.touched = false;
              _this.dirty = false;
              _this.validatePromise = null;
              _this.errors = EMPTY_ERRORS;
              _this.warnings = EMPTY_ERRORS;
              _this.triggerMetaEvent();
              onReset === null || onReset === void 0 ? void 0 : onReset();
              _this.refresh();
              return;
            }
            break;
          case "remove": {
            if (shouldUpdate) {
              _this.reRender();
              return;
            }
            break;
          }
          case "setField": {
            if (namePathMatch) {
              var data = info.data;
              if ("touched" in data) {
                _this.touched = data.touched;
              }
              if ("validating" in data && !("originRCField" in data)) {
                _this.validatePromise = data.validating ? Promise.resolve([]) : null;
              }
              if ("errors" in data) {
                _this.errors = data.errors || EMPTY_ERRORS;
              }
              if ("warnings" in data) {
                _this.warnings = data.warnings || EMPTY_ERRORS;
              }
              _this.dirty = true;
              _this.triggerMetaEvent();
              _this.reRender();
              return;
            }
            if (shouldUpdate && !namePath.length && requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {
              _this.reRender();
              return;
            }
            break;
          }
          case "dependenciesUpdate": {
            var dependencyList = dependencies.map(getNamePath);
            if (dependencyList.some(function(dependency) {
              return containsNamePath(info.relatedFields, dependency);
            })) {
              _this.reRender();
              return;
            }
            break;
          }
          default:
            if (namePathMatch || (!dependencies.length || namePath.length || shouldUpdate) && requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {
              _this.reRender();
              return;
            }
            break;
        }
        if (shouldUpdate === true) {
          _this.reRender();
        }
      };
      _this.validateRules = function(options) {
        var namePath = _this.getNamePath();
        var currentValue = _this.getValue();
        var rootPromise = Promise.resolve().then(function() {
          if (!_this.mounted) {
            return [];
          }
          var _this$props5 = _this.props, _this$props5$validate = _this$props5.validateFirst, validateFirst = _this$props5$validate === void 0 ? false : _this$props5$validate, messageVariables = _this$props5.messageVariables;
          var _ref2 = options || {}, triggerName = _ref2.triggerName;
          var filteredRules = _this.getRules();
          if (triggerName) {
            filteredRules = filteredRules.filter(function(rule) {
              return rule;
            }).filter(function(rule) {
              var validateTrigger = rule.validateTrigger;
              if (!validateTrigger) {
                return true;
              }
              var triggerList = toArray2(validateTrigger);
              return triggerList.includes(triggerName);
            });
          }
          var promise = validateRules(namePath, currentValue, filteredRules, options, validateFirst, messageVariables);
          promise.catch(function(e3) {
            return e3;
          }).then(function() {
            var ruleErrors = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : EMPTY_ERRORS;
            if (_this.validatePromise === rootPromise) {
              var _ruleErrors$forEach;
              _this.validatePromise = null;
              var nextErrors = [];
              var nextWarnings = [];
              (_ruleErrors$forEach = ruleErrors.forEach) === null || _ruleErrors$forEach === void 0 ? void 0 : _ruleErrors$forEach.call(ruleErrors, function(_ref3) {
                var warningOnly = _ref3.rule.warningOnly, _ref3$errors = _ref3.errors, errors = _ref3$errors === void 0 ? EMPTY_ERRORS : _ref3$errors;
                if (warningOnly) {
                  nextWarnings.push.apply(nextWarnings, _toConsumableArray(errors));
                } else {
                  nextErrors.push.apply(nextErrors, _toConsumableArray(errors));
                }
              });
              _this.errors = nextErrors;
              _this.warnings = nextWarnings;
              _this.triggerMetaEvent();
              _this.reRender();
            }
          });
          return promise;
        });
        _this.validatePromise = rootPromise;
        _this.dirty = true;
        _this.errors = EMPTY_ERRORS;
        _this.warnings = EMPTY_ERRORS;
        _this.triggerMetaEvent();
        _this.reRender();
        return rootPromise;
      };
      _this.isFieldValidating = function() {
        return !!_this.validatePromise;
      };
      _this.isFieldTouched = function() {
        return _this.touched;
      };
      _this.isFieldDirty = function() {
        if (_this.dirty || _this.props.initialValue !== void 0) {
          return true;
        }
        var fieldContext = _this.props.fieldContext;
        var _fieldContext$getInte = fieldContext.getInternalHooks(HOOK_MARK), getInitialValue = _fieldContext$getInte.getInitialValue;
        if (getInitialValue(_this.getNamePath()) !== void 0) {
          return true;
        }
        return false;
      };
      _this.getErrors = function() {
        return _this.errors;
      };
      _this.getWarnings = function() {
        return _this.warnings;
      };
      _this.isListField = function() {
        return _this.props.isListField;
      };
      _this.isList = function() {
        return _this.props.isList;
      };
      _this.isPreserve = function() {
        return _this.props.preserve;
      };
      _this.getMeta = function() {
        _this.prevValidating = _this.isFieldValidating();
        var meta = {
          touched: _this.isFieldTouched(),
          validating: _this.prevValidating,
          errors: _this.errors,
          warnings: _this.warnings,
          name: _this.getNamePath()
        };
        return meta;
      };
      _this.getOnlyChild = function(children) {
        if (typeof children === "function") {
          var meta = _this.getMeta();
          return _objectSpread2(_objectSpread2({}, _this.getOnlyChild(children(_this.getControlled(), meta, _this.props.fieldContext))), {}, {
            isFunction: true
          });
        }
        var childList = toArray(children);
        if (childList.length !== 1 || !/* @__PURE__ */ React10.isValidElement(childList[0])) {
          return {
            child: childList,
            isFunction: false
          };
        }
        return {
          child: childList[0],
          isFunction: false
        };
      };
      _this.getValue = function(store) {
        var getFieldsValue = _this.props.fieldContext.getFieldsValue;
        var namePath = _this.getNamePath();
        return getValue2(store || getFieldsValue(true), namePath);
      };
      _this.getControlled = function() {
        var childProps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var _this$props6 = _this.props, trigger = _this$props6.trigger, validateTrigger = _this$props6.validateTrigger, getValueFromEvent = _this$props6.getValueFromEvent, normalize2 = _this$props6.normalize, valuePropName = _this$props6.valuePropName, getValueProps = _this$props6.getValueProps, fieldContext = _this$props6.fieldContext;
        var mergedValidateTrigger = validateTrigger !== void 0 ? validateTrigger : fieldContext.validateTrigger;
        var namePath = _this.getNamePath();
        var getInternalHooks3 = fieldContext.getInternalHooks, getFieldsValue = fieldContext.getFieldsValue;
        var _getInternalHooks = getInternalHooks3(HOOK_MARK), dispatch2 = _getInternalHooks.dispatch;
        var value = _this.getValue();
        var mergedGetValueProps = getValueProps || function(val) {
          return _defineProperty({}, valuePropName, val);
        };
        var originTriggerFunc = childProps[trigger];
        var control = _objectSpread2(_objectSpread2({}, childProps), mergedGetValueProps(value));
        control[trigger] = function() {
          _this.touched = true;
          _this.dirty = true;
          _this.triggerMetaEvent();
          var newValue;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (getValueFromEvent) {
            newValue = getValueFromEvent.apply(void 0, args);
          } else {
            newValue = defaultGetValueFromEvent.apply(void 0, [valuePropName].concat(args));
          }
          if (normalize2) {
            newValue = normalize2(newValue, value, getFieldsValue(true));
          }
          dispatch2({
            type: "updateValue",
            namePath,
            value: newValue
          });
          if (originTriggerFunc) {
            originTriggerFunc.apply(void 0, args);
          }
        };
        var validateTriggerList = toArray2(mergedValidateTrigger || []);
        validateTriggerList.forEach(function(triggerName) {
          var originTrigger = control[triggerName];
          control[triggerName] = function() {
            if (originTrigger) {
              originTrigger.apply(void 0, arguments);
            }
            var rules2 = _this.props.rules;
            if (rules2 && rules2.length) {
              dispatch2({
                type: "validateField",
                namePath,
                triggerName
              });
            }
          };
        });
        return control;
      };
      if (props.fieldContext) {
        var getInternalHooks2 = props.fieldContext.getInternalHooks;
        var _getInternalHooks2 = getInternalHooks2(HOOK_MARK), initEntityValue = _getInternalHooks2.initEntityValue;
        initEntityValue(_assertThisInitialized(_this));
      }
      return _this;
    }
    _createClass(Field2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props7 = this.props, shouldUpdate = _this$props7.shouldUpdate, fieldContext = _this$props7.fieldContext;
        this.mounted = true;
        if (fieldContext) {
          var getInternalHooks2 = fieldContext.getInternalHooks;
          var _getInternalHooks3 = getInternalHooks2(HOOK_MARK), registerField = _getInternalHooks3.registerField;
          this.cancelRegisterFunc = registerField(this);
        }
        if (shouldUpdate === true) {
          this.reRender();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.cancelRegister();
        this.triggerMetaEvent(true);
        this.mounted = false;
      }
    }, {
      key: "reRender",
      value: function reRender() {
        if (!this.mounted)
          return;
        this.forceUpdate();
      }
    }, {
      key: "render",
      value: function render4() {
        var resetCount = this.state.resetCount;
        var children = this.props.children;
        var _this$getOnlyChild = this.getOnlyChild(children), child = _this$getOnlyChild.child, isFunction2 = _this$getOnlyChild.isFunction;
        var returnChildNode;
        if (isFunction2) {
          returnChildNode = child;
        } else if (/* @__PURE__ */ React10.isValidElement(child)) {
          returnChildNode = /* @__PURE__ */ React10.cloneElement(child, this.getControlled(child.props));
        } else {
          warning_default(!child, "`children` of Field is not validate ReactElement.");
          returnChildNode = child;
        }
        return /* @__PURE__ */ React10.createElement(React10.Fragment, {
          key: resetCount
        }, returnChildNode);
      }
    }]);
    return Field2;
  }(React10.Component);
  Field.contextType = FieldContext_default;
  Field.defaultProps = {
    trigger: "onChange",
    valuePropName: "value"
  };
  function WrapperField(_ref5) {
    var name5 = _ref5.name, restProps = _objectWithoutProperties(_ref5, _excluded);
    var fieldContext = React10.useContext(FieldContext_default);
    var namePath = name5 !== void 0 ? getNamePath(name5) : void 0;
    var key2 = "keep";
    if (!restProps.isListField) {
      key2 = "_".concat((namePath || []).join("_"));
    }
    if (restProps.preserve === false && restProps.isListField && namePath.length <= 1) {
      warning_default(false, "`preserve` should not apply on Form.List fields.");
    }
    return /* @__PURE__ */ React10.createElement(Field, _extends({
      key: key2,
      name: namePath
    }, restProps, {
      fieldContext
    }));
  }
  var Field_default = WrapperField;

  // node_modules/rc-field-form/es/List.js
  var React12 = __toESM(require_react());

  // node_modules/rc-field-form/es/ListContext.js
  var React11 = __toESM(require_react());
  var ListContext = /* @__PURE__ */ React11.createContext(null);
  var ListContext_default = ListContext;

  // node_modules/rc-field-form/es/List.js
  var List = function List2(_ref) {
    var name5 = _ref.name, initialValue = _ref.initialValue, children = _ref.children, rules2 = _ref.rules, validateTrigger = _ref.validateTrigger;
    var context = React12.useContext(FieldContext_default);
    var keyRef = React12.useRef({
      keys: [],
      id: 0
    });
    var keyManager = keyRef.current;
    var prefixName = React12.useMemo(function() {
      var parentPrefixName = getNamePath(context.prefixName) || [];
      return [].concat(_toConsumableArray(parentPrefixName), _toConsumableArray(getNamePath(name5)));
    }, [context.prefixName, name5]);
    var fieldContext = React12.useMemo(function() {
      return _objectSpread2(_objectSpread2({}, context), {}, {
        prefixName
      });
    }, [context, prefixName]);
    var listContext = React12.useMemo(function() {
      return {
        getKey: function getKey2(namePath) {
          var len = prefixName.length;
          var pathName = namePath[len];
          return [keyManager.keys[pathName], namePath.slice(len + 1)];
        }
      };
    }, [prefixName]);
    if (typeof children !== "function") {
      warning_default(false, "Form.List only accepts function as children.");
      return null;
    }
    var shouldUpdate = function shouldUpdate2(prevValue, nextValue, _ref2) {
      var source = _ref2.source;
      if (source === "internal") {
        return false;
      }
      return prevValue !== nextValue;
    };
    return /* @__PURE__ */ React12.createElement(ListContext_default.Provider, {
      value: listContext
    }, /* @__PURE__ */ React12.createElement(FieldContext_default.Provider, {
      value: fieldContext
    }, /* @__PURE__ */ React12.createElement(Field_default, {
      name: [],
      shouldUpdate,
      rules: rules2,
      validateTrigger,
      initialValue,
      isList: true
    }, function(_ref3, meta) {
      var _ref3$value = _ref3.value, value = _ref3$value === void 0 ? [] : _ref3$value, onChange3 = _ref3.onChange;
      var getFieldValue = context.getFieldValue;
      var getNewValue = function getNewValue2() {
        var values = getFieldValue(prefixName || []);
        return values || [];
      };
      var operations = {
        add: function add(defaultValue, index3) {
          var newValue = getNewValue();
          if (index3 >= 0 && index3 <= newValue.length) {
            keyManager.keys = [].concat(_toConsumableArray(keyManager.keys.slice(0, index3)), [keyManager.id], _toConsumableArray(keyManager.keys.slice(index3)));
            onChange3([].concat(_toConsumableArray(newValue.slice(0, index3)), [defaultValue], _toConsumableArray(newValue.slice(index3))));
          } else {
            if (index3 < 0 || index3 > newValue.length) {
              warning_default(false, "The second parameter of the add function should be a valid positive number.");
            }
            keyManager.keys = [].concat(_toConsumableArray(keyManager.keys), [keyManager.id]);
            onChange3([].concat(_toConsumableArray(newValue), [defaultValue]));
          }
          keyManager.id += 1;
        },
        remove: function remove(index3) {
          var newValue = getNewValue();
          var indexSet = new Set(Array.isArray(index3) ? index3 : [index3]);
          if (indexSet.size <= 0) {
            return;
          }
          keyManager.keys = keyManager.keys.filter(function(_, keysIndex) {
            return !indexSet.has(keysIndex);
          });
          onChange3(newValue.filter(function(_, valueIndex) {
            return !indexSet.has(valueIndex);
          }));
        },
        move: function move2(from3, to) {
          if (from3 === to) {
            return;
          }
          var newValue = getNewValue();
          if (from3 < 0 || from3 >= newValue.length || to < 0 || to >= newValue.length) {
            return;
          }
          keyManager.keys = move(keyManager.keys, from3, to);
          onChange3(move(newValue, from3, to));
        }
      };
      var listValue = value || [];
      if (!Array.isArray(listValue)) {
        listValue = [];
        if (true) {
          warning_default(false, "Current value of '".concat(prefixName.join(" > "), "' is not an array type."));
        }
      }
      return children(listValue.map(function(__, index3) {
        var key2 = keyManager.keys[index3];
        if (key2 === void 0) {
          keyManager.keys[index3] = keyManager.id;
          key2 = keyManager.keys[index3];
          keyManager.id += 1;
        }
        return {
          name: index3,
          key: key2,
          isListField: true
        };
      }), operations, meta);
    })));
  };
  var List_default = List;

  // node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
  function _iterableToArrayLimit(arr, i3) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
      var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
      try {
        if (_x = (_i = _i.call(arr)).next, 0 === i3) {
          if (Object(_i) !== _i)
            return;
          _n = false;
        } else
          for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i3); _n = true)
            ;
      } catch (err) {
        _d = true, _e = err;
      } finally {
        try {
          if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r))
            return;
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
  }

  // node_modules/@babel/runtime/helpers/esm/slicedToArray.js
  function _slicedToArray(arr, i3) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i3) || _unsupportedIterableToArray(arr, i3) || _nonIterableRest();
  }

  // node_modules/rc-field-form/es/useForm.js
  var React13 = __toESM(require_react());

  // node_modules/rc-field-form/es/utils/asyncUtil.js
  function allPromiseFinish(promiseList) {
    var hasError = false;
    var count2 = promiseList.length;
    var results = [];
    if (!promiseList.length) {
      return Promise.resolve([]);
    }
    return new Promise(function(resolve5, reject) {
      promiseList.forEach(function(promise, index3) {
        promise.catch(function(e3) {
          hasError = true;
          return e3;
        }).then(function(result) {
          count2 -= 1;
          results[index3] = result;
          if (count2 > 0) {
            return;
          }
          if (hasError) {
            reject(results);
          }
          resolve5(results);
        });
      });
    });
  }

  // node_modules/rc-field-form/es/utils/NameMap.js
  var SPLIT = "__@field_split__";
  function normalize(namePath) {
    return namePath.map(function(cell) {
      return "".concat(_typeof(cell), ":").concat(cell);
    }).join(SPLIT);
  }
  var NameMap = /* @__PURE__ */ function() {
    function NameMap2() {
      _classCallCheck(this, NameMap2);
      this.kvs = /* @__PURE__ */ new Map();
    }
    _createClass(NameMap2, [{
      key: "set",
      value: function set2(key2, value) {
        this.kvs.set(normalize(key2), value);
      }
    }, {
      key: "get",
      value: function get3(key2) {
        return this.kvs.get(normalize(key2));
      }
    }, {
      key: "update",
      value: function update(key2, updater) {
        var origin = this.get(key2);
        var next = updater(origin);
        if (!next) {
          this.delete(key2);
        } else {
          this.set(key2, next);
        }
      }
    }, {
      key: "delete",
      value: function _delete(key2) {
        this.kvs.delete(normalize(key2));
      }
      // Since we only use this in test, let simply realize this
    }, {
      key: "map",
      value: function map3(callback) {
        return _toConsumableArray(this.kvs.entries()).map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 2), key2 = _ref2[0], value = _ref2[1];
          var cells = key2.split(SPLIT);
          return callback({
            key: cells.map(function(cell) {
              var _cell$match = cell.match(/^([^:]*):(.*)$/), _cell$match2 = _slicedToArray(_cell$match, 3), type4 = _cell$match2[1], unit = _cell$match2[2];
              return type4 === "number" ? Number(unit) : unit;
            }),
            value
          });
        });
      }
    }, {
      key: "toJSON",
      value: function toJSON2() {
        var json = {};
        this.map(function(_ref3) {
          var key2 = _ref3.key, value = _ref3.value;
          json[key2.join(".")] = value;
          return null;
        });
        return json;
      }
    }]);
    return NameMap2;
  }();
  var NameMap_default = NameMap;

  // node_modules/rc-field-form/es/useForm.js
  var _excluded2 = ["name", "errors"];
  var FormStore = /* @__PURE__ */ _createClass(function FormStore2(forceRootUpdate) {
    var _this = this;
    _classCallCheck(this, FormStore2);
    this.formHooked = false;
    this.forceRootUpdate = void 0;
    this.subscribable = true;
    this.store = {};
    this.fieldEntities = [];
    this.initialValues = {};
    this.callbacks = {};
    this.validateMessages = null;
    this.preserve = null;
    this.lastValidatePromise = null;
    this.getForm = function() {
      return {
        getFieldValue: _this.getFieldValue,
        getFieldsValue: _this.getFieldsValue,
        getFieldError: _this.getFieldError,
        getFieldWarning: _this.getFieldWarning,
        getFieldsError: _this.getFieldsError,
        isFieldsTouched: _this.isFieldsTouched,
        isFieldTouched: _this.isFieldTouched,
        isFieldValidating: _this.isFieldValidating,
        isFieldsValidating: _this.isFieldsValidating,
        resetFields: _this.resetFields,
        setFields: _this.setFields,
        setFieldValue: _this.setFieldValue,
        setFieldsValue: _this.setFieldsValue,
        validateFields: _this.validateFields,
        submit: _this.submit,
        _init: true,
        getInternalHooks: _this.getInternalHooks
      };
    };
    this.getInternalHooks = function(key2) {
      if (key2 === HOOK_MARK) {
        _this.formHooked = true;
        return {
          dispatch: _this.dispatch,
          initEntityValue: _this.initEntityValue,
          registerField: _this.registerField,
          useSubscribe: _this.useSubscribe,
          setInitialValues: _this.setInitialValues,
          destroyForm: _this.destroyForm,
          setCallbacks: _this.setCallbacks,
          setValidateMessages: _this.setValidateMessages,
          getFields: _this.getFields,
          setPreserve: _this.setPreserve,
          getInitialValue: _this.getInitialValue,
          registerWatch: _this.registerWatch
        };
      }
      warning_default(false, "`getInternalHooks` is internal usage. Should not call directly.");
      return null;
    };
    this.useSubscribe = function(subscribable) {
      _this.subscribable = subscribable;
    };
    this.prevWithoutPreserves = null;
    this.setInitialValues = function(initialValues, init) {
      _this.initialValues = initialValues || {};
      if (init) {
        var _this$prevWithoutPres;
        var nextStore = setValues({}, initialValues, _this.store);
        (_this$prevWithoutPres = _this.prevWithoutPreserves) === null || _this$prevWithoutPres === void 0 ? void 0 : _this$prevWithoutPres.map(function(_ref) {
          var namePath = _ref.key;
          nextStore = setValue(nextStore, namePath, getValue2(initialValues, namePath));
        });
        _this.prevWithoutPreserves = null;
        _this.updateStore(nextStore);
      }
    };
    this.destroyForm = function() {
      var prevWithoutPreserves = new NameMap_default();
      _this.getFieldEntities(true).forEach(function(entity) {
        if (!_this.isMergedPreserve(entity.isPreserve())) {
          prevWithoutPreserves.set(entity.getNamePath(), true);
        }
      });
      _this.prevWithoutPreserves = prevWithoutPreserves;
    };
    this.getInitialValue = function(namePath) {
      var initValue = getValue2(_this.initialValues, namePath);
      return namePath.length ? cloneDeep_default(initValue) : initValue;
    };
    this.setCallbacks = function(callbacks) {
      _this.callbacks = callbacks;
    };
    this.setValidateMessages = function(validateMessages) {
      _this.validateMessages = validateMessages;
    };
    this.setPreserve = function(preserve) {
      _this.preserve = preserve;
    };
    this.watchList = [];
    this.registerWatch = function(callback) {
      _this.watchList.push(callback);
      return function() {
        _this.watchList = _this.watchList.filter(function(fn) {
          return fn !== callback;
        });
      };
    };
    this.notifyWatch = function() {
      var namePath = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      if (_this.watchList.length) {
        var values = _this.getFieldsValue();
        _this.watchList.forEach(function(callback) {
          callback(values, namePath);
        });
      }
    };
    this.timeoutId = null;
    this.warningUnhooked = function() {
      if (!_this.timeoutId && typeof window !== "undefined") {
        _this.timeoutId = setTimeout(function() {
          _this.timeoutId = null;
          if (!_this.formHooked) {
            warning_default(false, "Instance created by `useForm` is not connected to any Form element. Forget to pass `form` prop?");
          }
        });
      }
    };
    this.updateStore = function(nextStore) {
      _this.store = nextStore;
    };
    this.getFieldEntities = function() {
      var pure = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      if (!pure) {
        return _this.fieldEntities;
      }
      return _this.fieldEntities.filter(function(field) {
        return field.getNamePath().length;
      });
    };
    this.getFieldsMap = function() {
      var pure = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var cache = new NameMap_default();
      _this.getFieldEntities(pure).forEach(function(field) {
        var namePath = field.getNamePath();
        cache.set(namePath, field);
      });
      return cache;
    };
    this.getFieldEntitiesForNamePathList = function(nameList) {
      if (!nameList) {
        return _this.getFieldEntities(true);
      }
      var cache = _this.getFieldsMap(true);
      return nameList.map(function(name5) {
        var namePath = getNamePath(name5);
        return cache.get(namePath) || {
          INVALIDATE_NAME_PATH: getNamePath(name5)
        };
      });
    };
    this.getFieldsValue = function(nameList, filterFunc) {
      _this.warningUnhooked();
      if (nameList === true && !filterFunc) {
        return _this.store;
      }
      var fieldEntities = _this.getFieldEntitiesForNamePathList(Array.isArray(nameList) ? nameList : null);
      var filteredNameList = [];
      fieldEntities.forEach(function(entity) {
        var _entity$isListField;
        var namePath = "INVALIDATE_NAME_PATH" in entity ? entity.INVALIDATE_NAME_PATH : entity.getNamePath();
        if (!nameList && ((_entity$isListField = entity.isListField) === null || _entity$isListField === void 0 ? void 0 : _entity$isListField.call(entity))) {
          return;
        }
        if (!filterFunc) {
          filteredNameList.push(namePath);
        } else {
          var meta = "getMeta" in entity ? entity.getMeta() : null;
          if (filterFunc(meta)) {
            filteredNameList.push(namePath);
          }
        }
      });
      return cloneByNamePathList(_this.store, filteredNameList.map(getNamePath));
    };
    this.getFieldValue = function(name5) {
      _this.warningUnhooked();
      var namePath = getNamePath(name5);
      return getValue2(_this.store, namePath);
    };
    this.getFieldsError = function(nameList) {
      _this.warningUnhooked();
      var fieldEntities = _this.getFieldEntitiesForNamePathList(nameList);
      return fieldEntities.map(function(entity, index3) {
        if (entity && !("INVALIDATE_NAME_PATH" in entity)) {
          return {
            name: entity.getNamePath(),
            errors: entity.getErrors(),
            warnings: entity.getWarnings()
          };
        }
        return {
          name: getNamePath(nameList[index3]),
          errors: [],
          warnings: []
        };
      });
    };
    this.getFieldError = function(name5) {
      _this.warningUnhooked();
      var namePath = getNamePath(name5);
      var fieldError = _this.getFieldsError([namePath])[0];
      return fieldError.errors;
    };
    this.getFieldWarning = function(name5) {
      _this.warningUnhooked();
      var namePath = getNamePath(name5);
      var fieldError = _this.getFieldsError([namePath])[0];
      return fieldError.warnings;
    };
    this.isFieldsTouched = function() {
      _this.warningUnhooked();
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var arg0 = args[0], arg1 = args[1];
      var namePathList;
      var isAllFieldsTouched = false;
      if (args.length === 0) {
        namePathList = null;
      } else if (args.length === 1) {
        if (Array.isArray(arg0)) {
          namePathList = arg0.map(getNamePath);
          isAllFieldsTouched = false;
        } else {
          namePathList = null;
          isAllFieldsTouched = arg0;
        }
      } else {
        namePathList = arg0.map(getNamePath);
        isAllFieldsTouched = arg1;
      }
      var fieldEntities = _this.getFieldEntities(true);
      var isFieldTouched = function isFieldTouched2(field) {
        return field.isFieldTouched();
      };
      if (!namePathList) {
        return isAllFieldsTouched ? fieldEntities.every(isFieldTouched) : fieldEntities.some(isFieldTouched);
      }
      var map3 = new NameMap_default();
      namePathList.forEach(function(shortNamePath) {
        map3.set(shortNamePath, []);
      });
      fieldEntities.forEach(function(field) {
        var fieldNamePath = field.getNamePath();
        namePathList.forEach(function(shortNamePath) {
          if (shortNamePath.every(function(nameUnit, i3) {
            return fieldNamePath[i3] === nameUnit;
          })) {
            map3.update(shortNamePath, function(list) {
              return [].concat(_toConsumableArray(list), [field]);
            });
          }
        });
      });
      var isNamePathListTouched = function isNamePathListTouched2(entities) {
        return entities.some(isFieldTouched);
      };
      var namePathListEntities = map3.map(function(_ref2) {
        var value = _ref2.value;
        return value;
      });
      return isAllFieldsTouched ? namePathListEntities.every(isNamePathListTouched) : namePathListEntities.some(isNamePathListTouched);
    };
    this.isFieldTouched = function(name5) {
      _this.warningUnhooked();
      return _this.isFieldsTouched([name5]);
    };
    this.isFieldsValidating = function(nameList) {
      _this.warningUnhooked();
      var fieldEntities = _this.getFieldEntities();
      if (!nameList) {
        return fieldEntities.some(function(testField) {
          return testField.isFieldValidating();
        });
      }
      var namePathList = nameList.map(getNamePath);
      return fieldEntities.some(function(testField) {
        var fieldNamePath = testField.getNamePath();
        return containsNamePath(namePathList, fieldNamePath) && testField.isFieldValidating();
      });
    };
    this.isFieldValidating = function(name5) {
      _this.warningUnhooked();
      return _this.isFieldsValidating([name5]);
    };
    this.resetWithFieldInitialValue = function() {
      var info = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var cache = new NameMap_default();
      var fieldEntities = _this.getFieldEntities(true);
      fieldEntities.forEach(function(field) {
        var initialValue = field.props.initialValue;
        var namePath = field.getNamePath();
        if (initialValue !== void 0) {
          var records = cache.get(namePath) || /* @__PURE__ */ new Set();
          records.add({
            entity: field,
            value: initialValue
          });
          cache.set(namePath, records);
        }
      });
      var resetWithFields = function resetWithFields2(entities) {
        entities.forEach(function(field) {
          var initialValue = field.props.initialValue;
          if (initialValue !== void 0) {
            var namePath = field.getNamePath();
            var formInitialValue = _this.getInitialValue(namePath);
            if (formInitialValue !== void 0) {
              warning_default(false, "Form already set 'initialValues' with path '".concat(namePath.join("."), "'. Field can not overwrite it."));
            } else {
              var records = cache.get(namePath);
              if (records && records.size > 1) {
                warning_default(false, "Multiple Field with path '".concat(namePath.join("."), "' set 'initialValue'. Can not decide which one to pick."));
              } else if (records) {
                var originValue = _this.getFieldValue(namePath);
                if (!info.skipExist || originValue === void 0) {
                  _this.updateStore(setValue(_this.store, namePath, _toConsumableArray(records)[0].value));
                }
              }
            }
          }
        });
      };
      var requiredFieldEntities;
      if (info.entities) {
        requiredFieldEntities = info.entities;
      } else if (info.namePathList) {
        requiredFieldEntities = [];
        info.namePathList.forEach(function(namePath) {
          var records = cache.get(namePath);
          if (records) {
            var _requiredFieldEntitie;
            (_requiredFieldEntitie = requiredFieldEntities).push.apply(_requiredFieldEntitie, _toConsumableArray(_toConsumableArray(records).map(function(r3) {
              return r3.entity;
            })));
          }
        });
      } else {
        requiredFieldEntities = fieldEntities;
      }
      resetWithFields(requiredFieldEntities);
    };
    this.resetFields = function(nameList) {
      _this.warningUnhooked();
      var prevStore = _this.store;
      if (!nameList) {
        _this.updateStore(setValues({}, _this.initialValues));
        _this.resetWithFieldInitialValue();
        _this.notifyObservers(prevStore, null, {
          type: "reset"
        });
        _this.notifyWatch();
        return;
      }
      var namePathList = nameList.map(getNamePath);
      namePathList.forEach(function(namePath) {
        var initialValue = _this.getInitialValue(namePath);
        _this.updateStore(setValue(_this.store, namePath, initialValue));
      });
      _this.resetWithFieldInitialValue({
        namePathList
      });
      _this.notifyObservers(prevStore, namePathList, {
        type: "reset"
      });
      _this.notifyWatch(namePathList);
    };
    this.setFields = function(fields) {
      _this.warningUnhooked();
      var prevStore = _this.store;
      var namePathList = [];
      fields.forEach(function(fieldData) {
        var name5 = fieldData.name, errors = fieldData.errors, data = _objectWithoutProperties(fieldData, _excluded2);
        var namePath = getNamePath(name5);
        namePathList.push(namePath);
        if ("value" in data) {
          _this.updateStore(setValue(_this.store, namePath, data.value));
        }
        _this.notifyObservers(prevStore, [namePath], {
          type: "setField",
          data: fieldData
        });
      });
      _this.notifyWatch(namePathList);
    };
    this.getFields = function() {
      var entities = _this.getFieldEntities(true);
      var fields = entities.map(function(field) {
        var namePath = field.getNamePath();
        var meta = field.getMeta();
        var fieldData = _objectSpread2(_objectSpread2({}, meta), {}, {
          name: namePath,
          value: _this.getFieldValue(namePath)
        });
        Object.defineProperty(fieldData, "originRCField", {
          value: true
        });
        return fieldData;
      });
      return fields;
    };
    this.initEntityValue = function(entity) {
      var initialValue = entity.props.initialValue;
      if (initialValue !== void 0) {
        var namePath = entity.getNamePath();
        var prevValue = getValue2(_this.store, namePath);
        if (prevValue === void 0) {
          _this.updateStore(setValue(_this.store, namePath, initialValue));
        }
      }
    };
    this.isMergedPreserve = function(fieldPreserve) {
      var mergedPreserve = fieldPreserve !== void 0 ? fieldPreserve : _this.preserve;
      return mergedPreserve !== null && mergedPreserve !== void 0 ? mergedPreserve : true;
    };
    this.registerField = function(entity) {
      _this.fieldEntities.push(entity);
      var namePath = entity.getNamePath();
      _this.notifyWatch([namePath]);
      if (entity.props.initialValue !== void 0) {
        var prevStore = _this.store;
        _this.resetWithFieldInitialValue({
          entities: [entity],
          skipExist: true
        });
        _this.notifyObservers(prevStore, [entity.getNamePath()], {
          type: "valueUpdate",
          source: "internal"
        });
      }
      return function(isListField, preserve) {
        var subNamePath = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
        _this.fieldEntities = _this.fieldEntities.filter(function(item) {
          return item !== entity;
        });
        if (!_this.isMergedPreserve(preserve) && (!isListField || subNamePath.length > 1)) {
          var defaultValue = isListField ? void 0 : _this.getInitialValue(namePath);
          if (namePath.length && _this.getFieldValue(namePath) !== defaultValue && _this.fieldEntities.every(function(field) {
            return (
              // Only reset when no namePath exist
              !matchNamePath(field.getNamePath(), namePath)
            );
          })) {
            var _prevStore = _this.store;
            _this.updateStore(setValue(_prevStore, namePath, defaultValue, true));
            _this.notifyObservers(_prevStore, [namePath], {
              type: "remove"
            });
            _this.triggerDependenciesUpdate(_prevStore, namePath);
          }
        }
        _this.notifyWatch([namePath]);
      };
    };
    this.dispatch = function(action) {
      switch (action.type) {
        case "updateValue": {
          var namePath = action.namePath, value = action.value;
          _this.updateValue(namePath, value);
          break;
        }
        case "validateField": {
          var _namePath = action.namePath, triggerName = action.triggerName;
          _this.validateFields([_namePath], {
            triggerName
          });
          break;
        }
        default:
      }
    };
    this.notifyObservers = function(prevStore, namePathList, info) {
      if (_this.subscribable) {
        var mergedInfo = _objectSpread2(_objectSpread2({}, info), {}, {
          store: _this.getFieldsValue(true)
        });
        _this.getFieldEntities().forEach(function(_ref3) {
          var onStoreChange = _ref3.onStoreChange;
          onStoreChange(prevStore, namePathList, mergedInfo);
        });
      } else {
        _this.forceRootUpdate();
      }
    };
    this.triggerDependenciesUpdate = function(prevStore, namePath) {
      var childrenFields = _this.getDependencyChildrenFields(namePath);
      if (childrenFields.length) {
        _this.validateFields(childrenFields);
      }
      _this.notifyObservers(prevStore, childrenFields, {
        type: "dependenciesUpdate",
        relatedFields: [namePath].concat(_toConsumableArray(childrenFields))
      });
      return childrenFields;
    };
    this.updateValue = function(name5, value) {
      var namePath = getNamePath(name5);
      var prevStore = _this.store;
      _this.updateStore(setValue(_this.store, namePath, value));
      _this.notifyObservers(prevStore, [namePath], {
        type: "valueUpdate",
        source: "internal"
      });
      _this.notifyWatch([namePath]);
      var childrenFields = _this.triggerDependenciesUpdate(prevStore, namePath);
      var onValuesChange = _this.callbacks.onValuesChange;
      if (onValuesChange) {
        var changedValues = cloneByNamePathList(_this.store, [namePath]);
        onValuesChange(changedValues, _this.getFieldsValue());
      }
      _this.triggerOnFieldsChange([namePath].concat(_toConsumableArray(childrenFields)));
    };
    this.setFieldsValue = function(store) {
      _this.warningUnhooked();
      var prevStore = _this.store;
      if (store) {
        var nextStore = setValues(_this.store, store);
        _this.updateStore(nextStore);
      }
      _this.notifyObservers(prevStore, null, {
        type: "valueUpdate",
        source: "external"
      });
      _this.notifyWatch();
    };
    this.setFieldValue = function(name5, value) {
      _this.setFields([{
        name: name5,
        value
      }]);
    };
    this.getDependencyChildrenFields = function(rootNamePath) {
      var children = /* @__PURE__ */ new Set();
      var childrenFields = [];
      var dependencies2fields = new NameMap_default();
      _this.getFieldEntities().forEach(function(field) {
        var dependencies = field.props.dependencies;
        (dependencies || []).forEach(function(dependency) {
          var dependencyNamePath = getNamePath(dependency);
          dependencies2fields.update(dependencyNamePath, function() {
            var fields = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : /* @__PURE__ */ new Set();
            fields.add(field);
            return fields;
          });
        });
      });
      var fillChildren = function fillChildren2(namePath) {
        var fields = dependencies2fields.get(namePath) || /* @__PURE__ */ new Set();
        fields.forEach(function(field) {
          if (!children.has(field)) {
            children.add(field);
            var fieldNamePath = field.getNamePath();
            if (field.isFieldDirty() && fieldNamePath.length) {
              childrenFields.push(fieldNamePath);
              fillChildren2(fieldNamePath);
            }
          }
        });
      };
      fillChildren(rootNamePath);
      return childrenFields;
    };
    this.triggerOnFieldsChange = function(namePathList, filedErrors) {
      var onFieldsChange = _this.callbacks.onFieldsChange;
      if (onFieldsChange) {
        var fields = _this.getFields();
        if (filedErrors) {
          var cache = new NameMap_default();
          filedErrors.forEach(function(_ref4) {
            var name5 = _ref4.name, errors = _ref4.errors;
            cache.set(name5, errors);
          });
          fields.forEach(function(field) {
            field.errors = cache.get(field.name) || field.errors;
          });
        }
        var changedFields = fields.filter(function(_ref5) {
          var fieldName = _ref5.name;
          return containsNamePath(namePathList, fieldName);
        });
        onFieldsChange(changedFields, fields);
      }
    };
    this.validateFields = function(nameList, options) {
      _this.warningUnhooked();
      var provideNameList = !!nameList;
      var namePathList = provideNameList ? nameList.map(getNamePath) : [];
      var promiseList = [];
      _this.getFieldEntities(true).forEach(function(field) {
        if (!provideNameList) {
          namePathList.push(field.getNamePath());
        }
        if ((options === null || options === void 0 ? void 0 : options.recursive) && provideNameList) {
          var namePath = field.getNamePath();
          if (
            // nameList[i] === undefined 说明是以 nameList 开头的
            // ['name'] -> ['name','list']
            namePath.every(function(nameUnit, i3) {
              return nameList[i3] === nameUnit || nameList[i3] === void 0;
            })
          ) {
            namePathList.push(namePath);
          }
        }
        if (!field.props.rules || !field.props.rules.length) {
          return;
        }
        var fieldNamePath = field.getNamePath();
        if (!provideNameList || containsNamePath(namePathList, fieldNamePath)) {
          var promise = field.validateRules(_objectSpread2({
            validateMessages: _objectSpread2(_objectSpread2({}, defaultValidateMessages), _this.validateMessages)
          }, options));
          promiseList.push(promise.then(function() {
            return {
              name: fieldNamePath,
              errors: [],
              warnings: []
            };
          }).catch(function(ruleErrors) {
            var _ruleErrors$forEach;
            var mergedErrors = [];
            var mergedWarnings = [];
            (_ruleErrors$forEach = ruleErrors.forEach) === null || _ruleErrors$forEach === void 0 ? void 0 : _ruleErrors$forEach.call(ruleErrors, function(_ref6) {
              var warningOnly = _ref6.rule.warningOnly, errors = _ref6.errors;
              if (warningOnly) {
                mergedWarnings.push.apply(mergedWarnings, _toConsumableArray(errors));
              } else {
                mergedErrors.push.apply(mergedErrors, _toConsumableArray(errors));
              }
            });
            if (mergedErrors.length) {
              return Promise.reject({
                name: fieldNamePath,
                errors: mergedErrors,
                warnings: mergedWarnings
              });
            }
            return {
              name: fieldNamePath,
              errors: mergedErrors,
              warnings: mergedWarnings
            };
          }));
        }
      });
      var summaryPromise = allPromiseFinish(promiseList);
      _this.lastValidatePromise = summaryPromise;
      summaryPromise.catch(function(results) {
        return results;
      }).then(function(results) {
        var resultNamePathList = results.map(function(_ref7) {
          var name5 = _ref7.name;
          return name5;
        });
        _this.notifyObservers(_this.store, resultNamePathList, {
          type: "validateFinish"
        });
        _this.triggerOnFieldsChange(resultNamePathList, results);
      });
      var returnPromise = summaryPromise.then(function() {
        if (_this.lastValidatePromise === summaryPromise) {
          return Promise.resolve(_this.getFieldsValue(namePathList));
        }
        return Promise.reject([]);
      }).catch(function(results) {
        var errorList = results.filter(function(result) {
          return result && result.errors.length;
        });
        return Promise.reject({
          values: _this.getFieldsValue(namePathList),
          errorFields: errorList,
          outOfDate: _this.lastValidatePromise !== summaryPromise
        });
      });
      returnPromise.catch(function(e3) {
        return e3;
      });
      return returnPromise;
    };
    this.submit = function() {
      _this.warningUnhooked();
      _this.validateFields().then(function(values) {
        var onFinish = _this.callbacks.onFinish;
        if (onFinish) {
          try {
            onFinish(values);
          } catch (err) {
            console.error(err);
          }
        }
      }).catch(function(e3) {
        var onFinishFailed = _this.callbacks.onFinishFailed;
        if (onFinishFailed) {
          onFinishFailed(e3);
        }
      });
    };
    this.forceRootUpdate = forceRootUpdate;
  });
  function useForm(form) {
    var formRef = React13.useRef();
    var _React$useState = React13.useState({}), _React$useState2 = _slicedToArray(_React$useState, 2), forceUpdate = _React$useState2[1];
    if (!formRef.current) {
      if (form) {
        formRef.current = form;
      } else {
        var forceReRender = function forceReRender2() {
          forceUpdate({});
        };
        var formStore = new FormStore(forceReRender);
        formRef.current = formStore.getForm();
      }
    }
    return [formRef.current];
  }
  var useForm_default = useForm;

  // node_modules/rc-field-form/es/Form.js
  var React15 = __toESM(require_react());

  // node_modules/rc-field-form/es/FormContext.js
  var React14 = __toESM(require_react());
  var FormContext = /* @__PURE__ */ React14.createContext({
    triggerFormChange: function triggerFormChange() {
    },
    triggerFormFinish: function triggerFormFinish() {
    },
    registerForm: function registerForm() {
    },
    unregisterForm: function unregisterForm() {
    }
  });
  var FormProvider = function FormProvider2(_ref) {
    var validateMessages = _ref.validateMessages, onFormChange = _ref.onFormChange, onFormFinish = _ref.onFormFinish, children = _ref.children;
    var formContext = React14.useContext(FormContext);
    var formsRef = React14.useRef({});
    return /* @__PURE__ */ React14.createElement(FormContext.Provider, {
      value: _objectSpread2(_objectSpread2({}, formContext), {}, {
        validateMessages: _objectSpread2(_objectSpread2({}, formContext.validateMessages), validateMessages),
        // =========================================================
        // =                  Global Form Control                  =
        // =========================================================
        triggerFormChange: function triggerFormChange2(name5, changedFields) {
          if (onFormChange) {
            onFormChange(name5, {
              changedFields,
              forms: formsRef.current
            });
          }
          formContext.triggerFormChange(name5, changedFields);
        },
        triggerFormFinish: function triggerFormFinish2(name5, values) {
          if (onFormFinish) {
            onFormFinish(name5, {
              values,
              forms: formsRef.current
            });
          }
          formContext.triggerFormFinish(name5, values);
        },
        registerForm: function registerForm2(name5, form) {
          if (name5) {
            formsRef.current = _objectSpread2(_objectSpread2({}, formsRef.current), {}, _defineProperty({}, name5, form));
          }
          formContext.registerForm(name5, form);
        },
        unregisterForm: function unregisterForm2(name5) {
          var newForms = _objectSpread2({}, formsRef.current);
          delete newForms[name5];
          formsRef.current = newForms;
          formContext.unregisterForm(name5);
        }
      })
    }, children);
  };
  var FormContext_default = FormContext;

  // node_modules/rc-field-form/es/Form.js
  var _excluded3 = ["name", "initialValues", "fields", "form", "preserve", "children", "component", "validateMessages", "validateTrigger", "onValuesChange", "onFieldsChange", "onFinish", "onFinishFailed"];
  var Form = function Form2(_ref, ref) {
    var name5 = _ref.name, initialValues = _ref.initialValues, fields = _ref.fields, form = _ref.form, preserve = _ref.preserve, children = _ref.children, _ref$component = _ref.component, Component27 = _ref$component === void 0 ? "form" : _ref$component, validateMessages = _ref.validateMessages, _ref$validateTrigger = _ref.validateTrigger, validateTrigger = _ref$validateTrigger === void 0 ? "onChange" : _ref$validateTrigger, onValuesChange = _ref.onValuesChange, _onFieldsChange = _ref.onFieldsChange, _onFinish = _ref.onFinish, onFinishFailed = _ref.onFinishFailed, restProps = _objectWithoutProperties(_ref, _excluded3);
    var formContext = React15.useContext(FormContext_default);
    var _useForm = useForm_default(form), _useForm2 = _slicedToArray(_useForm, 1), formInstance = _useForm2[0];
    var _formInstance$getInte = formInstance.getInternalHooks(HOOK_MARK), useSubscribe = _formInstance$getInte.useSubscribe, setInitialValues = _formInstance$getInte.setInitialValues, setCallbacks = _formInstance$getInte.setCallbacks, setValidateMessages = _formInstance$getInte.setValidateMessages, setPreserve = _formInstance$getInte.setPreserve, destroyForm = _formInstance$getInte.destroyForm;
    React15.useImperativeHandle(ref, function() {
      return formInstance;
    });
    React15.useEffect(function() {
      formContext.registerForm(name5, formInstance);
      return function() {
        formContext.unregisterForm(name5);
      };
    }, [formContext, formInstance, name5]);
    setValidateMessages(_objectSpread2(_objectSpread2({}, formContext.validateMessages), validateMessages));
    setCallbacks({
      onValuesChange,
      onFieldsChange: function onFieldsChange(changedFields) {
        formContext.triggerFormChange(name5, changedFields);
        if (_onFieldsChange) {
          for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            rest[_key - 1] = arguments[_key];
          }
          _onFieldsChange.apply(void 0, [changedFields].concat(rest));
        }
      },
      onFinish: function onFinish(values2) {
        formContext.triggerFormFinish(name5, values2);
        if (_onFinish) {
          _onFinish(values2);
        }
      },
      onFinishFailed
    });
    setPreserve(preserve);
    var mountRef = React15.useRef(null);
    setInitialValues(initialValues, !mountRef.current);
    if (!mountRef.current) {
      mountRef.current = true;
    }
    React15.useEffect(
      function() {
        return destroyForm;
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      []
    );
    var childrenNode;
    var childrenRenderProps = typeof children === "function";
    if (childrenRenderProps) {
      var values = formInstance.getFieldsValue(true);
      childrenNode = children(values, formInstance);
    } else {
      childrenNode = children;
    }
    useSubscribe(!childrenRenderProps);
    var prevFieldsRef = React15.useRef();
    React15.useEffect(function() {
      if (!isSimilar(prevFieldsRef.current || [], fields || [])) {
        formInstance.setFields(fields || []);
      }
      prevFieldsRef.current = fields;
    }, [fields, formInstance]);
    var formContextValue = React15.useMemo(function() {
      return _objectSpread2(_objectSpread2({}, formInstance), {}, {
        validateTrigger
      });
    }, [formInstance, validateTrigger]);
    var wrapperNode = /* @__PURE__ */ React15.createElement(FieldContext_default.Provider, {
      value: formContextValue
    }, childrenNode);
    if (Component27 === false) {
      return wrapperNode;
    }
    return /* @__PURE__ */ React15.createElement(Component27, _extends({}, restProps, {
      onSubmit: function onSubmit(event) {
        event.preventDefault();
        event.stopPropagation();
        formInstance.submit();
      },
      onReset: function onReset(event) {
        var _restProps$onReset;
        event.preventDefault();
        formInstance.resetFields();
        (_restProps$onReset = restProps.onReset) === null || _restProps$onReset === void 0 ? void 0 : _restProps$onReset.call(restProps, event);
      }
    }), wrapperNode);
  };
  var Form_default = Form;

  // node_modules/rc-field-form/es/useWatch.js
  var import_react4 = __toESM(require_react());
  function stringify(value) {
    try {
      return JSON.stringify(value);
    } catch (err) {
      return Math.random();
    }
  }
  var useWatchWarning = true ? function(namePath) {
    var fullyStr = namePath.join("__RC_FIELD_FORM_SPLIT__");
    var nameStrRef = (0, import_react4.useRef)(fullyStr);
    warning_default(nameStrRef.current === fullyStr, "`useWatch` is not support dynamic `namePath`. Please provide static instead.");
  } : function() {
  };
  function useWatch() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var _args$ = args[0], dependencies = _args$ === void 0 ? [] : _args$, form = args[1];
    var _useState = (0, import_react4.useState)(), _useState2 = _slicedToArray(_useState, 2), value = _useState2[0], setValue2 = _useState2[1];
    var valueStr = (0, import_react4.useMemo)(function() {
      return stringify(value);
    }, [value]);
    var valueStrRef = (0, import_react4.useRef)(valueStr);
    valueStrRef.current = valueStr;
    var fieldContext = (0, import_react4.useContext)(FieldContext_default);
    var formInstance = form || fieldContext;
    var isValidForm = formInstance && formInstance._init;
    if (true) {
      warning_default(args.length === 2 ? form ? isValidForm : true : isValidForm, "useWatch requires a form instance since it can not auto detect from context.");
    }
    var namePath = getNamePath(dependencies);
    var namePathRef = (0, import_react4.useRef)(namePath);
    namePathRef.current = namePath;
    useWatchWarning(namePath);
    (0, import_react4.useEffect)(
      function() {
        if (!isValidForm) {
          return;
        }
        var getFieldsValue = formInstance.getFieldsValue, getInternalHooks2 = formInstance.getInternalHooks;
        var _getInternalHooks = getInternalHooks2(HOOK_MARK), registerWatch = _getInternalHooks.registerWatch;
        var cancelRegister = registerWatch(function(store) {
          var newValue = getValue2(store, namePathRef.current);
          var nextValueStr = stringify(newValue);
          if (valueStrRef.current !== nextValueStr) {
            valueStrRef.current = nextValueStr;
            setValue2(newValue);
          }
        });
        var initialValue = getValue2(getFieldsValue(), namePathRef.current);
        setValue2(initialValue);
        return cancelRegister;
      },
      // We do not need re-register since namePath content is the same
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [isValidForm]
    );
    return value;
  }
  var useWatch_default = useWatch;

  // node_modules/rc-field-form/es/index.js
  var InternalForm = /* @__PURE__ */ React16.forwardRef(Form_default);
  var RefForm = InternalForm;
  RefForm.FormProvider = FormProvider;
  RefForm.Field = Field_default;
  RefForm.List = List_default;
  RefForm.useForm = useForm_default;
  RefForm.useWatch = useWatch_default;
  var es_default2 = RefForm;

  // node_modules/antd/es/config-provider/index.js
  var React50 = __toESM(require_react());

  // node_modules/memoize-one/dist/memoize-one.esm.js
  var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === "number" && value !== value;
  };
  function isEqual(first, second) {
    if (first === second) {
      return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
      return true;
    }
    return false;
  }
  function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (var i3 = 0; i3 < newInputs.length; i3++) {
      if (!isEqual(newInputs[i3], lastInputs[i3])) {
        return false;
      }
    }
    return true;
  }
  function memoizeOne(resultFn, isEqual3) {
    if (isEqual3 === void 0) {
      isEqual3 = areInputsEqual;
    }
    var cache = null;
    function memoized() {
      var newArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        newArgs[_i] = arguments[_i];
      }
      if (cache && cache.lastThis === this && isEqual3(newArgs, cache.lastArgs)) {
        return cache.lastResult;
      }
      var lastResult = resultFn.apply(this, newArgs);
      cache = {
        lastResult,
        lastArgs: newArgs,
        lastThis: this
      };
      return lastResult;
    }
    memoized.clear = function clear() {
      cache = null;
    };
    return memoized;
  }

  // node_modules/antd/es/locale-provider/index.js
  var React17 = __toESM(require_react());

  // node_modules/antd/es/_util/warning.js
  function noop() {
  }
  var warning4 = noop;
  if (true) {
    warning4 = function warning6(valid, component, message) {
      warning_default(valid, "[antd: ".concat(component, "] ").concat(message));
      if (false) {
        resetWarned();
      }
    };
  }
  var warning_default2 = warning4;

  // node_modules/rc-pagination/es/locale/en_US.js
  var en_US_default = {
    // Options.jsx
    items_per_page: "/ page",
    jump_to: "Go to",
    jump_to_confirm: "confirm",
    page: "Page",
    // Pagination.jsx
    prev_page: "Previous Page",
    next_page: "Next Page",
    prev_5: "Previous 5 Pages",
    next_5: "Next 5 Pages",
    prev_3: "Previous 3 Pages",
    next_3: "Next 3 Pages",
    page_size: "Page Size"
  };

  // node_modules/rc-picker/es/locale/en_US.js
  var locale = {
    locale: "en_US",
    today: "Today",
    now: "Now",
    backToToday: "Back to today",
    ok: "OK",
    clear: "Clear",
    month: "Month",
    year: "Year",
    timeSelect: "select time",
    dateSelect: "select date",
    weekSelect: "Choose a week",
    monthSelect: "Choose a month",
    yearSelect: "Choose a year",
    decadeSelect: "Choose a decade",
    yearFormat: "YYYY",
    dateFormat: "M/D/YYYY",
    dayFormat: "D",
    dateTimeFormat: "M/D/YYYY HH:mm:ss",
    monthBeforeYear: true,
    previousMonth: "Previous month (PageUp)",
    nextMonth: "Next month (PageDown)",
    previousYear: "Last year (Control + left)",
    nextYear: "Next year (Control + right)",
    previousDecade: "Last decade",
    nextDecade: "Next decade",
    previousCentury: "Last century",
    nextCentury: "Next century"
  };
  var en_US_default2 = locale;

  // node_modules/antd/es/time-picker/locale/en_US.js
  var locale2 = {
    placeholder: "Select time",
    rangePlaceholder: ["Start time", "End time"]
  };
  var en_US_default3 = locale2;

  // node_modules/antd/es/date-picker/locale/en_US.js
  var locale3 = {
    lang: _extends({
      placeholder: "Select date",
      yearPlaceholder: "Select year",
      quarterPlaceholder: "Select quarter",
      monthPlaceholder: "Select month",
      weekPlaceholder: "Select week",
      rangePlaceholder: ["Start date", "End date"],
      rangeYearPlaceholder: ["Start year", "End year"],
      rangeQuarterPlaceholder: ["Start quarter", "End quarter"],
      rangeMonthPlaceholder: ["Start month", "End month"],
      rangeWeekPlaceholder: ["Start week", "End week"]
    }, en_US_default2),
    timePickerLocale: _extends({}, en_US_default3)
  };
  var en_US_default4 = locale3;

  // node_modules/antd/es/calendar/locale/en_US.js
  var en_US_default5 = en_US_default4;

  // node_modules/antd/es/locale/default.js
  var typeTemplate2 = "${label} is not a valid ${type}";
  var localeValues = {
    locale: "en",
    Pagination: en_US_default,
    DatePicker: en_US_default4,
    TimePicker: en_US_default3,
    Calendar: en_US_default5,
    global: {
      placeholder: "Please select"
    },
    Table: {
      filterTitle: "Filter menu",
      filterConfirm: "OK",
      filterReset: "Reset",
      filterEmptyText: "No filters",
      filterCheckall: "Select all items",
      filterSearchPlaceholder: "Search in filters",
      emptyText: "No data",
      selectAll: "Select current page",
      selectInvert: "Invert current page",
      selectNone: "Clear all data",
      selectionAll: "Select all data",
      sortTitle: "Sort",
      expand: "Expand row",
      collapse: "Collapse row",
      triggerDesc: "Click to sort descending",
      triggerAsc: "Click to sort ascending",
      cancelSort: "Click to cancel sorting"
    },
    Modal: {
      okText: "OK",
      cancelText: "Cancel",
      justOkText: "OK"
    },
    Popconfirm: {
      okText: "OK",
      cancelText: "Cancel"
    },
    Transfer: {
      titles: ["", ""],
      searchPlaceholder: "Search here",
      itemUnit: "item",
      itemsUnit: "items",
      remove: "Remove",
      selectCurrent: "Select current page",
      removeCurrent: "Remove current page",
      selectAll: "Select all data",
      removeAll: "Remove all data",
      selectInvert: "Invert current page"
    },
    Upload: {
      uploading: "Uploading...",
      removeFile: "Remove file",
      uploadError: "Upload error",
      previewFile: "Preview file",
      downloadFile: "Download file"
    },
    Empty: {
      description: "No Data"
    },
    Icon: {
      icon: "icon"
    },
    Text: {
      edit: "Edit",
      copy: "Copy",
      copied: "Copied",
      expand: "Expand"
    },
    PageHeader: {
      back: "Back"
    },
    Form: {
      optional: "(optional)",
      defaultValidateMessages: {
        "default": "Field validation error for ${label}",
        required: "Please enter ${label}",
        "enum": "${label} must be one of [${enum}]",
        whitespace: "${label} cannot be a blank character",
        date: {
          format: "${label} date format is invalid",
          parse: "${label} cannot be converted to a date",
          invalid: "${label} is an invalid date"
        },
        types: {
          string: typeTemplate2,
          method: typeTemplate2,
          array: typeTemplate2,
          object: typeTemplate2,
          number: typeTemplate2,
          date: typeTemplate2,
          "boolean": typeTemplate2,
          integer: typeTemplate2,
          "float": typeTemplate2,
          regexp: typeTemplate2,
          email: typeTemplate2,
          url: typeTemplate2,
          hex: typeTemplate2
        },
        string: {
          len: "${label} must be ${len} characters",
          min: "${label} must be at least ${min} characters",
          max: "${label} must be up to ${max} characters",
          range: "${label} must be between ${min}-${max} characters"
        },
        number: {
          len: "${label} must be equal to ${len}",
          min: "${label} must be minimum ${min}",
          max: "${label} must be maximum ${max}",
          range: "${label} must be between ${min}-${max}"
        },
        array: {
          len: "Must be ${len} ${label}",
          min: "At least ${min} ${label}",
          max: "At most ${max} ${label}",
          range: "The amount of ${label} must be between ${min}-${max}"
        },
        pattern: {
          mismatch: "${label} does not match the pattern ${pattern}"
        }
      }
    },
    Image: {
      preview: "Preview"
    }
  };
  var default_default = localeValues;

  // node_modules/antd/es/modal/locale.js
  var runtimeLocale = _extends({}, default_default.Modal);
  function changeConfirmLocale(newLocale) {
    if (newLocale) {
      runtimeLocale = _extends(_extends({}, runtimeLocale), newLocale);
    } else {
      runtimeLocale = _extends({}, default_default.Modal);
    }
  }
  function getConfirmLocale() {
    return runtimeLocale;
  }

  // node_modules/antd/es/locale-provider/context.js
  var import_react5 = __toESM(require_react());
  var LocaleContext = /* @__PURE__ */ (0, import_react5.createContext)(void 0);
  var context_default = LocaleContext;

  // node_modules/antd/es/locale-provider/index.js
  var ANT_MARK = "internalMark";
  var LocaleProvider = /* @__PURE__ */ function(_React$Component) {
    _inherits(LocaleProvider2, _React$Component);
    var _super = _createSuper(LocaleProvider2);
    function LocaleProvider2(props) {
      var _this;
      _classCallCheck(this, LocaleProvider2);
      _this = _super.call(this, props);
      _this.getMemoizedContextValue = memoizeOne(function(localeValue) {
        return _extends(_extends({}, localeValue), {
          exist: true
        });
      });
      changeConfirmLocale(props.locale && props.locale.Modal);
      true ? warning_default2(props._ANT_MARK__ === ANT_MARK, "LocaleProvider", "`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead: http://u.ant.design/locale") : void 0;
      return _this;
    }
    _createClass(LocaleProvider2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        changeConfirmLocale(this.props.locale && this.props.locale.Modal);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var locale4 = this.props.locale;
        if (prevProps.locale !== locale4) {
          changeConfirmLocale(locale4 && locale4.Modal);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        changeConfirmLocale();
      }
    }, {
      key: "render",
      value: function render4() {
        var _this$props = this.props, locale4 = _this$props.locale, children = _this$props.children;
        var contextValue = this.getMemoizedContextValue(locale4);
        return /* @__PURE__ */ React17.createElement(context_default.Provider, {
          value: contextValue
        }, children);
      }
    }]);
    return LocaleProvider2;
  }(React17.Component);
  LocaleProvider.defaultProps = {
    locale: {}
  };

  // node_modules/antd/es/locale-provider/LocaleReceiver.js
  var React18 = __toESM(require_react());

  // node_modules/antd/es/locale-provider/default.js
  var default_default2 = default_default;

  // node_modules/antd/es/locale-provider/LocaleReceiver.js
  var LocaleReceiver = /* @__PURE__ */ function(_React$Component) {
    _inherits(LocaleReceiver2, _React$Component);
    var _super = _createSuper(LocaleReceiver2);
    function LocaleReceiver2() {
      _classCallCheck(this, LocaleReceiver2);
      return _super.apply(this, arguments);
    }
    _createClass(LocaleReceiver2, [{
      key: "getLocale",
      value: function getLocale() {
        var _this$props = this.props, componentName = _this$props.componentName, defaultLocale = _this$props.defaultLocale;
        var locale4 = defaultLocale || default_default2[componentName !== null && componentName !== void 0 ? componentName : "global"];
        var antLocale = this.context;
        var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
        return _extends(_extends({}, locale4 instanceof Function ? locale4() : locale4), localeFromContext || {});
      }
    }, {
      key: "getLocaleCode",
      value: function getLocaleCode() {
        var antLocale = this.context;
        var localeCode = antLocale && antLocale.locale;
        if (antLocale && antLocale.exist && !localeCode) {
          return default_default2.locale;
        }
        return localeCode;
      }
    }, {
      key: "render",
      value: function render4() {
        return this.props.children(this.getLocale(), this.getLocaleCode(), this.context);
      }
    }]);
    return LocaleReceiver2;
  }(React18.Component);
  LocaleReceiver.defaultProps = {
    componentName: "global"
  };
  LocaleReceiver.contextType = context_default;
  function useLocaleReceiver(componentName, defaultLocale) {
    var antLocale = React18.useContext(context_default);
    var componentLocale = React18.useMemo(function() {
      var locale4 = defaultLocale || default_default2[componentName || "global"];
      var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
      return _extends(_extends({}, typeof locale4 === "function" ? locale4() : locale4), localeFromContext || {});
    }, [componentName, defaultLocale, antLocale]);
    return [componentLocale];
  }

  // node_modules/@ant-design/icons/es/icons/CheckCircleFilled.js
  var React21 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CheckCircleFilled.js
  var CheckCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z" } }] }, "name": "check-circle", "theme": "filled" };
  var CheckCircleFilled_default = CheckCircleFilled;

  // node_modules/@ant-design/icons/es/components/AntdIcon.js
  var React20 = __toESM(require_react());
  var import_classnames = __toESM(require_classnames());

  // node_modules/@ctrl/tinycolor/dist/module/util.js
  function bound01(n3, max) {
    if (isOnePointZero(n3)) {
      n3 = "100%";
    }
    var isPercent = isPercentage(n3);
    n3 = max === 360 ? n3 : Math.min(max, Math.max(0, parseFloat(n3)));
    if (isPercent) {
      n3 = parseInt(String(n3 * max), 10) / 100;
    }
    if (Math.abs(n3 - max) < 1e-6) {
      return 1;
    }
    if (max === 360) {
      n3 = (n3 < 0 ? n3 % max + max : n3 % max) / parseFloat(String(max));
    } else {
      n3 = n3 % max / parseFloat(String(max));
    }
    return n3;
  }
  function clamp01(val) {
    return Math.min(1, Math.max(0, val));
  }
  function isOnePointZero(n3) {
    return typeof n3 === "string" && n3.indexOf(".") !== -1 && parseFloat(n3) === 1;
  }
  function isPercentage(n3) {
    return typeof n3 === "string" && n3.indexOf("%") !== -1;
  }
  function boundAlpha(a2) {
    a2 = parseFloat(a2);
    if (isNaN(a2) || a2 < 0 || a2 > 1) {
      a2 = 1;
    }
    return a2;
  }
  function convertToPercentage(n3) {
    if (n3 <= 1) {
      return "".concat(Number(n3) * 100, "%");
    }
    return n3;
  }
  function pad2(c2) {
    return c2.length === 1 ? "0" + c2 : String(c2);
  }

  // node_modules/@ctrl/tinycolor/dist/module/conversion.js
  function rgbToRgb(r3, g2, b2) {
    return {
      r: bound01(r3, 255) * 255,
      g: bound01(g2, 255) * 255,
      b: bound01(b2, 255) * 255
    };
  }
  function rgbToHsl(r3, g2, b2) {
    r3 = bound01(r3, 255);
    g2 = bound01(g2, 255);
    b2 = bound01(b2, 255);
    var max = Math.max(r3, g2, b2);
    var min = Math.min(r3, g2, b2);
    var h2 = 0;
    var s2 = 0;
    var l2 = (max + min) / 2;
    if (max === min) {
      s2 = 0;
      h2 = 0;
    } else {
      var d2 = max - min;
      s2 = l2 > 0.5 ? d2 / (2 - max - min) : d2 / (max + min);
      switch (max) {
        case r3:
          h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
          break;
        case g2:
          h2 = (b2 - r3) / d2 + 2;
          break;
        case b2:
          h2 = (r3 - g2) / d2 + 4;
          break;
        default:
          break;
      }
      h2 /= 6;
    }
    return { h: h2, s: s2, l: l2 };
  }
  function hue2rgb(p2, q, t3) {
    if (t3 < 0) {
      t3 += 1;
    }
    if (t3 > 1) {
      t3 -= 1;
    }
    if (t3 < 1 / 6) {
      return p2 + (q - p2) * (6 * t3);
    }
    if (t3 < 1 / 2) {
      return q;
    }
    if (t3 < 2 / 3) {
      return p2 + (q - p2) * (2 / 3 - t3) * 6;
    }
    return p2;
  }
  function hslToRgb(h2, s2, l2) {
    var r3;
    var g2;
    var b2;
    h2 = bound01(h2, 360);
    s2 = bound01(s2, 100);
    l2 = bound01(l2, 100);
    if (s2 === 0) {
      g2 = l2;
      b2 = l2;
      r3 = l2;
    } else {
      var q = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
      var p2 = 2 * l2 - q;
      r3 = hue2rgb(p2, q, h2 + 1 / 3);
      g2 = hue2rgb(p2, q, h2);
      b2 = hue2rgb(p2, q, h2 - 1 / 3);
    }
    return { r: r3 * 255, g: g2 * 255, b: b2 * 255 };
  }
  function rgbToHsv(r3, g2, b2) {
    r3 = bound01(r3, 255);
    g2 = bound01(g2, 255);
    b2 = bound01(b2, 255);
    var max = Math.max(r3, g2, b2);
    var min = Math.min(r3, g2, b2);
    var h2 = 0;
    var v2 = max;
    var d2 = max - min;
    var s2 = max === 0 ? 0 : d2 / max;
    if (max === min) {
      h2 = 0;
    } else {
      switch (max) {
        case r3:
          h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
          break;
        case g2:
          h2 = (b2 - r3) / d2 + 2;
          break;
        case b2:
          h2 = (r3 - g2) / d2 + 4;
          break;
        default:
          break;
      }
      h2 /= 6;
    }
    return { h: h2, s: s2, v: v2 };
  }
  function hsvToRgb(h2, s2, v2) {
    h2 = bound01(h2, 360) * 6;
    s2 = bound01(s2, 100);
    v2 = bound01(v2, 100);
    var i3 = Math.floor(h2);
    var f2 = h2 - i3;
    var p2 = v2 * (1 - s2);
    var q = v2 * (1 - f2 * s2);
    var t3 = v2 * (1 - (1 - f2) * s2);
    var mod2 = i3 % 6;
    var r3 = [v2, q, p2, p2, t3, v2][mod2];
    var g2 = [t3, v2, v2, q, p2, p2][mod2];
    var b2 = [p2, p2, t3, v2, v2, q][mod2];
    return { r: r3 * 255, g: g2 * 255, b: b2 * 255 };
  }
  function rgbToHex(r3, g2, b2, allow3Char) {
    var hex2 = [
      pad2(Math.round(r3).toString(16)),
      pad2(Math.round(g2).toString(16)),
      pad2(Math.round(b2).toString(16))
    ];
    if (allow3Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1))) {
      return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
    }
    return hex2.join("");
  }
  function rgbaToHex(r3, g2, b2, a2, allow4Char) {
    var hex2 = [
      pad2(Math.round(r3).toString(16)),
      pad2(Math.round(g2).toString(16)),
      pad2(Math.round(b2).toString(16)),
      pad2(convertDecimalToHex(a2))
    ];
    if (allow4Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1)) && hex2[3].startsWith(hex2[3].charAt(1))) {
      return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
    }
    return hex2.join("");
  }
  function convertDecimalToHex(d2) {
    return Math.round(parseFloat(d2) * 255).toString(16);
  }
  function convertHexToDecimal(h2) {
    return parseIntFromHex(h2) / 255;
  }
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }
  function numberInputToObject(color) {
    return {
      r: color >> 16,
      g: (color & 65280) >> 8,
      b: color & 255
    };
  }

  // node_modules/@ctrl/tinycolor/dist/module/css-color-names.js
  var names = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgreen: "#006400",
    darkgrey: "#a9a9a9",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkslategrey: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dimgrey: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    goldenrod: "#daa520",
    gold: "#ffd700",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    grey: "#808080",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavenderblush: "#fff0f5",
    lavender: "#e6e6fa",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgreen: "#90ee90",
    lightgrey: "#d3d3d3",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370db",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#db7093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    rebeccapurple: "#663399",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    slategrey: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32"
  };

  // node_modules/@ctrl/tinycolor/dist/module/format-input.js
  function inputToRGB(color) {
    var rgb = { r: 0, g: 0, b: 0 };
    var a2 = 1;
    var s2 = null;
    var v2 = null;
    var l2 = null;
    var ok = false;
    var format2 = false;
    if (typeof color === "string") {
      color = stringInputToObject(color);
    }
    if (typeof color === "object") {
      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format2 = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
        s2 = convertToPercentage(color.s);
        v2 = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, s2, v2);
        ok = true;
        format2 = "hsv";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
        s2 = convertToPercentage(color.s);
        l2 = convertToPercentage(color.l);
        rgb = hslToRgb(color.h, s2, l2);
        ok = true;
        format2 = "hsl";
      }
      if (Object.prototype.hasOwnProperty.call(color, "a")) {
        a2 = color.a;
      }
    }
    a2 = boundAlpha(a2);
    return {
      ok,
      format: color.format || format2,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a: a2
    };
  }
  var CSS_INTEGER = "[-\\+]?\\d+%?";
  var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
  var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
  var matchers = {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
  };
  function stringInputToObject(color) {
    color = color.trim().toLowerCase();
    if (color.length === 0) {
      return false;
    }
    var named = false;
    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color === "transparent") {
      return { r: 0, g: 0, b: 0, a: 0, format: "name" };
    }
    var match2 = matchers.rgb.exec(color);
    if (match2) {
      return { r: match2[1], g: match2[2], b: match2[3] };
    }
    match2 = matchers.rgba.exec(color);
    if (match2) {
      return { r: match2[1], g: match2[2], b: match2[3], a: match2[4] };
    }
    match2 = matchers.hsl.exec(color);
    if (match2) {
      return { h: match2[1], s: match2[2], l: match2[3] };
    }
    match2 = matchers.hsla.exec(color);
    if (match2) {
      return { h: match2[1], s: match2[2], l: match2[3], a: match2[4] };
    }
    match2 = matchers.hsv.exec(color);
    if (match2) {
      return { h: match2[1], s: match2[2], v: match2[3] };
    }
    match2 = matchers.hsva.exec(color);
    if (match2) {
      return { h: match2[1], s: match2[2], v: match2[3], a: match2[4] };
    }
    match2 = matchers.hex8.exec(color);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1]),
        g: parseIntFromHex(match2[2]),
        b: parseIntFromHex(match2[3]),
        a: convertHexToDecimal(match2[4]),
        format: named ? "name" : "hex8"
      };
    }
    match2 = matchers.hex6.exec(color);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1]),
        g: parseIntFromHex(match2[2]),
        b: parseIntFromHex(match2[3]),
        format: named ? "name" : "hex"
      };
    }
    match2 = matchers.hex4.exec(color);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1] + match2[1]),
        g: parseIntFromHex(match2[2] + match2[2]),
        b: parseIntFromHex(match2[3] + match2[3]),
        a: convertHexToDecimal(match2[4] + match2[4]),
        format: named ? "name" : "hex8"
      };
    }
    match2 = matchers.hex3.exec(color);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1] + match2[1]),
        g: parseIntFromHex(match2[2] + match2[2]),
        b: parseIntFromHex(match2[3] + match2[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  function isValidCSSUnit(color) {
    return Boolean(matchers.CSS_UNIT.exec(String(color)));
  }

  // node_modules/@ctrl/tinycolor/dist/module/index.js
  var TinyColor = (
    /** @class */
    function() {
      function TinyColor2(color, opts) {
        if (color === void 0) {
          color = "";
        }
        if (opts === void 0) {
          opts = {};
        }
        var _a;
        if (color instanceof TinyColor2) {
          return color;
        }
        if (typeof color === "number") {
          color = numberInputToObject(color);
        }
        this.originalInput = color;
        var rgb = inputToRGB(color);
        this.originalInput = color;
        this.r = rgb.r;
        this.g = rgb.g;
        this.b = rgb.b;
        this.a = rgb.a;
        this.roundA = Math.round(100 * this.a) / 100;
        this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;
        this.gradientType = opts.gradientType;
        if (this.r < 1) {
          this.r = Math.round(this.r);
        }
        if (this.g < 1) {
          this.g = Math.round(this.g);
        }
        if (this.b < 1) {
          this.b = Math.round(this.b);
        }
        this.isValid = rgb.ok;
      }
      TinyColor2.prototype.isDark = function() {
        return this.getBrightness() < 128;
      };
      TinyColor2.prototype.isLight = function() {
        return !this.isDark();
      };
      TinyColor2.prototype.getBrightness = function() {
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
      };
      TinyColor2.prototype.getLuminance = function() {
        var rgb = this.toRgb();
        var R;
        var G;
        var B;
        var RsRGB = rgb.r / 255;
        var GsRGB = rgb.g / 255;
        var BsRGB = rgb.b / 255;
        if (RsRGB <= 0.03928) {
          R = RsRGB / 12.92;
        } else {
          R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
        }
        if (GsRGB <= 0.03928) {
          G = GsRGB / 12.92;
        } else {
          G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
        }
        if (BsRGB <= 0.03928) {
          B = BsRGB / 12.92;
        } else {
          B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * R + 0.7152 * G + 0.0722 * B;
      };
      TinyColor2.prototype.getAlpha = function() {
        return this.a;
      };
      TinyColor2.prototype.setAlpha = function(alpha) {
        this.a = boundAlpha(alpha);
        this.roundA = Math.round(100 * this.a) / 100;
        return this;
      };
      TinyColor2.prototype.isMonochrome = function() {
        var s2 = this.toHsl().s;
        return s2 === 0;
      };
      TinyColor2.prototype.toHsv = function() {
        var hsv = rgbToHsv(this.r, this.g, this.b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
      };
      TinyColor2.prototype.toHsvString = function() {
        var hsv = rgbToHsv(this.r, this.g, this.b);
        var h2 = Math.round(hsv.h * 360);
        var s2 = Math.round(hsv.s * 100);
        var v2 = Math.round(hsv.v * 100);
        return this.a === 1 ? "hsv(".concat(h2, ", ").concat(s2, "%, ").concat(v2, "%)") : "hsva(".concat(h2, ", ").concat(s2, "%, ").concat(v2, "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toHsl = function() {
        var hsl = rgbToHsl(this.r, this.g, this.b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
      };
      TinyColor2.prototype.toHslString = function() {
        var hsl = rgbToHsl(this.r, this.g, this.b);
        var h2 = Math.round(hsl.h * 360);
        var s2 = Math.round(hsl.s * 100);
        var l2 = Math.round(hsl.l * 100);
        return this.a === 1 ? "hsl(".concat(h2, ", ").concat(s2, "%, ").concat(l2, "%)") : "hsla(".concat(h2, ", ").concat(s2, "%, ").concat(l2, "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toHex = function(allow3Char) {
        if (allow3Char === void 0) {
          allow3Char = false;
        }
        return rgbToHex(this.r, this.g, this.b, allow3Char);
      };
      TinyColor2.prototype.toHexString = function(allow3Char) {
        if (allow3Char === void 0) {
          allow3Char = false;
        }
        return "#" + this.toHex(allow3Char);
      };
      TinyColor2.prototype.toHex8 = function(allow4Char) {
        if (allow4Char === void 0) {
          allow4Char = false;
        }
        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
      };
      TinyColor2.prototype.toHex8String = function(allow4Char) {
        if (allow4Char === void 0) {
          allow4Char = false;
        }
        return "#" + this.toHex8(allow4Char);
      };
      TinyColor2.prototype.toHexShortString = function(allowShortChar) {
        if (allowShortChar === void 0) {
          allowShortChar = false;
        }
        return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);
      };
      TinyColor2.prototype.toRgb = function() {
        return {
          r: Math.round(this.r),
          g: Math.round(this.g),
          b: Math.round(this.b),
          a: this.a
        };
      };
      TinyColor2.prototype.toRgbString = function() {
        var r3 = Math.round(this.r);
        var g2 = Math.round(this.g);
        var b2 = Math.round(this.b);
        return this.a === 1 ? "rgb(".concat(r3, ", ").concat(g2, ", ").concat(b2, ")") : "rgba(".concat(r3, ", ").concat(g2, ", ").concat(b2, ", ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toPercentageRgb = function() {
        var fmt = function(x) {
          return "".concat(Math.round(bound01(x, 255) * 100), "%");
        };
        return {
          r: fmt(this.r),
          g: fmt(this.g),
          b: fmt(this.b),
          a: this.a
        };
      };
      TinyColor2.prototype.toPercentageRgbString = function() {
        var rnd = function(x) {
          return Math.round(bound01(x, 255) * 100);
        };
        return this.a === 1 ? "rgb(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%)") : "rgba(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toName = function() {
        if (this.a === 0) {
          return "transparent";
        }
        if (this.a < 1) {
          return false;
        }
        var hex2 = "#" + rgbToHex(this.r, this.g, this.b, false);
        for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {
          var _b = _a[_i], key2 = _b[0], value = _b[1];
          if (hex2 === value) {
            return key2;
          }
        }
        return false;
      };
      TinyColor2.prototype.toString = function(format2) {
        var formatSet = Boolean(format2);
        format2 = format2 !== null && format2 !== void 0 ? format2 : this.format;
        var formattedString = false;
        var hasAlpha = this.a < 1 && this.a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format2.startsWith("hex") || format2 === "name");
        if (needsAlphaFormat) {
          if (format2 === "name" && this.a === 0) {
            return this.toName();
          }
          return this.toRgbString();
        }
        if (format2 === "rgb") {
          formattedString = this.toRgbString();
        }
        if (format2 === "prgb") {
          formattedString = this.toPercentageRgbString();
        }
        if (format2 === "hex" || format2 === "hex6") {
          formattedString = this.toHexString();
        }
        if (format2 === "hex3") {
          formattedString = this.toHexString(true);
        }
        if (format2 === "hex4") {
          formattedString = this.toHex8String(true);
        }
        if (format2 === "hex8") {
          formattedString = this.toHex8String();
        }
        if (format2 === "name") {
          formattedString = this.toName();
        }
        if (format2 === "hsl") {
          formattedString = this.toHslString();
        }
        if (format2 === "hsv") {
          formattedString = this.toHsvString();
        }
        return formattedString || this.toHexString();
      };
      TinyColor2.prototype.toNumber = function() {
        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
      };
      TinyColor2.prototype.clone = function() {
        return new TinyColor2(this.toString());
      };
      TinyColor2.prototype.lighten = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.brighten = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var rgb = this.toRgb();
        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
        return new TinyColor2(rgb);
      };
      TinyColor2.prototype.darken = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.tint = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        return this.mix("white", amount);
      };
      TinyColor2.prototype.shade = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        return this.mix("black", amount);
      };
      TinyColor2.prototype.desaturate = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.saturate = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.greyscale = function() {
        return this.desaturate(100);
      };
      TinyColor2.prototype.spin = function(amount) {
        var hsl = this.toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.mix = function(color, amount) {
        if (amount === void 0) {
          amount = 50;
        }
        var rgb1 = this.toRgb();
        var rgb2 = new TinyColor2(color).toRgb();
        var p2 = amount / 100;
        var rgba = {
          r: (rgb2.r - rgb1.r) * p2 + rgb1.r,
          g: (rgb2.g - rgb1.g) * p2 + rgb1.g,
          b: (rgb2.b - rgb1.b) * p2 + rgb1.b,
          a: (rgb2.a - rgb1.a) * p2 + rgb1.a
        };
        return new TinyColor2(rgba);
      };
      TinyColor2.prototype.analogous = function(results, slices) {
        if (results === void 0) {
          results = 6;
        }
        if (slices === void 0) {
          slices = 30;
        }
        var hsl = this.toHsl();
        var part = 360 / slices;
        var ret = [this];
        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(new TinyColor2(hsl));
        }
        return ret;
      };
      TinyColor2.prototype.complement = function() {
        var hsl = this.toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.monochromatic = function(results) {
        if (results === void 0) {
          results = 6;
        }
        var hsv = this.toHsv();
        var h2 = hsv.h;
        var s2 = hsv.s;
        var v2 = hsv.v;
        var res = [];
        var modification = 1 / results;
        while (results--) {
          res.push(new TinyColor2({ h: h2, s: s2, v: v2 }));
          v2 = (v2 + modification) % 1;
        }
        return res;
      };
      TinyColor2.prototype.splitcomplement = function() {
        var hsl = this.toHsl();
        var h2 = hsl.h;
        return [
          this,
          new TinyColor2({ h: (h2 + 72) % 360, s: hsl.s, l: hsl.l }),
          new TinyColor2({ h: (h2 + 216) % 360, s: hsl.s, l: hsl.l })
        ];
      };
      TinyColor2.prototype.onBackground = function(background) {
        var fg = this.toRgb();
        var bg = new TinyColor2(background).toRgb();
        var alpha = fg.a + bg.a * (1 - fg.a);
        return new TinyColor2({
          r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,
          g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,
          b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,
          a: alpha
        });
      };
      TinyColor2.prototype.triad = function() {
        return this.polyad(3);
      };
      TinyColor2.prototype.tetrad = function() {
        return this.polyad(4);
      };
      TinyColor2.prototype.polyad = function(n3) {
        var hsl = this.toHsl();
        var h2 = hsl.h;
        var result = [this];
        var increment = 360 / n3;
        for (var i3 = 1; i3 < n3; i3++) {
          result.push(new TinyColor2({ h: (h2 + i3 * increment) % 360, s: hsl.s, l: hsl.l }));
        }
        return result;
      };
      TinyColor2.prototype.equals = function(color) {
        return this.toRgbString() === new TinyColor2(color).toRgbString();
      };
      return TinyColor2;
    }()
  );

  // node_modules/@ant-design/colors/dist/index.esm.js
  var hueStep = 2;
  var saturationStep = 0.16;
  var saturationStep2 = 0.05;
  var brightnessStep1 = 0.05;
  var brightnessStep2 = 0.15;
  var lightColorCount = 5;
  var darkColorCount = 4;
  var darkColorMap = [{
    index: 7,
    opacity: 0.15
  }, {
    index: 6,
    opacity: 0.25
  }, {
    index: 5,
    opacity: 0.3
  }, {
    index: 5,
    opacity: 0.45
  }, {
    index: 5,
    opacity: 0.65
  }, {
    index: 5,
    opacity: 0.85
  }, {
    index: 4,
    opacity: 0.9
  }, {
    index: 3,
    opacity: 0.95
  }, {
    index: 2,
    opacity: 0.97
  }, {
    index: 1,
    opacity: 0.98
  }];
  function toHsv(_ref) {
    var r3 = _ref.r, g2 = _ref.g, b2 = _ref.b;
    var hsv = rgbToHsv(r3, g2, b2);
    return {
      h: hsv.h * 360,
      s: hsv.s,
      v: hsv.v
    };
  }
  function toHex(_ref2) {
    var r3 = _ref2.r, g2 = _ref2.g, b2 = _ref2.b;
    return "#".concat(rgbToHex(r3, g2, b2, false));
  }
  function mix(rgb1, rgb2, amount) {
    var p2 = amount / 100;
    var rgb = {
      r: (rgb2.r - rgb1.r) * p2 + rgb1.r,
      g: (rgb2.g - rgb1.g) * p2 + rgb1.g,
      b: (rgb2.b - rgb1.b) * p2 + rgb1.b
    };
    return rgb;
  }
  function getHue(hsv, i3, light) {
    var hue;
    if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
      hue = light ? Math.round(hsv.h) - hueStep * i3 : Math.round(hsv.h) + hueStep * i3;
    } else {
      hue = light ? Math.round(hsv.h) + hueStep * i3 : Math.round(hsv.h) - hueStep * i3;
    }
    if (hue < 0) {
      hue += 360;
    } else if (hue >= 360) {
      hue -= 360;
    }
    return hue;
  }
  function getSaturation(hsv, i3, light) {
    if (hsv.h === 0 && hsv.s === 0) {
      return hsv.s;
    }
    var saturation;
    if (light) {
      saturation = hsv.s - saturationStep * i3;
    } else if (i3 === darkColorCount) {
      saturation = hsv.s + saturationStep;
    } else {
      saturation = hsv.s + saturationStep2 * i3;
    }
    if (saturation > 1) {
      saturation = 1;
    }
    if (light && i3 === lightColorCount && saturation > 0.1) {
      saturation = 0.1;
    }
    if (saturation < 0.06) {
      saturation = 0.06;
    }
    return Number(saturation.toFixed(2));
  }
  function getValue3(hsv, i3, light) {
    var value;
    if (light) {
      value = hsv.v + brightnessStep1 * i3;
    } else {
      value = hsv.v - brightnessStep2 * i3;
    }
    if (value > 1) {
      value = 1;
    }
    return Number(value.toFixed(2));
  }
  function generate(color) {
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var patterns = [];
    var pColor = inputToRGB(color);
    for (var i3 = lightColorCount; i3 > 0; i3 -= 1) {
      var hsv = toHsv(pColor);
      var colorString = toHex(inputToRGB({
        h: getHue(hsv, i3, true),
        s: getSaturation(hsv, i3, true),
        v: getValue3(hsv, i3, true)
      }));
      patterns.push(colorString);
    }
    patterns.push(toHex(pColor));
    for (var _i = 1; _i <= darkColorCount; _i += 1) {
      var _hsv = toHsv(pColor);
      var _colorString = toHex(inputToRGB({
        h: getHue(_hsv, _i),
        s: getSaturation(_hsv, _i),
        v: getValue3(_hsv, _i)
      }));
      patterns.push(_colorString);
    }
    if (opts.theme === "dark") {
      return darkColorMap.map(function(_ref3) {
        var index3 = _ref3.index, opacity = _ref3.opacity;
        var darkColorString = toHex(mix(inputToRGB(opts.backgroundColor || "#141414"), inputToRGB(patterns[index3]), opacity * 100));
        return darkColorString;
      });
    }
    return patterns;
  }
  var presetPrimaryColors = {
    red: "#F5222D",
    volcano: "#FA541C",
    orange: "#FA8C16",
    gold: "#FAAD14",
    yellow: "#FADB14",
    lime: "#A0D911",
    green: "#52C41A",
    cyan: "#13C2C2",
    blue: "#1890FF",
    geekblue: "#2F54EB",
    purple: "#722ED1",
    magenta: "#EB2F96",
    grey: "#666666"
  };
  var presetPalettes = {};
  var presetDarkPalettes = {};
  Object.keys(presetPrimaryColors).forEach(function(key2) {
    presetPalettes[key2] = generate(presetPrimaryColors[key2]);
    presetPalettes[key2].primary = presetPalettes[key2][5];
    presetDarkPalettes[key2] = generate(presetPrimaryColors[key2], {
      theme: "dark",
      backgroundColor: "#141414"
    });
    presetDarkPalettes[key2].primary = presetDarkPalettes[key2][5];
  });
  var red = presetPalettes.red;
  var volcano = presetPalettes.volcano;
  var gold = presetPalettes.gold;
  var orange = presetPalettes.orange;
  var yellow = presetPalettes.yellow;
  var lime = presetPalettes.lime;
  var green = presetPalettes.green;
  var cyan = presetPalettes.cyan;
  var blue = presetPalettes.blue;
  var geekblue = presetPalettes.geekblue;
  var purple = presetPalettes.purple;
  var magenta = presetPalettes.magenta;
  var grey = presetPalettes.grey;

  // node_modules/@ant-design/icons/es/utils.js
  var import_react6 = __toESM(require_react());

  // node_modules/rc-util/es/Dom/canUseDom.js
  function canUseDom() {
    return !!(typeof window !== "undefined" && window.document && window.document.createElement);
  }

  // node_modules/rc-util/es/Dom/contains.js
  function contains(root2, n3) {
    if (!root2) {
      return false;
    }
    if (root2.contains) {
      return root2.contains(n3);
    }
    var node = n3;
    while (node) {
      if (node === root2) {
        return true;
      }
      node = node.parentNode;
    }
    return false;
  }

  // node_modules/rc-util/es/Dom/dynamicCSS.js
  var APPEND_ORDER = "data-rc-order";
  var MARK_KEY = "rc-util-key";
  var containerCache = /* @__PURE__ */ new Map();
  function getMark() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, mark = _ref.mark;
    if (mark) {
      return mark.startsWith("data-") ? mark : "data-".concat(mark);
    }
    return MARK_KEY;
  }
  function getContainer(option) {
    if (option.attachTo) {
      return option.attachTo;
    }
    var head = document.querySelector("head");
    return head || document.body;
  }
  function getOrder(prepend) {
    if (prepend === "queue") {
      return "prependQueue";
    }
    return prepend ? "prepend" : "append";
  }
  function findStyles(container) {
    return Array.from((containerCache.get(container) || container).children).filter(function(node) {
      return node.tagName === "STYLE";
    });
  }
  function injectCSS(css2) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!canUseDom()) {
      return null;
    }
    var csp = option.csp, prepend = option.prepend;
    var styleNode = document.createElement("style");
    styleNode.setAttribute(APPEND_ORDER, getOrder(prepend));
    if (csp !== null && csp !== void 0 && csp.nonce) {
      styleNode.nonce = csp === null || csp === void 0 ? void 0 : csp.nonce;
    }
    styleNode.innerHTML = css2;
    var container = getContainer(option);
    var firstChild = container.firstChild;
    if (prepend) {
      if (prepend === "queue") {
        var existStyle = findStyles(container).filter(function(node) {
          return ["prepend", "prependQueue"].includes(node.getAttribute(APPEND_ORDER));
        });
        if (existStyle.length) {
          container.insertBefore(styleNode, existStyle[existStyle.length - 1].nextSibling);
          return styleNode;
        }
      }
      container.insertBefore(styleNode, firstChild);
    } else {
      container.appendChild(styleNode);
    }
    return styleNode;
  }
  function findExistNode(key2) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var container = getContainer(option);
    return findStyles(container).find(function(node) {
      return node.getAttribute(getMark(option)) === key2;
    });
  }
  function syncRealContainer(container, option) {
    var cachedRealContainer = containerCache.get(container);
    if (!cachedRealContainer || !contains(document, cachedRealContainer)) {
      var placeholderStyle = injectCSS("", option);
      var parentNode = placeholderStyle.parentNode;
      containerCache.set(container, parentNode);
      container.removeChild(placeholderStyle);
    }
  }
  function updateCSS(css2, key2) {
    var option = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var container = getContainer(option);
    syncRealContainer(container, option);
    var existNode = findExistNode(key2, option);
    if (existNode) {
      var _option$csp, _option$csp2;
      if ((_option$csp = option.csp) !== null && _option$csp !== void 0 && _option$csp.nonce && existNode.nonce !== ((_option$csp2 = option.csp) === null || _option$csp2 === void 0 ? void 0 : _option$csp2.nonce)) {
        var _option$csp3;
        existNode.nonce = (_option$csp3 = option.csp) === null || _option$csp3 === void 0 ? void 0 : _option$csp3.nonce;
      }
      if (existNode.innerHTML !== css2) {
        existNode.innerHTML = css2;
      }
      return existNode;
    }
    var newNode = injectCSS(css2, option);
    newNode.setAttribute(getMark(option), key2);
    return newNode;
  }

  // node_modules/@ant-design/icons/es/utils.js
  function warning5(valid, message) {
    warning_default(valid, "[@ant-design/icons] ".concat(message));
  }
  function isIconDefinition(target) {
    return _typeof(target) === "object" && typeof target.name === "string" && typeof target.theme === "string" && (_typeof(target.icon) === "object" || typeof target.icon === "function");
  }
  function normalizeAttrs() {
    var attrs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.keys(attrs).reduce(function(acc, key2) {
      var val = attrs[key2];
      switch (key2) {
        case "class":
          acc.className = val;
          delete acc.class;
          break;
        default:
          acc[key2] = val;
      }
      return acc;
    }, {});
  }
  function generate2(node, key2, rootProps) {
    if (!rootProps) {
      return /* @__PURE__ */ import_react6.default.createElement(node.tag, _objectSpread2({
        key: key2
      }, normalizeAttrs(node.attrs)), (node.children || []).map(function(child, index3) {
        return generate2(child, "".concat(key2, "-").concat(node.tag, "-").concat(index3));
      }));
    }
    return /* @__PURE__ */ import_react6.default.createElement(node.tag, _objectSpread2(_objectSpread2({
      key: key2
    }, normalizeAttrs(node.attrs)), rootProps), (node.children || []).map(function(child, index3) {
      return generate2(child, "".concat(key2, "-").concat(node.tag, "-").concat(index3));
    }));
  }
  function getSecondaryColor(primaryColor) {
    return generate(primaryColor)[0];
  }
  function normalizeTwoToneColors(twoToneColor) {
    if (!twoToneColor) {
      return [];
    }
    return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];
  }
  var iconStyles = "\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
  var useInsertStyles = function useInsertStyles2() {
    var styleStr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : iconStyles;
    var _useContext = (0, import_react6.useContext)(Context_default), csp = _useContext.csp;
    (0, import_react6.useEffect)(function() {
      updateCSS(styleStr, "@ant-design-icons", {
        prepend: true,
        csp
      });
    }, []);
  };

  // node_modules/@ant-design/icons/es/components/IconBase.js
  var _excluded4 = ["icon", "className", "onClick", "style", "primaryColor", "secondaryColor"];
  var twoToneColorPalette = {
    primaryColor: "#333",
    secondaryColor: "#E6E6E6",
    calculated: false
  };
  function setTwoToneColors(_ref) {
    var primaryColor = _ref.primaryColor, secondaryColor = _ref.secondaryColor;
    twoToneColorPalette.primaryColor = primaryColor;
    twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
    twoToneColorPalette.calculated = !!secondaryColor;
  }
  function getTwoToneColors() {
    return _objectSpread2({}, twoToneColorPalette);
  }
  var IconBase = function IconBase2(props) {
    var icon = props.icon, className = props.className, onClick = props.onClick, style2 = props.style, primaryColor = props.primaryColor, secondaryColor = props.secondaryColor, restProps = _objectWithoutProperties(props, _excluded4);
    var colors = twoToneColorPalette;
    if (primaryColor) {
      colors = {
        primaryColor,
        secondaryColor: secondaryColor || getSecondaryColor(primaryColor)
      };
    }
    useInsertStyles();
    warning5(isIconDefinition(icon), "icon should be icon definiton, but got ".concat(icon));
    if (!isIconDefinition(icon)) {
      return null;
    }
    var target = icon;
    if (target && typeof target.icon === "function") {
      target = _objectSpread2(_objectSpread2({}, target), {}, {
        icon: target.icon(colors.primaryColor, colors.secondaryColor)
      });
    }
    return generate2(target.icon, "svg-".concat(target.name), _objectSpread2({
      className,
      onClick,
      style: style2,
      "data-icon": target.name,
      width: "1em",
      height: "1em",
      fill: "currentColor",
      "aria-hidden": "true"
    }, restProps));
  };
  IconBase.displayName = "IconReact";
  IconBase.getTwoToneColors = getTwoToneColors;
  IconBase.setTwoToneColors = setTwoToneColors;
  var IconBase_default = IconBase;

  // node_modules/@ant-design/icons/es/components/twoTonePrimaryColor.js
  function setTwoToneColor(twoToneColor) {
    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return IconBase_default.setTwoToneColors({
      primaryColor,
      secondaryColor
    });
  }
  function getTwoToneColor() {
    var colors = IconBase_default.getTwoToneColors();
    if (!colors.calculated) {
      return colors.primaryColor;
    }
    return [colors.primaryColor, colors.secondaryColor];
  }

  // node_modules/@ant-design/icons/es/components/AntdIcon.js
  var _excluded5 = ["className", "icon", "spin", "rotate", "tabIndex", "onClick", "twoToneColor"];
  setTwoToneColor("#1890ff");
  var Icon = /* @__PURE__ */ React20.forwardRef(function(props, ref) {
    var _classNames;
    var className = props.className, icon = props.icon, spin = props.spin, rotate = props.rotate, tabIndex = props.tabIndex, onClick = props.onClick, twoToneColor = props.twoToneColor, restProps = _objectWithoutProperties(props, _excluded5);
    var _React$useContext = React20.useContext(Context_default), _React$useContext$pre = _React$useContext.prefixCls, prefixCls = _React$useContext$pre === void 0 ? "anticon" : _React$useContext$pre;
    var classString = (0, import_classnames.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(icon.name), !!icon.name), _defineProperty(_classNames, "".concat(prefixCls, "-spin"), !!spin || icon.name === "loading"), _classNames), className);
    var iconTabIndex = tabIndex;
    if (iconTabIndex === void 0 && onClick) {
      iconTabIndex = -1;
    }
    var svgStyle = rotate ? {
      msTransform: "rotate(".concat(rotate, "deg)"),
      transform: "rotate(".concat(rotate, "deg)")
    } : void 0;
    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return /* @__PURE__ */ React20.createElement("span", _objectSpread2(_objectSpread2({
      role: "img",
      "aria-label": icon.name
    }, restProps), {}, {
      ref,
      tabIndex: iconTabIndex,
      onClick,
      className: classString
    }), /* @__PURE__ */ React20.createElement(IconBase_default, {
      icon,
      primaryColor,
      secondaryColor,
      style: svgStyle
    }));
  });
  Icon.displayName = "AntdIcon";
  Icon.getTwoToneColor = getTwoToneColor;
  Icon.setTwoToneColor = setTwoToneColor;
  var AntdIcon_default = Icon;

  // node_modules/@ant-design/icons/es/icons/CheckCircleFilled.js
  var CheckCircleFilled2 = function CheckCircleFilled3(props, ref) {
    return /* @__PURE__ */ React21.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CheckCircleFilled_default
    }));
  };
  CheckCircleFilled2.displayName = "CheckCircleFilled";
  var CheckCircleFilled_default2 = /* @__PURE__ */ React21.forwardRef(CheckCircleFilled2);

  // node_modules/@ant-design/icons/es/icons/CloseCircleFilled.js
  var React22 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CloseCircleFilled.js
  var CloseCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z" } }] }, "name": "close-circle", "theme": "filled" };
  var CloseCircleFilled_default = CloseCircleFilled;

  // node_modules/@ant-design/icons/es/icons/CloseCircleFilled.js
  var CloseCircleFilled2 = function CloseCircleFilled3(props, ref) {
    return /* @__PURE__ */ React22.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CloseCircleFilled_default
    }));
  };
  CloseCircleFilled2.displayName = "CloseCircleFilled";
  var CloseCircleFilled_default2 = /* @__PURE__ */ React22.forwardRef(CloseCircleFilled2);

  // node_modules/@ant-design/icons/es/icons/ExclamationCircleFilled.js
  var React23 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/ExclamationCircleFilled.js
  var ExclamationCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" } }] }, "name": "exclamation-circle", "theme": "filled" };
  var ExclamationCircleFilled_default = ExclamationCircleFilled;

  // node_modules/@ant-design/icons/es/icons/ExclamationCircleFilled.js
  var ExclamationCircleFilled2 = function ExclamationCircleFilled3(props, ref) {
    return /* @__PURE__ */ React23.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: ExclamationCircleFilled_default
    }));
  };
  ExclamationCircleFilled2.displayName = "ExclamationCircleFilled";
  var ExclamationCircleFilled_default2 = /* @__PURE__ */ React23.forwardRef(ExclamationCircleFilled2);

  // node_modules/@ant-design/icons/es/icons/InfoCircleFilled.js
  var React24 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/InfoCircleFilled.js
  var InfoCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" } }] }, "name": "info-circle", "theme": "filled" };
  var InfoCircleFilled_default = InfoCircleFilled;

  // node_modules/@ant-design/icons/es/icons/InfoCircleFilled.js
  var InfoCircleFilled2 = function InfoCircleFilled3(props, ref) {
    return /* @__PURE__ */ React24.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: InfoCircleFilled_default
    }));
  };
  InfoCircleFilled2.displayName = "InfoCircleFilled";
  var InfoCircleFilled_default2 = /* @__PURE__ */ React24.forwardRef(InfoCircleFilled2);

  // node_modules/@ant-design/icons/es/icons/LoadingOutlined.js
  var React25 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/LoadingOutlined.js
  var LoadingOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z" } }] }, "name": "loading", "theme": "outlined" };
  var LoadingOutlined_default = LoadingOutlined;

  // node_modules/@ant-design/icons/es/icons/LoadingOutlined.js
  var LoadingOutlined2 = function LoadingOutlined3(props, ref) {
    return /* @__PURE__ */ React25.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: LoadingOutlined_default
    }));
  };
  LoadingOutlined2.displayName = "LoadingOutlined";
  var LoadingOutlined_default2 = /* @__PURE__ */ React25.forwardRef(LoadingOutlined2);

  // node_modules/antd/es/message/index.js
  var import_classnames5 = __toESM(require_classnames());

  // node_modules/rc-notification/es/Notification.js
  var React37 = __toESM(require_react());
  var import_react12 = __toESM(require_react());

  // node_modules/rc-util/es/React/render.js
  var ReactDOM2 = __toESM(require_react_dom());
  var fullClone = _objectSpread2({}, ReactDOM2);
  var version = fullClone.version;
  var reactRender = fullClone.render;
  var unmountComponentAtNode = fullClone.unmountComponentAtNode;
  var createRoot;
  try {
    mainVersion = Number((version || "").split(".")[0]);
    if (mainVersion >= 18) {
      createRoot = fullClone.createRoot;
    }
  } catch (e3) {
  }
  var mainVersion;
  function toggleWarning(skip) {
    var __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = fullClone.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    if (__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED && _typeof(__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === "object") {
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.usingClientEntryPoint = skip;
    }
  }
  var MARK = "__rc_react_root__";
  function modernRender(node, container) {
    toggleWarning(true);
    var root2 = container[MARK] || createRoot(container);
    toggleWarning(false);
    root2.render(node);
    container[MARK] = root2;
  }
  function legacyRender(node, container) {
    reactRender(node, container);
  }
  function render(node, container) {
    if (createRoot) {
      modernRender(node, container);
      return;
    }
    legacyRender(node, container);
  }
  function modernUnmount(_x) {
    return _modernUnmount.apply(this, arguments);
  }
  function _modernUnmount() {
    _modernUnmount = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(container) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", Promise.resolve().then(function() {
                var _container$MARK;
                (_container$MARK = container[MARK]) === null || _container$MARK === void 0 ? void 0 : _container$MARK.unmount();
                delete container[MARK];
              }));
            case 1:
            case "end":
              return _context.stop();
          }
      }, _callee);
    }));
    return _modernUnmount.apply(this, arguments);
  }
  function legacyUnmount(container) {
    unmountComponentAtNode(container);
  }
  function unmount(_x2) {
    return _unmount.apply(this, arguments);
  }
  function _unmount() {
    _unmount = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2(container) {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(createRoot !== void 0)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", modernUnmount(container));
            case 2:
              legacyUnmount(container);
            case 3:
            case "end":
              return _context2.stop();
          }
      }, _callee2);
    }));
    return _unmount.apply(this, arguments);
  }

  // node_modules/rc-notification/es/Notification.js
  var import_classnames4 = __toESM(require_classnames());

  // node_modules/rc-motion/es/CSSMotion.js
  var import_classnames2 = __toESM(require_classnames());
  var React33 = __toESM(require_react());
  var import_react10 = __toESM(require_react());

  // node_modules/rc-motion/es/context.js
  var React26 = __toESM(require_react());
  var Context2 = /* @__PURE__ */ React26.createContext({});

  // node_modules/rc-motion/es/DomWrapper.js
  var React27 = __toESM(require_react());
  var DomWrapper2 = /* @__PURE__ */ function(_React$Component) {
    _inherits(DomWrapper3, _React$Component);
    var _super = _createSuper(DomWrapper3);
    function DomWrapper3() {
      _classCallCheck(this, DomWrapper3);
      return _super.apply(this, arguments);
    }
    _createClass(DomWrapper3, [{
      key: "render",
      value: function render4() {
        return this.props.children;
      }
    }]);
    return DomWrapper3;
  }(React27.Component);
  var DomWrapper_default = DomWrapper2;

  // node_modules/rc-util/es/hooks/useState.js
  var React28 = __toESM(require_react());
  function useSafeState(defaultValue) {
    var destroyRef = React28.useRef(false);
    var _React$useState = React28.useState(defaultValue), _React$useState2 = _slicedToArray(_React$useState, 2), value = _React$useState2[0], setValue2 = _React$useState2[1];
    React28.useEffect(function() {
      destroyRef.current = false;
      return function() {
        destroyRef.current = true;
      };
    }, []);
    function safeSetState(updater, ignoreDestroy) {
      if (ignoreDestroy && destroyRef.current) {
        return;
      }
      setValue2(updater);
    }
    return [value, safeSetState];
  }

  // node_modules/rc-motion/es/hooks/useStatus.js
  var React32 = __toESM(require_react());
  var import_react9 = __toESM(require_react());

  // node_modules/rc-motion/es/interface.js
  var STATUS_NONE = "none";
  var STATUS_APPEAR = "appear";
  var STATUS_ENTER = "enter";
  var STATUS_LEAVE = "leave";
  var STEP_NONE = "none";
  var STEP_PREPARE = "prepare";
  var STEP_START = "start";
  var STEP_ACTIVE = "active";
  var STEP_ACTIVATED = "end";
  var STEP_PREPARED = "prepared";

  // node_modules/rc-motion/es/hooks/useDomMotionEvents.js
  var React29 = __toESM(require_react());
  var import_react7 = __toESM(require_react());

  // node_modules/rc-motion/es/util/motion.js
  function makePrefixMap(styleProp, eventName) {
    var prefixes = {};
    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
    prefixes["Webkit".concat(styleProp)] = "webkit".concat(eventName);
    prefixes["Moz".concat(styleProp)] = "moz".concat(eventName);
    prefixes["ms".concat(styleProp)] = "MS".concat(eventName);
    prefixes["O".concat(styleProp)] = "o".concat(eventName.toLowerCase());
    return prefixes;
  }
  function getVendorPrefixes(domSupport, win) {
    var prefixes = {
      animationend: makePrefixMap("Animation", "AnimationEnd"),
      transitionend: makePrefixMap("Transition", "TransitionEnd")
    };
    if (domSupport) {
      if (!("AnimationEvent" in win)) {
        delete prefixes.animationend.animation;
      }
      if (!("TransitionEvent" in win)) {
        delete prefixes.transitionend.transition;
      }
    }
    return prefixes;
  }
  var vendorPrefixes = getVendorPrefixes(canUseDom(), typeof window !== "undefined" ? window : {});
  var style = {};
  if (canUseDom()) {
    _document$createEleme = document.createElement("div");
    style = _document$createEleme.style;
  }
  var _document$createEleme;
  var prefixedEventNames = {};
  function getVendorPrefixedEventName(eventName) {
    if (prefixedEventNames[eventName]) {
      return prefixedEventNames[eventName];
    }
    var prefixMap = vendorPrefixes[eventName];
    if (prefixMap) {
      var stylePropList = Object.keys(prefixMap);
      var len = stylePropList.length;
      for (var i3 = 0; i3 < len; i3 += 1) {
        var styleProp = stylePropList[i3];
        if (Object.prototype.hasOwnProperty.call(prefixMap, styleProp) && styleProp in style) {
          prefixedEventNames[eventName] = prefixMap[styleProp];
          return prefixedEventNames[eventName];
        }
      }
    }
    return "";
  }
  var internalAnimationEndName = getVendorPrefixedEventName("animationend");
  var internalTransitionEndName = getVendorPrefixedEventName("transitionend");
  var supportTransition = !!(internalAnimationEndName && internalTransitionEndName);
  var animationEndName = internalAnimationEndName || "animationend";
  var transitionEndName = internalTransitionEndName || "transitionend";
  function getTransitionName(transitionName2, transitionType) {
    if (!transitionName2)
      return null;
    if (_typeof(transitionName2) === "object") {
      var type4 = transitionType.replace(/-\w/g, function(match2) {
        return match2[1].toUpperCase();
      });
      return transitionName2[type4];
    }
    return "".concat(transitionName2, "-").concat(transitionType);
  }

  // node_modules/rc-motion/es/hooks/useDomMotionEvents.js
  var useDomMotionEvents_default = function(callback) {
    var cacheElementRef = (0, import_react7.useRef)();
    var callbackRef = (0, import_react7.useRef)(callback);
    callbackRef.current = callback;
    var onInternalMotionEnd = React29.useCallback(function(event) {
      callbackRef.current(event);
    }, []);
    function removeMotionEvents(element) {
      if (element) {
        element.removeEventListener(transitionEndName, onInternalMotionEnd);
        element.removeEventListener(animationEndName, onInternalMotionEnd);
      }
    }
    function patchMotionEvents(element) {
      if (cacheElementRef.current && cacheElementRef.current !== element) {
        removeMotionEvents(cacheElementRef.current);
      }
      if (element && element !== cacheElementRef.current) {
        element.addEventListener(transitionEndName, onInternalMotionEnd);
        element.addEventListener(animationEndName, onInternalMotionEnd);
        cacheElementRef.current = element;
      }
    }
    React29.useEffect(function() {
      return function() {
        removeMotionEvents(cacheElementRef.current);
      };
    }, []);
    return [patchMotionEvents, removeMotionEvents];
  };

  // node_modules/rc-motion/es/hooks/useIsomorphicLayoutEffect.js
  var import_react8 = __toESM(require_react());
  var useIsomorphicLayoutEffect = canUseDom() ? import_react8.useLayoutEffect : import_react8.useEffect;
  var useIsomorphicLayoutEffect_default = useIsomorphicLayoutEffect;

  // node_modules/rc-motion/es/hooks/useStepQueue.js
  var React31 = __toESM(require_react());

  // node_modules/rc-motion/es/hooks/useNextFrame.js
  var React30 = __toESM(require_react());

  // node_modules/rc-util/es/raf.js
  var raf = function raf2(callback) {
    return +setTimeout(callback, 16);
  };
  var caf = function caf2(num) {
    return clearTimeout(num);
  };
  if (typeof window !== "undefined" && "requestAnimationFrame" in window) {
    raf = function raf3(callback) {
      return window.requestAnimationFrame(callback);
    };
    caf = function caf3(handle) {
      return window.cancelAnimationFrame(handle);
    };
  }
  var rafUUID = 0;
  var rafIds = /* @__PURE__ */ new Map();
  function cleanup(id2) {
    rafIds.delete(id2);
  }
  var wrapperRaf = function wrapperRaf2(callback) {
    var times = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    rafUUID += 1;
    var id2 = rafUUID;
    function callRef(leftTimes) {
      if (leftTimes === 0) {
        cleanup(id2);
        callback();
      } else {
        var realId = raf(function() {
          callRef(leftTimes - 1);
        });
        rafIds.set(id2, realId);
      }
    }
    callRef(times);
    return id2;
  };
  wrapperRaf.cancel = function(id2) {
    var realId = rafIds.get(id2);
    cleanup(realId);
    return caf(realId);
  };
  var raf_default = wrapperRaf;

  // node_modules/rc-motion/es/hooks/useNextFrame.js
  var useNextFrame_default = function() {
    var nextFrameRef = React30.useRef(null);
    function cancelNextFrame() {
      raf_default.cancel(nextFrameRef.current);
    }
    function nextFrame(callback) {
      var delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
      cancelNextFrame();
      var nextFrameId = raf_default(function() {
        if (delay <= 1) {
          callback({
            isCanceled: function isCanceled() {
              return nextFrameId !== nextFrameRef.current;
            }
          });
        } else {
          nextFrame(callback, delay - 1);
        }
      });
      nextFrameRef.current = nextFrameId;
    }
    React30.useEffect(function() {
      return function() {
        cancelNextFrame();
      };
    }, []);
    return [nextFrame, cancelNextFrame];
  };

  // node_modules/rc-motion/es/hooks/useStepQueue.js
  var FULL_STEP_QUEUE = [STEP_PREPARE, STEP_START, STEP_ACTIVE, STEP_ACTIVATED];
  var SIMPLE_STEP_QUEUE = [STEP_PREPARE, STEP_PREPARED];
  var SkipStep = false;
  var DoStep = true;
  function isActive(step) {
    return step === STEP_ACTIVE || step === STEP_ACTIVATED;
  }
  var useStepQueue_default = function(status, prepareOnly, callback) {
    var _useState = useSafeState(STEP_NONE), _useState2 = _slicedToArray(_useState, 2), step = _useState2[0], setStep = _useState2[1];
    var _useNextFrame = useNextFrame_default(), _useNextFrame2 = _slicedToArray(_useNextFrame, 2), nextFrame = _useNextFrame2[0], cancelNextFrame = _useNextFrame2[1];
    function startQueue() {
      setStep(STEP_PREPARE, true);
    }
    var STEP_QUEUE = prepareOnly ? SIMPLE_STEP_QUEUE : FULL_STEP_QUEUE;
    useIsomorphicLayoutEffect_default(function() {
      if (step !== STEP_NONE && step !== STEP_ACTIVATED) {
        var index3 = STEP_QUEUE.indexOf(step);
        var nextStep = STEP_QUEUE[index3 + 1];
        var result = callback(step);
        if (result === SkipStep) {
          setStep(nextStep, true);
        } else if (nextStep) {
          nextFrame(function(info) {
            function doNext() {
              if (info.isCanceled())
                return;
              setStep(nextStep, true);
            }
            if (result === true) {
              doNext();
            } else {
              Promise.resolve(result).then(doNext);
            }
          });
        }
      }
    }, [status, step]);
    React31.useEffect(function() {
      return function() {
        cancelNextFrame();
      };
    }, []);
    return [startQueue, step];
  };

  // node_modules/rc-motion/es/hooks/useStatus.js
  function useStatus(supportMotion, visible, getElement2, _ref) {
    var _ref$motionEnter = _ref.motionEnter, motionEnter = _ref$motionEnter === void 0 ? true : _ref$motionEnter, _ref$motionAppear = _ref.motionAppear, motionAppear = _ref$motionAppear === void 0 ? true : _ref$motionAppear, _ref$motionLeave = _ref.motionLeave, motionLeave = _ref$motionLeave === void 0 ? true : _ref$motionLeave, motionDeadline = _ref.motionDeadline, motionLeaveImmediately = _ref.motionLeaveImmediately, onAppearPrepare = _ref.onAppearPrepare, onEnterPrepare = _ref.onEnterPrepare, onLeavePrepare = _ref.onLeavePrepare, onAppearStart = _ref.onAppearStart, onEnterStart = _ref.onEnterStart, onLeaveStart = _ref.onLeaveStart, onAppearActive = _ref.onAppearActive, onEnterActive = _ref.onEnterActive, onLeaveActive = _ref.onLeaveActive, onAppearEnd = _ref.onAppearEnd, onEnterEnd = _ref.onEnterEnd, onLeaveEnd = _ref.onLeaveEnd, onVisibleChanged = _ref.onVisibleChanged;
    var _useState = useSafeState(), _useState2 = _slicedToArray(_useState, 2), asyncVisible = _useState2[0], setAsyncVisible = _useState2[1];
    var _useState3 = useSafeState(STATUS_NONE), _useState4 = _slicedToArray(_useState3, 2), status = _useState4[0], setStatus = _useState4[1];
    var _useState5 = useSafeState(null), _useState6 = _slicedToArray(_useState5, 2), style2 = _useState6[0], setStyle2 = _useState6[1];
    var mountedRef = (0, import_react9.useRef)(false);
    var deadlineRef = (0, import_react9.useRef)(null);
    function getDomElement() {
      return getElement2();
    }
    var activeRef = (0, import_react9.useRef)(false);
    function updateMotionEndStatus() {
      setStatus(STATUS_NONE, true);
      setStyle2(null, true);
    }
    function onInternalMotionEnd(event) {
      var element = getDomElement();
      if (event && !event.deadline && event.target !== element) {
        return;
      }
      var currentActive = activeRef.current;
      var canEnd;
      if (status === STATUS_APPEAR && currentActive) {
        canEnd = onAppearEnd === null || onAppearEnd === void 0 ? void 0 : onAppearEnd(element, event);
      } else if (status === STATUS_ENTER && currentActive) {
        canEnd = onEnterEnd === null || onEnterEnd === void 0 ? void 0 : onEnterEnd(element, event);
      } else if (status === STATUS_LEAVE && currentActive) {
        canEnd = onLeaveEnd === null || onLeaveEnd === void 0 ? void 0 : onLeaveEnd(element, event);
      }
      if (status !== STATUS_NONE && currentActive && canEnd !== false) {
        updateMotionEndStatus();
      }
    }
    var _useDomMotionEvents = useDomMotionEvents_default(onInternalMotionEnd), _useDomMotionEvents2 = _slicedToArray(_useDomMotionEvents, 1), patchMotionEvents = _useDomMotionEvents2[0];
    var getEventHandlers = function getEventHandlers2(targetStatus) {
      var _ref2, _ref3, _ref4;
      switch (targetStatus) {
        case STATUS_APPEAR:
          return _ref2 = {}, _defineProperty(_ref2, STEP_PREPARE, onAppearPrepare), _defineProperty(_ref2, STEP_START, onAppearStart), _defineProperty(_ref2, STEP_ACTIVE, onAppearActive), _ref2;
        case STATUS_ENTER:
          return _ref3 = {}, _defineProperty(_ref3, STEP_PREPARE, onEnterPrepare), _defineProperty(_ref3, STEP_START, onEnterStart), _defineProperty(_ref3, STEP_ACTIVE, onEnterActive), _ref3;
        case STATUS_LEAVE:
          return _ref4 = {}, _defineProperty(_ref4, STEP_PREPARE, onLeavePrepare), _defineProperty(_ref4, STEP_START, onLeaveStart), _defineProperty(_ref4, STEP_ACTIVE, onLeaveActive), _ref4;
        default:
          return {};
      }
    };
    var eventHandlers = React32.useMemo(function() {
      return getEventHandlers(status);
    }, [status]);
    var _useStepQueue = useStepQueue_default(status, !supportMotion, function(newStep) {
      if (newStep === STEP_PREPARE) {
        var onPrepare = eventHandlers[STEP_PREPARE];
        if (!onPrepare) {
          return SkipStep;
        }
        return onPrepare(getDomElement());
      }
      if (step in eventHandlers) {
        var _eventHandlers$step;
        setStyle2(((_eventHandlers$step = eventHandlers[step]) === null || _eventHandlers$step === void 0 ? void 0 : _eventHandlers$step.call(eventHandlers, getDomElement(), null)) || null);
      }
      if (step === STEP_ACTIVE) {
        patchMotionEvents(getDomElement());
        if (motionDeadline > 0) {
          clearTimeout(deadlineRef.current);
          deadlineRef.current = setTimeout(function() {
            onInternalMotionEnd({
              deadline: true
            });
          }, motionDeadline);
        }
      }
      if (step === STEP_PREPARED) {
        updateMotionEndStatus();
      }
      return DoStep;
    }), _useStepQueue2 = _slicedToArray(_useStepQueue, 2), startStep = _useStepQueue2[0], step = _useStepQueue2[1];
    var active = isActive(step);
    activeRef.current = active;
    useIsomorphicLayoutEffect_default(function() {
      setAsyncVisible(visible);
      var isMounted = mountedRef.current;
      mountedRef.current = true;
      var nextStatus;
      if (!isMounted && visible && motionAppear) {
        nextStatus = STATUS_APPEAR;
      }
      if (isMounted && visible && motionEnter) {
        nextStatus = STATUS_ENTER;
      }
      if (isMounted && !visible && motionLeave || !isMounted && motionLeaveImmediately && !visible && motionLeave) {
        nextStatus = STATUS_LEAVE;
      }
      var nextEventHandlers = getEventHandlers(nextStatus);
      if (nextStatus && (supportMotion || nextEventHandlers[STEP_PREPARE])) {
        setStatus(nextStatus);
        startStep();
      } else {
        setStatus(STATUS_NONE);
      }
    }, [visible]);
    (0, import_react9.useEffect)(function() {
      if (
        // Cancel appear
        status === STATUS_APPEAR && !motionAppear || // Cancel enter
        status === STATUS_ENTER && !motionEnter || // Cancel leave
        status === STATUS_LEAVE && !motionLeave
      ) {
        setStatus(STATUS_NONE);
      }
    }, [motionAppear, motionEnter, motionLeave]);
    (0, import_react9.useEffect)(function() {
      return function() {
        mountedRef.current = false;
        clearTimeout(deadlineRef.current);
      };
    }, []);
    var firstMountChangeRef = React32.useRef(false);
    (0, import_react9.useEffect)(function() {
      if (asyncVisible) {
        firstMountChangeRef.current = true;
      }
      if (asyncVisible !== void 0 && status === STATUS_NONE) {
        if (firstMountChangeRef.current || asyncVisible) {
          onVisibleChanged === null || onVisibleChanged === void 0 ? void 0 : onVisibleChanged(asyncVisible);
        }
        firstMountChangeRef.current = true;
      }
    }, [asyncVisible, status]);
    var mergedStyle = style2;
    if (eventHandlers[STEP_PREPARE] && step === STEP_START) {
      mergedStyle = _objectSpread2({
        transition: "none"
      }, mergedStyle);
    }
    return [status, step, mergedStyle, asyncVisible !== null && asyncVisible !== void 0 ? asyncVisible : visible];
  }

  // node_modules/rc-motion/es/CSSMotion.js
  function genCSSMotion(config) {
    var transitionSupport = config;
    if (_typeof(config) === "object") {
      transitionSupport = config.transitionSupport;
    }
    function isSupportTransition(props, contextMotion) {
      return !!(props.motionName && transitionSupport && contextMotion !== false);
    }
    var CSSMotion = /* @__PURE__ */ React33.forwardRef(function(props, ref) {
      var _props$visible = props.visible, visible = _props$visible === void 0 ? true : _props$visible, _props$removeOnLeave = props.removeOnLeave, removeOnLeave = _props$removeOnLeave === void 0 ? true : _props$removeOnLeave, forceRender = props.forceRender, children = props.children, motionName = props.motionName, leavedClassName = props.leavedClassName, eventProps = props.eventProps;
      var _React$useContext = React33.useContext(Context2), contextMotion = _React$useContext.motion;
      var supportMotion = isSupportTransition(props, contextMotion);
      var nodeRef = (0, import_react10.useRef)();
      var wrapperNodeRef = (0, import_react10.useRef)();
      function getDomElement() {
        try {
          return nodeRef.current instanceof HTMLElement ? nodeRef.current : findDOMNode(wrapperNodeRef.current);
        } catch (e3) {
          return null;
        }
      }
      var _useStatus = useStatus(supportMotion, visible, getDomElement, props), _useStatus2 = _slicedToArray(_useStatus, 4), status = _useStatus2[0], statusStep = _useStatus2[1], statusStyle = _useStatus2[2], mergedVisible = _useStatus2[3];
      var renderedRef = React33.useRef(mergedVisible);
      if (mergedVisible) {
        renderedRef.current = true;
      }
      var setNodeRef = React33.useCallback(function(node) {
        nodeRef.current = node;
        fillRef(ref, node);
      }, [ref]);
      var motionChildren;
      var mergedProps = _objectSpread2(_objectSpread2({}, eventProps), {}, {
        visible
      });
      if (!children) {
        motionChildren = null;
      } else if (status === STATUS_NONE) {
        if (mergedVisible) {
          motionChildren = children(_objectSpread2({}, mergedProps), setNodeRef);
        } else if (!removeOnLeave && renderedRef.current && leavedClassName) {
          motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
            className: leavedClassName
          }), setNodeRef);
        } else if (forceRender || !removeOnLeave && !leavedClassName) {
          motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
            style: {
              display: "none"
            }
          }), setNodeRef);
        } else {
          motionChildren = null;
        }
      } else {
        var _classNames;
        var statusSuffix;
        if (statusStep === STEP_PREPARE) {
          statusSuffix = "prepare";
        } else if (isActive(statusStep)) {
          statusSuffix = "active";
        } else if (statusStep === STEP_START) {
          statusSuffix = "start";
        }
        var motionCls = getTransitionName(motionName, "".concat(status, "-").concat(statusSuffix));
        motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
          className: (0, import_classnames2.default)(getTransitionName(motionName, status), (_classNames = {}, _defineProperty(_classNames, motionCls, motionCls && statusSuffix), _defineProperty(_classNames, motionName, typeof motionName === "string"), _classNames)),
          style: statusStyle
        }), setNodeRef);
      }
      if (/* @__PURE__ */ React33.isValidElement(motionChildren) && supportRef(motionChildren)) {
        var _ref = motionChildren, originNodeRef = _ref.ref;
        if (!originNodeRef) {
          motionChildren = /* @__PURE__ */ React33.cloneElement(motionChildren, {
            ref: setNodeRef
          });
        }
      }
      return /* @__PURE__ */ React33.createElement(DomWrapper_default, {
        ref: wrapperNodeRef
      }, motionChildren);
    });
    CSSMotion.displayName = "CSSMotion";
    return CSSMotion;
  }
  var CSSMotion_default = genCSSMotion(supportTransition);

  // node_modules/rc-motion/es/CSSMotionList.js
  var React34 = __toESM(require_react());

  // node_modules/rc-motion/es/util/diff.js
  var STATUS_ADD = "add";
  var STATUS_KEEP = "keep";
  var STATUS_REMOVE = "remove";
  var STATUS_REMOVED = "removed";
  function wrapKeyToObject(key2) {
    var keyObj;
    if (key2 && _typeof(key2) === "object" && "key" in key2) {
      keyObj = key2;
    } else {
      keyObj = {
        key: key2
      };
    }
    return _objectSpread2(_objectSpread2({}, keyObj), {}, {
      key: String(keyObj.key)
    });
  }
  function parseKeys() {
    var keys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    return keys.map(wrapKeyToObject);
  }
  function diffKeys() {
    var prevKeys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var currentKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var list = [];
    var currentIndex = 0;
    var currentLen = currentKeys.length;
    var prevKeyObjects = parseKeys(prevKeys);
    var currentKeyObjects = parseKeys(currentKeys);
    prevKeyObjects.forEach(function(keyObj) {
      var hit = false;
      for (var i3 = currentIndex; i3 < currentLen; i3 += 1) {
        var currentKeyObj = currentKeyObjects[i3];
        if (currentKeyObj.key === keyObj.key) {
          if (currentIndex < i3) {
            list = list.concat(currentKeyObjects.slice(currentIndex, i3).map(function(obj) {
              return _objectSpread2(_objectSpread2({}, obj), {}, {
                status: STATUS_ADD
              });
            }));
            currentIndex = i3;
          }
          list.push(_objectSpread2(_objectSpread2({}, currentKeyObj), {}, {
            status: STATUS_KEEP
          }));
          currentIndex += 1;
          hit = true;
          break;
        }
      }
      if (!hit) {
        list.push(_objectSpread2(_objectSpread2({}, keyObj), {}, {
          status: STATUS_REMOVE
        }));
      }
    });
    if (currentIndex < currentLen) {
      list = list.concat(currentKeyObjects.slice(currentIndex).map(function(obj) {
        return _objectSpread2(_objectSpread2({}, obj), {}, {
          status: STATUS_ADD
        });
      }));
    }
    var keys = {};
    list.forEach(function(_ref) {
      var key2 = _ref.key;
      keys[key2] = (keys[key2] || 0) + 1;
    });
    var duplicatedKeys = Object.keys(keys).filter(function(key2) {
      return keys[key2] > 1;
    });
    duplicatedKeys.forEach(function(matchKey) {
      list = list.filter(function(_ref2) {
        var key2 = _ref2.key, status = _ref2.status;
        return key2 !== matchKey || status !== STATUS_REMOVE;
      });
      list.forEach(function(node) {
        if (node.key === matchKey) {
          node.status = STATUS_KEEP;
        }
      });
    });
    return list;
  }

  // node_modules/rc-motion/es/CSSMotionList.js
  var _excluded6 = ["component", "children", "onVisibleChanged", "onAllRemoved"];
  var _excluded22 = ["status"];
  var MOTION_PROP_NAMES = ["eventProps", "visible", "children", "motionName", "motionAppear", "motionEnter", "motionLeave", "motionLeaveImmediately", "motionDeadline", "removeOnLeave", "leavedClassName", "onAppearStart", "onAppearActive", "onAppearEnd", "onEnterStart", "onEnterActive", "onEnterEnd", "onLeaveStart", "onLeaveActive", "onLeaveEnd"];
  function genCSSMotionList(transitionSupport) {
    var CSSMotion = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : CSSMotion_default;
    var CSSMotionList = /* @__PURE__ */ function(_React$Component) {
      _inherits(CSSMotionList2, _React$Component);
      var _super = _createSuper(CSSMotionList2);
      function CSSMotionList2() {
        var _this;
        _classCallCheck(this, CSSMotionList2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "state", {
          keyEntities: []
        });
        _defineProperty(_assertThisInitialized(_this), "removeKey", function(removeKey) {
          var keyEntities = _this.state.keyEntities;
          var nextKeyEntities = keyEntities.map(function(entity) {
            if (entity.key !== removeKey)
              return entity;
            return _objectSpread2(_objectSpread2({}, entity), {}, {
              status: STATUS_REMOVED
            });
          });
          _this.setState({
            keyEntities: nextKeyEntities
          });
          return nextKeyEntities.filter(function(_ref) {
            var status = _ref.status;
            return status !== STATUS_REMOVED;
          }).length;
        });
        return _this;
      }
      _createClass(CSSMotionList2, [{
        key: "render",
        value: function render4() {
          var _this2 = this;
          var keyEntities = this.state.keyEntities;
          var _this$props = this.props, component = _this$props.component, children = _this$props.children, _onVisibleChanged = _this$props.onVisibleChanged, onAllRemoved = _this$props.onAllRemoved, restProps = _objectWithoutProperties(_this$props, _excluded6);
          var Component27 = component || React34.Fragment;
          var motionProps = {};
          MOTION_PROP_NAMES.forEach(function(prop) {
            motionProps[prop] = restProps[prop];
            delete restProps[prop];
          });
          delete restProps.keys;
          return /* @__PURE__ */ React34.createElement(Component27, restProps, keyEntities.map(function(_ref2) {
            var status = _ref2.status, eventProps = _objectWithoutProperties(_ref2, _excluded22);
            var visible = status === STATUS_ADD || status === STATUS_KEEP;
            return /* @__PURE__ */ React34.createElement(CSSMotion, _extends({}, motionProps, {
              key: eventProps.key,
              visible,
              eventProps,
              onVisibleChanged: function onVisibleChanged(changedVisible) {
                _onVisibleChanged === null || _onVisibleChanged === void 0 ? void 0 : _onVisibleChanged(changedVisible, {
                  key: eventProps.key
                });
                if (!changedVisible) {
                  var restKeysCount = _this2.removeKey(eventProps.key);
                  if (restKeysCount === 0 && onAllRemoved) {
                    onAllRemoved();
                  }
                }
              }
            }), children);
          }));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(_ref3, _ref4) {
          var keys = _ref3.keys;
          var keyEntities = _ref4.keyEntities;
          var parsedKeyObjects = parseKeys(keys);
          var mixedKeyEntities = diffKeys(keyEntities, parsedKeyObjects);
          return {
            keyEntities: mixedKeyEntities.filter(function(entity) {
              var prevEntity = keyEntities.find(function(_ref5) {
                var key2 = _ref5.key;
                return entity.key === key2;
              });
              if (prevEntity && prevEntity.status === STATUS_REMOVED && entity.status === STATUS_REMOVE) {
                return false;
              }
              return true;
            })
          };
        }
        // ZombieJ: Return the count of rest keys. It's safe to refactor if need more info.
      }]);
      return CSSMotionList2;
    }(React34.Component);
    _defineProperty(CSSMotionList, "defaultProps", {
      component: "div"
    });
    return CSSMotionList;
  }
  var CSSMotionList_default = genCSSMotionList(supportTransition);

  // node_modules/rc-motion/es/index.js
  var es_default3 = CSSMotion_default;

  // node_modules/rc-notification/es/Notice.js
  var React35 = __toESM(require_react());
  var import_react11 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());
  var import_classnames3 = __toESM(require_classnames());
  var Notice = /* @__PURE__ */ function(_Component) {
    _inherits(Notice2, _Component);
    var _super = _createSuper(Notice2);
    function Notice2() {
      var _this;
      _classCallCheck(this, Notice2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.closeTimer = null;
      _this.close = function(e3) {
        if (e3) {
          e3.stopPropagation();
        }
        _this.clearCloseTimer();
        var _this$props = _this.props, onClose2 = _this$props.onClose, noticeKey = _this$props.noticeKey;
        if (onClose2) {
          onClose2(noticeKey);
        }
      };
      _this.startCloseTimer = function() {
        if (_this.props.duration) {
          _this.closeTimer = window.setTimeout(function() {
            _this.close();
          }, _this.props.duration * 1e3);
        }
      };
      _this.clearCloseTimer = function() {
        if (_this.closeTimer) {
          clearTimeout(_this.closeTimer);
          _this.closeTimer = null;
        }
      };
      return _this;
    }
    _createClass(Notice2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.startCloseTimer();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.duration !== prevProps.duration || this.props.updateMark !== prevProps.updateMark || // Visible again need reset timer
        this.props.visible !== prevProps.visible && this.props.visible) {
          this.restartCloseTimer();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.clearCloseTimer();
      }
    }, {
      key: "restartCloseTimer",
      value: function restartCloseTimer() {
        this.clearCloseTimer();
        this.startCloseTimer();
      }
    }, {
      key: "render",
      value: function render4() {
        var _this2 = this;
        var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, closable = _this$props2.closable, closeIcon = _this$props2.closeIcon, style2 = _this$props2.style, onClick = _this$props2.onClick, children = _this$props2.children, holder = _this$props2.holder;
        var componentClass = "".concat(prefixCls, "-notice");
        var dataOrAriaAttributeProps = Object.keys(this.props).reduce(function(acc, key2) {
          if (key2.substr(0, 5) === "data-" || key2.substr(0, 5) === "aria-" || key2 === "role") {
            acc[key2] = _this2.props[key2];
          }
          return acc;
        }, {});
        var node = /* @__PURE__ */ React35.createElement("div", _extends({
          className: (0, import_classnames3.default)(componentClass, className, _defineProperty({}, "".concat(componentClass, "-closable"), closable)),
          style: style2,
          onMouseEnter: this.clearCloseTimer,
          onMouseLeave: this.startCloseTimer,
          onClick
        }, dataOrAriaAttributeProps), /* @__PURE__ */ React35.createElement("div", {
          className: "".concat(componentClass, "-content")
        }, children), closable ? /* @__PURE__ */ React35.createElement("a", {
          tabIndex: 0,
          onClick: this.close,
          className: "".concat(componentClass, "-close")
        }, closeIcon || /* @__PURE__ */ React35.createElement("span", {
          className: "".concat(componentClass, "-close-x")
        })) : null);
        if (holder) {
          return /* @__PURE__ */ import_react_dom2.default.createPortal(node, holder);
        }
        return node;
      }
    }]);
    return Notice2;
  }(import_react11.Component);
  Notice.defaultProps = {
    onClose: function onClose() {
    },
    duration: 1.5
  };

  // node_modules/rc-notification/es/useNotification.js
  var React36 = __toESM(require_react());
  function useNotification(notificationInstance2) {
    var createdRef = React36.useRef({});
    var _React$useState = React36.useState([]), _React$useState2 = _slicedToArray(_React$useState, 2), elements = _React$useState2[0], setElements = _React$useState2[1];
    function notify(noticeProps) {
      var firstMount = true;
      notificationInstance2.add(noticeProps, function(div, props) {
        var key2 = props.key;
        if (div && (!createdRef.current[key2] || firstMount)) {
          var noticeEle = /* @__PURE__ */ React36.createElement(Notice, _extends({}, props, {
            holder: div
          }));
          createdRef.current[key2] = noticeEle;
          setElements(function(originElements) {
            var index3 = originElements.findIndex(function(ele) {
              return ele.key === props.key;
            });
            if (index3 === -1) {
              return [].concat(_toConsumableArray(originElements), [noticeEle]);
            }
            var cloneList = _toConsumableArray(originElements);
            cloneList[index3] = noticeEle;
            return cloneList;
          });
        }
        firstMount = false;
      });
    }
    return [notify, /* @__PURE__ */ React36.createElement(React36.Fragment, null, elements)];
  }

  // node_modules/rc-notification/es/Notification.js
  var _excluded7 = ["getContainer"];
  var seed = 0;
  var now = Date.now();
  function getUuid() {
    var id2 = seed;
    seed += 1;
    return "rcNotification_".concat(now, "_").concat(id2);
  }
  var Notification = /* @__PURE__ */ function(_Component) {
    _inherits(Notification2, _Component);
    var _super = _createSuper(Notification2);
    function Notification2() {
      var _this;
      _classCallCheck(this, Notification2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        notices: []
      };
      _this.hookRefs = /* @__PURE__ */ new Map();
      _this.add = function(originNotice, holderCallback) {
        var _originNotice$key;
        var key2 = (_originNotice$key = originNotice.key) !== null && _originNotice$key !== void 0 ? _originNotice$key : getUuid();
        var notice3 = _objectSpread2(_objectSpread2({}, originNotice), {}, {
          key: key2
        });
        var maxCount3 = _this.props.maxCount;
        _this.setState(function(previousState) {
          var notices = previousState.notices;
          var noticeIndex = notices.map(function(v2) {
            return v2.notice.key;
          }).indexOf(key2);
          var updatedNotices = notices.concat();
          if (noticeIndex !== -1) {
            updatedNotices.splice(noticeIndex, 1, {
              notice: notice3,
              holderCallback
            });
          } else {
            if (maxCount3 && notices.length >= maxCount3) {
              notice3.key = updatedNotices[0].notice.key;
              notice3.updateMark = getUuid();
              notice3.userPassKey = key2;
              updatedNotices.shift();
            }
            updatedNotices.push({
              notice: notice3,
              holderCallback
            });
          }
          return {
            notices: updatedNotices
          };
        });
      };
      _this.remove = function(removeKey) {
        _this.setState(function(_ref) {
          var notices = _ref.notices;
          return {
            notices: notices.filter(function(_ref2) {
              var _ref2$notice = _ref2.notice, key2 = _ref2$notice.key, userPassKey = _ref2$notice.userPassKey;
              var mergedKey = userPassKey !== null && userPassKey !== void 0 ? userPassKey : key2;
              return mergedKey !== removeKey;
            })
          };
        });
      };
      _this.noticePropsMap = {};
      return _this;
    }
    _createClass(Notification2, [{
      key: "getTransitionName",
      value: function getTransitionName5() {
        var _this$props = this.props, prefixCls = _this$props.prefixCls, animation = _this$props.animation;
        var transitionName2 = this.props.transitionName;
        if (!transitionName2 && animation) {
          transitionName2 = "".concat(prefixCls, "-").concat(animation);
        }
        return transitionName2;
      }
    }, {
      key: "render",
      value: function render4() {
        var _this2 = this;
        var notices = this.state.notices;
        var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, closeIcon = _this$props2.closeIcon, style2 = _this$props2.style;
        var noticeKeys = [];
        notices.forEach(function(_ref3, index3) {
          var notice3 = _ref3.notice, holderCallback = _ref3.holderCallback;
          var updateMark = index3 === notices.length - 1 ? notice3.updateMark : void 0;
          var key2 = notice3.key, userPassKey = notice3.userPassKey;
          var noticeProps = _objectSpread2(_objectSpread2(_objectSpread2({
            prefixCls,
            closeIcon
          }, notice3), notice3.props), {}, {
            key: key2,
            noticeKey: userPassKey || key2,
            updateMark,
            onClose: function onClose2(noticeKey) {
              var _notice$onClose;
              _this2.remove(noticeKey);
              (_notice$onClose = notice3.onClose) === null || _notice$onClose === void 0 ? void 0 : _notice$onClose.call(notice3);
            },
            onClick: notice3.onClick,
            children: notice3.content
          });
          noticeKeys.push(key2);
          _this2.noticePropsMap[key2] = {
            props: noticeProps,
            holderCallback
          };
        });
        return /* @__PURE__ */ React37.createElement("div", {
          className: (0, import_classnames4.default)(prefixCls, className),
          style: style2
        }, /* @__PURE__ */ React37.createElement(CSSMotionList_default, {
          keys: noticeKeys,
          motionName: this.getTransitionName(),
          onVisibleChanged: function onVisibleChanged(changedVisible, _ref4) {
            var key2 = _ref4.key;
            if (!changedVisible) {
              delete _this2.noticePropsMap[key2];
            }
          }
        }, function(_ref5) {
          var key2 = _ref5.key, motionClassName = _ref5.className, motionStyle = _ref5.style, visible = _ref5.visible;
          var _this2$noticePropsMap = _this2.noticePropsMap[key2], noticeProps = _this2$noticePropsMap.props, holderCallback = _this2$noticePropsMap.holderCallback;
          if (holderCallback) {
            return /* @__PURE__ */ React37.createElement("div", {
              key: key2,
              className: (0, import_classnames4.default)(motionClassName, "".concat(prefixCls, "-hook-holder")),
              style: _objectSpread2({}, motionStyle),
              ref: function ref(div) {
                if (typeof key2 === "undefined") {
                  return;
                }
                if (div) {
                  _this2.hookRefs.set(key2, div);
                  holderCallback(div, noticeProps);
                } else {
                  _this2.hookRefs.delete(key2);
                }
              }
            });
          }
          return /* @__PURE__ */ React37.createElement(Notice, _extends({}, noticeProps, {
            className: (0, import_classnames4.default)(motionClassName, noticeProps === null || noticeProps === void 0 ? void 0 : noticeProps.className),
            style: _objectSpread2(_objectSpread2({}, motionStyle), noticeProps === null || noticeProps === void 0 ? void 0 : noticeProps.style),
            visible
          }));
        }));
      }
    }]);
    return Notification2;
  }(import_react12.Component);
  Notification.newInstance = void 0;
  Notification.defaultProps = {
    prefixCls: "rc-notification",
    animation: "fade",
    style: {
      top: 65,
      left: "50%"
    }
  };
  Notification.newInstance = function newNotificationInstance(properties, callback) {
    var _ref6 = properties || {}, getContainer3 = _ref6.getContainer, props = _objectWithoutProperties(_ref6, _excluded7);
    var div = document.createElement("div");
    if (getContainer3) {
      var root2 = getContainer3();
      root2.appendChild(div);
    } else {
      document.body.appendChild(div);
    }
    var called = false;
    function ref(notification) {
      if (called) {
        return;
      }
      called = true;
      callback({
        notice: function notice3(noticeProps) {
          notification.add(noticeProps);
        },
        removeNotice: function removeNotice(key2) {
          notification.remove(key2);
        },
        component: notification,
        destroy: function destroy3() {
          unmount(div);
          if (div.parentNode) {
            div.parentNode.removeChild(div);
          }
        },
        // Hooks
        useNotification: function useNotification2() {
          return useNotification(notification);
        }
      });
    }
    if (false) {
      properties.TEST_RENDER(/* @__PURE__ */ React37.createElement(Notification, _extends({}, props, {
        ref
      })));
      return;
    }
    render(/* @__PURE__ */ React37.createElement(Notification, _extends({}, props, {
      ref
    })), div);
  };
  var Notification_default = Notification;

  // node_modules/rc-notification/es/index.js
  var es_default4 = Notification_default;

  // node_modules/antd/es/message/index.js
  var React39 = __toESM(require_react());

  // node_modules/antd/es/message/hooks/useMessage.js
  var React38 = __toESM(require_react());
  function createUseMessage(getRcNotificationInstance, getRCNoticeProps3) {
    var useMessage = function useMessage2() {
      var getPrefixCls;
      var getPopupContainer;
      var innerInstance = null;
      var proxy = {
        add: function add(noticeProps, holderCallback) {
          innerInstance === null || innerInstance === void 0 ? void 0 : innerInstance.component.add(noticeProps, holderCallback);
        }
      };
      var _useRCNotification = useNotification(proxy), _useRCNotification2 = _slicedToArray(_useRCNotification, 2), hookNotify = _useRCNotification2[0], holder = _useRCNotification2[1];
      function notify(args) {
        var customizePrefixCls = args.prefixCls;
        var mergedPrefixCls = getPrefixCls("message", customizePrefixCls);
        var rootPrefixCls = getPrefixCls();
        var target = args.key || getKeyThenIncreaseKey();
        var closePromise = new Promise(function(resolve5) {
          var callback = function callback2() {
            if (typeof args.onClose === "function") {
              args.onClose();
            }
            return resolve5(true);
          };
          getRcNotificationInstance(_extends(_extends({}, args), {
            prefixCls: mergedPrefixCls,
            rootPrefixCls,
            getPopupContainer
          }), function(_ref) {
            var prefixCls = _ref.prefixCls, instance = _ref.instance;
            innerInstance = instance;
            hookNotify(getRCNoticeProps3(_extends(_extends({}, args), {
              key: target,
              onClose: callback
            }), prefixCls));
          });
        });
        var result = function result2() {
          if (innerInstance) {
            innerInstance.removeNotice(target);
          }
        };
        result.then = function(filled, rejected) {
          return closePromise.then(filled, rejected);
        };
        result.promise = closePromise;
        return result;
      }
      var hookApiRef = React38.useRef({});
      hookApiRef.current.open = notify;
      typeList.forEach(function(type4) {
        return attachTypeApi(hookApiRef.current, type4);
      });
      return [hookApiRef.current, /* @__PURE__ */ React38.createElement(ConfigConsumer, {
        key: "holder"
      }, function(context) {
        getPrefixCls = context.getPrefixCls;
        getPopupContainer = context.getPopupContainer;
        return holder;
      })];
    };
    return useMessage;
  }

  // node_modules/antd/es/message/index.js
  var messageInstance;
  var defaultDuration = 3;
  var defaultTop;
  var key = 1;
  var localPrefixCls = "";
  var transitionName = "move-up";
  var hasTransitionName = false;
  var getContainer2;
  var maxCount;
  var rtl = false;
  function getKeyThenIncreaseKey() {
    return key++;
  }
  function setMessageConfig(options) {
    if (options.top !== void 0) {
      defaultTop = options.top;
      messageInstance = null;
    }
    if (options.duration !== void 0) {
      defaultDuration = options.duration;
    }
    if (options.prefixCls !== void 0) {
      localPrefixCls = options.prefixCls;
    }
    if (options.getContainer !== void 0) {
      getContainer2 = options.getContainer;
      messageInstance = null;
    }
    if (options.transitionName !== void 0) {
      transitionName = options.transitionName;
      messageInstance = null;
      hasTransitionName = true;
    }
    if (options.maxCount !== void 0) {
      maxCount = options.maxCount;
      messageInstance = null;
    }
    if (options.rtl !== void 0) {
      rtl = options.rtl;
    }
  }
  function getRCNotificationInstance(args, callback) {
    var customizePrefixCls = args.prefixCls, getContextPopupContainer = args.getPopupContainer;
    var _globalConfig = globalConfig(), getPrefixCls = _globalConfig.getPrefixCls, getRootPrefixCls2 = _globalConfig.getRootPrefixCls, getIconPrefixCls = _globalConfig.getIconPrefixCls;
    var prefixCls = getPrefixCls("message", customizePrefixCls || localPrefixCls);
    var rootPrefixCls = getRootPrefixCls2(args.rootPrefixCls, prefixCls);
    var iconPrefixCls = getIconPrefixCls();
    if (messageInstance) {
      callback({
        prefixCls,
        rootPrefixCls,
        iconPrefixCls,
        instance: messageInstance
      });
      return;
    }
    var instanceConfig = {
      prefixCls,
      transitionName: hasTransitionName ? transitionName : "".concat(rootPrefixCls, "-").concat(transitionName),
      style: {
        top: defaultTop
      },
      getContainer: getContainer2 || getContextPopupContainer,
      maxCount
    };
    es_default4.newInstance(instanceConfig, function(instance) {
      if (messageInstance) {
        callback({
          prefixCls,
          rootPrefixCls,
          iconPrefixCls,
          instance: messageInstance
        });
        return;
      }
      messageInstance = instance;
      if (false) {
        messageInstance.config = instanceConfig;
      }
      callback({
        prefixCls,
        rootPrefixCls,
        iconPrefixCls,
        instance
      });
    });
  }
  var typeToIcon = {
    info: InfoCircleFilled_default2,
    success: CheckCircleFilled_default2,
    error: CloseCircleFilled_default2,
    warning: ExclamationCircleFilled_default2,
    loading: LoadingOutlined_default2
  };
  var typeList = Object.keys(typeToIcon);
  function getRCNoticeProps(args, prefixCls, iconPrefixCls) {
    var _classNames;
    var duration = args.duration !== void 0 ? args.duration : defaultDuration;
    var IconComponent = typeToIcon[args.type];
    var messageClass = (0, import_classnames5.default)("".concat(prefixCls, "-custom-content"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(args.type), args.type), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), rtl === true), _classNames));
    return {
      key: args.key,
      duration,
      style: args.style || {},
      className: args.className,
      content: /* @__PURE__ */ React39.createElement(config_provider_default, {
        iconPrefixCls
      }, /* @__PURE__ */ React39.createElement("div", {
        className: messageClass
      }, args.icon || IconComponent && /* @__PURE__ */ React39.createElement(IconComponent, null), /* @__PURE__ */ React39.createElement("span", null, args.content))),
      onClose: args.onClose,
      onClick: args.onClick
    };
  }
  function notice(args) {
    var target = args.key || getKeyThenIncreaseKey();
    var closePromise = new Promise(function(resolve5) {
      var callback = function callback2() {
        if (typeof args.onClose === "function") {
          args.onClose();
        }
        return resolve5(true);
      };
      getRCNotificationInstance(args, function(_ref) {
        var prefixCls = _ref.prefixCls, iconPrefixCls = _ref.iconPrefixCls, instance = _ref.instance;
        instance.notice(getRCNoticeProps(_extends(_extends({}, args), {
          key: target,
          onClose: callback
        }), prefixCls, iconPrefixCls));
      });
    });
    var result = function result2() {
      if (messageInstance) {
        messageInstance.removeNotice(target);
      }
    };
    result.then = function(filled, rejected) {
      return closePromise.then(filled, rejected);
    };
    result.promise = closePromise;
    return result;
  }
  function isArgsProps(content) {
    return Object.prototype.toString.call(content) === "[object Object]" && !!content.content;
  }
  var api = {
    open: notice,
    config: setMessageConfig,
    destroy: function destroy(messageKey) {
      if (messageInstance) {
        if (messageKey) {
          var _messageInstance = messageInstance, removeNotice = _messageInstance.removeNotice;
          removeNotice(messageKey);
        } else {
          var _messageInstance2 = messageInstance, destroy3 = _messageInstance2.destroy;
          destroy3();
          messageInstance = null;
        }
      }
    }
  };
  function attachTypeApi(originalApi, type4) {
    originalApi[type4] = function(content, duration, onClose2) {
      if (isArgsProps(content)) {
        return originalApi.open(_extends(_extends({}, content), {
          type: type4
        }));
      }
      if (typeof duration === "function") {
        onClose2 = duration;
        duration = void 0;
      }
      return originalApi.open({
        content,
        duration,
        type: type4,
        onClose: onClose2
      });
    };
  }
  typeList.forEach(function(type4) {
    return attachTypeApi(api, type4);
  });
  api.warn = api.warning;
  api.useMessage = createUseMessage(getRCNotificationInstance, getRCNoticeProps);
  var message_default = api;

  // node_modules/@ant-design/icons/es/icons/CheckCircleOutlined.js
  var React40 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CheckCircleOutlined.js
  var CheckCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z" } }, { "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }] }, "name": "check-circle", "theme": "outlined" };
  var CheckCircleOutlined_default = CheckCircleOutlined;

  // node_modules/@ant-design/icons/es/icons/CheckCircleOutlined.js
  var CheckCircleOutlined2 = function CheckCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React40.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CheckCircleOutlined_default
    }));
  };
  CheckCircleOutlined2.displayName = "CheckCircleOutlined";
  var CheckCircleOutlined_default2 = /* @__PURE__ */ React40.forwardRef(CheckCircleOutlined2);

  // node_modules/@ant-design/icons/es/icons/CloseCircleOutlined.js
  var React41 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CloseCircleOutlined.js
  var CloseCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z" } }, { "tag": "path", "attrs": { "d": "M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }] }, "name": "close-circle", "theme": "outlined" };
  var CloseCircleOutlined_default = CloseCircleOutlined;

  // node_modules/@ant-design/icons/es/icons/CloseCircleOutlined.js
  var CloseCircleOutlined2 = function CloseCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React41.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CloseCircleOutlined_default
    }));
  };
  CloseCircleOutlined2.displayName = "CloseCircleOutlined";
  var CloseCircleOutlined_default2 = /* @__PURE__ */ React41.forwardRef(CloseCircleOutlined2);

  // node_modules/@ant-design/icons/es/icons/CloseOutlined.js
  var React42 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CloseOutlined.js
  var CloseOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z" } }] }, "name": "close", "theme": "outlined" };
  var CloseOutlined_default = CloseOutlined;

  // node_modules/@ant-design/icons/es/icons/CloseOutlined.js
  var CloseOutlined2 = function CloseOutlined3(props, ref) {
    return /* @__PURE__ */ React42.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CloseOutlined_default
    }));
  };
  CloseOutlined2.displayName = "CloseOutlined";
  var CloseOutlined_default2 = /* @__PURE__ */ React42.forwardRef(CloseOutlined2);

  // node_modules/@ant-design/icons/es/icons/ExclamationCircleOutlined.js
  var React43 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/ExclamationCircleOutlined.js
  var ExclamationCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z" } }] }, "name": "exclamation-circle", "theme": "outlined" };
  var ExclamationCircleOutlined_default = ExclamationCircleOutlined;

  // node_modules/@ant-design/icons/es/icons/ExclamationCircleOutlined.js
  var ExclamationCircleOutlined2 = function ExclamationCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React43.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: ExclamationCircleOutlined_default
    }));
  };
  ExclamationCircleOutlined2.displayName = "ExclamationCircleOutlined";
  var ExclamationCircleOutlined_default2 = /* @__PURE__ */ React43.forwardRef(ExclamationCircleOutlined2);

  // node_modules/@ant-design/icons/es/icons/InfoCircleOutlined.js
  var React44 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/InfoCircleOutlined.js
  var InfoCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z" } }] }, "name": "info-circle", "theme": "outlined" };
  var InfoCircleOutlined_default = InfoCircleOutlined;

  // node_modules/@ant-design/icons/es/icons/InfoCircleOutlined.js
  var InfoCircleOutlined2 = function InfoCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React44.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: InfoCircleOutlined_default
    }));
  };
  InfoCircleOutlined2.displayName = "InfoCircleOutlined";
  var InfoCircleOutlined_default2 = /* @__PURE__ */ React44.forwardRef(InfoCircleOutlined2);

  // node_modules/antd/es/notification/index.js
  var import_classnames6 = __toESM(require_classnames());
  var React46 = __toESM(require_react());

  // node_modules/antd/es/notification/hooks/useNotification.js
  var React45 = __toESM(require_react());
  function createUseNotification(getNotificationInstance2, getRCNoticeProps3) {
    var useNotification2 = function useNotification3() {
      var getPrefixCls;
      var innerInstance = null;
      var proxy = {
        add: function add(noticeProps, holderCallback) {
          innerInstance === null || innerInstance === void 0 ? void 0 : innerInstance.component.add(noticeProps, holderCallback);
        }
      };
      var _useRCNotification = useNotification(proxy), _useRCNotification2 = _slicedToArray(_useRCNotification, 2), hookNotify = _useRCNotification2[0], holder = _useRCNotification2[1];
      function notify(args) {
        var customizePrefixCls = args.prefixCls;
        var mergedPrefixCls = getPrefixCls("notification", customizePrefixCls);
        getNotificationInstance2(_extends(_extends({}, args), {
          prefixCls: mergedPrefixCls
        }), function(_ref) {
          var prefixCls = _ref.prefixCls, instance = _ref.instance;
          innerInstance = instance;
          hookNotify(getRCNoticeProps3(args, prefixCls));
        });
      }
      var hookApiRef = React45.useRef({});
      hookApiRef.current.open = notify;
      ["success", "info", "warning", "error"].forEach(function(type4) {
        hookApiRef.current[type4] = function(args) {
          return hookApiRef.current.open(_extends(_extends({}, args), {
            type: type4
          }));
        };
      });
      return [hookApiRef.current, /* @__PURE__ */ React45.createElement(ConfigConsumer, {
        key: "holder"
      }, function(context) {
        getPrefixCls = context.getPrefixCls;
        return holder;
      })];
    };
    return useNotification2;
  }

  // node_modules/antd/es/notification/index.js
  var notificationInstance = {};
  var defaultDuration2 = 4.5;
  var defaultTop2 = 24;
  var defaultBottom = 24;
  var defaultPrefixCls = "";
  var defaultPlacement = "topRight";
  var defaultGetContainer;
  var defaultCloseIcon;
  var rtl2 = false;
  var maxCount2;
  function setNotificationConfig(options) {
    var duration = options.duration, placement = options.placement, bottom = options.bottom, top = options.top, getContainer3 = options.getContainer, closeIcon = options.closeIcon, prefixCls = options.prefixCls;
    if (prefixCls !== void 0) {
      defaultPrefixCls = prefixCls;
    }
    if (duration !== void 0) {
      defaultDuration2 = duration;
    }
    if (placement !== void 0) {
      defaultPlacement = placement;
    } else if (options.rtl) {
      defaultPlacement = "topLeft";
    }
    if (bottom !== void 0) {
      defaultBottom = bottom;
    }
    if (top !== void 0) {
      defaultTop2 = top;
    }
    if (getContainer3 !== void 0) {
      defaultGetContainer = getContainer3;
    }
    if (closeIcon !== void 0) {
      defaultCloseIcon = closeIcon;
    }
    if (options.rtl !== void 0) {
      rtl2 = options.rtl;
    }
    if (options.maxCount !== void 0) {
      maxCount2 = options.maxCount;
    }
  }
  function getPlacementStyle(placement) {
    var top = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultTop2;
    var bottom = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultBottom;
    var style2;
    switch (placement) {
      case "top":
        style2 = {
          left: "50%",
          transform: "translateX(-50%)",
          right: "auto",
          top,
          bottom: "auto"
        };
        break;
      case "topLeft":
        style2 = {
          left: 0,
          top,
          bottom: "auto"
        };
        break;
      case "topRight":
        style2 = {
          right: 0,
          top,
          bottom: "auto"
        };
        break;
      case "bottom":
        style2 = {
          left: "50%",
          transform: "translateX(-50%)",
          right: "auto",
          top: "auto",
          bottom
        };
        break;
      case "bottomLeft":
        style2 = {
          left: 0,
          top: "auto",
          bottom
        };
        break;
      default:
        style2 = {
          right: 0,
          top: "auto",
          bottom
        };
        break;
    }
    return style2;
  }
  function getNotificationInstance(args, callback) {
    var _args$placement = args.placement, placement = _args$placement === void 0 ? defaultPlacement : _args$placement, top = args.top, bottom = args.bottom, _args$getContainer = args.getContainer, getContainer3 = _args$getContainer === void 0 ? defaultGetContainer : _args$getContainer, customizePrefixCls = args.prefixCls;
    var _globalConfig = globalConfig(), getPrefixCls = _globalConfig.getPrefixCls, getIconPrefixCls = _globalConfig.getIconPrefixCls;
    var prefixCls = getPrefixCls("notification", customizePrefixCls || defaultPrefixCls);
    var iconPrefixCls = getIconPrefixCls();
    var cacheKey = "".concat(prefixCls, "-").concat(placement);
    var cacheInstance = notificationInstance[cacheKey];
    if (cacheInstance) {
      Promise.resolve(cacheInstance).then(function(instance) {
        callback({
          prefixCls: "".concat(prefixCls, "-notice"),
          iconPrefixCls,
          instance
        });
      });
      return;
    }
    var notificationClass = (0, import_classnames6.default)("".concat(prefixCls, "-").concat(placement), _defineProperty({}, "".concat(prefixCls, "-rtl"), rtl2 === true));
    notificationInstance[cacheKey] = new Promise(function(resolve5) {
      es_default4.newInstance({
        prefixCls,
        className: notificationClass,
        style: getPlacementStyle(placement, top, bottom),
        getContainer: getContainer3,
        maxCount: maxCount2
      }, function(notification) {
        resolve5(notification);
        callback({
          prefixCls: "".concat(prefixCls, "-notice"),
          iconPrefixCls,
          instance: notification
        });
      });
    });
  }
  var typeToIcon2 = {
    success: CheckCircleOutlined_default2,
    info: InfoCircleOutlined_default2,
    error: CloseCircleOutlined_default2,
    warning: ExclamationCircleOutlined_default2
  };
  function getRCNoticeProps2(args, prefixCls, iconPrefixCls) {
    var durationArg = args.duration, icon = args.icon, type4 = args.type, description = args.description, message = args.message, btn = args.btn, onClose2 = args.onClose, onClick = args.onClick, key2 = args.key, style2 = args.style, className = args.className, _args$closeIcon = args.closeIcon, closeIcon = _args$closeIcon === void 0 ? defaultCloseIcon : _args$closeIcon;
    var duration = durationArg === void 0 ? defaultDuration2 : durationArg;
    var iconNode = null;
    if (icon) {
      iconNode = /* @__PURE__ */ React46.createElement("span", {
        className: "".concat(prefixCls, "-icon")
      }, args.icon);
    } else if (type4) {
      iconNode = /* @__PURE__ */ React46.createElement(typeToIcon2[type4] || null, {
        className: "".concat(prefixCls, "-icon ").concat(prefixCls, "-icon-").concat(type4)
      });
    }
    var closeIconToRender = /* @__PURE__ */ React46.createElement("span", {
      className: "".concat(prefixCls, "-close-x")
    }, closeIcon || /* @__PURE__ */ React46.createElement(CloseOutlined_default2, {
      className: "".concat(prefixCls, "-close-icon")
    }));
    var autoMarginTag = !description && iconNode ? /* @__PURE__ */ React46.createElement("span", {
      className: "".concat(prefixCls, "-message-single-line-auto-margin")
    }) : null;
    return {
      content: /* @__PURE__ */ React46.createElement(config_provider_default, {
        iconPrefixCls
      }, /* @__PURE__ */ React46.createElement("div", {
        className: iconNode ? "".concat(prefixCls, "-with-icon") : "",
        role: "alert"
      }, iconNode, /* @__PURE__ */ React46.createElement("div", {
        className: "".concat(prefixCls, "-message")
      }, autoMarginTag, message), /* @__PURE__ */ React46.createElement("div", {
        className: "".concat(prefixCls, "-description")
      }, description), btn ? /* @__PURE__ */ React46.createElement("span", {
        className: "".concat(prefixCls, "-btn")
      }, btn) : null)),
      duration,
      closable: true,
      closeIcon: closeIconToRender,
      onClose: onClose2,
      onClick,
      key: key2,
      style: style2 || {},
      className: (0, import_classnames6.default)(className, _defineProperty({}, "".concat(prefixCls, "-").concat(type4), !!type4))
    };
  }
  function notice2(args) {
    getNotificationInstance(args, function(_ref) {
      var prefixCls = _ref.prefixCls, iconPrefixCls = _ref.iconPrefixCls, instance = _ref.instance;
      instance.notice(getRCNoticeProps2(args, prefixCls, iconPrefixCls));
    });
  }
  var api2 = {
    open: notice2,
    close: function close(key2) {
      Object.keys(notificationInstance).forEach(function(cacheKey) {
        return Promise.resolve(notificationInstance[cacheKey]).then(function(instance) {
          instance.removeNotice(key2);
        });
      });
    },
    config: setNotificationConfig,
    destroy: function destroy2() {
      Object.keys(notificationInstance).forEach(function(cacheKey) {
        Promise.resolve(notificationInstance[cacheKey]).then(function(instance) {
          instance.destroy();
        });
        delete notificationInstance[cacheKey];
      });
    }
  };
  ["success", "info", "warning", "error"].forEach(function(type4) {
    api2[type4] = function(args) {
      return api2.open(_extends(_extends({}, args), {
        type: type4
      }));
    };
  });
  api2.warn = api2.warning;
  api2.useNotification = createUseNotification(getNotificationInstance, getRCNoticeProps2);
  var notification_default = api2;

  // node_modules/antd/es/config-provider/context.js
  var React47 = __toESM(require_react());
  var defaultGetPrefixCls = function defaultGetPrefixCls2(suffixCls, customizePrefixCls) {
    if (customizePrefixCls)
      return customizePrefixCls;
    return suffixCls ? "ant-".concat(suffixCls) : "ant";
  };
  var ConfigContext = /* @__PURE__ */ React47.createContext({
    // We provide a default function for Context without provider
    getPrefixCls: defaultGetPrefixCls
  });
  var ConfigConsumer = ConfigContext.Consumer;

  // node_modules/antd/es/config-provider/cssVariables.js
  var dynamicStyleMark = "-ant-".concat(Date.now(), "-").concat(Math.random());
  function getStyle(globalPrefixCls2, theme) {
    var variables = {};
    var formatColor = function formatColor2(color, updater) {
      var clone2 = color.clone();
      clone2 = (updater === null || updater === void 0 ? void 0 : updater(clone2)) || clone2;
      return clone2.toRgbString();
    };
    var fillColor = function fillColor2(colorVal, type4) {
      var baseColor = new TinyColor(colorVal);
      var colorPalettes = generate(baseColor.toRgbString());
      variables["".concat(type4, "-color")] = formatColor(baseColor);
      variables["".concat(type4, "-color-disabled")] = colorPalettes[1];
      variables["".concat(type4, "-color-hover")] = colorPalettes[4];
      variables["".concat(type4, "-color-active")] = colorPalettes[6];
      variables["".concat(type4, "-color-outline")] = baseColor.clone().setAlpha(0.2).toRgbString();
      variables["".concat(type4, "-color-deprecated-bg")] = colorPalettes[0];
      variables["".concat(type4, "-color-deprecated-border")] = colorPalettes[2];
    };
    if (theme.primaryColor) {
      fillColor(theme.primaryColor, "primary");
      var primaryColor = new TinyColor(theme.primaryColor);
      var primaryColors = generate(primaryColor.toRgbString());
      primaryColors.forEach(function(color, index3) {
        variables["primary-".concat(index3 + 1)] = color;
      });
      variables["primary-color-deprecated-l-35"] = formatColor(primaryColor, function(c2) {
        return c2.lighten(35);
      });
      variables["primary-color-deprecated-l-20"] = formatColor(primaryColor, function(c2) {
        return c2.lighten(20);
      });
      variables["primary-color-deprecated-t-20"] = formatColor(primaryColor, function(c2) {
        return c2.tint(20);
      });
      variables["primary-color-deprecated-t-50"] = formatColor(primaryColor, function(c2) {
        return c2.tint(50);
      });
      variables["primary-color-deprecated-f-12"] = formatColor(primaryColor, function(c2) {
        return c2.setAlpha(c2.getAlpha() * 0.12);
      });
      var primaryActiveColor = new TinyColor(primaryColors[0]);
      variables["primary-color-active-deprecated-f-30"] = formatColor(primaryActiveColor, function(c2) {
        return c2.setAlpha(c2.getAlpha() * 0.3);
      });
      variables["primary-color-active-deprecated-d-02"] = formatColor(primaryActiveColor, function(c2) {
        return c2.darken(2);
      });
    }
    if (theme.successColor) {
      fillColor(theme.successColor, "success");
    }
    if (theme.warningColor) {
      fillColor(theme.warningColor, "warning");
    }
    if (theme.errorColor) {
      fillColor(theme.errorColor, "error");
    }
    if (theme.infoColor) {
      fillColor(theme.infoColor, "info");
    }
    var cssList = Object.keys(variables).map(function(key2) {
      return "--".concat(globalPrefixCls2, "-").concat(key2, ": ").concat(variables[key2], ";");
    });
    return "\n  :root {\n    ".concat(cssList.join("\n"), "\n  }\n  ").trim();
  }
  function registerTheme(globalPrefixCls2, theme) {
    var style2 = getStyle(globalPrefixCls2, theme);
    if (canUseDom()) {
      updateCSS(style2, "".concat(dynamicStyleMark, "-dynamic-theme"));
    } else {
      true ? warning_default2(false, "ConfigProvider", "SSR do not support dynamic theme with css variables.") : void 0;
    }
  }

  // node_modules/antd/es/config-provider/DisabledContext.js
  var React48 = __toESM(require_react());
  var DisabledContext = /* @__PURE__ */ React48.createContext(false);
  var DisabledContextProvider = function DisabledContextProvider2(_ref) {
    var children = _ref.children, disabled = _ref.disabled;
    var originDisabled = React48.useContext(DisabledContext);
    return /* @__PURE__ */ React48.createElement(DisabledContext.Provider, {
      value: disabled || originDisabled
    }, children);
  };
  var DisabledContext_default = DisabledContext;

  // node_modules/antd/es/config-provider/SizeContext.js
  var React49 = __toESM(require_react());
  var SizeContext = /* @__PURE__ */ React49.createContext(void 0);
  var SizeContextProvider = function SizeContextProvider2(_ref) {
    var children = _ref.children, size = _ref.size;
    return /* @__PURE__ */ React49.createElement(SizeContext.Consumer, null, function(originSize) {
      return /* @__PURE__ */ React49.createElement(SizeContext.Provider, {
        value: size || originSize
      }, children);
    });
  };
  var SizeContext_default = SizeContext;

  // node_modules/antd/es/config-provider/index.js
  var PASSED_PROPS = ["getTargetContainer", "getPopupContainer", "renderEmpty", "pageHeader", "input", "pagination", "form"];
  var defaultPrefixCls2 = "ant";
  var defaultIconPrefixCls = "anticon";
  var globalPrefixCls;
  var globalIconPrefixCls;
  function getGlobalPrefixCls() {
    return globalPrefixCls || defaultPrefixCls2;
  }
  function getGlobalIconPrefixCls() {
    return globalIconPrefixCls || defaultIconPrefixCls;
  }
  var setGlobalConfig = function setGlobalConfig2(_ref) {
    var prefixCls = _ref.prefixCls, iconPrefixCls = _ref.iconPrefixCls, theme = _ref.theme;
    if (prefixCls !== void 0) {
      globalPrefixCls = prefixCls;
    }
    if (iconPrefixCls !== void 0) {
      globalIconPrefixCls = iconPrefixCls;
    }
    if (theme) {
      registerTheme(getGlobalPrefixCls(), theme);
    }
  };
  var globalConfig = function globalConfig2() {
    return {
      getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {
        if (customizePrefixCls)
          return customizePrefixCls;
        return suffixCls ? "".concat(getGlobalPrefixCls(), "-").concat(suffixCls) : getGlobalPrefixCls();
      },
      getIconPrefixCls: getGlobalIconPrefixCls,
      getRootPrefixCls: function getRootPrefixCls2(rootPrefixCls, customizePrefixCls) {
        if (rootPrefixCls) {
          return rootPrefixCls;
        }
        if (globalPrefixCls) {
          return globalPrefixCls;
        }
        if (customizePrefixCls && customizePrefixCls.includes("-")) {
          return customizePrefixCls.replace(/^(.*)-[^-]*$/, "$1");
        }
        return getGlobalPrefixCls();
      }
    };
  };
  var ProviderChildren = function ProviderChildren2(props) {
    var _a, _b;
    var children = props.children, csp = props.csp, autoInsertSpaceInButton = props.autoInsertSpaceInButton, form = props.form, locale4 = props.locale, componentSize = props.componentSize, direction = props.direction, space = props.space, virtual = props.virtual, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, legacyLocale = props.legacyLocale, parentContext = props.parentContext, iconPrefixCls = props.iconPrefixCls, componentDisabled = props.componentDisabled;
    var getPrefixCls = React50.useCallback(function(suffixCls, customizePrefixCls) {
      var prefixCls = props.prefixCls;
      if (customizePrefixCls)
        return customizePrefixCls;
      var mergedPrefixCls = prefixCls || parentContext.getPrefixCls("");
      return suffixCls ? "".concat(mergedPrefixCls, "-").concat(suffixCls) : mergedPrefixCls;
    }, [parentContext.getPrefixCls, props.prefixCls]);
    var config = _extends(_extends({}, parentContext), {
      csp,
      autoInsertSpaceInButton,
      locale: locale4 || legacyLocale,
      direction,
      space,
      virtual,
      dropdownMatchSelectWidth,
      getPrefixCls
    });
    PASSED_PROPS.forEach(function(propName) {
      var propValue = props[propName];
      if (propValue) {
        config[propName] = propValue;
      }
    });
    var memoedConfig = useMemo(function() {
      return config;
    }, config, function(prevConfig, currentConfig) {
      var prevKeys = Object.keys(prevConfig);
      var currentKeys = Object.keys(currentConfig);
      return prevKeys.length !== currentKeys.length || prevKeys.some(function(key2) {
        return prevConfig[key2] !== currentConfig[key2];
      });
    });
    var memoIconContextValue = React50.useMemo(function() {
      return {
        prefixCls: iconPrefixCls,
        csp
      };
    }, [iconPrefixCls, csp]);
    var childNode = children;
    var validateMessages = {};
    if (locale4) {
      validateMessages = ((_a = locale4.Form) === null || _a === void 0 ? void 0 : _a.defaultValidateMessages) || ((_b = default_default.Form) === null || _b === void 0 ? void 0 : _b.defaultValidateMessages) || {};
    }
    if (form && form.validateMessages) {
      validateMessages = _extends(_extends({}, validateMessages), form.validateMessages);
    }
    if (Object.keys(validateMessages).length > 0) {
      childNode = /* @__PURE__ */ React50.createElement(FormProvider, {
        validateMessages
      }, children);
    }
    if (locale4) {
      childNode = /* @__PURE__ */ React50.createElement(LocaleProvider, {
        locale: locale4,
        _ANT_MARK__: ANT_MARK
      }, childNode);
    }
    if (iconPrefixCls || csp) {
      childNode = /* @__PURE__ */ React50.createElement(Context_default.Provider, {
        value: memoIconContextValue
      }, childNode);
    }
    if (componentSize) {
      childNode = /* @__PURE__ */ React50.createElement(SizeContextProvider, {
        size: componentSize
      }, childNode);
    }
    if (componentDisabled !== void 0) {
      childNode = /* @__PURE__ */ React50.createElement(DisabledContextProvider, {
        disabled: componentDisabled
      }, childNode);
    }
    return /* @__PURE__ */ React50.createElement(ConfigContext.Provider, {
      value: memoedConfig
    }, childNode);
  };
  var ConfigProvider = function ConfigProvider2(props) {
    React50.useEffect(function() {
      if (props.direction) {
        message_default.config({
          rtl: props.direction === "rtl"
        });
        notification_default.config({
          rtl: props.direction === "rtl"
        });
      }
    }, [props.direction]);
    return /* @__PURE__ */ React50.createElement(LocaleReceiver, null, function(_, __, legacyLocale) {
      return /* @__PURE__ */ React50.createElement(ConfigConsumer, null, function(context) {
        return /* @__PURE__ */ React50.createElement(ProviderChildren, _extends({
          parentContext: context,
          legacyLocale
        }, props));
      });
    });
  };
  ConfigProvider.ConfigContext = ConfigContext;
  ConfigProvider.SizeContext = SizeContext_default;
  ConfigProvider.config = setGlobalConfig;
  var config_provider_default = ConfigProvider;

  // node_modules/rc-util/es/Dom/addEventListener.js
  var import_react_dom3 = __toESM(require_react_dom());
  function addEventListenerWrap(target, eventType, cb, option) {
    var callback = import_react_dom3.default.unstable_batchedUpdates ? function run(e3) {
      import_react_dom3.default.unstable_batchedUpdates(cb, e3);
    } : cb;
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, option);
    }
    return {
      remove: function remove() {
        if (target.removeEventListener) {
          target.removeEventListener(eventType, callback, option);
        }
      }
    };
  }

  // node_modules/antd/es/alert/index.js
  var import_classnames7 = __toESM(require_classnames());
  var React53 = __toESM(require_react());

  // node_modules/antd/es/_util/getDataOrAriaProps.js
  function getDataOrAriaProps(props) {
    return Object.keys(props).reduce(function(prev, key2) {
      if ((key2.startsWith("data-") || key2.startsWith("aria-") || key2 === "role") && !key2.startsWith("data-__")) {
        prev[key2] = props[key2];
      }
      return prev;
    }, {});
  }

  // node_modules/antd/es/_util/reactNode.js
  var React51 = __toESM(require_react());
  var isValidElement6 = React51.isValidElement;
  function isFragment2(child) {
    return child && child.type === React51.Fragment;
  }
  function replaceElement(element, replacement, props) {
    if (!isValidElement6(element)) {
      return replacement;
    }
    return /* @__PURE__ */ React51.cloneElement(element, typeof props === "function" ? props(element.props || {}) : props);
  }
  function cloneElement6(element, props) {
    return replaceElement(element, element, props);
  }

  // node_modules/antd/es/alert/ErrorBoundary.js
  var React52 = __toESM(require_react());
  var ErrorBoundary = /* @__PURE__ */ function(_React$Component) {
    _inherits(ErrorBoundary2, _React$Component);
    var _super = _createSuper(ErrorBoundary2);
    function ErrorBoundary2() {
      var _this;
      _classCallCheck(this, ErrorBoundary2);
      _this = _super.apply(this, arguments);
      _this.state = {
        error: void 0,
        info: {
          componentStack: ""
        }
      };
      return _this;
    }
    _createClass(ErrorBoundary2, [{
      key: "componentDidCatch",
      value: function componentDidCatch(error, info) {
        this.setState({
          error,
          info
        });
      }
    }, {
      key: "render",
      value: function render4() {
        var _this$props = this.props, message = _this$props.message, description = _this$props.description, children = _this$props.children;
        var _this$state = this.state, error = _this$state.error, info = _this$state.info;
        var componentStack = info && info.componentStack ? info.componentStack : null;
        var errorMessage = typeof message === "undefined" ? (error || "").toString() : message;
        var errorDescription = typeof description === "undefined" ? componentStack : description;
        if (error) {
          return /* @__PURE__ */ React52.createElement(alert_default, {
            type: "error",
            message: errorMessage,
            description: /* @__PURE__ */ React52.createElement("pre", null, errorDescription)
          });
        }
        return children;
      }
    }]);
    return ErrorBoundary2;
  }(React52.Component);

  // node_modules/antd/es/alert/index.js
  var __rest = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var iconMapFilled = {
    success: CheckCircleFilled_default2,
    info: InfoCircleFilled_default2,
    error: CloseCircleFilled_default2,
    warning: ExclamationCircleFilled_default2
  };
  var iconMapOutlined = {
    success: CheckCircleOutlined_default2,
    info: InfoCircleOutlined_default2,
    error: CloseCircleOutlined_default2,
    warning: ExclamationCircleOutlined_default2
  };
  var IconNode = function IconNode2(props) {
    var description = props.description, icon = props.icon, prefixCls = props.prefixCls, type4 = props.type;
    var iconType = (description ? iconMapOutlined : iconMapFilled)[type4] || null;
    if (icon) {
      return replaceElement(icon, /* @__PURE__ */ React53.createElement("span", {
        className: "".concat(prefixCls, "-icon")
      }, icon), function() {
        return {
          className: (0, import_classnames7.default)("".concat(prefixCls, "-icon"), _defineProperty({}, icon.props.className, icon.props.className))
        };
      });
    }
    return /* @__PURE__ */ React53.createElement(iconType, {
      className: "".concat(prefixCls, "-icon")
    });
  };
  var CloseIcon = function CloseIcon2(props) {
    var isClosable = props.isClosable, closeText = props.closeText, prefixCls = props.prefixCls, closeIcon = props.closeIcon, handleClose = props.handleClose;
    return isClosable ? /* @__PURE__ */ React53.createElement("button", {
      type: "button",
      onClick: handleClose,
      className: "".concat(prefixCls, "-close-icon"),
      tabIndex: 0
    }, closeText ? /* @__PURE__ */ React53.createElement("span", {
      className: "".concat(prefixCls, "-close-text")
    }, closeText) : closeIcon) : null;
  };
  var Alert = function Alert2(_a) {
    var _classNames2;
    var description = _a.description, customizePrefixCls = _a.prefixCls, message = _a.message, banner = _a.banner, _a$className = _a.className, className = _a$className === void 0 ? "" : _a$className, style2 = _a.style, onMouseEnter = _a.onMouseEnter, onMouseLeave = _a.onMouseLeave, onClick = _a.onClick, afterClose = _a.afterClose, showIcon = _a.showIcon, closable = _a.closable, closeText = _a.closeText, _a$closeIcon = _a.closeIcon, closeIcon = _a$closeIcon === void 0 ? /* @__PURE__ */ React53.createElement(CloseOutlined_default2, null) : _a$closeIcon, action = _a.action, props = __rest(_a, ["description", "prefixCls", "message", "banner", "className", "style", "onMouseEnter", "onMouseLeave", "onClick", "afterClose", "showIcon", "closable", "closeText", "closeIcon", "action"]);
    var _React$useState = React53.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), closed = _React$useState2[0], setClosed = _React$useState2[1];
    var ref = React53.useRef();
    var _React$useContext = React53.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var prefixCls = getPrefixCls("alert", customizePrefixCls);
    var handleClose = function handleClose2(e3) {
      var _a2;
      setClosed(true);
      (_a2 = props.onClose) === null || _a2 === void 0 ? void 0 : _a2.call(props, e3);
    };
    var getType = function getType2() {
      var type5 = props.type;
      if (type5 !== void 0) {
        return type5;
      }
      return banner ? "warning" : "info";
    };
    var isClosable = closeText ? true : closable;
    var type4 = getType();
    var isShowIcon = banner && showIcon === void 0 ? true : showIcon;
    var alertCls = (0, import_classnames7.default)(prefixCls, "".concat(prefixCls, "-").concat(type4), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-with-description"), !!description), _defineProperty(_classNames2, "".concat(prefixCls, "-no-icon"), !isShowIcon), _defineProperty(_classNames2, "".concat(prefixCls, "-banner"), !!banner), _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames2), className);
    var dataOrAriaProps = getDataOrAriaProps(props);
    return /* @__PURE__ */ React53.createElement(es_default3, {
      visible: !closed,
      motionName: "".concat(prefixCls, "-motion"),
      motionAppear: false,
      motionEnter: false,
      onLeaveStart: function onLeaveStart(node) {
        return {
          maxHeight: node.offsetHeight
        };
      },
      onLeaveEnd: afterClose
    }, function(_ref) {
      var motionClassName = _ref.className, motionStyle = _ref.style;
      return /* @__PURE__ */ React53.createElement("div", _extends({
        ref,
        "data-show": !closed,
        className: (0, import_classnames7.default)(alertCls, motionClassName),
        style: _extends(_extends({}, style2), motionStyle),
        onMouseEnter,
        onMouseLeave,
        onClick,
        role: "alert"
      }, dataOrAriaProps), isShowIcon ? /* @__PURE__ */ React53.createElement(IconNode, {
        description,
        icon: props.icon,
        prefixCls,
        type: type4
      }) : null, /* @__PURE__ */ React53.createElement("div", {
        className: "".concat(prefixCls, "-content")
      }, message ? /* @__PURE__ */ React53.createElement("div", {
        className: "".concat(prefixCls, "-message")
      }, message) : null, description ? /* @__PURE__ */ React53.createElement("div", {
        className: "".concat(prefixCls, "-description")
      }, description) : null), action ? /* @__PURE__ */ React53.createElement("div", {
        className: "".concat(prefixCls, "-action")
      }, action) : null, /* @__PURE__ */ React53.createElement(CloseIcon, {
        isClosable: !!isClosable,
        closeText,
        prefixCls,
        closeIcon,
        handleClose
      }));
    });
  };
  Alert.ErrorBoundary = ErrorBoundary;
  var alert_default = Alert;

  // node_modules/antd/es/select/index.js
  var import_classnames26 = __toESM(require_classnames());

  // node_modules/rc-util/es/hooks/useEvent.js
  var React54 = __toESM(require_react());
  function useEvent(callback) {
    var fnRef = React54.useRef();
    fnRef.current = callback;
    var memoFn = React54.useCallback(function() {
      var _fnRef$current;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return (_fnRef$current = fnRef.current) === null || _fnRef$current === void 0 ? void 0 : _fnRef$current.call.apply(_fnRef$current, [fnRef].concat(args));
    }, []);
    return memoFn;
  }

  // node_modules/rc-util/es/hooks/useLayoutEffect.js
  var React55 = __toESM(require_react());
  var useLayoutEffect3 = canUseDom() ? React55.useLayoutEffect : React55.useEffect;
  var useLayoutEffect_default = useLayoutEffect3;
  var useLayoutUpdateEffect = function useLayoutUpdateEffect2(callback, deps) {
    var firstMountRef = React55.useRef(true);
    useLayoutEffect3(function() {
      if (!firstMountRef.current) {
        return callback();
      }
    }, deps);
    useLayoutEffect3(function() {
      firstMountRef.current = false;
      return function() {
        firstMountRef.current = true;
      };
    }, []);
  };

  // node_modules/rc-util/es/hooks/useMergedState.js
  function hasValue(value) {
    return value !== void 0;
  }
  function useMergedState(defaultStateValue, option) {
    var _ref = option || {}, defaultValue = _ref.defaultValue, value = _ref.value, onChange3 = _ref.onChange, postState = _ref.postState;
    var _useState = useSafeState(function() {
      if (hasValue(value)) {
        return value;
      } else if (hasValue(defaultValue)) {
        return typeof defaultValue === "function" ? defaultValue() : defaultValue;
      } else {
        return typeof defaultStateValue === "function" ? defaultStateValue() : defaultStateValue;
      }
    }), _useState2 = _slicedToArray(_useState, 2), innerValue = _useState2[0], setInnerValue = _useState2[1];
    var mergedValue = value !== void 0 ? value : innerValue;
    var postMergedValue = postState ? postState(mergedValue) : mergedValue;
    var onChangeFn = useEvent(onChange3);
    var _useState3 = useSafeState([mergedValue]), _useState4 = _slicedToArray(_useState3, 2), prevValue = _useState4[0], setPrevValue = _useState4[1];
    useLayoutUpdateEffect(function() {
      var prev = prevValue[0];
      if (innerValue !== prev) {
        onChangeFn(innerValue, prev);
      }
    }, [prevValue]);
    useLayoutUpdateEffect(function() {
      if (!hasValue(value)) {
        setInnerValue(value);
      }
    }, [value]);
    var triggerChange = useEvent(function(updater, ignoreDestroy) {
      setInnerValue(updater, ignoreDestroy);
      setPrevValue([mergedValue], ignoreDestroy);
    });
    return [postMergedValue, triggerChange];
  }

  // node_modules/rc-select/es/Select.js
  var React98 = __toESM(require_react());

  // node_modules/rc-select/es/BaseSelect.js
  var import_classnames19 = __toESM(require_classnames());

  // node_modules/rc-util/es/isMobile.js
  var isMobile_default = function() {
    if (typeof navigator === "undefined" || typeof window === "undefined") {
      return false;
    }
    var agent = navigator.userAgent || navigator.vendor || window.opera;
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(agent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(agent === null || agent === void 0 ? void 0 : agent.substr(0, 4));
  };

  // node_modules/rc-util/es/KeyCode.js
  var KeyCode = {
    /**
     * MAC_ENTER
     */
    MAC_ENTER: 3,
    /**
     * BACKSPACE
     */
    BACKSPACE: 8,
    /**
     * TAB
     */
    TAB: 9,
    /**
     * NUMLOCK on FF/Safari Mac
     */
    NUM_CENTER: 12,
    // NUMLOCK on FF/Safari Mac
    /**
     * ENTER
     */
    ENTER: 13,
    /**
     * SHIFT
     */
    SHIFT: 16,
    /**
     * CTRL
     */
    CTRL: 17,
    /**
     * ALT
     */
    ALT: 18,
    /**
     * PAUSE
     */
    PAUSE: 19,
    /**
     * CAPS_LOCK
     */
    CAPS_LOCK: 20,
    /**
     * ESC
     */
    ESC: 27,
    /**
     * SPACE
     */
    SPACE: 32,
    /**
     * PAGE_UP
     */
    PAGE_UP: 33,
    // also NUM_NORTH_EAST
    /**
     * PAGE_DOWN
     */
    PAGE_DOWN: 34,
    // also NUM_SOUTH_EAST
    /**
     * END
     */
    END: 35,
    // also NUM_SOUTH_WEST
    /**
     * HOME
     */
    HOME: 36,
    // also NUM_NORTH_WEST
    /**
     * LEFT
     */
    LEFT: 37,
    // also NUM_WEST
    /**
     * UP
     */
    UP: 38,
    // also NUM_NORTH
    /**
     * RIGHT
     */
    RIGHT: 39,
    // also NUM_EAST
    /**
     * DOWN
     */
    DOWN: 40,
    // also NUM_SOUTH
    /**
     * PRINT_SCREEN
     */
    PRINT_SCREEN: 44,
    /**
     * INSERT
     */
    INSERT: 45,
    // also NUM_INSERT
    /**
     * DELETE
     */
    DELETE: 46,
    // also NUM_DELETE
    /**
     * ZERO
     */
    ZERO: 48,
    /**
     * ONE
     */
    ONE: 49,
    /**
     * TWO
     */
    TWO: 50,
    /**
     * THREE
     */
    THREE: 51,
    /**
     * FOUR
     */
    FOUR: 52,
    /**
     * FIVE
     */
    FIVE: 53,
    /**
     * SIX
     */
    SIX: 54,
    /**
     * SEVEN
     */
    SEVEN: 55,
    /**
     * EIGHT
     */
    EIGHT: 56,
    /**
     * NINE
     */
    NINE: 57,
    /**
     * QUESTION_MARK
     */
    QUESTION_MARK: 63,
    // needs localization
    /**
     * A
     */
    A: 65,
    /**
     * B
     */
    B: 66,
    /**
     * C
     */
    C: 67,
    /**
     * D
     */
    D: 68,
    /**
     * E
     */
    E: 69,
    /**
     * F
     */
    F: 70,
    /**
     * G
     */
    G: 71,
    /**
     * H
     */
    H: 72,
    /**
     * I
     */
    I: 73,
    /**
     * J
     */
    J: 74,
    /**
     * K
     */
    K: 75,
    /**
     * L
     */
    L: 76,
    /**
     * M
     */
    M: 77,
    /**
     * N
     */
    N: 78,
    /**
     * O
     */
    O: 79,
    /**
     * P
     */
    P: 80,
    /**
     * Q
     */
    Q: 81,
    /**
     * R
     */
    R: 82,
    /**
     * S
     */
    S: 83,
    /**
     * T
     */
    T: 84,
    /**
     * U
     */
    U: 85,
    /**
     * V
     */
    V: 86,
    /**
     * W
     */
    W: 87,
    /**
     * X
     */
    X: 88,
    /**
     * Y
     */
    Y: 89,
    /**
     * Z
     */
    Z: 90,
    /**
     * META
     */
    META: 91,
    // WIN_KEY_LEFT
    /**
     * WIN_KEY_RIGHT
     */
    WIN_KEY_RIGHT: 92,
    /**
     * CONTEXT_MENU
     */
    CONTEXT_MENU: 93,
    /**
     * NUM_ZERO
     */
    NUM_ZERO: 96,
    /**
     * NUM_ONE
     */
    NUM_ONE: 97,
    /**
     * NUM_TWO
     */
    NUM_TWO: 98,
    /**
     * NUM_THREE
     */
    NUM_THREE: 99,
    /**
     * NUM_FOUR
     */
    NUM_FOUR: 100,
    /**
     * NUM_FIVE
     */
    NUM_FIVE: 101,
    /**
     * NUM_SIX
     */
    NUM_SIX: 102,
    /**
     * NUM_SEVEN
     */
    NUM_SEVEN: 103,
    /**
     * NUM_EIGHT
     */
    NUM_EIGHT: 104,
    /**
     * NUM_NINE
     */
    NUM_NINE: 105,
    /**
     * NUM_MULTIPLY
     */
    NUM_MULTIPLY: 106,
    /**
     * NUM_PLUS
     */
    NUM_PLUS: 107,
    /**
     * NUM_MINUS
     */
    NUM_MINUS: 109,
    /**
     * NUM_PERIOD
     */
    NUM_PERIOD: 110,
    /**
     * NUM_DIVISION
     */
    NUM_DIVISION: 111,
    /**
     * F1
     */
    F1: 112,
    /**
     * F2
     */
    F2: 113,
    /**
     * F3
     */
    F3: 114,
    /**
     * F4
     */
    F4: 115,
    /**
     * F5
     */
    F5: 116,
    /**
     * F6
     */
    F6: 117,
    /**
     * F7
     */
    F7: 118,
    /**
     * F8
     */
    F8: 119,
    /**
     * F9
     */
    F9: 120,
    /**
     * F10
     */
    F10: 121,
    /**
     * F11
     */
    F11: 122,
    /**
     * F12
     */
    F12: 123,
    /**
     * NUMLOCK
     */
    NUMLOCK: 144,
    /**
     * SEMICOLON
     */
    SEMICOLON: 186,
    // needs localization
    /**
     * DASH
     */
    DASH: 189,
    // needs localization
    /**
     * EQUALS
     */
    EQUALS: 187,
    // needs localization
    /**
     * COMMA
     */
    COMMA: 188,
    // needs localization
    /**
     * PERIOD
     */
    PERIOD: 190,
    // needs localization
    /**
     * SLASH
     */
    SLASH: 191,
    // needs localization
    /**
     * APOSTROPHE
     */
    APOSTROPHE: 192,
    // needs localization
    /**
     * SINGLE_QUOTE
     */
    SINGLE_QUOTE: 222,
    // needs localization
    /**
     * OPEN_SQUARE_BRACKET
     */
    OPEN_SQUARE_BRACKET: 219,
    // needs localization
    /**
     * BACKSLASH
     */
    BACKSLASH: 220,
    // needs localization
    /**
     * CLOSE_SQUARE_BRACKET
     */
    CLOSE_SQUARE_BRACKET: 221,
    // needs localization
    /**
     * WIN_KEY
     */
    WIN_KEY: 224,
    /**
     * MAC_FF_META
     */
    MAC_FF_META: 224,
    // Firefox (Gecko) fires this for the meta key instead of 91
    /**
     * WIN_IME
     */
    WIN_IME: 229,
    // ======================== Function ========================
    /**
     * whether text and modified key is entered at the same time.
     */
    isTextModifyingKeyEvent: function isTextModifyingKeyEvent(e3) {
      var keyCode = e3.keyCode;
      if (e3.altKey && !e3.ctrlKey || e3.metaKey || // Function keys don't generate text
      keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
        return false;
      }
      switch (keyCode) {
        case KeyCode.ALT:
        case KeyCode.CAPS_LOCK:
        case KeyCode.CONTEXT_MENU:
        case KeyCode.CTRL:
        case KeyCode.DOWN:
        case KeyCode.END:
        case KeyCode.ESC:
        case KeyCode.HOME:
        case KeyCode.INSERT:
        case KeyCode.LEFT:
        case KeyCode.MAC_FF_META:
        case KeyCode.META:
        case KeyCode.NUMLOCK:
        case KeyCode.NUM_CENTER:
        case KeyCode.PAGE_DOWN:
        case KeyCode.PAGE_UP:
        case KeyCode.PAUSE:
        case KeyCode.PRINT_SCREEN:
        case KeyCode.RIGHT:
        case KeyCode.SHIFT:
        case KeyCode.UP:
        case KeyCode.WIN_KEY:
        case KeyCode.WIN_KEY_RIGHT:
          return false;
        default:
          return true;
      }
    },
    /**
     * whether character is entered.
     */
    isCharacterKey: function isCharacterKey(keyCode) {
      if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
        return true;
      }
      if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
        return true;
      }
      if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
        return true;
      }
      if (window.navigator.userAgent.indexOf("WebKit") !== -1 && keyCode === 0) {
        return true;
      }
      switch (keyCode) {
        case KeyCode.SPACE:
        case KeyCode.QUESTION_MARK:
        case KeyCode.NUM_PLUS:
        case KeyCode.NUM_MINUS:
        case KeyCode.NUM_PERIOD:
        case KeyCode.NUM_DIVISION:
        case KeyCode.SEMICOLON:
        case KeyCode.DASH:
        case KeyCode.EQUALS:
        case KeyCode.COMMA:
        case KeyCode.PERIOD:
        case KeyCode.SLASH:
        case KeyCode.APOSTROPHE:
        case KeyCode.SINGLE_QUOTE:
        case KeyCode.OPEN_SQUARE_BRACKET:
        case KeyCode.BACKSLASH:
        case KeyCode.CLOSE_SQUARE_BRACKET:
          return true;
        default:
          return false;
      }
    }
  };
  var KeyCode_default = KeyCode;

  // node_modules/rc-select/es/BaseSelect.js
  var React80 = __toESM(require_react());

  // node_modules/rc-select/es/hooks/useBaseProps.js
  var React56 = __toESM(require_react());
  var BaseSelectContext = /* @__PURE__ */ React56.createContext(null);
  function useBaseProps() {
    return React56.useContext(BaseSelectContext);
  }

  // node_modules/rc-select/es/hooks/useDelayReset.js
  var React57 = __toESM(require_react());
  function useDelayReset() {
    var timeout = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;
    var _React$useState = React57.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), bool = _React$useState2[0], setBool = _React$useState2[1];
    var delayRef = React57.useRef(null);
    var cancelLatest = function cancelLatest2() {
      window.clearTimeout(delayRef.current);
    };
    React57.useEffect(function() {
      return cancelLatest;
    }, []);
    var delaySetBool = function delaySetBool2(value, callback) {
      cancelLatest();
      delayRef.current = window.setTimeout(function() {
        setBool(value);
        if (callback) {
          callback();
        }
      }, timeout);
    };
    return [bool, delaySetBool, cancelLatest];
  }

  // node_modules/rc-select/es/hooks/useLock.js
  var React58 = __toESM(require_react());
  function useLock() {
    var duration = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 250;
    var lockRef = React58.useRef(null);
    var timeoutRef = React58.useRef(null);
    React58.useEffect(function() {
      return function() {
        window.clearTimeout(timeoutRef.current);
      };
    }, []);
    function doLock(locked) {
      if (locked || lockRef.current === null) {
        lockRef.current = locked;
      }
      window.clearTimeout(timeoutRef.current);
      timeoutRef.current = window.setTimeout(function() {
        lockRef.current = null;
      }, duration);
    }
    return [function() {
      return lockRef.current;
    }, doLock];
  }

  // node_modules/rc-select/es/hooks/useSelectTriggerControl.js
  var React59 = __toESM(require_react());
  function useSelectTriggerControl(elements, open, triggerOpen, customizedTrigger) {
    var propsRef = React59.useRef(null);
    propsRef.current = {
      open,
      triggerOpen,
      customizedTrigger
    };
    React59.useEffect(function() {
      function onGlobalMouseDown(event) {
        var _propsRef$current;
        if ((_propsRef$current = propsRef.current) !== null && _propsRef$current !== void 0 && _propsRef$current.customizedTrigger) {
          return;
        }
        var target = event.target;
        if (target.shadowRoot && event.composed) {
          target = event.composedPath()[0] || target;
        }
        if (propsRef.current.open && elements().filter(function(element) {
          return element;
        }).every(function(element) {
          return !element.contains(target) && element !== target;
        })) {
          propsRef.current.triggerOpen(false);
        }
      }
      window.addEventListener("mousedown", onGlobalMouseDown);
      return function() {
        return window.removeEventListener("mousedown", onGlobalMouseDown);
      };
    }, []);
  }

  // node_modules/rc-select/es/Selector/index.js
  var React69 = __toESM(require_react());
  var import_react15 = __toESM(require_react());

  // node_modules/rc-select/es/Selector/MultipleSelector.js
  var React67 = __toESM(require_react());
  var import_react14 = __toESM(require_react());
  var import_classnames13 = __toESM(require_classnames());

  // node_modules/rc-util/es/pickAttrs.js
  var attributes = "accept acceptCharset accessKey action allowFullScreen allowTransparency\n    alt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge\n    charSet checked classID className colSpan cols content contentEditable contextMenu\n    controls coords crossOrigin data dateTime default defer dir disabled download draggable\n    encType form formAction formEncType formMethod formNoValidate formTarget frameBorder\n    headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity\n    is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media\n    mediaGroup method min minLength multiple muted name noValidate nonce open\n    optimum pattern placeholder poster preload radioGroup readOnly rel required\n    reversed role rowSpan rows sandbox scope scoped scrolling seamless selected\n    shape size sizes span spellCheck src srcDoc srcLang srcSet start step style\n    summary tabIndex target title type useMap value width wmode wrap";
  var eventsName = "onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown\n    onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onClick onContextMenu onDoubleClick\n    onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown\n    onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel\n    onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough\n    onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata\n    onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onError";
  var propList = "".concat(attributes, " ").concat(eventsName).split(/[\s\n]+/);
  var ariaPrefix = "aria-";
  var dataPrefix = "data-";
  function match(key2, prefix) {
    return key2.indexOf(prefix) === 0;
  }
  function pickAttrs(props) {
    var ariaOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var mergedConfig;
    if (ariaOnly === false) {
      mergedConfig = {
        aria: true,
        data: true,
        attr: true
      };
    } else if (ariaOnly === true) {
      mergedConfig = {
        aria: true
      };
    } else {
      mergedConfig = _objectSpread2({}, ariaOnly);
    }
    var attrs = {};
    Object.keys(props).forEach(function(key2) {
      if (
        // Aria
        mergedConfig.aria && (key2 === "role" || match(key2, ariaPrefix)) || // Data
        mergedConfig.data && match(key2, dataPrefix) || // Attr
        mergedConfig.attr && propList.includes(key2)
      ) {
        attrs[key2] = props[key2];
      }
    });
    return attrs;
  }

  // node_modules/rc-overflow/es/Overflow.js
  var React63 = __toESM(require_react());
  var import_react13 = __toESM(require_react());
  var import_classnames10 = __toESM(require_classnames());

  // node_modules/rc-overflow/es/Item.js
  var React60 = __toESM(require_react());
  var import_classnames8 = __toESM(require_classnames());
  var _excluded8 = ["prefixCls", "invalidate", "item", "renderItem", "responsive", "responsiveDisabled", "registerSize", "itemKey", "className", "style", "children", "display", "order", "component"];
  var UNDEFINED = void 0;
  function InternalItem(props, ref) {
    var prefixCls = props.prefixCls, invalidate = props.invalidate, item = props.item, renderItem = props.renderItem, responsive = props.responsive, responsiveDisabled = props.responsiveDisabled, registerSize = props.registerSize, itemKey2 = props.itemKey, className = props.className, style2 = props.style, children = props.children, display = props.display, order = props.order, _props$component = props.component, Component27 = _props$component === void 0 ? "div" : _props$component, restProps = _objectWithoutProperties(props, _excluded8);
    var mergedHidden = responsive && !display;
    function internalRegisterSize(width) {
      registerSize(itemKey2, width);
    }
    React60.useEffect(function() {
      return function() {
        internalRegisterSize(null);
      };
    }, []);
    var childNode = renderItem && item !== UNDEFINED ? renderItem(item) : children;
    var overflowStyle;
    if (!invalidate) {
      overflowStyle = {
        opacity: mergedHidden ? 0 : 1,
        height: mergedHidden ? 0 : UNDEFINED,
        overflowY: mergedHidden ? "hidden" : UNDEFINED,
        order: responsive ? order : UNDEFINED,
        pointerEvents: mergedHidden ? "none" : UNDEFINED,
        position: mergedHidden ? "absolute" : UNDEFINED
      };
    }
    var overflowProps = {};
    if (mergedHidden) {
      overflowProps["aria-hidden"] = true;
    }
    var itemNode = /* @__PURE__ */ React60.createElement(Component27, _extends({
      className: (0, import_classnames8.default)(!invalidate && prefixCls, className),
      style: _objectSpread2(_objectSpread2({}, overflowStyle), style2)
    }, overflowProps, restProps, {
      ref
    }), childNode);
    if (responsive) {
      itemNode = /* @__PURE__ */ React60.createElement(es_default, {
        onResize: function onResize2(_ref) {
          var offsetWidth = _ref.offsetWidth;
          internalRegisterSize(offsetWidth);
        },
        disabled: responsiveDisabled
      }, itemNode);
    }
    return itemNode;
  }
  var Item = /* @__PURE__ */ React60.forwardRef(InternalItem);
  Item.displayName = "Item";
  var Item_default = Item;

  // node_modules/rc-overflow/es/hooks/useEffectState.js
  var React61 = __toESM(require_react());
  var import_react_dom4 = __toESM(require_react_dom());

  // node_modules/rc-overflow/es/hooks/channelUpdate.js
  function channelUpdate(callback) {
    if (typeof MessageChannel === "undefined") {
      raf_default(callback);
    } else {
      var channel = new MessageChannel();
      channel.port1.onmessage = function() {
        return callback();
      };
      channel.port2.postMessage(void 0);
    }
  }

  // node_modules/rc-overflow/es/hooks/useEffectState.js
  function useBatcher() {
    var updateFuncRef = React61.useRef(null);
    var notifyEffectUpdate = function notifyEffectUpdate2(callback) {
      if (!updateFuncRef.current) {
        updateFuncRef.current = [];
        channelUpdate(function() {
          (0, import_react_dom4.unstable_batchedUpdates)(function() {
            updateFuncRef.current.forEach(function(fn) {
              fn();
            });
            updateFuncRef.current = null;
          });
        });
      }
      updateFuncRef.current.push(callback);
    };
    return notifyEffectUpdate;
  }
  function useEffectState(notifyEffectUpdate, defaultValue) {
    var _React$useState = React61.useState(defaultValue), _React$useState2 = _slicedToArray(_React$useState, 2), stateValue = _React$useState2[0], setStateValue = _React$useState2[1];
    var setEffectVal = useEvent(function(nextValue) {
      notifyEffectUpdate(function() {
        setStateValue(nextValue);
      });
    });
    return [stateValue, setEffectVal];
  }

  // node_modules/rc-overflow/es/RawItem.js
  var React62 = __toESM(require_react());
  var import_classnames9 = __toESM(require_classnames());
  var _excluded9 = ["component"];
  var _excluded23 = ["className"];
  var _excluded32 = ["className"];
  var InternalRawItem = function InternalRawItem2(props, ref) {
    var context = React62.useContext(OverflowContext);
    if (!context) {
      var _props$component = props.component, Component27 = _props$component === void 0 ? "div" : _props$component, _restProps = _objectWithoutProperties(props, _excluded9);
      return /* @__PURE__ */ React62.createElement(Component27, _extends({}, _restProps, {
        ref
      }));
    }
    var contextClassName = context.className, restContext = _objectWithoutProperties(context, _excluded23);
    var className = props.className, restProps = _objectWithoutProperties(props, _excluded32);
    return /* @__PURE__ */ React62.createElement(OverflowContext.Provider, {
      value: null
    }, /* @__PURE__ */ React62.createElement(Item_default, _extends({
      ref,
      className: (0, import_classnames9.default)(contextClassName, className)
    }, restContext, restProps)));
  };
  var RawItem = /* @__PURE__ */ React62.forwardRef(InternalRawItem);
  RawItem.displayName = "RawItem";
  var RawItem_default = RawItem;

  // node_modules/rc-overflow/es/Overflow.js
  var _excluded10 = ["prefixCls", "data", "renderItem", "renderRawItem", "itemKey", "itemWidth", "ssr", "style", "className", "maxCount", "renderRest", "renderRawRest", "suffix", "component", "itemComponent", "onVisibleChange"];
  var OverflowContext = /* @__PURE__ */ React63.createContext(null);
  var RESPONSIVE = "responsive";
  var INVALIDATE = "invalidate";
  function defaultRenderRest(omittedItems) {
    return "+ ".concat(omittedItems.length, " ...");
  }
  function Overflow(props, ref) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-overflow" : _props$prefixCls, _props$data = props.data, data = _props$data === void 0 ? [] : _props$data, renderItem = props.renderItem, renderRawItem = props.renderRawItem, itemKey2 = props.itemKey, _props$itemWidth = props.itemWidth, itemWidth = _props$itemWidth === void 0 ? 10 : _props$itemWidth, ssr = props.ssr, style2 = props.style, className = props.className, maxCount3 = props.maxCount, renderRest = props.renderRest, renderRawRest = props.renderRawRest, suffix = props.suffix, _props$component = props.component, Component27 = _props$component === void 0 ? "div" : _props$component, itemComponent = props.itemComponent, onVisibleChange = props.onVisibleChange, restProps = _objectWithoutProperties(props, _excluded10);
    var fullySSR = ssr === "full";
    var notifyEffectUpdate = useBatcher();
    var _useEffectState = useEffectState(notifyEffectUpdate, null), _useEffectState2 = _slicedToArray(_useEffectState, 2), containerWidth = _useEffectState2[0], setContainerWidth = _useEffectState2[1];
    var mergedContainerWidth = containerWidth || 0;
    var _useEffectState3 = useEffectState(notifyEffectUpdate, /* @__PURE__ */ new Map()), _useEffectState4 = _slicedToArray(_useEffectState3, 2), itemWidths = _useEffectState4[0], setItemWidths = _useEffectState4[1];
    var _useEffectState5 = useEffectState(notifyEffectUpdate, 0), _useEffectState6 = _slicedToArray(_useEffectState5, 2), prevRestWidth = _useEffectState6[0], setPrevRestWidth = _useEffectState6[1];
    var _useEffectState7 = useEffectState(notifyEffectUpdate, 0), _useEffectState8 = _slicedToArray(_useEffectState7, 2), restWidth = _useEffectState8[0], setRestWidth = _useEffectState8[1];
    var _useEffectState9 = useEffectState(notifyEffectUpdate, 0), _useEffectState10 = _slicedToArray(_useEffectState9, 2), suffixWidth = _useEffectState10[0], setSuffixWidth = _useEffectState10[1];
    var _useState = (0, import_react13.useState)(null), _useState2 = _slicedToArray(_useState, 2), suffixFixedStart = _useState2[0], setSuffixFixedStart = _useState2[1];
    var _useState3 = (0, import_react13.useState)(null), _useState4 = _slicedToArray(_useState3, 2), displayCount = _useState4[0], setDisplayCount = _useState4[1];
    var mergedDisplayCount = React63.useMemo(function() {
      if (displayCount === null && fullySSR) {
        return Number.MAX_SAFE_INTEGER;
      }
      return displayCount || 0;
    }, [displayCount, containerWidth]);
    var _useState5 = (0, import_react13.useState)(false), _useState6 = _slicedToArray(_useState5, 2), restReady = _useState6[0], setRestReady = _useState6[1];
    var itemPrefixCls = "".concat(prefixCls, "-item");
    var mergedRestWidth = Math.max(prevRestWidth, restWidth);
    var isResponsive = maxCount3 === RESPONSIVE;
    var shouldResponsive = data.length && isResponsive;
    var invalidate = maxCount3 === INVALIDATE;
    var showRest = shouldResponsive || typeof maxCount3 === "number" && data.length > maxCount3;
    var mergedData = (0, import_react13.useMemo)(function() {
      var items = data;
      if (shouldResponsive) {
        if (containerWidth === null && fullySSR) {
          items = data;
        } else {
          items = data.slice(0, Math.min(data.length, mergedContainerWidth / itemWidth));
        }
      } else if (typeof maxCount3 === "number") {
        items = data.slice(0, maxCount3);
      }
      return items;
    }, [data, itemWidth, containerWidth, maxCount3, shouldResponsive]);
    var omittedItems = (0, import_react13.useMemo)(function() {
      if (shouldResponsive) {
        return data.slice(mergedDisplayCount + 1);
      }
      return data.slice(mergedData.length);
    }, [data, mergedData, shouldResponsive, mergedDisplayCount]);
    var getKey2 = (0, import_react13.useCallback)(function(item, index3) {
      var _ref;
      if (typeof itemKey2 === "function") {
        return itemKey2(item);
      }
      return (_ref = itemKey2 && (item === null || item === void 0 ? void 0 : item[itemKey2])) !== null && _ref !== void 0 ? _ref : index3;
    }, [itemKey2]);
    var mergedRenderItem = (0, import_react13.useCallback)(renderItem || function(item) {
      return item;
    }, [renderItem]);
    function updateDisplayCount(count2, suffixFixedStartVal, notReady) {
      if (displayCount === count2 && (suffixFixedStartVal === void 0 || suffixFixedStartVal === suffixFixedStart)) {
        return;
      }
      setDisplayCount(count2);
      if (!notReady) {
        setRestReady(count2 < data.length - 1);
        onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(count2);
      }
      if (suffixFixedStartVal !== void 0) {
        setSuffixFixedStart(suffixFixedStartVal);
      }
    }
    function onOverflowResize(_, element) {
      setContainerWidth(element.clientWidth);
    }
    function registerSize(key2, width) {
      setItemWidths(function(origin) {
        var clone2 = new Map(origin);
        if (width === null) {
          clone2.delete(key2);
        } else {
          clone2.set(key2, width);
        }
        return clone2;
      });
    }
    function registerOverflowSize(_, width) {
      setRestWidth(width);
      setPrevRestWidth(restWidth);
    }
    function registerSuffixSize(_, width) {
      setSuffixWidth(width);
    }
    function getItemWidth(index3) {
      return itemWidths.get(getKey2(mergedData[index3], index3));
    }
    useLayoutEffect_default(function() {
      if (mergedContainerWidth && typeof mergedRestWidth === "number" && mergedData) {
        var totalWidth = suffixWidth;
        var len = mergedData.length;
        var lastIndex = len - 1;
        if (!len) {
          updateDisplayCount(0, null);
          return;
        }
        for (var i3 = 0; i3 < len; i3 += 1) {
          var currentItemWidth = getItemWidth(i3);
          if (fullySSR) {
            currentItemWidth = currentItemWidth || 0;
          }
          if (currentItemWidth === void 0) {
            updateDisplayCount(i3 - 1, void 0, true);
            break;
          }
          totalWidth += currentItemWidth;
          if (
            // Only one means `totalWidth` is the final width
            lastIndex === 0 && totalWidth <= mergedContainerWidth || // Last two width will be the final width
            i3 === lastIndex - 1 && totalWidth + getItemWidth(lastIndex) <= mergedContainerWidth
          ) {
            updateDisplayCount(lastIndex, null);
            break;
          } else if (totalWidth + mergedRestWidth > mergedContainerWidth) {
            updateDisplayCount(i3 - 1, totalWidth - currentItemWidth - suffixWidth + restWidth);
            break;
          }
        }
        if (suffix && getItemWidth(0) + suffixWidth > mergedContainerWidth) {
          setSuffixFixedStart(null);
        }
      }
    }, [mergedContainerWidth, itemWidths, restWidth, suffixWidth, getKey2, mergedData]);
    var displayRest = restReady && !!omittedItems.length;
    var suffixStyle = {};
    if (suffixFixedStart !== null && shouldResponsive) {
      suffixStyle = {
        position: "absolute",
        left: suffixFixedStart,
        top: 0
      };
    }
    var itemSharedProps = {
      prefixCls: itemPrefixCls,
      responsive: shouldResponsive,
      component: itemComponent,
      invalidate
    };
    var internalRenderItemNode = renderRawItem ? function(item, index3) {
      var key2 = getKey2(item, index3);
      return /* @__PURE__ */ React63.createElement(OverflowContext.Provider, {
        key: key2,
        value: _objectSpread2(_objectSpread2({}, itemSharedProps), {}, {
          order: index3,
          item,
          itemKey: key2,
          registerSize,
          display: index3 <= mergedDisplayCount
        })
      }, renderRawItem(item, index3));
    } : function(item, index3) {
      var key2 = getKey2(item, index3);
      return /* @__PURE__ */ React63.createElement(Item_default, _extends({}, itemSharedProps, {
        order: index3,
        key: key2,
        item,
        renderItem: mergedRenderItem,
        itemKey: key2,
        registerSize,
        display: index3 <= mergedDisplayCount
      }));
    };
    var restNode;
    var restContextProps = {
      order: displayRest ? mergedDisplayCount : Number.MAX_SAFE_INTEGER,
      className: "".concat(itemPrefixCls, "-rest"),
      registerSize: registerOverflowSize,
      display: displayRest
    };
    if (!renderRawRest) {
      var mergedRenderRest = renderRest || defaultRenderRest;
      restNode = /* @__PURE__ */ React63.createElement(Item_default, _extends({}, itemSharedProps, restContextProps), typeof mergedRenderRest === "function" ? mergedRenderRest(omittedItems) : mergedRenderRest);
    } else if (renderRawRest) {
      restNode = /* @__PURE__ */ React63.createElement(OverflowContext.Provider, {
        value: _objectSpread2(_objectSpread2({}, itemSharedProps), restContextProps)
      }, renderRawRest(omittedItems));
    }
    var overflowNode = /* @__PURE__ */ React63.createElement(Component27, _extends({
      className: (0, import_classnames10.default)(!invalidate && prefixCls, className),
      style: style2,
      ref
    }, restProps), mergedData.map(internalRenderItemNode), showRest ? restNode : null, suffix && /* @__PURE__ */ React63.createElement(Item_default, _extends({}, itemSharedProps, {
      responsive: isResponsive,
      responsiveDisabled: !shouldResponsive,
      order: mergedDisplayCount,
      className: "".concat(itemPrefixCls, "-suffix"),
      registerSize: registerSuffixSize,
      display: true,
      style: suffixStyle
    }), suffix));
    if (isResponsive) {
      overflowNode = /* @__PURE__ */ React63.createElement(es_default, {
        onResize: onOverflowResize,
        disabled: !shouldResponsive
      }, overflowNode);
    }
    return overflowNode;
  }
  var ForwardOverflow = /* @__PURE__ */ React63.forwardRef(Overflow);
  ForwardOverflow.displayName = "Overflow";
  ForwardOverflow.Item = RawItem_default;
  ForwardOverflow.RESPONSIVE = RESPONSIVE;
  ForwardOverflow.INVALIDATE = INVALIDATE;
  var Overflow_default = ForwardOverflow;

  // node_modules/rc-overflow/es/index.js
  var es_default5 = Overflow_default;

  // node_modules/rc-select/es/TransBtn.js
  var React64 = __toESM(require_react());
  var import_classnames11 = __toESM(require_classnames());
  var TransBtn = function TransBtn2(_ref) {
    var className = _ref.className, customizeIcon = _ref.customizeIcon, customizeIconProps = _ref.customizeIconProps, _onMouseDown = _ref.onMouseDown, onClick = _ref.onClick, children = _ref.children;
    var icon;
    if (typeof customizeIcon === "function") {
      icon = customizeIcon(customizeIconProps);
    } else {
      icon = customizeIcon;
    }
    return /* @__PURE__ */ React64.createElement("span", {
      className,
      onMouseDown: function onMouseDown(event) {
        event.preventDefault();
        if (_onMouseDown) {
          _onMouseDown(event);
        }
      },
      style: {
        userSelect: "none",
        WebkitUserSelect: "none"
      },
      unselectable: "on",
      onClick,
      "aria-hidden": true
    }, icon !== void 0 ? icon : /* @__PURE__ */ React64.createElement("span", {
      className: (0, import_classnames11.default)(className.split(/\s+/).map(function(cls) {
        return "".concat(cls, "-icon");
      }))
    }, children));
  };
  var TransBtn_default = TransBtn;

  // node_modules/rc-select/es/Selector/Input.js
  var React65 = __toESM(require_react());
  var import_classnames12 = __toESM(require_classnames());
  var Input = function Input2(_ref, ref) {
    var _inputNode2, _inputNode2$props;
    var prefixCls = _ref.prefixCls, id2 = _ref.id, inputElement = _ref.inputElement, disabled = _ref.disabled, tabIndex = _ref.tabIndex, autoFocus = _ref.autoFocus, autoComplete = _ref.autoComplete, editable = _ref.editable, activeDescendantId = _ref.activeDescendantId, value = _ref.value, maxLength = _ref.maxLength, _onKeyDown = _ref.onKeyDown, _onMouseDown = _ref.onMouseDown, _onChange = _ref.onChange, onPaste = _ref.onPaste, _onCompositionStart = _ref.onCompositionStart, _onCompositionEnd = _ref.onCompositionEnd, open = _ref.open, attrs = _ref.attrs;
    var inputNode = inputElement || /* @__PURE__ */ React65.createElement("input", null);
    var _inputNode = inputNode, originRef = _inputNode.ref, originProps = _inputNode.props;
    var onOriginKeyDown = originProps.onKeyDown, onOriginChange = originProps.onChange, onOriginMouseDown = originProps.onMouseDown, onOriginCompositionStart = originProps.onCompositionStart, onOriginCompositionEnd = originProps.onCompositionEnd, style2 = originProps.style;
    warning(!("maxLength" in inputNode.props), "Passing 'maxLength' to input element directly may not work because input in BaseSelect is controlled.");
    inputNode = /* @__PURE__ */ React65.cloneElement(inputNode, _objectSpread2(_objectSpread2(_objectSpread2({
      type: "search"
    }, originProps), {}, {
      // Override over origin props
      id: id2,
      ref: composeRef(ref, originRef),
      disabled,
      tabIndex,
      autoComplete: autoComplete || "off",
      autoFocus,
      className: (0, import_classnames12.default)("".concat(prefixCls, "-selection-search-input"), (_inputNode2 = inputNode) === null || _inputNode2 === void 0 ? void 0 : (_inputNode2$props = _inputNode2.props) === null || _inputNode2$props === void 0 ? void 0 : _inputNode2$props.className),
      role: "combobox",
      "aria-expanded": open,
      "aria-haspopup": "listbox",
      "aria-owns": "".concat(id2, "_list"),
      "aria-autocomplete": "list",
      "aria-controls": "".concat(id2, "_list"),
      "aria-activedescendant": activeDescendantId
    }, attrs), {}, {
      value: editable ? value : "",
      maxLength,
      readOnly: !editable,
      unselectable: !editable ? "on" : null,
      style: _objectSpread2(_objectSpread2({}, style2), {}, {
        opacity: editable ? null : 0
      }),
      onKeyDown: function onKeyDown2(event) {
        _onKeyDown(event);
        if (onOriginKeyDown) {
          onOriginKeyDown(event);
        }
      },
      onMouseDown: function onMouseDown(event) {
        _onMouseDown(event);
        if (onOriginMouseDown) {
          onOriginMouseDown(event);
        }
      },
      onChange: function onChange3(event) {
        _onChange(event);
        if (onOriginChange) {
          onOriginChange(event);
        }
      },
      onCompositionStart: function onCompositionStart(event) {
        _onCompositionStart(event);
        if (onOriginCompositionStart) {
          onOriginCompositionStart(event);
        }
      },
      onCompositionEnd: function onCompositionEnd(event) {
        _onCompositionEnd(event);
        if (onOriginCompositionEnd) {
          onOriginCompositionEnd(event);
        }
      },
      onPaste
    }));
    return inputNode;
  };
  var RefInput = /* @__PURE__ */ React65.forwardRef(Input);
  RefInput.displayName = "Input";
  var Input_default = RefInput;

  // node_modules/rc-select/es/hooks/useLayoutEffect.js
  var React66 = __toESM(require_react());

  // node_modules/rc-select/es/utils/commonUtil.js
  function toArray3(value) {
    if (Array.isArray(value)) {
      return value;
    }
    return value !== void 0 ? [value] : [];
  }
  var isClient = typeof window !== "undefined" && window.document && window.document.documentElement;
  var isBrowserClient = isClient;
  function hasValue2(value) {
    return value !== void 0 && value !== null;
  }
  function isTitleType(title) {
    return ["string", "number"].includes(_typeof(title));
  }
  function getTitle(item) {
    var title = void 0;
    if (item) {
      if (isTitleType(item.title)) {
        title = item.title.toString();
      } else if (isTitleType(item.label)) {
        title = item.label.toString();
      }
    }
    return title;
  }

  // node_modules/rc-select/es/hooks/useLayoutEffect.js
  function useLayoutEffect5(effect, deps) {
    if (isBrowserClient) {
      React66.useLayoutEffect(effect, deps);
    } else {
      React66.useEffect(effect, deps);
    }
  }

  // node_modules/rc-select/es/Selector/MultipleSelector.js
  function itemKey(value) {
    var _value$key;
    return (_value$key = value.key) !== null && _value$key !== void 0 ? _value$key : value.value;
  }
  var onPreventMouseDown = function onPreventMouseDown2(event) {
    event.preventDefault();
    event.stopPropagation();
  };
  var SelectSelector = function SelectSelector2(props) {
    var id2 = props.id, prefixCls = props.prefixCls, values = props.values, open = props.open, searchValue = props.searchValue, autoClearSearchValue = props.autoClearSearchValue, inputRef = props.inputRef, placeholder = props.placeholder, disabled = props.disabled, mode = props.mode, showSearch = props.showSearch, autoFocus = props.autoFocus, autoComplete = props.autoComplete, activeDescendantId = props.activeDescendantId, tabIndex = props.tabIndex, removeIcon = props.removeIcon, maxTagCount = props.maxTagCount, maxTagTextLength = props.maxTagTextLength, _props$maxTagPlacehol = props.maxTagPlaceholder, maxTagPlaceholder = _props$maxTagPlacehol === void 0 ? function(omittedValues) {
      return "+ ".concat(omittedValues.length, " ...");
    } : _props$maxTagPlacehol, tagRender = props.tagRender, onToggleOpen = props.onToggleOpen, onRemove = props.onRemove, onInputChange = props.onInputChange, onInputPaste = props.onInputPaste, onInputKeyDown = props.onInputKeyDown, onInputMouseDown = props.onInputMouseDown, onInputCompositionStart = props.onInputCompositionStart, onInputCompositionEnd = props.onInputCompositionEnd;
    var measureRef = React67.useRef(null);
    var _useState = (0, import_react14.useState)(0), _useState2 = _slicedToArray(_useState, 2), inputWidth = _useState2[0], setInputWidth = _useState2[1];
    var _useState3 = (0, import_react14.useState)(false), _useState4 = _slicedToArray(_useState3, 2), focused = _useState4[0], setFocused = _useState4[1];
    var selectionPrefixCls = "".concat(prefixCls, "-selection");
    var inputValue = open || mode === "multiple" && autoClearSearchValue === false || mode === "tags" ? searchValue : "";
    var inputEditable = mode === "tags" || mode === "multiple" && autoClearSearchValue === false || showSearch && (open || focused);
    useLayoutEffect5(function() {
      setInputWidth(measureRef.current.scrollWidth);
    }, [inputValue]);
    function defaultRenderSelector(item, content, itemDisabled, closable, onClose2) {
      return /* @__PURE__ */ React67.createElement("span", {
        className: (0, import_classnames13.default)("".concat(selectionPrefixCls, "-item"), _defineProperty({}, "".concat(selectionPrefixCls, "-item-disabled"), itemDisabled)),
        title: getTitle(item)
      }, /* @__PURE__ */ React67.createElement("span", {
        className: "".concat(selectionPrefixCls, "-item-content")
      }, content), closable && /* @__PURE__ */ React67.createElement(TransBtn_default, {
        className: "".concat(selectionPrefixCls, "-item-remove"),
        onMouseDown: onPreventMouseDown,
        onClick: onClose2,
        customizeIcon: removeIcon
      }, "\xD7"));
    }
    function customizeRenderSelector(value, content, itemDisabled, closable, onClose2) {
      var onMouseDown = function onMouseDown2(e3) {
        onPreventMouseDown(e3);
        onToggleOpen(!open);
      };
      return /* @__PURE__ */ React67.createElement("span", {
        onMouseDown
      }, tagRender({
        label: content,
        value,
        disabled: itemDisabled,
        closable,
        onClose: onClose2
      }));
    }
    function renderItem(valueItem) {
      var itemDisabled = valueItem.disabled, label = valueItem.label, value = valueItem.value;
      var closable = !disabled && !itemDisabled;
      var displayLabel = label;
      if (typeof maxTagTextLength === "number") {
        if (typeof label === "string" || typeof label === "number") {
          var strLabel = String(displayLabel);
          if (strLabel.length > maxTagTextLength) {
            displayLabel = "".concat(strLabel.slice(0, maxTagTextLength), "...");
          }
        }
      }
      var onClose2 = function onClose3(event) {
        if (event)
          event.stopPropagation();
        onRemove(valueItem);
      };
      return typeof tagRender === "function" ? customizeRenderSelector(value, displayLabel, itemDisabled, closable, onClose2) : defaultRenderSelector(valueItem, displayLabel, itemDisabled, closable, onClose2);
    }
    function renderRest(omittedValues) {
      var content = typeof maxTagPlaceholder === "function" ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;
      return defaultRenderSelector({
        title: content
      }, content, false);
    }
    var inputNode = /* @__PURE__ */ React67.createElement("div", {
      className: "".concat(selectionPrefixCls, "-search"),
      style: {
        width: inputWidth
      },
      onFocus: function onFocus2() {
        setFocused(true);
      },
      onBlur: function onBlur2() {
        setFocused(false);
      }
    }, /* @__PURE__ */ React67.createElement(Input_default, {
      ref: inputRef,
      open,
      prefixCls,
      id: id2,
      inputElement: null,
      disabled,
      autoFocus,
      autoComplete,
      editable: inputEditable,
      activeDescendantId,
      value: inputValue,
      onKeyDown: onInputKeyDown,
      onMouseDown: onInputMouseDown,
      onChange: onInputChange,
      onPaste: onInputPaste,
      onCompositionStart: onInputCompositionStart,
      onCompositionEnd: onInputCompositionEnd,
      tabIndex,
      attrs: pickAttrs(props, true)
    }), /* @__PURE__ */ React67.createElement("span", {
      ref: measureRef,
      className: "".concat(selectionPrefixCls, "-search-mirror"),
      "aria-hidden": true
    }, inputValue, "\xA0"));
    var selectionNode = /* @__PURE__ */ React67.createElement(es_default5, {
      prefixCls: "".concat(selectionPrefixCls, "-overflow"),
      data: values,
      renderItem,
      renderRest,
      suffix: inputNode,
      itemKey,
      maxCount: maxTagCount
    });
    return /* @__PURE__ */ React67.createElement(React67.Fragment, null, selectionNode, !values.length && !inputValue && /* @__PURE__ */ React67.createElement("span", {
      className: "".concat(selectionPrefixCls, "-placeholder")
    }, placeholder));
  };
  var MultipleSelector_default = SelectSelector;

  // node_modules/rc-select/es/Selector/SingleSelector.js
  var React68 = __toESM(require_react());
  var SingleSelector = function SingleSelector2(props) {
    var inputElement = props.inputElement, prefixCls = props.prefixCls, id2 = props.id, inputRef = props.inputRef, disabled = props.disabled, autoFocus = props.autoFocus, autoComplete = props.autoComplete, activeDescendantId = props.activeDescendantId, mode = props.mode, open = props.open, values = props.values, placeholder = props.placeholder, tabIndex = props.tabIndex, showSearch = props.showSearch, searchValue = props.searchValue, activeValue = props.activeValue, maxLength = props.maxLength, onInputKeyDown = props.onInputKeyDown, onInputMouseDown = props.onInputMouseDown, onInputChange = props.onInputChange, onInputPaste = props.onInputPaste, onInputCompositionStart = props.onInputCompositionStart, onInputCompositionEnd = props.onInputCompositionEnd;
    var _React$useState = React68.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), inputChanged = _React$useState2[0], setInputChanged = _React$useState2[1];
    var combobox = mode === "combobox";
    var inputEditable = combobox || showSearch;
    var item = values[0];
    var inputValue = searchValue || "";
    if (combobox && activeValue && !inputChanged) {
      inputValue = activeValue;
    }
    React68.useEffect(function() {
      if (combobox) {
        setInputChanged(false);
      }
    }, [combobox, activeValue]);
    var hasTextInput = mode !== "combobox" && !open && !showSearch ? false : !!inputValue;
    var title = getTitle(item);
    var renderPlaceholder = function renderPlaceholder2() {
      if (item) {
        return null;
      }
      var hiddenStyle = hasTextInput ? {
        visibility: "hidden"
      } : void 0;
      return /* @__PURE__ */ React68.createElement("span", {
        className: "".concat(prefixCls, "-selection-placeholder"),
        style: hiddenStyle
      }, placeholder);
    };
    return /* @__PURE__ */ React68.createElement(React68.Fragment, null, /* @__PURE__ */ React68.createElement("span", {
      className: "".concat(prefixCls, "-selection-search")
    }, /* @__PURE__ */ React68.createElement(Input_default, {
      ref: inputRef,
      prefixCls,
      id: id2,
      open,
      inputElement,
      disabled,
      autoFocus,
      autoComplete,
      editable: inputEditable,
      activeDescendantId,
      value: inputValue,
      onKeyDown: onInputKeyDown,
      onMouseDown: onInputMouseDown,
      onChange: function onChange3(e3) {
        setInputChanged(true);
        onInputChange(e3);
      },
      onPaste: onInputPaste,
      onCompositionStart: onInputCompositionStart,
      onCompositionEnd: onInputCompositionEnd,
      tabIndex,
      attrs: pickAttrs(props, true),
      maxLength: combobox ? maxLength : void 0
    })), !combobox && item ? /* @__PURE__ */ React68.createElement("span", {
      className: "".concat(prefixCls, "-selection-item"),
      title,
      style: hasTextInput ? {
        visibility: "hidden"
      } : void 0
    }, item.label) : null, renderPlaceholder());
  };
  var SingleSelector_default = SingleSelector;

  // node_modules/rc-select/es/utils/keyUtil.js
  function isValidateOpenKey(currentKeyCode) {
    return ![
      // System function button
      KeyCode_default.ESC,
      KeyCode_default.SHIFT,
      KeyCode_default.BACKSPACE,
      KeyCode_default.TAB,
      KeyCode_default.WIN_KEY,
      KeyCode_default.ALT,
      KeyCode_default.META,
      KeyCode_default.WIN_KEY_RIGHT,
      KeyCode_default.CTRL,
      KeyCode_default.SEMICOLON,
      KeyCode_default.EQUALS,
      KeyCode_default.CAPS_LOCK,
      KeyCode_default.CONTEXT_MENU,
      // F1-F12
      KeyCode_default.F1,
      KeyCode_default.F2,
      KeyCode_default.F3,
      KeyCode_default.F4,
      KeyCode_default.F5,
      KeyCode_default.F6,
      KeyCode_default.F7,
      KeyCode_default.F8,
      KeyCode_default.F9,
      KeyCode_default.F10,
      KeyCode_default.F11,
      KeyCode_default.F12
    ].includes(currentKeyCode);
  }

  // node_modules/rc-select/es/Selector/index.js
  var Selector = function Selector2(props, ref) {
    var inputRef = (0, import_react15.useRef)(null);
    var compositionStatusRef = (0, import_react15.useRef)(false);
    var prefixCls = props.prefixCls, open = props.open, mode = props.mode, showSearch = props.showSearch, tokenWithEnter = props.tokenWithEnter, autoClearSearchValue = props.autoClearSearchValue, onSearch = props.onSearch, onSearchSubmit = props.onSearchSubmit, onToggleOpen = props.onToggleOpen, onInputKeyDown = props.onInputKeyDown, domRef = props.domRef;
    React69.useImperativeHandle(ref, function() {
      return {
        focus: function focus() {
          inputRef.current.focus();
        },
        blur: function blur() {
          inputRef.current.blur();
        }
      };
    });
    var _useLock = useLock(0), _useLock2 = _slicedToArray(_useLock, 2), getInputMouseDown = _useLock2[0], setInputMouseDown = _useLock2[1];
    var onInternalInputKeyDown = function onInternalInputKeyDown2(event) {
      var which = event.which;
      if (which === KeyCode_default.UP || which === KeyCode_default.DOWN) {
        event.preventDefault();
      }
      if (onInputKeyDown) {
        onInputKeyDown(event);
      }
      if (which === KeyCode_default.ENTER && mode === "tags" && !compositionStatusRef.current && !open) {
        onSearchSubmit === null || onSearchSubmit === void 0 ? void 0 : onSearchSubmit(event.target.value);
      }
      if (isValidateOpenKey(which)) {
        onToggleOpen(true);
      }
    };
    var onInternalInputMouseDown = function onInternalInputMouseDown2() {
      setInputMouseDown(true);
    };
    var pastedTextRef = (0, import_react15.useRef)(null);
    var triggerOnSearch = function triggerOnSearch2(value) {
      if (onSearch(value, true, compositionStatusRef.current) !== false) {
        onToggleOpen(true);
      }
    };
    var onInputCompositionStart = function onInputCompositionStart2() {
      compositionStatusRef.current = true;
    };
    var onInputCompositionEnd = function onInputCompositionEnd2(e3) {
      compositionStatusRef.current = false;
      if (mode !== "combobox") {
        triggerOnSearch(e3.target.value);
      }
    };
    var onInputChange = function onInputChange2(event) {
      var value = event.target.value;
      if (tokenWithEnter && pastedTextRef.current && /[\r\n]/.test(pastedTextRef.current)) {
        var replacedText = pastedTextRef.current.replace(/[\r\n]+$/, "").replace(/\r\n/g, " ").replace(/[\r\n]/g, " ");
        value = value.replace(replacedText, pastedTextRef.current);
      }
      pastedTextRef.current = null;
      triggerOnSearch(value);
    };
    var onInputPaste = function onInputPaste2(e3) {
      var clipboardData = e3.clipboardData;
      var value = clipboardData.getData("text");
      pastedTextRef.current = value;
    };
    var onClick = function onClick2(_ref) {
      var target = _ref.target;
      if (target !== inputRef.current) {
        var isIE = document.body.style.msTouchAction !== void 0;
        if (isIE) {
          setTimeout(function() {
            inputRef.current.focus();
          });
        } else {
          inputRef.current.focus();
        }
      }
    };
    var onMouseDown = function onMouseDown2(event) {
      var inputMouseDown = getInputMouseDown();
      if (event.target !== inputRef.current && !inputMouseDown && mode !== "combobox") {
        event.preventDefault();
      }
      if (mode !== "combobox" && (!showSearch || !inputMouseDown) || !open) {
        if (open && autoClearSearchValue !== false) {
          onSearch("", true, false);
        }
        onToggleOpen();
      }
    };
    var sharedProps = {
      inputRef,
      onInputKeyDown: onInternalInputKeyDown,
      onInputMouseDown: onInternalInputMouseDown,
      onInputChange,
      onInputPaste,
      onInputCompositionStart,
      onInputCompositionEnd
    };
    var selectNode = mode === "multiple" || mode === "tags" ? /* @__PURE__ */ React69.createElement(MultipleSelector_default, _extends({}, props, sharedProps)) : /* @__PURE__ */ React69.createElement(SingleSelector_default, _extends({}, props, sharedProps));
    return /* @__PURE__ */ React69.createElement("div", {
      ref: domRef,
      className: "".concat(prefixCls, "-selector"),
      onClick,
      onMouseDown
    }, selectNode);
  };
  var ForwardSelector = /* @__PURE__ */ React69.forwardRef(Selector);
  ForwardSelector.displayName = "Selector";
  var Selector_default = ForwardSelector;

  // node_modules/rc-select/es/SelectTrigger.js
  var React79 = __toESM(require_react());

  // node_modules/rc-trigger/es/index.js
  var React78 = __toESM(require_react());
  var import_react_dom6 = __toESM(require_react_dom());

  // node_modules/rc-util/es/Portal.js
  var import_react16 = __toESM(require_react());
  var import_react_dom5 = __toESM(require_react_dom());
  var Portal = /* @__PURE__ */ (0, import_react16.forwardRef)(function(props, ref) {
    var didUpdate = props.didUpdate, getContainer3 = props.getContainer, children = props.children;
    var parentRef = (0, import_react16.useRef)();
    var containerRef = (0, import_react16.useRef)();
    (0, import_react16.useImperativeHandle)(ref, function() {
      return {};
    });
    var initRef = (0, import_react16.useRef)(false);
    if (!initRef.current && canUseDom()) {
      containerRef.current = getContainer3();
      parentRef.current = containerRef.current.parentNode;
      initRef.current = true;
    }
    (0, import_react16.useEffect)(function() {
      didUpdate === null || didUpdate === void 0 ? void 0 : didUpdate(props);
    });
    (0, import_react16.useEffect)(function() {
      if (containerRef.current.parentNode === null && parentRef.current !== null) {
        parentRef.current.appendChild(containerRef.current);
      }
      return function() {
        var _containerRef$current, _containerRef$current2;
        (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : (_containerRef$current2 = _containerRef$current.parentNode) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.removeChild(containerRef.current);
      };
    }, []);
    return containerRef.current ? /* @__PURE__ */ import_react_dom5.default.createPortal(children, containerRef.current) : null;
  });
  var Portal_default = Portal;

  // node_modules/rc-trigger/es/index.js
  var import_classnames17 = __toESM(require_classnames());

  // node_modules/rc-trigger/es/utils/alignUtil.js
  function isPointsEq(a1, a2, isAlignPoint) {
    if (isAlignPoint) {
      return a1[0] === a2[0];
    }
    return a1[0] === a2[0] && a1[1] === a2[1];
  }
  function getAlignFromPlacement(builtinPlacements, placementStr, align) {
    var baseAlign = builtinPlacements[placementStr] || {};
    return _objectSpread2(_objectSpread2({}, baseAlign), align);
  }
  function getAlignPopupClassName(builtinPlacements, prefixCls, align, isAlignPoint) {
    var points = align.points;
    var placements4 = Object.keys(builtinPlacements);
    for (var i3 = 0; i3 < placements4.length; i3 += 1) {
      var placement = placements4[i3];
      if (isPointsEq(builtinPlacements[placement].points, points, isAlignPoint)) {
        return "".concat(prefixCls, "-placement-").concat(placement);
      }
    }
    return "";
  }

  // node_modules/rc-trigger/es/Popup/index.js
  var React76 = __toESM(require_react());
  var import_react21 = __toESM(require_react());

  // node_modules/rc-trigger/es/Popup/Mask.js
  var React70 = __toESM(require_react());
  var import_classnames14 = __toESM(require_classnames());

  // node_modules/rc-trigger/es/utils/legacyUtil.js
  function getMotion(_ref) {
    var prefixCls = _ref.prefixCls, motion2 = _ref.motion, animation = _ref.animation, transitionName2 = _ref.transitionName;
    if (motion2) {
      return motion2;
    }
    if (animation) {
      return {
        motionName: "".concat(prefixCls, "-").concat(animation)
      };
    }
    if (transitionName2) {
      return {
        motionName: transitionName2
      };
    }
    return null;
  }

  // node_modules/rc-trigger/es/Popup/Mask.js
  function Mask(props) {
    var prefixCls = props.prefixCls, visible = props.visible, zIndex = props.zIndex, mask = props.mask, maskMotion = props.maskMotion, maskAnimation = props.maskAnimation, maskTransitionName = props.maskTransitionName;
    if (!mask) {
      return null;
    }
    var motion2 = {};
    if (maskMotion || maskTransitionName || maskAnimation) {
      motion2 = _objectSpread2({
        motionAppear: true
      }, getMotion({
        motion: maskMotion,
        prefixCls,
        transitionName: maskTransitionName,
        animation: maskAnimation
      }));
    }
    return /* @__PURE__ */ React70.createElement(es_default3, _extends({}, motion2, {
      visible,
      removeOnLeave: true
    }), function(_ref) {
      var className = _ref.className;
      return /* @__PURE__ */ React70.createElement("div", {
        style: {
          zIndex
        },
        className: (0, import_classnames14.default)("".concat(prefixCls, "-mask"), className)
      });
    });
  }

  // node_modules/rc-trigger/es/Popup/PopupInner.js
  var React74 = __toESM(require_react());
  var import_react20 = __toESM(require_react());

  // node_modules/dom-align/dist-web/index.js
  function ownKeys2(object4, enumerableOnly) {
    var keys = Object.keys(object4);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object4);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread22(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = null != arguments[i3] ? arguments[i3] : {};
      i3 % 2 ? ownKeys2(Object(source), true).forEach(function(key2) {
        _defineProperty2(target, key2, source[key2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
      });
    }
    return target;
  }
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof2(obj);
  }
  function _defineProperty2(obj, key2, value) {
    if (key2 in obj) {
      Object.defineProperty(obj, key2, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key2] = value;
    }
    return obj;
  }
  var vendorPrefix;
  var jsCssMap = {
    Webkit: "-webkit-",
    Moz: "-moz-",
    // IE did it wrong again ...
    ms: "-ms-",
    O: "-o-"
  };
  function getVendorPrefix() {
    if (vendorPrefix !== void 0) {
      return vendorPrefix;
    }
    vendorPrefix = "";
    var style2 = document.createElement("p").style;
    var testProp = "Transform";
    for (var key2 in jsCssMap) {
      if (key2 + testProp in style2) {
        vendorPrefix = key2;
      }
    }
    return vendorPrefix;
  }
  function getTransitionName2() {
    return getVendorPrefix() ? "".concat(getVendorPrefix(), "TransitionProperty") : "transitionProperty";
  }
  function getTransformName() {
    return getVendorPrefix() ? "".concat(getVendorPrefix(), "Transform") : "transform";
  }
  function setTransitionProperty(node, value) {
    var name5 = getTransitionName2();
    if (name5) {
      node.style[name5] = value;
      if (name5 !== "transitionProperty") {
        node.style.transitionProperty = value;
      }
    }
  }
  function setTransform(node, value) {
    var name5 = getTransformName();
    if (name5) {
      node.style[name5] = value;
      if (name5 !== "transform") {
        node.style.transform = value;
      }
    }
  }
  function getTransitionProperty(node) {
    return node.style.transitionProperty || node.style[getTransitionName2()];
  }
  function getTransformXY(node) {
    var style2 = window.getComputedStyle(node, null);
    var transform2 = style2.getPropertyValue("transform") || style2.getPropertyValue(getTransformName());
    if (transform2 && transform2 !== "none") {
      var matrix = transform2.replace(/[^0-9\-.,]/g, "").split(",");
      return {
        x: parseFloat(matrix[12] || matrix[4], 0),
        y: parseFloat(matrix[13] || matrix[5], 0)
      };
    }
    return {
      x: 0,
      y: 0
    };
  }
  var matrix2d = /matrix\((.*)\)/;
  var matrix3d = /matrix3d\((.*)\)/;
  function setTransformXY(node, xy) {
    var style2 = window.getComputedStyle(node, null);
    var transform2 = style2.getPropertyValue("transform") || style2.getPropertyValue(getTransformName());
    if (transform2 && transform2 !== "none") {
      var arr;
      var match2d = transform2.match(matrix2d);
      if (match2d) {
        match2d = match2d[1];
        arr = match2d.split(",").map(function(item) {
          return parseFloat(item, 10);
        });
        arr[4] = xy.x;
        arr[5] = xy.y;
        setTransform(node, "matrix(".concat(arr.join(","), ")"));
      } else {
        var match3d = transform2.match(matrix3d)[1];
        arr = match3d.split(",").map(function(item) {
          return parseFloat(item, 10);
        });
        arr[12] = xy.x;
        arr[13] = xy.y;
        setTransform(node, "matrix3d(".concat(arr.join(","), ")"));
      }
    } else {
      setTransform(node, "translateX(".concat(xy.x, "px) translateY(").concat(xy.y, "px) translateZ(0)"));
    }
  }
  var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;
  var getComputedStyleX;
  function forceRelayout(elem) {
    var originalStyle = elem.style.display;
    elem.style.display = "none";
    elem.offsetHeight;
    elem.style.display = originalStyle;
  }
  function css(el, name5, v2) {
    var value = v2;
    if (_typeof2(name5) === "object") {
      for (var i3 in name5) {
        if (name5.hasOwnProperty(i3)) {
          css(el, i3, name5[i3]);
        }
      }
      return void 0;
    }
    if (typeof value !== "undefined") {
      if (typeof value === "number") {
        value = "".concat(value, "px");
      }
      el.style[name5] = value;
      return void 0;
    }
    return getComputedStyleX(el, name5);
  }
  function getClientPosition(elem) {
    var box;
    var x;
    var y2;
    var doc = elem.ownerDocument;
    var body = doc.body;
    var docElem = doc && doc.documentElement;
    box = elem.getBoundingClientRect();
    x = Math.floor(box.left);
    y2 = Math.floor(box.top);
    x -= docElem.clientLeft || body.clientLeft || 0;
    y2 -= docElem.clientTop || body.clientTop || 0;
    return {
      left: x,
      top: y2
    };
  }
  function getScroll(w2, top) {
    var ret = w2["page".concat(top ? "Y" : "X", "Offset")];
    var method4 = "scroll".concat(top ? "Top" : "Left");
    if (typeof ret !== "number") {
      var d2 = w2.document;
      ret = d2.documentElement[method4];
      if (typeof ret !== "number") {
        ret = d2.body[method4];
      }
    }
    return ret;
  }
  function getScrollLeft(w2) {
    return getScroll(w2);
  }
  function getScrollTop(w2) {
    return getScroll(w2, true);
  }
  function getOffset(el) {
    var pos = getClientPosition(el);
    var doc = el.ownerDocument;
    var w2 = doc.defaultView || doc.parentWindow;
    pos.left += getScrollLeft(w2);
    pos.top += getScrollTop(w2);
    return pos;
  }
  function isWindow(obj) {
    return obj !== null && obj !== void 0 && obj == obj.window;
  }
  function getDocument(node) {
    if (isWindow(node)) {
      return node.document;
    }
    if (node.nodeType === 9) {
      return node;
    }
    return node.ownerDocument;
  }
  function _getComputedStyle(elem, name5, cs) {
    var computedStyle = cs;
    var val = "";
    var d2 = getDocument(elem);
    computedStyle = computedStyle || d2.defaultView.getComputedStyle(elem, null);
    if (computedStyle) {
      val = computedStyle.getPropertyValue(name5) || computedStyle[name5];
    }
    return val;
  }
  var _RE_NUM_NO_PX = new RegExp("^(".concat(RE_NUM, ")(?!px)[a-z%]+$"), "i");
  var RE_POS = /^(top|right|bottom|left)$/;
  var CURRENT_STYLE = "currentStyle";
  var RUNTIME_STYLE = "runtimeStyle";
  var LEFT = "left";
  var PX = "px";
  function _getComputedStyleIE(elem, name5) {
    var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name5];
    if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name5)) {
      var style2 = elem.style;
      var left = style2[LEFT];
      var rsLeft = elem[RUNTIME_STYLE][LEFT];
      elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];
      style2[LEFT] = name5 === "fontSize" ? "1em" : ret || 0;
      ret = style2.pixelLeft + PX;
      style2[LEFT] = left;
      elem[RUNTIME_STYLE][LEFT] = rsLeft;
    }
    return ret === "" ? "auto" : ret;
  }
  if (typeof window !== "undefined") {
    getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
  }
  function getOffsetDirection(dir, option) {
    if (dir === "left") {
      return option.useCssRight ? "right" : dir;
    }
    return option.useCssBottom ? "bottom" : dir;
  }
  function oppositeOffsetDirection(dir) {
    if (dir === "left") {
      return "right";
    } else if (dir === "right") {
      return "left";
    } else if (dir === "top") {
      return "bottom";
    } else if (dir === "bottom") {
      return "top";
    }
  }
  function setLeftTop(elem, offset3, option) {
    if (css(elem, "position") === "static") {
      elem.style.position = "relative";
    }
    var presetH = -999;
    var presetV = -999;
    var horizontalProperty = getOffsetDirection("left", option);
    var verticalProperty = getOffsetDirection("top", option);
    var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
    var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);
    if (horizontalProperty !== "left") {
      presetH = 999;
    }
    if (verticalProperty !== "top") {
      presetV = 999;
    }
    var originalTransition = "";
    var originalOffset = getOffset(elem);
    if ("left" in offset3 || "top" in offset3) {
      originalTransition = getTransitionProperty(elem) || "";
      setTransitionProperty(elem, "none");
    }
    if ("left" in offset3) {
      elem.style[oppositeHorizontalProperty] = "";
      elem.style[horizontalProperty] = "".concat(presetH, "px");
    }
    if ("top" in offset3) {
      elem.style[oppositeVerticalProperty] = "";
      elem.style[verticalProperty] = "".concat(presetV, "px");
    }
    forceRelayout(elem);
    var old = getOffset(elem);
    var originalStyle = {};
    for (var key2 in offset3) {
      if (offset3.hasOwnProperty(key2)) {
        var dir = getOffsetDirection(key2, option);
        var preset = key2 === "left" ? presetH : presetV;
        var off = originalOffset[key2] - old[key2];
        if (dir === key2) {
          originalStyle[dir] = preset + off;
        } else {
          originalStyle[dir] = preset - off;
        }
      }
    }
    css(elem, originalStyle);
    forceRelayout(elem);
    if ("left" in offset3 || "top" in offset3) {
      setTransitionProperty(elem, originalTransition);
    }
    var ret = {};
    for (var _key in offset3) {
      if (offset3.hasOwnProperty(_key)) {
        var _dir = getOffsetDirection(_key, option);
        var _off = offset3[_key] - originalOffset[_key];
        if (_key === _dir) {
          ret[_dir] = originalStyle[_dir] + _off;
        } else {
          ret[_dir] = originalStyle[_dir] - _off;
        }
      }
    }
    css(elem, ret);
  }
  function setTransform$1(elem, offset3) {
    var originalOffset = getOffset(elem);
    var originalXY = getTransformXY(elem);
    var resultXY = {
      x: originalXY.x,
      y: originalXY.y
    };
    if ("left" in offset3) {
      resultXY.x = originalXY.x + offset3.left - originalOffset.left;
    }
    if ("top" in offset3) {
      resultXY.y = originalXY.y + offset3.top - originalOffset.top;
    }
    setTransformXY(elem, resultXY);
  }
  function setOffset(elem, offset3, option) {
    if (option.ignoreShake) {
      var oriOffset = getOffset(elem);
      var oLeft = oriOffset.left.toFixed(0);
      var oTop = oriOffset.top.toFixed(0);
      var tLeft = offset3.left.toFixed(0);
      var tTop = offset3.top.toFixed(0);
      if (oLeft === tLeft && oTop === tTop) {
        return;
      }
    }
    if (option.useCssRight || option.useCssBottom) {
      setLeftTop(elem, offset3, option);
    } else if (option.useCssTransform && getTransformName() in document.body.style) {
      setTransform$1(elem, offset3);
    } else {
      setLeftTop(elem, offset3, option);
    }
  }
  function each(arr, fn) {
    for (var i3 = 0; i3 < arr.length; i3++) {
      fn(arr[i3]);
    }
  }
  function isBorderBoxFn(elem) {
    return getComputedStyleX(elem, "boxSizing") === "border-box";
  }
  var BOX_MODELS = ["margin", "border", "padding"];
  var CONTENT_INDEX = -1;
  var PADDING_INDEX = 2;
  var BORDER_INDEX = 1;
  var MARGIN_INDEX = 0;
  function swap(elem, options, callback) {
    var old = {};
    var style2 = elem.style;
    var name5;
    for (name5 in options) {
      if (options.hasOwnProperty(name5)) {
        old[name5] = style2[name5];
        style2[name5] = options[name5];
      }
    }
    callback.call(elem);
    for (name5 in options) {
      if (options.hasOwnProperty(name5)) {
        style2[name5] = old[name5];
      }
    }
  }
  function getPBMWidth(elem, props, which) {
    var value = 0;
    var prop;
    var j;
    var i3;
    for (j = 0; j < props.length; j++) {
      prop = props[j];
      if (prop) {
        for (i3 = 0; i3 < which.length; i3++) {
          var cssProp = void 0;
          if (prop === "border") {
            cssProp = "".concat(prop).concat(which[i3], "Width");
          } else {
            cssProp = prop + which[i3];
          }
          value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
        }
      }
    }
    return value;
  }
  var domUtils = {
    getParent: function getParent(element) {
      var parent = element;
      do {
        if (parent.nodeType === 11 && parent.host) {
          parent = parent.host;
        } else {
          parent = parent.parentNode;
        }
      } while (parent && parent.nodeType !== 1 && parent.nodeType !== 9);
      return parent;
    }
  };
  each(["Width", "Height"], function(name5) {
    domUtils["doc".concat(name5)] = function(refWin) {
      var d2 = refWin.document;
      return Math.max(
        // firefox chrome documentElement.scrollHeight< body.scrollHeight
        // ie standard mode : documentElement.scrollHeight> body.scrollHeight
        d2.documentElement["scroll".concat(name5)],
        // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
        d2.body["scroll".concat(name5)],
        domUtils["viewport".concat(name5)](d2)
      );
    };
    domUtils["viewport".concat(name5)] = function(win) {
      var prop = "client".concat(name5);
      var doc = win.document;
      var body = doc.body;
      var documentElement = doc.documentElement;
      var documentElementProp = documentElement[prop];
      return doc.compatMode === "CSS1Compat" && documentElementProp || body && body[prop] || documentElementProp;
    };
  });
  function getWH(elem, name5, ex) {
    var extra = ex;
    if (isWindow(elem)) {
      return name5 === "width" ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
    } else if (elem.nodeType === 9) {
      return name5 === "width" ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
    }
    var which = name5 === "width" ? ["Left", "Right"] : ["Top", "Bottom"];
    var borderBoxValue = name5 === "width" ? Math.floor(elem.getBoundingClientRect().width) : Math.floor(elem.getBoundingClientRect().height);
    var isBorderBox = isBorderBoxFn(elem);
    var cssBoxValue = 0;
    if (borderBoxValue === null || borderBoxValue === void 0 || borderBoxValue <= 0) {
      borderBoxValue = void 0;
      cssBoxValue = getComputedStyleX(elem, name5);
      if (cssBoxValue === null || cssBoxValue === void 0 || Number(cssBoxValue) < 0) {
        cssBoxValue = elem.style[name5] || 0;
      }
      cssBoxValue = Math.floor(parseFloat(cssBoxValue)) || 0;
    }
    if (extra === void 0) {
      extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
    }
    var borderBoxValueOrIsBorderBox = borderBoxValue !== void 0 || isBorderBox;
    var val = borderBoxValue || cssBoxValue;
    if (extra === CONTENT_INDEX) {
      if (borderBoxValueOrIsBorderBox) {
        return val - getPBMWidth(elem, ["border", "padding"], which);
      }
      return cssBoxValue;
    } else if (borderBoxValueOrIsBorderBox) {
      if (extra === BORDER_INDEX) {
        return val;
      }
      return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ["border"], which) : getPBMWidth(elem, ["margin"], which));
    }
    return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which);
  }
  var cssShow = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  };
  function getWHIgnoreDisplay() {
    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
      args[_key2] = arguments[_key2];
    }
    var val;
    var elem = args[0];
    if (elem.offsetWidth !== 0) {
      val = getWH.apply(void 0, args);
    } else {
      swap(elem, cssShow, function() {
        val = getWH.apply(void 0, args);
      });
    }
    return val;
  }
  each(["width", "height"], function(name5) {
    var first = name5.charAt(0).toUpperCase() + name5.slice(1);
    domUtils["outer".concat(first)] = function(el, includeMargin) {
      return el && getWHIgnoreDisplay(el, name5, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
    };
    var which = name5 === "width" ? ["Left", "Right"] : ["Top", "Bottom"];
    domUtils[name5] = function(elem, v2) {
      var val = v2;
      if (val !== void 0) {
        if (elem) {
          var isBorderBox = isBorderBoxFn(elem);
          if (isBorderBox) {
            val += getPBMWidth(elem, ["padding", "border"], which);
          }
          return css(elem, name5, val);
        }
        return void 0;
      }
      return elem && getWHIgnoreDisplay(elem, name5, CONTENT_INDEX);
    };
  });
  function mix2(to, from3) {
    for (var i3 in from3) {
      if (from3.hasOwnProperty(i3)) {
        to[i3] = from3[i3];
      }
    }
    return to;
  }
  var utils = {
    getWindow: function getWindow(node) {
      if (node && node.document && node.setTimeout) {
        return node;
      }
      var doc = node.ownerDocument || node;
      return doc.defaultView || doc.parentWindow;
    },
    getDocument,
    offset: function offset(el, value, option) {
      if (typeof value !== "undefined") {
        setOffset(el, value, option || {});
      } else {
        return getOffset(el);
      }
    },
    isWindow,
    each,
    css,
    clone: function clone(obj) {
      var i3;
      var ret = {};
      for (i3 in obj) {
        if (obj.hasOwnProperty(i3)) {
          ret[i3] = obj[i3];
        }
      }
      var overflow = obj.overflow;
      if (overflow) {
        for (i3 in obj) {
          if (obj.hasOwnProperty(i3)) {
            ret.overflow[i3] = obj.overflow[i3];
          }
        }
      }
      return ret;
    },
    mix: mix2,
    getWindowScrollLeft: function getWindowScrollLeft(w2) {
      return getScrollLeft(w2);
    },
    getWindowScrollTop: function getWindowScrollTop(w2) {
      return getScrollTop(w2);
    },
    merge: function merge() {
      var ret = {};
      for (var i3 = 0; i3 < arguments.length; i3++) {
        utils.mix(ret, i3 < 0 || arguments.length <= i3 ? void 0 : arguments[i3]);
      }
      return ret;
    },
    viewportWidth: 0,
    viewportHeight: 0
  };
  mix2(utils, domUtils);
  var getParent2 = utils.getParent;
  function getOffsetParent(element) {
    if (utils.isWindow(element) || element.nodeType === 9) {
      return null;
    }
    var doc = utils.getDocument(element);
    var body = doc.body;
    var parent;
    var positionStyle = utils.css(element, "position");
    var skipStatic = positionStyle === "fixed" || positionStyle === "absolute";
    if (!skipStatic) {
      return element.nodeName.toLowerCase() === "html" ? null : getParent2(element);
    }
    for (parent = getParent2(element); parent && parent !== body && parent.nodeType !== 9; parent = getParent2(parent)) {
      positionStyle = utils.css(parent, "position");
      if (positionStyle !== "static") {
        return parent;
      }
    }
    return null;
  }
  var getParent$1 = utils.getParent;
  function isAncestorFixed(element) {
    if (utils.isWindow(element) || element.nodeType === 9) {
      return false;
    }
    var doc = utils.getDocument(element);
    var body = doc.body;
    var parent = null;
    for (
      parent = getParent$1(element);
      // 修复元素位于 document.documentElement 下导致崩溃问题
      parent && parent !== body && parent !== doc;
      parent = getParent$1(parent)
    ) {
      var positionStyle = utils.css(parent, "position");
      if (positionStyle === "fixed") {
        return true;
      }
    }
    return false;
  }
  function getVisibleRectForElement(element, alwaysByViewport) {
    var visibleRect = {
      left: 0,
      right: Infinity,
      top: 0,
      bottom: Infinity
    };
    var el = getOffsetParent(element);
    var doc = utils.getDocument(element);
    var win = doc.defaultView || doc.parentWindow;
    var body = doc.body;
    var documentElement = doc.documentElement;
    while (el) {
      if ((navigator.userAgent.indexOf("MSIE") === -1 || el.clientWidth !== 0) && // body may have overflow set on it, yet we still get the entire
      // viewport. In some browsers, el.offsetParent may be
      // document.documentElement, so check for that too.
      el !== body && el !== documentElement && utils.css(el, "overflow") !== "visible") {
        var pos = utils.offset(el);
        pos.left += el.clientLeft;
        pos.top += el.clientTop;
        visibleRect.top = Math.max(visibleRect.top, pos.top);
        visibleRect.right = Math.min(
          visibleRect.right,
          // consider area without scrollBar
          pos.left + el.clientWidth
        );
        visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
        visibleRect.left = Math.max(visibleRect.left, pos.left);
      } else if (el === body || el === documentElement) {
        break;
      }
      el = getOffsetParent(el);
    }
    var originalPosition = null;
    if (!utils.isWindow(element) && element.nodeType !== 9) {
      originalPosition = element.style.position;
      var position = utils.css(element, "position");
      if (position === "absolute") {
        element.style.position = "fixed";
      }
    }
    var scrollX = utils.getWindowScrollLeft(win);
    var scrollY = utils.getWindowScrollTop(win);
    var viewportWidth = utils.viewportWidth(win);
    var viewportHeight = utils.viewportHeight(win);
    var documentWidth = documentElement.scrollWidth;
    var documentHeight = documentElement.scrollHeight;
    var bodyStyle = window.getComputedStyle(body);
    if (bodyStyle.overflowX === "hidden") {
      documentWidth = win.innerWidth;
    }
    if (bodyStyle.overflowY === "hidden") {
      documentHeight = win.innerHeight;
    }
    if (element.style) {
      element.style.position = originalPosition;
    }
    if (alwaysByViewport || isAncestorFixed(element)) {
      visibleRect.left = Math.max(visibleRect.left, scrollX);
      visibleRect.top = Math.max(visibleRect.top, scrollY);
      visibleRect.right = Math.min(visibleRect.right, scrollX + viewportWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + viewportHeight);
    } else {
      var maxVisibleWidth = Math.max(documentWidth, scrollX + viewportWidth);
      visibleRect.right = Math.min(visibleRect.right, maxVisibleWidth);
      var maxVisibleHeight = Math.max(documentHeight, scrollY + viewportHeight);
      visibleRect.bottom = Math.min(visibleRect.bottom, maxVisibleHeight);
    }
    return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
  }
  function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
    var pos = utils.clone(elFuturePos);
    var size = {
      width: elRegion.width,
      height: elRegion.height
    };
    if (overflow.adjustX && pos.left < visibleRect.left) {
      pos.left = visibleRect.left;
    }
    if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {
      size.width -= pos.left + size.width - visibleRect.right;
    }
    if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
      pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
    }
    if (overflow.adjustY && pos.top < visibleRect.top) {
      pos.top = visibleRect.top;
    }
    if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {
      size.height -= pos.top + size.height - visibleRect.bottom;
    }
    if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
      pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
    }
    return utils.mix(pos, size);
  }
  function getRegion(node) {
    var offset3;
    var w2;
    var h2;
    if (!utils.isWindow(node) && node.nodeType !== 9) {
      offset3 = utils.offset(node);
      w2 = utils.outerWidth(node);
      h2 = utils.outerHeight(node);
    } else {
      var win = utils.getWindow(node);
      offset3 = {
        left: utils.getWindowScrollLeft(win),
        top: utils.getWindowScrollTop(win)
      };
      w2 = utils.viewportWidth(win);
      h2 = utils.viewportHeight(win);
    }
    offset3.width = w2;
    offset3.height = h2;
    return offset3;
  }
  function getAlignOffset(region, align) {
    var V = align.charAt(0);
    var H = align.charAt(1);
    var w2 = region.width;
    var h2 = region.height;
    var x = region.left;
    var y2 = region.top;
    if (V === "c") {
      y2 += h2 / 2;
    } else if (V === "b") {
      y2 += h2;
    }
    if (H === "c") {
      x += w2 / 2;
    } else if (H === "r") {
      x += w2;
    }
    return {
      left: x,
      top: y2
    };
  }
  function getElFuturePos(elRegion, refNodeRegion, points, offset3, targetOffset4) {
    var p1 = getAlignOffset(refNodeRegion, points[1]);
    var p2 = getAlignOffset(elRegion, points[0]);
    var diff = [p2.left - p1.left, p2.top - p1.top];
    return {
      left: Math.round(elRegion.left - diff[0] + offset3[0] - targetOffset4[0]),
      top: Math.round(elRegion.top - diff[1] + offset3[1] - targetOffset4[1])
    };
  }
  function isFailX(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
  }
  function isFailY(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
  }
  function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
  }
  function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
  }
  function flip(points, reg, map3) {
    var ret = [];
    utils.each(points, function(p2) {
      ret.push(p2.replace(reg, function(m2) {
        return map3[m2];
      }));
    });
    return ret;
  }
  function flipOffset(offset3, index3) {
    offset3[index3] = -offset3[index3];
    return offset3;
  }
  function convertOffset(str, offsetLen) {
    var n3;
    if (/%$/.test(str)) {
      n3 = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
    } else {
      n3 = parseInt(str, 10);
    }
    return n3 || 0;
  }
  function normalizeOffset(offset3, el) {
    offset3[0] = convertOffset(offset3[0], el.width);
    offset3[1] = convertOffset(offset3[1], el.height);
  }
  function doAlign(el, tgtRegion, align, isTgtRegionVisible) {
    var points = align.points;
    var offset3 = align.offset || [0, 0];
    var targetOffset4 = align.targetOffset || [0, 0];
    var overflow = align.overflow;
    var source = align.source || el;
    offset3 = [].concat(offset3);
    targetOffset4 = [].concat(targetOffset4);
    overflow = overflow || {};
    var newOverflowCfg = {};
    var fail = 0;
    var alwaysByViewport = !!(overflow && overflow.alwaysByViewport);
    var visibleRect = getVisibleRectForElement(source, alwaysByViewport);
    var elRegion = getRegion(source);
    normalizeOffset(offset3, elRegion);
    normalizeOffset(targetOffset4, tgtRegion);
    var elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset3, targetOffset4);
    var newElRegion = utils.merge(elRegion, elFuturePos);
    if (visibleRect && (overflow.adjustX || overflow.adjustY) && isTgtRegionVisible) {
      if (overflow.adjustX) {
        if (isFailX(elFuturePos, elRegion, visibleRect)) {
          var newPoints = flip(points, /[lr]/gi, {
            l: "r",
            r: "l"
          });
          var newOffset = flipOffset(offset3, 0);
          var newTargetOffset = flipOffset(targetOffset4, 0);
          var newElFuturePos = getElFuturePos(elRegion, tgtRegion, newPoints, newOffset, newTargetOffset);
          if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
            fail = 1;
            points = newPoints;
            offset3 = newOffset;
            targetOffset4 = newTargetOffset;
          }
        }
      }
      if (overflow.adjustY) {
        if (isFailY(elFuturePos, elRegion, visibleRect)) {
          var _newPoints = flip(points, /[tb]/gi, {
            t: "b",
            b: "t"
          });
          var _newOffset = flipOffset(offset3, 1);
          var _newTargetOffset = flipOffset(targetOffset4, 1);
          var _newElFuturePos = getElFuturePos(elRegion, tgtRegion, _newPoints, _newOffset, _newTargetOffset);
          if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
            fail = 1;
            points = _newPoints;
            offset3 = _newOffset;
            targetOffset4 = _newTargetOffset;
          }
        }
      }
      if (fail) {
        elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset3, targetOffset4);
        utils.mix(newElRegion, elFuturePos);
      }
      var isStillFailX = isFailX(elFuturePos, elRegion, visibleRect);
      var isStillFailY = isFailY(elFuturePos, elRegion, visibleRect);
      if (isStillFailX || isStillFailY) {
        var _newPoints2 = points;
        if (isStillFailX) {
          _newPoints2 = flip(points, /[lr]/gi, {
            l: "r",
            r: "l"
          });
        }
        if (isStillFailY) {
          _newPoints2 = flip(points, /[tb]/gi, {
            t: "b",
            b: "t"
          });
        }
        points = _newPoints2;
        offset3 = align.offset || [0, 0];
        targetOffset4 = align.targetOffset || [0, 0];
      }
      newOverflowCfg.adjustX = overflow.adjustX && isStillFailX;
      newOverflowCfg.adjustY = overflow.adjustY && isStillFailY;
      if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
        newElRegion = adjustForViewport(elFuturePos, elRegion, visibleRect, newOverflowCfg);
      }
    }
    if (newElRegion.width !== elRegion.width) {
      utils.css(source, "width", utils.width(source) + newElRegion.width - elRegion.width);
    }
    if (newElRegion.height !== elRegion.height) {
      utils.css(source, "height", utils.height(source) + newElRegion.height - elRegion.height);
    }
    utils.offset(source, {
      left: newElRegion.left,
      top: newElRegion.top
    }, {
      useCssRight: align.useCssRight,
      useCssBottom: align.useCssBottom,
      useCssTransform: align.useCssTransform,
      ignoreShake: align.ignoreShake
    });
    return {
      points,
      offset: offset3,
      targetOffset: targetOffset4,
      overflow: newOverflowCfg
    };
  }
  function isOutOfVisibleRect(target, alwaysByViewport) {
    var visibleRect = getVisibleRectForElement(target, alwaysByViewport);
    var targetRegion = getRegion(target);
    return !visibleRect || targetRegion.left + targetRegion.width <= visibleRect.left || targetRegion.top + targetRegion.height <= visibleRect.top || targetRegion.left >= visibleRect.right || targetRegion.top >= visibleRect.bottom;
  }
  function alignElement(el, refNode, align) {
    var target = align.target || refNode;
    var refNodeRegion = getRegion(target);
    var isTargetNotOutOfVisible = !isOutOfVisibleRect(target, align.overflow && align.overflow.alwaysByViewport);
    return doAlign(el, refNodeRegion, align, isTargetNotOutOfVisible);
  }
  alignElement.__getOffsetParent = getOffsetParent;
  alignElement.__getVisibleRectForElement = getVisibleRectForElement;
  function alignPoint(el, tgtPoint, align) {
    var pageX;
    var pageY;
    var doc = utils.getDocument(el);
    var win = doc.defaultView || doc.parentWindow;
    var scrollX = utils.getWindowScrollLeft(win);
    var scrollY = utils.getWindowScrollTop(win);
    var viewportWidth = utils.viewportWidth(win);
    var viewportHeight = utils.viewportHeight(win);
    if ("pageX" in tgtPoint) {
      pageX = tgtPoint.pageX;
    } else {
      pageX = scrollX + tgtPoint.clientX;
    }
    if ("pageY" in tgtPoint) {
      pageY = tgtPoint.pageY;
    } else {
      pageY = scrollY + tgtPoint.clientY;
    }
    var tgtRegion = {
      left: pageX,
      top: pageY,
      width: 0,
      height: 0
    };
    var pointInView = pageX >= 0 && pageX <= scrollX + viewportWidth && pageY >= 0 && pageY <= scrollY + viewportHeight;
    var points = [align.points[0], "cc"];
    return doAlign(el, tgtRegion, _objectSpread22(_objectSpread22({}, align), {}, {
      points
    }), pointInView);
  }

  // node_modules/rc-util/es/isEqual.js
  function isEqual2(obj1, obj2) {
    var shallow = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var refSet = /* @__PURE__ */ new Set();
    function deepEqual(a2, b2) {
      var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var circular = refSet.has(a2);
      warning_default(!circular, "Warning: There may be circular references");
      if (circular) {
        return false;
      }
      if (a2 === b2) {
        return true;
      }
      if (shallow && level > 1) {
        return false;
      }
      refSet.add(a2);
      var newLevel = level + 1;
      if (Array.isArray(a2)) {
        if (!Array.isArray(b2) || a2.length !== b2.length) {
          return false;
        }
        for (var i3 = 0; i3 < a2.length; i3++) {
          if (!deepEqual(a2[i3], b2[i3], newLevel)) {
            return false;
          }
        }
        return true;
      }
      if (a2 && b2 && _typeof(a2) === "object" && _typeof(b2) === "object") {
        var keys = Object.keys(a2);
        if (keys.length !== Object.keys(b2).length) {
          return false;
        }
        return keys.every(function(key2) {
          return deepEqual(a2[key2], b2[key2], newLevel);
        });
      }
      return false;
    }
    return deepEqual(obj1, obj2);
  }
  var isEqual_default = isEqual2;

  // node_modules/rc-util/es/Dom/isVisible.js
  var isVisible_default = function(element) {
    if (!element) {
      return false;
    }
    if (element instanceof Element) {
      if (element.offsetParent) {
        return true;
      }
      if (element.getBBox) {
        var _getBBox = element.getBBox(), width = _getBBox.width, height = _getBBox.height;
        if (width || height) {
          return true;
        }
      }
      if (element.getBoundingClientRect) {
        var _element$getBoundingC = element.getBoundingClientRect(), _width = _element$getBoundingC.width, _height = _element$getBoundingC.height;
        if (_width || _height) {
          return true;
        }
      }
    }
    return false;
  };

  // node_modules/rc-align/es/Align.js
  var import_react18 = __toESM(require_react());

  // node_modules/rc-align/es/hooks/useBuffer.js
  var import_react17 = __toESM(require_react());
  var useBuffer_default = function(callback, buffer2) {
    var calledRef = import_react17.default.useRef(false);
    var timeoutRef = import_react17.default.useRef(null);
    function cancelTrigger() {
      window.clearTimeout(timeoutRef.current);
    }
    function trigger(force) {
      cancelTrigger();
      if (!calledRef.current || force === true) {
        if (callback(force) === false) {
          return;
        }
        calledRef.current = true;
        timeoutRef.current = window.setTimeout(function() {
          calledRef.current = false;
        }, buffer2);
      } else {
        timeoutRef.current = window.setTimeout(function() {
          calledRef.current = false;
          trigger();
        }, buffer2);
      }
    }
    return [trigger, function() {
      calledRef.current = false;
      cancelTrigger();
    }];
  };

  // node_modules/rc-align/es/util.js
  function isSamePoint(prev, next) {
    if (prev === next)
      return true;
    if (!prev || !next)
      return false;
    if ("pageX" in next && "pageY" in next) {
      return prev.pageX === next.pageX && prev.pageY === next.pageY;
    }
    if ("clientX" in next && "clientY" in next) {
      return prev.clientX === next.clientX && prev.clientY === next.clientY;
    }
    return false;
  }
  function restoreFocus(activeElement, container) {
    if (activeElement !== document.activeElement && contains(container, activeElement) && typeof activeElement.focus === "function") {
      activeElement.focus();
    }
  }
  function monitorResize(element, callback) {
    var prevWidth = null;
    var prevHeight = null;
    function onResize2(_ref) {
      var _ref2 = _slicedToArray(_ref, 1), target = _ref2[0].target;
      if (!document.documentElement.contains(target))
        return;
      var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
      var fixedWidth = Math.floor(width);
      var fixedHeight = Math.floor(height);
      if (prevWidth !== fixedWidth || prevHeight !== fixedHeight) {
        Promise.resolve().then(function() {
          callback({
            width: fixedWidth,
            height: fixedHeight
          });
        });
      }
      prevWidth = fixedWidth;
      prevHeight = fixedHeight;
    }
    var resizeObserver2 = new ResizeObserver_es_default(onResize2);
    if (element) {
      resizeObserver2.observe(element);
    }
    return function() {
      resizeObserver2.disconnect();
    };
  }

  // node_modules/rc-align/es/Align.js
  function getElement(func) {
    if (typeof func !== "function")
      return null;
    return func();
  }
  function getPoint(point) {
    if (_typeof(point) !== "object" || !point)
      return null;
    return point;
  }
  var Align = function Align2(_ref, ref) {
    var children = _ref.children, disabled = _ref.disabled, target = _ref.target, align = _ref.align, onAlign = _ref.onAlign, monitorWindowResize = _ref.monitorWindowResize, _ref$monitorBufferTim = _ref.monitorBufferTime, monitorBufferTime = _ref$monitorBufferTim === void 0 ? 0 : _ref$monitorBufferTim;
    var cacheRef = import_react18.default.useRef({});
    var nodeRef = import_react18.default.useRef();
    var childNode = import_react18.default.Children.only(children);
    var forceAlignPropsRef = import_react18.default.useRef({});
    forceAlignPropsRef.current.disabled = disabled;
    forceAlignPropsRef.current.target = target;
    forceAlignPropsRef.current.align = align;
    forceAlignPropsRef.current.onAlign = onAlign;
    var _useBuffer = useBuffer_default(function() {
      var _forceAlignPropsRef$c = forceAlignPropsRef.current, latestDisabled = _forceAlignPropsRef$c.disabled, latestTarget = _forceAlignPropsRef$c.target, latestAlign = _forceAlignPropsRef$c.align, latestOnAlign = _forceAlignPropsRef$c.onAlign;
      var source = nodeRef.current;
      if (!latestDisabled && latestTarget && source) {
        var _result;
        var _element = getElement(latestTarget);
        var _point = getPoint(latestTarget);
        cacheRef.current.element = _element;
        cacheRef.current.point = _point;
        cacheRef.current.align = latestAlign;
        var _document = document, activeElement = _document.activeElement;
        if (_element && isVisible_default(_element)) {
          _result = alignElement(source, _element, latestAlign);
        } else if (_point) {
          _result = alignPoint(source, _point, latestAlign);
        }
        restoreFocus(activeElement, source);
        if (latestOnAlign && _result) {
          latestOnAlign(source, _result);
        }
        return true;
      }
      return false;
    }, monitorBufferTime), _useBuffer2 = _slicedToArray(_useBuffer, 2), _forceAlign = _useBuffer2[0], cancelForceAlign = _useBuffer2[1];
    var _React$useState = import_react18.default.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), element = _React$useState2[0], setElement = _React$useState2[1];
    var _React$useState3 = import_react18.default.useState(), _React$useState4 = _slicedToArray(_React$useState3, 2), point = _React$useState4[0], setPoint = _React$useState4[1];
    useLayoutEffect_default(function() {
      setElement(getElement(target));
      setPoint(getPoint(target));
    });
    import_react18.default.useEffect(function() {
      if (cacheRef.current.element !== element || !isSamePoint(cacheRef.current.point, point) || !isEqual_default(cacheRef.current.align, align)) {
        _forceAlign();
      }
    });
    import_react18.default.useEffect(function() {
      var cancelFn = monitorResize(nodeRef.current, _forceAlign);
      return cancelFn;
    }, [nodeRef.current]);
    import_react18.default.useEffect(function() {
      var cancelFn = monitorResize(element, _forceAlign);
      return cancelFn;
    }, [element]);
    import_react18.default.useEffect(function() {
      if (!disabled) {
        _forceAlign();
      } else {
        cancelForceAlign();
      }
    }, [disabled]);
    import_react18.default.useEffect(function() {
      if (monitorWindowResize) {
        var cancelFn = addEventListenerWrap(window, "resize", _forceAlign);
        return cancelFn.remove;
      }
    }, [monitorWindowResize]);
    import_react18.default.useEffect(function() {
      return function() {
        cancelForceAlign();
      };
    }, []);
    import_react18.default.useImperativeHandle(ref, function() {
      return {
        forceAlign: function forceAlign() {
          return _forceAlign(true);
        }
      };
    });
    if (/* @__PURE__ */ import_react18.default.isValidElement(childNode)) {
      childNode = /* @__PURE__ */ import_react18.default.cloneElement(childNode, {
        ref: composeRef(childNode.ref, nodeRef)
      });
    }
    return childNode;
  };
  var RcAlign = /* @__PURE__ */ import_react18.default.forwardRef(Align);
  RcAlign.displayName = "Align";
  var Align_default = RcAlign;

  // node_modules/rc-align/es/index.js
  var es_default6 = Align_default;

  // node_modules/rc-trigger/es/Popup/PopupInner.js
  var import_classnames15 = __toESM(require_classnames());

  // node_modules/rc-trigger/es/Popup/useVisibleStatus.js
  var import_react19 = __toESM(require_react());
  var StatusQueue = ["measure", "alignPre", "align", null, "motion"];
  var useVisibleStatus_default = function(visible, doMeasure) {
    var _useState = useSafeState(null), _useState2 = _slicedToArray(_useState, 2), status = _useState2[0], setInternalStatus = _useState2[1];
    var rafRef = (0, import_react19.useRef)();
    function setStatus(nextStatus) {
      setInternalStatus(nextStatus, true);
    }
    function cancelRaf() {
      raf_default.cancel(rafRef.current);
    }
    function goNextStatus(callback) {
      cancelRaf();
      rafRef.current = raf_default(function() {
        setStatus(function(prev) {
          switch (status) {
            case "align":
              return "motion";
            case "motion":
              return "stable";
            default:
          }
          return prev;
        });
        callback === null || callback === void 0 ? void 0 : callback();
      });
    }
    (0, import_react19.useEffect)(function() {
      setStatus("measure");
    }, [visible]);
    (0, import_react19.useEffect)(function() {
      switch (status) {
        case "measure":
          doMeasure();
          break;
        default:
      }
      if (status) {
        rafRef.current = raf_default(/* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee() {
          var index3, nextStatus;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  index3 = StatusQueue.indexOf(status);
                  nextStatus = StatusQueue[index3 + 1];
                  if (nextStatus && index3 !== -1) {
                    setStatus(nextStatus);
                  }
                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })));
      }
    }, [status]);
    (0, import_react19.useEffect)(function() {
      return function() {
        cancelRaf();
      };
    }, []);
    return [status, goNextStatus];
  };

  // node_modules/rc-trigger/es/Popup/useStretchStyle.js
  var React73 = __toESM(require_react());
  var useStretchStyle_default = function(stretch) {
    var _React$useState = React73.useState({
      width: 0,
      height: 0
    }), _React$useState2 = _slicedToArray(_React$useState, 2), targetSize = _React$useState2[0], setTargetSize = _React$useState2[1];
    function measureStretch(element) {
      var tgtWidth = element.offsetWidth, tgtHeight = element.offsetHeight;
      var _element$getBoundingC = element.getBoundingClientRect(), width = _element$getBoundingC.width, height = _element$getBoundingC.height;
      if (Math.abs(tgtWidth - width) < 1 && Math.abs(tgtHeight - height) < 1) {
        tgtWidth = width;
        tgtHeight = height;
      }
      setTargetSize({
        width: tgtWidth,
        height: tgtHeight
      });
    }
    var style2 = React73.useMemo(function() {
      var sizeStyle = {};
      if (stretch) {
        var width = targetSize.width, height = targetSize.height;
        if (stretch.indexOf("height") !== -1 && height) {
          sizeStyle.height = height;
        } else if (stretch.indexOf("minHeight") !== -1 && height) {
          sizeStyle.minHeight = height;
        }
        if (stretch.indexOf("width") !== -1 && width) {
          sizeStyle.width = width;
        } else if (stretch.indexOf("minWidth") !== -1 && width) {
          sizeStyle.minWidth = width;
        }
      }
      return sizeStyle;
    }, [stretch, targetSize]);
    return [style2, measureStretch];
  };

  // node_modules/rc-trigger/es/Popup/PopupInner.js
  var PopupInner = /* @__PURE__ */ React74.forwardRef(function(props, ref) {
    var visible = props.visible, prefixCls = props.prefixCls, className = props.className, style2 = props.style, children = props.children, zIndex = props.zIndex, stretch = props.stretch, destroyPopupOnHide = props.destroyPopupOnHide, forceRender = props.forceRender, align = props.align, point = props.point, getRootDomNode = props.getRootDomNode, getClassNameFromAlign = props.getClassNameFromAlign, onAlign = props.onAlign, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onMouseDown = props.onMouseDown, onTouchStart = props.onTouchStart, onClick = props.onClick;
    var alignRef = (0, import_react20.useRef)();
    var elementRef = (0, import_react20.useRef)();
    var _useState = (0, import_react20.useState)(), _useState2 = _slicedToArray(_useState, 2), alignedClassName = _useState2[0], setAlignedClassName = _useState2[1];
    var _useStretchStyle = useStretchStyle_default(stretch), _useStretchStyle2 = _slicedToArray(_useStretchStyle, 2), stretchStyle = _useStretchStyle2[0], measureStretchStyle = _useStretchStyle2[1];
    function doMeasure() {
      if (stretch) {
        measureStretchStyle(getRootDomNode());
      }
    }
    var _useVisibleStatus = useVisibleStatus_default(visible, doMeasure), _useVisibleStatus2 = _slicedToArray(_useVisibleStatus, 2), status = _useVisibleStatus2[0], goNextStatus = _useVisibleStatus2[1];
    var _useState3 = (0, import_react20.useState)(0), _useState4 = _slicedToArray(_useState3, 2), alignTimes = _useState4[0], setAlignTimes = _useState4[1];
    var prepareResolveRef = (0, import_react20.useRef)();
    useLayoutEffect_default(function() {
      if (status === "alignPre") {
        setAlignTimes(0);
      }
    }, [status]);
    function getAlignTarget() {
      if (point) {
        return point;
      }
      return getRootDomNode;
    }
    function forceAlign() {
      var _alignRef$current;
      (_alignRef$current = alignRef.current) === null || _alignRef$current === void 0 ? void 0 : _alignRef$current.forceAlign();
    }
    function onInternalAlign(popupDomNode, matchAlign) {
      var nextAlignedClassName = getClassNameFromAlign(matchAlign);
      if (alignedClassName !== nextAlignedClassName) {
        setAlignedClassName(nextAlignedClassName);
      }
      setAlignTimes(function(val) {
        return val + 1;
      });
      if (status === "align") {
        onAlign === null || onAlign === void 0 ? void 0 : onAlign(popupDomNode, matchAlign);
      }
    }
    useLayoutEffect_default(function() {
      if (status === "align") {
        if (alignTimes < 3) {
          forceAlign();
        } else {
          goNextStatus(function() {
            var _prepareResolveRef$cu;
            (_prepareResolveRef$cu = prepareResolveRef.current) === null || _prepareResolveRef$cu === void 0 ? void 0 : _prepareResolveRef$cu.call(prepareResolveRef);
          });
        }
      }
    }, [alignTimes]);
    var motion2 = _objectSpread2({}, getMotion(props));
    ["onAppearEnd", "onEnterEnd", "onLeaveEnd"].forEach(function(eventName) {
      var originHandler = motion2[eventName];
      motion2[eventName] = function(element, event) {
        goNextStatus();
        return originHandler === null || originHandler === void 0 ? void 0 : originHandler(element, event);
      };
    });
    function onShowPrepare() {
      return new Promise(function(resolve5) {
        prepareResolveRef.current = resolve5;
      });
    }
    React74.useEffect(function() {
      if (!motion2.motionName && status === "motion") {
        goNextStatus();
      }
    }, [motion2.motionName, status]);
    React74.useImperativeHandle(ref, function() {
      return {
        forceAlign,
        getElement: function getElement2() {
          return elementRef.current;
        }
      };
    });
    var mergedStyle = _objectSpread2(_objectSpread2({}, stretchStyle), {}, {
      zIndex,
      opacity: status === "motion" || status === "stable" || !visible ? void 0 : 0,
      // Cannot interact with disappearing elements
      // https://github.com/ant-design/ant-design/issues/35051#issuecomment-1101340714
      pointerEvents: !visible && status !== "stable" ? "none" : void 0
    }, style2);
    var alignDisabled = true;
    if (align !== null && align !== void 0 && align.points && (status === "align" || status === "stable")) {
      alignDisabled = false;
    }
    var childNode = children;
    if (React74.Children.count(children) > 1) {
      childNode = /* @__PURE__ */ React74.createElement("div", {
        className: "".concat(prefixCls, "-content")
      }, children);
    }
    return /* @__PURE__ */ React74.createElement(es_default3, _extends({
      visible,
      ref: elementRef,
      leavedClassName: "".concat(prefixCls, "-hidden")
    }, motion2, {
      onAppearPrepare: onShowPrepare,
      onEnterPrepare: onShowPrepare,
      removeOnLeave: destroyPopupOnHide,
      forceRender
    }), function(_ref, motionRef) {
      var motionClassName = _ref.className, motionStyle = _ref.style;
      var mergedClassName = (0, import_classnames15.default)(prefixCls, className, alignedClassName, motionClassName);
      return /* @__PURE__ */ React74.createElement(es_default6, {
        target: getAlignTarget(),
        key: "popup",
        ref: alignRef,
        monitorWindowResize: true,
        disabled: alignDisabled,
        align,
        onAlign: onInternalAlign
      }, /* @__PURE__ */ React74.createElement("div", {
        ref: motionRef,
        className: mergedClassName,
        onMouseEnter,
        onMouseLeave,
        onMouseDownCapture: onMouseDown,
        onTouchStartCapture: onTouchStart,
        onClick,
        style: _objectSpread2(_objectSpread2({}, motionStyle), mergedStyle)
      }, childNode));
    });
  });
  PopupInner.displayName = "PopupInner";
  var PopupInner_default = PopupInner;

  // node_modules/rc-trigger/es/Popup/MobilePopupInner.js
  var React75 = __toESM(require_react());
  var import_classnames16 = __toESM(require_classnames());
  var MobilePopupInner = /* @__PURE__ */ React75.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, visible = props.visible, zIndex = props.zIndex, children = props.children, _props$mobile = props.mobile;
    _props$mobile = _props$mobile === void 0 ? {} : _props$mobile;
    var popupClassName = _props$mobile.popupClassName, popupStyle = _props$mobile.popupStyle, _props$mobile$popupMo = _props$mobile.popupMotion, popupMotion = _props$mobile$popupMo === void 0 ? {} : _props$mobile$popupMo, popupRender = _props$mobile.popupRender, onClick = props.onClick;
    var elementRef = React75.useRef();
    React75.useImperativeHandle(ref, function() {
      return {
        forceAlign: function forceAlign() {
        },
        getElement: function getElement2() {
          return elementRef.current;
        }
      };
    });
    var mergedStyle = _objectSpread2({
      zIndex
    }, popupStyle);
    var childNode = children;
    if (React75.Children.count(children) > 1) {
      childNode = /* @__PURE__ */ React75.createElement("div", {
        className: "".concat(prefixCls, "-content")
      }, children);
    }
    if (popupRender) {
      childNode = popupRender(childNode);
    }
    return /* @__PURE__ */ React75.createElement(es_default3, _extends({
      visible,
      ref: elementRef,
      removeOnLeave: true
    }, popupMotion), function(_ref, motionRef) {
      var motionClassName = _ref.className, motionStyle = _ref.style;
      var mergedClassName = (0, import_classnames16.default)(prefixCls, popupClassName, motionClassName);
      return /* @__PURE__ */ React75.createElement("div", {
        ref: motionRef,
        className: mergedClassName,
        onClick,
        style: _objectSpread2(_objectSpread2({}, motionStyle), mergedStyle)
      }, childNode);
    });
  });
  MobilePopupInner.displayName = "MobilePopupInner";
  var MobilePopupInner_default = MobilePopupInner;

  // node_modules/rc-trigger/es/Popup/index.js
  var _excluded11 = ["visible", "mobile"];
  var Popup = /* @__PURE__ */ React76.forwardRef(function(_ref, ref) {
    var visible = _ref.visible, mobile = _ref.mobile, props = _objectWithoutProperties(_ref, _excluded11);
    var _useState = (0, import_react21.useState)(visible), _useState2 = _slicedToArray(_useState, 2), innerVisible = _useState2[0], serInnerVisible = _useState2[1];
    var _useState3 = (0, import_react21.useState)(false), _useState4 = _slicedToArray(_useState3, 2), inMobile = _useState4[0], setInMobile = _useState4[1];
    var cloneProps = _objectSpread2(_objectSpread2({}, props), {}, {
      visible: innerVisible
    });
    (0, import_react21.useEffect)(function() {
      serInnerVisible(visible);
      if (visible && mobile) {
        setInMobile(isMobile_default());
      }
    }, [visible, mobile]);
    var popupNode = inMobile ? /* @__PURE__ */ React76.createElement(MobilePopupInner_default, _extends({}, cloneProps, {
      mobile,
      ref
    })) : /* @__PURE__ */ React76.createElement(PopupInner_default, _extends({}, cloneProps, {
      ref
    }));
    return /* @__PURE__ */ React76.createElement("div", null, /* @__PURE__ */ React76.createElement(Mask, cloneProps), popupNode);
  });
  Popup.displayName = "Popup";
  var Popup_default = Popup;

  // node_modules/rc-trigger/es/context.js
  var React77 = __toESM(require_react());
  var TriggerContext = /* @__PURE__ */ React77.createContext(null);
  var context_default2 = TriggerContext;

  // node_modules/rc-trigger/es/index.js
  function noop2() {
  }
  function returnEmptyString() {
    return "";
  }
  function returnDocument(element) {
    if (element) {
      return element.ownerDocument;
    }
    return window.document;
  }
  var ALL_HANDLERS = ["onClick", "onMouseDown", "onTouchStart", "onMouseEnter", "onMouseLeave", "onFocus", "onBlur", "onContextMenu"];
  function generateTrigger(PortalComponent) {
    var Trigger = /* @__PURE__ */ function(_React$Component) {
      _inherits(Trigger2, _React$Component);
      var _super = _createSuper(Trigger2);
      function Trigger2(props) {
        var _this;
        _classCallCheck(this, Trigger2);
        _this = _super.call(this, props);
        _defineProperty(_assertThisInitialized(_this), "popupRef", /* @__PURE__ */ React78.createRef());
        _defineProperty(_assertThisInitialized(_this), "triggerRef", /* @__PURE__ */ React78.createRef());
        _defineProperty(_assertThisInitialized(_this), "portalContainer", void 0);
        _defineProperty(_assertThisInitialized(_this), "attachId", void 0);
        _defineProperty(_assertThisInitialized(_this), "clickOutsideHandler", void 0);
        _defineProperty(_assertThisInitialized(_this), "touchOutsideHandler", void 0);
        _defineProperty(_assertThisInitialized(_this), "contextMenuOutsideHandler1", void 0);
        _defineProperty(_assertThisInitialized(_this), "contextMenuOutsideHandler2", void 0);
        _defineProperty(_assertThisInitialized(_this), "mouseDownTimeout", void 0);
        _defineProperty(_assertThisInitialized(_this), "focusTime", void 0);
        _defineProperty(_assertThisInitialized(_this), "preClickTime", void 0);
        _defineProperty(_assertThisInitialized(_this), "preTouchTime", void 0);
        _defineProperty(_assertThisInitialized(_this), "delayTimer", void 0);
        _defineProperty(_assertThisInitialized(_this), "hasPopupMouseDown", void 0);
        _defineProperty(_assertThisInitialized(_this), "onMouseEnter", function(e3) {
          var mouseEnterDelay = _this.props.mouseEnterDelay;
          _this.fireEvents("onMouseEnter", e3);
          _this.delaySetPopupVisible(true, mouseEnterDelay, mouseEnterDelay ? null : e3);
        });
        _defineProperty(_assertThisInitialized(_this), "onMouseMove", function(e3) {
          _this.fireEvents("onMouseMove", e3);
          _this.setPoint(e3);
        });
        _defineProperty(_assertThisInitialized(_this), "onMouseLeave", function(e3) {
          _this.fireEvents("onMouseLeave", e3);
          _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
        });
        _defineProperty(_assertThisInitialized(_this), "onPopupMouseEnter", function() {
          _this.clearDelayTimer();
        });
        _defineProperty(_assertThisInitialized(_this), "onPopupMouseLeave", function(e3) {
          var _this$popupRef$curren;
          if (e3.relatedTarget && !e3.relatedTarget.setTimeout && contains((_this$popupRef$curren = _this.popupRef.current) === null || _this$popupRef$curren === void 0 ? void 0 : _this$popupRef$curren.getElement(), e3.relatedTarget)) {
            return;
          }
          _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
        });
        _defineProperty(_assertThisInitialized(_this), "onFocus", function(e3) {
          _this.fireEvents("onFocus", e3);
          _this.clearDelayTimer();
          if (_this.isFocusToShow()) {
            _this.focusTime = Date.now();
            _this.delaySetPopupVisible(true, _this.props.focusDelay);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onMouseDown", function(e3) {
          _this.fireEvents("onMouseDown", e3);
          _this.preClickTime = Date.now();
        });
        _defineProperty(_assertThisInitialized(_this), "onTouchStart", function(e3) {
          _this.fireEvents("onTouchStart", e3);
          _this.preTouchTime = Date.now();
        });
        _defineProperty(_assertThisInitialized(_this), "onBlur", function(e3) {
          _this.fireEvents("onBlur", e3);
          _this.clearDelayTimer();
          if (_this.isBlurToHide()) {
            _this.delaySetPopupVisible(false, _this.props.blurDelay);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onContextMenu", function(e3) {
          e3.preventDefault();
          _this.fireEvents("onContextMenu", e3);
          _this.setPopupVisible(true, e3);
        });
        _defineProperty(_assertThisInitialized(_this), "onContextMenuClose", function() {
          if (_this.isContextMenuToShow()) {
            _this.close();
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onClick", function(event) {
          _this.fireEvents("onClick", event);
          if (_this.focusTime) {
            var preTime;
            if (_this.preClickTime && _this.preTouchTime) {
              preTime = Math.min(_this.preClickTime, _this.preTouchTime);
            } else if (_this.preClickTime) {
              preTime = _this.preClickTime;
            } else if (_this.preTouchTime) {
              preTime = _this.preTouchTime;
            }
            if (Math.abs(preTime - _this.focusTime) < 20) {
              return;
            }
            _this.focusTime = 0;
          }
          _this.preClickTime = 0;
          _this.preTouchTime = 0;
          if (_this.isClickToShow() && (_this.isClickToHide() || _this.isBlurToHide()) && event && event.preventDefault) {
            event.preventDefault();
          }
          var nextVisible = !_this.state.popupVisible;
          if (_this.isClickToHide() && !nextVisible || nextVisible && _this.isClickToShow()) {
            _this.setPopupVisible(!_this.state.popupVisible, event);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onPopupMouseDown", function() {
          _this.hasPopupMouseDown = true;
          clearTimeout(_this.mouseDownTimeout);
          _this.mouseDownTimeout = window.setTimeout(function() {
            _this.hasPopupMouseDown = false;
          }, 0);
          if (_this.context) {
            var _this$context;
            (_this$context = _this.context).onPopupMouseDown.apply(_this$context, arguments);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onDocumentClick", function(event) {
          if (_this.props.mask && !_this.props.maskClosable) {
            return;
          }
          var target = event.target;
          var root2 = _this.getRootDomNode();
          var popupNode = _this.getPopupDomNode();
          if (
            // mousedown on the target should also close popup when action is contextMenu.
            // https://github.com/ant-design/ant-design/issues/29853
            (!contains(root2, target) || _this.isContextMenuOnly()) && !contains(popupNode, target) && !_this.hasPopupMouseDown
          ) {
            _this.close();
          }
        });
        _defineProperty(_assertThisInitialized(_this), "getRootDomNode", function() {
          var getTriggerDOMNode = _this.props.getTriggerDOMNode;
          if (getTriggerDOMNode) {
            return getTriggerDOMNode(_this.triggerRef.current);
          }
          try {
            var domNode = findDOMNode(_this.triggerRef.current);
            if (domNode) {
              return domNode;
            }
          } catch (err) {
          }
          return import_react_dom6.default.findDOMNode(_assertThisInitialized(_this));
        });
        _defineProperty(_assertThisInitialized(_this), "getPopupClassNameFromAlign", function(align) {
          var className = [];
          var _this$props = _this.props, popupPlacement = _this$props.popupPlacement, builtinPlacements = _this$props.builtinPlacements, prefixCls = _this$props.prefixCls, alignPoint2 = _this$props.alignPoint, getPopupClassNameFromAlign = _this$props.getPopupClassNameFromAlign;
          if (popupPlacement && builtinPlacements) {
            className.push(getAlignPopupClassName(builtinPlacements, prefixCls, align, alignPoint2));
          }
          if (getPopupClassNameFromAlign) {
            className.push(getPopupClassNameFromAlign(align));
          }
          return className.join(" ");
        });
        _defineProperty(_assertThisInitialized(_this), "getComponent", function() {
          var _this$props2 = _this.props, prefixCls = _this$props2.prefixCls, destroyPopupOnHide = _this$props2.destroyPopupOnHide, popupClassName = _this$props2.popupClassName, onPopupAlign = _this$props2.onPopupAlign, popupMotion = _this$props2.popupMotion, popupAnimation = _this$props2.popupAnimation, popupTransitionName = _this$props2.popupTransitionName, popupStyle = _this$props2.popupStyle, mask = _this$props2.mask, maskAnimation = _this$props2.maskAnimation, maskTransitionName = _this$props2.maskTransitionName, maskMotion = _this$props2.maskMotion, zIndex = _this$props2.zIndex, popup = _this$props2.popup, stretch = _this$props2.stretch, alignPoint2 = _this$props2.alignPoint, mobile = _this$props2.mobile, forceRender = _this$props2.forceRender, onPopupClick = _this$props2.onPopupClick;
          var _this$state = _this.state, popupVisible = _this$state.popupVisible, point = _this$state.point;
          var align = _this.getPopupAlign();
          var mouseProps = {};
          if (_this.isMouseEnterToShow()) {
            mouseProps.onMouseEnter = _this.onPopupMouseEnter;
          }
          if (_this.isMouseLeaveToHide()) {
            mouseProps.onMouseLeave = _this.onPopupMouseLeave;
          }
          mouseProps.onMouseDown = _this.onPopupMouseDown;
          mouseProps.onTouchStart = _this.onPopupMouseDown;
          return /* @__PURE__ */ React78.createElement(Popup_default, _extends({
            prefixCls,
            destroyPopupOnHide,
            visible: popupVisible,
            point: alignPoint2 && point,
            className: popupClassName,
            align,
            onAlign: onPopupAlign,
            animation: popupAnimation,
            getClassNameFromAlign: _this.getPopupClassNameFromAlign
          }, mouseProps, {
            stretch,
            getRootDomNode: _this.getRootDomNode,
            style: popupStyle,
            mask,
            zIndex,
            transitionName: popupTransitionName,
            maskAnimation,
            maskTransitionName,
            maskMotion,
            ref: _this.popupRef,
            motion: popupMotion,
            mobile,
            forceRender,
            onClick: onPopupClick
          }), typeof popup === "function" ? popup() : popup);
        });
        _defineProperty(_assertThisInitialized(_this), "attachParent", function(popupContainer) {
          raf_default.cancel(_this.attachId);
          var _this$props3 = _this.props, getPopupContainer = _this$props3.getPopupContainer, getDocument2 = _this$props3.getDocument;
          var domNode = _this.getRootDomNode();
          var mountNode;
          if (!getPopupContainer) {
            mountNode = getDocument2(_this.getRootDomNode()).body;
          } else if (domNode || getPopupContainer.length === 0) {
            mountNode = getPopupContainer(domNode);
          }
          if (mountNode) {
            mountNode.appendChild(popupContainer);
          } else {
            _this.attachId = raf_default(function() {
              _this.attachParent(popupContainer);
            });
          }
        });
        _defineProperty(_assertThisInitialized(_this), "getContainer", function() {
          if (!_this.portalContainer) {
            var getDocument2 = _this.props.getDocument;
            var popupContainer = getDocument2(_this.getRootDomNode()).createElement("div");
            popupContainer.style.position = "absolute";
            popupContainer.style.top = "0";
            popupContainer.style.left = "0";
            popupContainer.style.width = "100%";
            _this.portalContainer = popupContainer;
          }
          _this.attachParent(_this.portalContainer);
          return _this.portalContainer;
        });
        _defineProperty(_assertThisInitialized(_this), "setPoint", function(point) {
          var alignPoint2 = _this.props.alignPoint;
          if (!alignPoint2 || !point)
            return;
          _this.setState({
            point: {
              pageX: point.pageX,
              pageY: point.pageY
            }
          });
        });
        _defineProperty(_assertThisInitialized(_this), "handlePortalUpdate", function() {
          if (_this.state.prevPopupVisible !== _this.state.popupVisible) {
            _this.props.afterPopupVisibleChange(_this.state.popupVisible);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "triggerContextValue", {
          onPopupMouseDown: _this.onPopupMouseDown
        });
        var _popupVisible;
        if ("popupVisible" in props) {
          _popupVisible = !!props.popupVisible;
        } else {
          _popupVisible = !!props.defaultPopupVisible;
        }
        _this.state = {
          prevPopupVisible: _popupVisible,
          popupVisible: _popupVisible
        };
        ALL_HANDLERS.forEach(function(h2) {
          _this["fire".concat(h2)] = function(e3) {
            _this.fireEvents(h2, e3);
          };
        });
        return _this;
      }
      _createClass(Trigger2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.componentDidUpdate();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          var props = this.props;
          var state = this.state;
          if (state.popupVisible) {
            var currentDocument;
            if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextMenuToShow())) {
              currentDocument = props.getDocument(this.getRootDomNode());
              this.clickOutsideHandler = addEventListenerWrap(currentDocument, "mousedown", this.onDocumentClick);
            }
            if (!this.touchOutsideHandler) {
              currentDocument = currentDocument || props.getDocument(this.getRootDomNode());
              this.touchOutsideHandler = addEventListenerWrap(currentDocument, "touchstart", this.onDocumentClick);
            }
            if (!this.contextMenuOutsideHandler1 && this.isContextMenuToShow()) {
              currentDocument = currentDocument || props.getDocument(this.getRootDomNode());
              this.contextMenuOutsideHandler1 = addEventListenerWrap(currentDocument, "scroll", this.onContextMenuClose);
            }
            if (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow()) {
              this.contextMenuOutsideHandler2 = addEventListenerWrap(window, "blur", this.onContextMenuClose);
            }
            return;
          }
          this.clearOutsideHandler();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.clearDelayTimer();
          this.clearOutsideHandler();
          clearTimeout(this.mouseDownTimeout);
          raf_default.cancel(this.attachId);
        }
      }, {
        key: "getPopupDomNode",
        value: function getPopupDomNode() {
          var _this$popupRef$curren2;
          return ((_this$popupRef$curren2 = this.popupRef.current) === null || _this$popupRef$curren2 === void 0 ? void 0 : _this$popupRef$curren2.getElement()) || null;
        }
      }, {
        key: "getPopupAlign",
        value: function getPopupAlign() {
          var props = this.props;
          var popupPlacement = props.popupPlacement, popupAlign = props.popupAlign, builtinPlacements = props.builtinPlacements;
          if (popupPlacement && builtinPlacements) {
            return getAlignFromPlacement(builtinPlacements, popupPlacement, popupAlign);
          }
          return popupAlign;
        }
      }, {
        key: "setPopupVisible",
        value: (
          /**
           * @param popupVisible    Show or not the popup element
           * @param event           SyntheticEvent, used for `pointAlign`
           */
          function setPopupVisible(popupVisible, event) {
            var alignPoint2 = this.props.alignPoint;
            var prevPopupVisible = this.state.popupVisible;
            this.clearDelayTimer();
            if (prevPopupVisible !== popupVisible) {
              if (!("popupVisible" in this.props)) {
                this.setState({
                  popupVisible,
                  prevPopupVisible
                });
              }
              this.props.onPopupVisibleChange(popupVisible);
            }
            if (alignPoint2 && event && popupVisible) {
              this.setPoint(event);
            }
          }
        )
      }, {
        key: "delaySetPopupVisible",
        value: function delaySetPopupVisible(visible, delayS, event) {
          var _this2 = this;
          var delay = delayS * 1e3;
          this.clearDelayTimer();
          if (delay) {
            var point = event ? {
              pageX: event.pageX,
              pageY: event.pageY
            } : null;
            this.delayTimer = window.setTimeout(function() {
              _this2.setPopupVisible(visible, point);
              _this2.clearDelayTimer();
            }, delay);
          } else {
            this.setPopupVisible(visible, event);
          }
        }
      }, {
        key: "clearDelayTimer",
        value: function clearDelayTimer() {
          if (this.delayTimer) {
            clearTimeout(this.delayTimer);
            this.delayTimer = null;
          }
        }
      }, {
        key: "clearOutsideHandler",
        value: function clearOutsideHandler() {
          if (this.clickOutsideHandler) {
            this.clickOutsideHandler.remove();
            this.clickOutsideHandler = null;
          }
          if (this.contextMenuOutsideHandler1) {
            this.contextMenuOutsideHandler1.remove();
            this.contextMenuOutsideHandler1 = null;
          }
          if (this.contextMenuOutsideHandler2) {
            this.contextMenuOutsideHandler2.remove();
            this.contextMenuOutsideHandler2 = null;
          }
          if (this.touchOutsideHandler) {
            this.touchOutsideHandler.remove();
            this.touchOutsideHandler = null;
          }
        }
      }, {
        key: "createTwoChains",
        value: function createTwoChains(event) {
          var childPros = this.props.children.props;
          var props = this.props;
          if (childPros[event] && props[event]) {
            return this["fire".concat(event)];
          }
          return childPros[event] || props[event];
        }
      }, {
        key: "isClickToShow",
        value: function isClickToShow() {
          var _this$props4 = this.props, action = _this$props4.action, showAction = _this$props4.showAction;
          return action.indexOf("click") !== -1 || showAction.indexOf("click") !== -1;
        }
      }, {
        key: "isContextMenuOnly",
        value: function isContextMenuOnly() {
          var action = this.props.action;
          return action === "contextMenu" || action.length === 1 && action[0] === "contextMenu";
        }
      }, {
        key: "isContextMenuToShow",
        value: function isContextMenuToShow() {
          var _this$props5 = this.props, action = _this$props5.action, showAction = _this$props5.showAction;
          return action.indexOf("contextMenu") !== -1 || showAction.indexOf("contextMenu") !== -1;
        }
      }, {
        key: "isClickToHide",
        value: function isClickToHide() {
          var _this$props6 = this.props, action = _this$props6.action, hideAction = _this$props6.hideAction;
          return action.indexOf("click") !== -1 || hideAction.indexOf("click") !== -1;
        }
      }, {
        key: "isMouseEnterToShow",
        value: function isMouseEnterToShow() {
          var _this$props7 = this.props, action = _this$props7.action, showAction = _this$props7.showAction;
          return action.indexOf("hover") !== -1 || showAction.indexOf("mouseEnter") !== -1;
        }
      }, {
        key: "isMouseLeaveToHide",
        value: function isMouseLeaveToHide() {
          var _this$props8 = this.props, action = _this$props8.action, hideAction = _this$props8.hideAction;
          return action.indexOf("hover") !== -1 || hideAction.indexOf("mouseLeave") !== -1;
        }
      }, {
        key: "isFocusToShow",
        value: function isFocusToShow() {
          var _this$props9 = this.props, action = _this$props9.action, showAction = _this$props9.showAction;
          return action.indexOf("focus") !== -1 || showAction.indexOf("focus") !== -1;
        }
      }, {
        key: "isBlurToHide",
        value: function isBlurToHide() {
          var _this$props10 = this.props, action = _this$props10.action, hideAction = _this$props10.hideAction;
          return action.indexOf("focus") !== -1 || hideAction.indexOf("blur") !== -1;
        }
      }, {
        key: "forcePopupAlign",
        value: function forcePopupAlign() {
          if (this.state.popupVisible) {
            var _this$popupRef$curren3;
            (_this$popupRef$curren3 = this.popupRef.current) === null || _this$popupRef$curren3 === void 0 ? void 0 : _this$popupRef$curren3.forceAlign();
          }
        }
      }, {
        key: "fireEvents",
        value: function fireEvents(type4, e3) {
          var childCallback = this.props.children.props[type4];
          if (childCallback) {
            childCallback(e3);
          }
          var callback = this.props[type4];
          if (callback) {
            callback(e3);
          }
        }
      }, {
        key: "close",
        value: function close2() {
          this.setPopupVisible(false);
        }
      }, {
        key: "render",
        value: function render4() {
          var popupVisible = this.state.popupVisible;
          var _this$props11 = this.props, children = _this$props11.children, forceRender = _this$props11.forceRender, alignPoint2 = _this$props11.alignPoint, className = _this$props11.className, autoDestroy = _this$props11.autoDestroy;
          var child = React78.Children.only(children);
          var newChildProps = {
            key: "trigger"
          };
          if (this.isContextMenuToShow()) {
            newChildProps.onContextMenu = this.onContextMenu;
          } else {
            newChildProps.onContextMenu = this.createTwoChains("onContextMenu");
          }
          if (this.isClickToHide() || this.isClickToShow()) {
            newChildProps.onClick = this.onClick;
            newChildProps.onMouseDown = this.onMouseDown;
            newChildProps.onTouchStart = this.onTouchStart;
          } else {
            newChildProps.onClick = this.createTwoChains("onClick");
            newChildProps.onMouseDown = this.createTwoChains("onMouseDown");
            newChildProps.onTouchStart = this.createTwoChains("onTouchStart");
          }
          if (this.isMouseEnterToShow()) {
            newChildProps.onMouseEnter = this.onMouseEnter;
            if (alignPoint2) {
              newChildProps.onMouseMove = this.onMouseMove;
            }
          } else {
            newChildProps.onMouseEnter = this.createTwoChains("onMouseEnter");
          }
          if (this.isMouseLeaveToHide()) {
            newChildProps.onMouseLeave = this.onMouseLeave;
          } else {
            newChildProps.onMouseLeave = this.createTwoChains("onMouseLeave");
          }
          if (this.isFocusToShow() || this.isBlurToHide()) {
            newChildProps.onFocus = this.onFocus;
            newChildProps.onBlur = this.onBlur;
          } else {
            newChildProps.onFocus = this.createTwoChains("onFocus");
            newChildProps.onBlur = this.createTwoChains("onBlur");
          }
          var childrenClassName = (0, import_classnames17.default)(child && child.props && child.props.className, className);
          if (childrenClassName) {
            newChildProps.className = childrenClassName;
          }
          var cloneProps = _objectSpread2({}, newChildProps);
          if (supportRef(child)) {
            cloneProps.ref = composeRef(this.triggerRef, child.ref);
          }
          var trigger = /* @__PURE__ */ React78.cloneElement(child, cloneProps);
          var portal;
          if (popupVisible || this.popupRef.current || forceRender) {
            portal = /* @__PURE__ */ React78.createElement(PortalComponent, {
              key: "portal",
              getContainer: this.getContainer,
              didUpdate: this.handlePortalUpdate
            }, this.getComponent());
          }
          if (!popupVisible && autoDestroy) {
            portal = null;
          }
          return /* @__PURE__ */ React78.createElement(context_default2.Provider, {
            value: this.triggerContextValue
          }, trigger, portal);
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(_ref, prevState) {
          var popupVisible = _ref.popupVisible;
          var newState = {};
          if (popupVisible !== void 0 && prevState.popupVisible !== popupVisible) {
            newState.popupVisible = popupVisible;
            newState.prevPopupVisible = prevState.popupVisible;
          }
          return newState;
        }
      }]);
      return Trigger2;
    }(React78.Component);
    _defineProperty(Trigger, "contextType", context_default2);
    _defineProperty(Trigger, "defaultProps", {
      prefixCls: "rc-trigger-popup",
      getPopupClassNameFromAlign: returnEmptyString,
      getDocument: returnDocument,
      onPopupVisibleChange: noop2,
      afterPopupVisibleChange: noop2,
      onPopupAlign: noop2,
      popupClassName: "",
      mouseEnterDelay: 0,
      mouseLeaveDelay: 0.1,
      focusDelay: 0,
      blurDelay: 0.15,
      popupStyle: {},
      destroyPopupOnHide: false,
      popupAlign: {},
      defaultPopupVisible: false,
      mask: false,
      maskClosable: true,
      action: [],
      showAction: [],
      hideAction: [],
      autoDestroy: false
    });
    return Trigger;
  }
  var es_default7 = generateTrigger(Portal_default);

  // node_modules/rc-select/es/SelectTrigger.js
  var import_classnames18 = __toESM(require_classnames());
  var _excluded12 = ["prefixCls", "disabled", "visible", "children", "popupElement", "containerWidth", "animation", "transitionName", "dropdownStyle", "dropdownClassName", "direction", "placement", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "getPopupContainer", "empty", "getTriggerDOMNode", "onPopupVisibleChange", "onPopupMouseEnter"];
  var getBuiltInPlacements = function getBuiltInPlacements2(dropdownMatchSelectWidth) {
    var adjustX = dropdownMatchSelectWidth === true ? 0 : 1;
    return {
      bottomLeft: {
        points: ["tl", "bl"],
        offset: [0, 4],
        overflow: {
          adjustX,
          adjustY: 1
        }
      },
      bottomRight: {
        points: ["tr", "br"],
        offset: [0, 4],
        overflow: {
          adjustX,
          adjustY: 1
        }
      },
      topLeft: {
        points: ["bl", "tl"],
        offset: [0, -4],
        overflow: {
          adjustX,
          adjustY: 1
        }
      },
      topRight: {
        points: ["br", "tr"],
        offset: [0, -4],
        overflow: {
          adjustX,
          adjustY: 1
        }
      }
    };
  };
  var SelectTrigger = function SelectTrigger2(props, ref) {
    var prefixCls = props.prefixCls, disabled = props.disabled, visible = props.visible, children = props.children, popupElement = props.popupElement, containerWidth = props.containerWidth, animation = props.animation, transitionName2 = props.transitionName, dropdownStyle = props.dropdownStyle, dropdownClassName = props.dropdownClassName, _props$direction = props.direction, direction = _props$direction === void 0 ? "ltr" : _props$direction, placement = props.placement, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, dropdownRender = props.dropdownRender, dropdownAlign = props.dropdownAlign, getPopupContainer = props.getPopupContainer, empty3 = props.empty, getTriggerDOMNode = props.getTriggerDOMNode, onPopupVisibleChange = props.onPopupVisibleChange, onPopupMouseEnter = props.onPopupMouseEnter, restProps = _objectWithoutProperties(props, _excluded12);
    var dropdownPrefixCls = "".concat(prefixCls, "-dropdown");
    var popupNode = popupElement;
    if (dropdownRender) {
      popupNode = dropdownRender(popupElement);
    }
    var builtInPlacements = React79.useMemo(function() {
      return getBuiltInPlacements(dropdownMatchSelectWidth);
    }, [dropdownMatchSelectWidth]);
    var mergedTransitionName = animation ? "".concat(dropdownPrefixCls, "-").concat(animation) : transitionName2;
    var popupRef = React79.useRef(null);
    React79.useImperativeHandle(ref, function() {
      return {
        getPopupElement: function getPopupElement() {
          return popupRef.current;
        }
      };
    });
    var popupStyle = _objectSpread2({
      minWidth: containerWidth
    }, dropdownStyle);
    if (typeof dropdownMatchSelectWidth === "number") {
      popupStyle.width = dropdownMatchSelectWidth;
    } else if (dropdownMatchSelectWidth) {
      popupStyle.width = containerWidth;
    }
    return /* @__PURE__ */ React79.createElement(es_default7, _extends({}, restProps, {
      showAction: onPopupVisibleChange ? ["click"] : [],
      hideAction: onPopupVisibleChange ? ["click"] : [],
      popupPlacement: placement || (direction === "rtl" ? "bottomRight" : "bottomLeft"),
      builtinPlacements: builtInPlacements,
      prefixCls: dropdownPrefixCls,
      popupTransitionName: mergedTransitionName,
      popup: /* @__PURE__ */ React79.createElement("div", {
        ref: popupRef,
        onMouseEnter: onPopupMouseEnter
      }, popupNode),
      popupAlign: dropdownAlign,
      popupVisible: visible,
      getPopupContainer,
      popupClassName: (0, import_classnames18.default)(dropdownClassName, _defineProperty({}, "".concat(dropdownPrefixCls, "-empty"), empty3)),
      popupStyle,
      getTriggerDOMNode,
      onPopupVisibleChange
    }), children);
  };
  var RefSelectTrigger = /* @__PURE__ */ React79.forwardRef(SelectTrigger);
  RefSelectTrigger.displayName = "SelectTrigger";
  var SelectTrigger_default = RefSelectTrigger;

  // node_modules/rc-select/es/utils/valueUtil.js
  function getKey(data, index3) {
    var key2 = data.key;
    var value;
    if ("value" in data) {
      value = data.value;
    }
    if (key2 !== null && key2 !== void 0) {
      return key2;
    }
    if (value !== void 0) {
      return value;
    }
    return "rc-index-key-".concat(index3);
  }
  function fillFieldNames(fieldNames, childrenAsData) {
    var _ref = fieldNames || {}, label = _ref.label, value = _ref.value, options = _ref.options;
    return {
      label: label || (childrenAsData ? "children" : "label"),
      value: value || "value",
      options: options || "options"
    };
  }
  function flattenOptions(options) {
    var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, fieldNames = _ref2.fieldNames, childrenAsData = _ref2.childrenAsData;
    var flattenList = [];
    var _fillFieldNames = fillFieldNames(fieldNames, false), fieldLabel = _fillFieldNames.label, fieldValue = _fillFieldNames.value, fieldOptions = _fillFieldNames.options;
    function dig(list, isGroupOption) {
      list.forEach(function(data) {
        var label = data[fieldLabel];
        if (isGroupOption || !(fieldOptions in data)) {
          var value = data[fieldValue];
          flattenList.push({
            key: getKey(data, flattenList.length),
            groupOption: isGroupOption,
            data,
            label,
            value
          });
        } else {
          var grpLabel = label;
          if (grpLabel === void 0 && childrenAsData) {
            grpLabel = data.label;
          }
          flattenList.push({
            key: getKey(data, flattenList.length),
            group: true,
            data,
            label: grpLabel
          });
          dig(data[fieldOptions], true);
        }
      });
    }
    dig(options, false);
    return flattenList;
  }
  function injectPropsWithOption(option) {
    var newOption = _objectSpread2({}, option);
    if (!("props" in newOption)) {
      Object.defineProperty(newOption, "props", {
        get: function get3() {
          warning_default(false, "Return type is option instead of Option instance. Please read value directly instead of reading from `props`.");
          return newOption;
        }
      });
    }
    return newOption;
  }
  function getSeparatedContent(text, tokens) {
    if (!tokens || !tokens.length) {
      return null;
    }
    var match2 = false;
    function separate(str, _ref3) {
      var _ref4 = _toArray(_ref3), token = _ref4[0], restTokens = _ref4.slice(1);
      if (!token) {
        return [str];
      }
      var list2 = str.split(token);
      match2 = match2 || list2.length > 1;
      return list2.reduce(function(prevList, unitStr) {
        return [].concat(_toConsumableArray(prevList), _toConsumableArray(separate(unitStr, restTokens)));
      }, []).filter(function(unit) {
        return unit;
      });
    }
    var list = separate(text, tokens);
    return match2 ? list : null;
  }

  // node_modules/rc-select/es/BaseSelect.js
  var _excluded13 = ["id", "prefixCls", "className", "showSearch", "tagRender", "direction", "omitDomProps", "displayValues", "onDisplayValuesChange", "emptyOptions", "notFoundContent", "onClear", "mode", "disabled", "loading", "getInputElement", "getRawInputElement", "open", "defaultOpen", "onDropdownVisibleChange", "activeValue", "onActiveValueChange", "activeDescendantId", "searchValue", "autoClearSearchValue", "onSearch", "onSearchSplit", "tokenSeparators", "allowClear", "showArrow", "inputIcon", "clearIcon", "OptionList", "animation", "transitionName", "dropdownStyle", "dropdownClassName", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "placement", "getPopupContainer", "showAction", "onFocus", "onBlur", "onKeyUp", "onKeyDown", "onMouseDown"];
  var DEFAULT_OMIT_PROPS = ["value", "onChange", "removeIcon", "placeholder", "autoFocus", "maxTagCount", "maxTagTextLength", "maxTagPlaceholder", "choiceTransitionName", "onInputKeyDown", "onPopupScroll", "tabIndex"];
  function isMultiple(mode) {
    return mode === "tags" || mode === "multiple";
  }
  var BaseSelect = /* @__PURE__ */ React80.forwardRef(function(props, ref) {
    var _customizeRawInputEle, _classNames2;
    var id2 = props.id, prefixCls = props.prefixCls, className = props.className, showSearch = props.showSearch, tagRender = props.tagRender, direction = props.direction, omitDomProps = props.omitDomProps, displayValues = props.displayValues, onDisplayValuesChange = props.onDisplayValuesChange, emptyOptions = props.emptyOptions, _props$notFoundConten = props.notFoundContent, notFoundContent = _props$notFoundConten === void 0 ? "Not Found" : _props$notFoundConten, onClear = props.onClear, mode = props.mode, disabled = props.disabled, loading = props.loading, getInputElement = props.getInputElement, getRawInputElement = props.getRawInputElement, open = props.open, defaultOpen = props.defaultOpen, onDropdownVisibleChange = props.onDropdownVisibleChange, activeValue = props.activeValue, onActiveValueChange = props.onActiveValueChange, activeDescendantId = props.activeDescendantId, searchValue = props.searchValue, autoClearSearchValue = props.autoClearSearchValue, onSearch = props.onSearch, onSearchSplit = props.onSearchSplit, tokenSeparators = props.tokenSeparators, allowClear = props.allowClear, showArrow = props.showArrow, inputIcon = props.inputIcon, clearIcon = props.clearIcon, OptionList3 = props.OptionList, animation = props.animation, transitionName2 = props.transitionName, dropdownStyle = props.dropdownStyle, dropdownClassName = props.dropdownClassName, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, dropdownRender = props.dropdownRender, dropdownAlign = props.dropdownAlign, placement = props.placement, getPopupContainer = props.getPopupContainer, _props$showAction = props.showAction, showAction = _props$showAction === void 0 ? [] : _props$showAction, onFocus2 = props.onFocus, onBlur2 = props.onBlur, onKeyUp2 = props.onKeyUp, onKeyDown2 = props.onKeyDown, onMouseDown = props.onMouseDown, restProps = _objectWithoutProperties(props, _excluded13);
    var multiple = isMultiple(mode);
    var mergedShowSearch = (showSearch !== void 0 ? showSearch : multiple) || mode === "combobox";
    var domProps = _objectSpread2({}, restProps);
    DEFAULT_OMIT_PROPS.forEach(function(propName) {
      delete domProps[propName];
    });
    omitDomProps === null || omitDomProps === void 0 ? void 0 : omitDomProps.forEach(function(propName) {
      delete domProps[propName];
    });
    var _React$useState = React80.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), mobile = _React$useState2[0], setMobile = _React$useState2[1];
    React80.useEffect(function() {
      setMobile(isMobile_default());
    }, []);
    var containerRef = React80.useRef(null);
    var selectorDomRef = React80.useRef(null);
    var triggerRef = React80.useRef(null);
    var selectorRef = React80.useRef(null);
    var listRef = React80.useRef(null);
    var _useDelayReset = useDelayReset(), _useDelayReset2 = _slicedToArray(_useDelayReset, 3), mockFocused = _useDelayReset2[0], setMockFocused = _useDelayReset2[1], cancelSetMockFocused = _useDelayReset2[2];
    React80.useImperativeHandle(ref, function() {
      var _selectorRef$current, _selectorRef$current2;
      return {
        focus: (_selectorRef$current = selectorRef.current) === null || _selectorRef$current === void 0 ? void 0 : _selectorRef$current.focus,
        blur: (_selectorRef$current2 = selectorRef.current) === null || _selectorRef$current2 === void 0 ? void 0 : _selectorRef$current2.blur,
        scrollTo: function scrollTo(arg) {
          var _listRef$current;
          return (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.scrollTo(arg);
        }
      };
    });
    var mergedSearchValue = React80.useMemo(function() {
      var _displayValues$;
      if (mode !== "combobox") {
        return searchValue;
      }
      var val = (_displayValues$ = displayValues[0]) === null || _displayValues$ === void 0 ? void 0 : _displayValues$.value;
      return typeof val === "string" || typeof val === "number" ? String(val) : "";
    }, [searchValue, mode, displayValues]);
    var customizeInputElement = mode === "combobox" && typeof getInputElement === "function" && getInputElement() || null;
    var customizeRawInputElement = typeof getRawInputElement === "function" && getRawInputElement();
    var customizeRawInputRef = useComposeRef(selectorDomRef, customizeRawInputElement === null || customizeRawInputElement === void 0 ? void 0 : (_customizeRawInputEle = customizeRawInputElement.props) === null || _customizeRawInputEle === void 0 ? void 0 : _customizeRawInputEle.ref);
    var _useMergedState = useMergedState(void 0, {
      defaultValue: defaultOpen,
      value: open
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), innerOpen = _useMergedState2[0], setInnerOpen = _useMergedState2[1];
    var mergedOpen = innerOpen;
    var emptyListContent = !notFoundContent && emptyOptions;
    if (disabled || emptyListContent && mergedOpen && mode === "combobox") {
      mergedOpen = false;
    }
    var triggerOpen = emptyListContent ? false : mergedOpen;
    var onToggleOpen = React80.useCallback(function(newOpen) {
      var nextOpen = newOpen !== void 0 ? newOpen : !mergedOpen;
      if (!disabled) {
        setInnerOpen(nextOpen);
        if (mergedOpen !== nextOpen) {
          onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(nextOpen);
        }
      }
    }, [disabled, mergedOpen, setInnerOpen, onDropdownVisibleChange]);
    var tokenWithEnter = React80.useMemo(function() {
      return (tokenSeparators || []).some(function(tokenSeparator) {
        return ["\n", "\r\n"].includes(tokenSeparator);
      });
    }, [tokenSeparators]);
    var onInternalSearch = function onInternalSearch2(searchText, fromTyping, isCompositing) {
      var ret = true;
      var newSearchText = searchText;
      onActiveValueChange === null || onActiveValueChange === void 0 ? void 0 : onActiveValueChange(null);
      var patchLabels = isCompositing ? null : getSeparatedContent(searchText, tokenSeparators);
      if (mode !== "combobox" && patchLabels) {
        newSearchText = "";
        onSearchSplit === null || onSearchSplit === void 0 ? void 0 : onSearchSplit(patchLabels);
        onToggleOpen(false);
        ret = false;
      }
      if (onSearch && mergedSearchValue !== newSearchText) {
        onSearch(newSearchText, {
          source: fromTyping ? "typing" : "effect"
        });
      }
      return ret;
    };
    var onInternalSearchSubmit = function onInternalSearchSubmit2(searchText) {
      if (!searchText || !searchText.trim()) {
        return;
      }
      onSearch(searchText, {
        source: "submit"
      });
    };
    React80.useEffect(function() {
      if (!mergedOpen && !multiple && mode !== "combobox") {
        onInternalSearch("", false, false);
      }
    }, [mergedOpen]);
    React80.useEffect(function() {
      if (innerOpen && disabled) {
        setInnerOpen(false);
      }
      if (disabled) {
        setMockFocused(false);
      }
    }, [disabled]);
    var _useLock = useLock(), _useLock2 = _slicedToArray(_useLock, 2), getClearLock = _useLock2[0], setClearLock = _useLock2[1];
    var onInternalKeyDown = function onInternalKeyDown2(event) {
      var clearLock = getClearLock();
      var which = event.which;
      if (which === KeyCode_default.ENTER) {
        if (mode !== "combobox") {
          event.preventDefault();
        }
        if (!mergedOpen) {
          onToggleOpen(true);
        }
      }
      setClearLock(!!mergedSearchValue);
      if (which === KeyCode_default.BACKSPACE && !clearLock && multiple && !mergedSearchValue && displayValues.length) {
        var cloneDisplayValues = _toConsumableArray(displayValues);
        var removedDisplayValue = null;
        for (var i3 = cloneDisplayValues.length - 1; i3 >= 0; i3 -= 1) {
          var current = cloneDisplayValues[i3];
          if (!current.disabled) {
            cloneDisplayValues.splice(i3, 1);
            removedDisplayValue = current;
            break;
          }
        }
        if (removedDisplayValue) {
          onDisplayValuesChange(cloneDisplayValues, {
            type: "remove",
            values: [removedDisplayValue]
          });
        }
      }
      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }
      if (mergedOpen && listRef.current) {
        var _listRef$current2;
        (_listRef$current2 = listRef.current).onKeyDown.apply(_listRef$current2, [event].concat(rest));
      }
      onKeyDown2 === null || onKeyDown2 === void 0 ? void 0 : onKeyDown2.apply(void 0, [event].concat(rest));
    };
    var onInternalKeyUp = function onInternalKeyUp2(event) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        rest[_key2 - 1] = arguments[_key2];
      }
      if (mergedOpen && listRef.current) {
        var _listRef$current3;
        (_listRef$current3 = listRef.current).onKeyUp.apply(_listRef$current3, [event].concat(rest));
      }
      onKeyUp2 === null || onKeyUp2 === void 0 ? void 0 : onKeyUp2.apply(void 0, [event].concat(rest));
    };
    var onSelectorRemove = function onSelectorRemove2(val) {
      var newValues = displayValues.filter(function(i3) {
        return i3 !== val;
      });
      onDisplayValuesChange(newValues, {
        type: "remove",
        values: [val]
      });
    };
    var focusRef = React80.useRef(false);
    var onContainerFocus = function onContainerFocus2() {
      setMockFocused(true);
      if (!disabled) {
        if (onFocus2 && !focusRef.current) {
          onFocus2.apply(void 0, arguments);
        }
        if (showAction.includes("focus")) {
          onToggleOpen(true);
        }
      }
      focusRef.current = true;
    };
    var onContainerBlur = function onContainerBlur2() {
      setMockFocused(false, function() {
        focusRef.current = false;
        onToggleOpen(false);
      });
      if (disabled) {
        return;
      }
      if (mergedSearchValue) {
        if (mode === "tags") {
          onSearch(mergedSearchValue, {
            source: "submit"
          });
        } else if (mode === "multiple") {
          onSearch("", {
            source: "blur"
          });
        }
      }
      if (onBlur2) {
        onBlur2.apply(void 0, arguments);
      }
    };
    var activeTimeoutIds = [];
    React80.useEffect(function() {
      return function() {
        activeTimeoutIds.forEach(function(timeoutId) {
          return clearTimeout(timeoutId);
        });
        activeTimeoutIds.splice(0, activeTimeoutIds.length);
      };
    }, []);
    var onInternalMouseDown = function onInternalMouseDown2(event) {
      var _triggerRef$current;
      var target = event.target;
      var popupElement = (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : _triggerRef$current.getPopupElement();
      if (popupElement && popupElement.contains(target)) {
        var timeoutId = setTimeout(function() {
          var index3 = activeTimeoutIds.indexOf(timeoutId);
          if (index3 !== -1) {
            activeTimeoutIds.splice(index3, 1);
          }
          cancelSetMockFocused();
          if (!mobile && !popupElement.contains(document.activeElement)) {
            var _selectorRef$current3;
            (_selectorRef$current3 = selectorRef.current) === null || _selectorRef$current3 === void 0 ? void 0 : _selectorRef$current3.focus();
          }
        });
        activeTimeoutIds.push(timeoutId);
      }
      for (var _len3 = arguments.length, restArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        restArgs[_key3 - 1] = arguments[_key3];
      }
      onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown.apply(void 0, [event].concat(restArgs));
    };
    var _React$useState3 = React80.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), containerWidth = _React$useState4[0], setContainerWidth = _React$useState4[1];
    var _React$useState5 = React80.useState({}), _React$useState6 = _slicedToArray(_React$useState5, 2), forceUpdate = _React$useState6[1];
    function onPopupMouseEnter() {
      forceUpdate({});
    }
    useLayoutEffect_default(function() {
      if (triggerOpen) {
        var _containerRef$current;
        var newWidth = Math.ceil((_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.offsetWidth);
        if (containerWidth !== newWidth && !Number.isNaN(newWidth)) {
          setContainerWidth(newWidth);
        }
      }
    }, [triggerOpen]);
    var onTriggerVisibleChange;
    if (customizeRawInputElement) {
      onTriggerVisibleChange = function onTriggerVisibleChange2(newOpen) {
        onToggleOpen(newOpen);
      };
    }
    useSelectTriggerControl(function() {
      var _triggerRef$current2;
      return [containerRef.current, (_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : _triggerRef$current2.getPopupElement()];
    }, triggerOpen, onToggleOpen, !!customizeRawInputElement);
    var baseSelectContext = React80.useMemo(function() {
      return _objectSpread2(_objectSpread2({}, props), {}, {
        notFoundContent,
        open: mergedOpen,
        triggerOpen,
        id: id2,
        showSearch: mergedShowSearch,
        multiple,
        toggleOpen: onToggleOpen
      });
    }, [props, notFoundContent, triggerOpen, mergedOpen, id2, mergedShowSearch, multiple, onToggleOpen]);
    var mergedShowArrow = showArrow !== void 0 ? showArrow : loading || !multiple && mode !== "combobox";
    var arrowNode;
    if (mergedShowArrow) {
      arrowNode = /* @__PURE__ */ React80.createElement(TransBtn_default, {
        className: (0, import_classnames19.default)("".concat(prefixCls, "-arrow"), _defineProperty({}, "".concat(prefixCls, "-arrow-loading"), loading)),
        customizeIcon: inputIcon,
        customizeIconProps: {
          loading,
          searchValue: mergedSearchValue,
          open: mergedOpen,
          focused: mockFocused,
          showSearch: mergedShowSearch
        }
      });
    }
    var clearNode;
    var onClearMouseDown = function onClearMouseDown2() {
      var _selectorRef$current4;
      onClear === null || onClear === void 0 ? void 0 : onClear();
      (_selectorRef$current4 = selectorRef.current) === null || _selectorRef$current4 === void 0 ? void 0 : _selectorRef$current4.focus();
      onDisplayValuesChange([], {
        type: "clear",
        values: displayValues
      });
      onInternalSearch("", false, false);
    };
    if (!disabled && allowClear && (displayValues.length || mergedSearchValue) && !(mode === "combobox" && mergedSearchValue === "")) {
      clearNode = /* @__PURE__ */ React80.createElement(TransBtn_default, {
        className: "".concat(prefixCls, "-clear"),
        onMouseDown: onClearMouseDown,
        customizeIcon: clearIcon
      }, "\xD7");
    }
    var optionList = /* @__PURE__ */ React80.createElement(OptionList3, {
      ref: listRef
    });
    var mergedClassName = (0, import_classnames19.default)(prefixCls, className, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-focused"), mockFocused), _defineProperty(_classNames2, "".concat(prefixCls, "-multiple"), multiple), _defineProperty(_classNames2, "".concat(prefixCls, "-single"), !multiple), _defineProperty(_classNames2, "".concat(prefixCls, "-allow-clear"), allowClear), _defineProperty(_classNames2, "".concat(prefixCls, "-show-arrow"), mergedShowArrow), _defineProperty(_classNames2, "".concat(prefixCls, "-disabled"), disabled), _defineProperty(_classNames2, "".concat(prefixCls, "-loading"), loading), _defineProperty(_classNames2, "".concat(prefixCls, "-open"), mergedOpen), _defineProperty(_classNames2, "".concat(prefixCls, "-customize-input"), customizeInputElement), _defineProperty(_classNames2, "".concat(prefixCls, "-show-search"), mergedShowSearch), _classNames2));
    var selectorNode = /* @__PURE__ */ React80.createElement(SelectTrigger_default, {
      ref: triggerRef,
      disabled,
      prefixCls,
      visible: triggerOpen,
      popupElement: optionList,
      containerWidth,
      animation,
      transitionName: transitionName2,
      dropdownStyle,
      dropdownClassName,
      direction,
      dropdownMatchSelectWidth,
      dropdownRender,
      dropdownAlign,
      placement,
      getPopupContainer,
      empty: emptyOptions,
      getTriggerDOMNode: function getTriggerDOMNode() {
        return selectorDomRef.current;
      },
      onPopupVisibleChange: onTriggerVisibleChange,
      onPopupMouseEnter
    }, customizeRawInputElement ? /* @__PURE__ */ React80.cloneElement(customizeRawInputElement, {
      ref: customizeRawInputRef
    }) : /* @__PURE__ */ React80.createElement(Selector_default, _extends({}, props, {
      domRef: selectorDomRef,
      prefixCls,
      inputElement: customizeInputElement,
      ref: selectorRef,
      id: id2,
      showSearch: mergedShowSearch,
      autoClearSearchValue,
      mode,
      activeDescendantId,
      tagRender,
      values: displayValues,
      open: mergedOpen,
      onToggleOpen,
      activeValue,
      searchValue: mergedSearchValue,
      onSearch: onInternalSearch,
      onSearchSubmit: onInternalSearchSubmit,
      onRemove: onSelectorRemove,
      tokenWithEnter
    })));
    var renderNode;
    if (customizeRawInputElement) {
      renderNode = selectorNode;
    } else {
      renderNode = /* @__PURE__ */ React80.createElement("div", _extends({
        className: mergedClassName
      }, domProps, {
        ref: containerRef,
        onMouseDown: onInternalMouseDown,
        onKeyDown: onInternalKeyDown,
        onKeyUp: onInternalKeyUp,
        onFocus: onContainerFocus,
        onBlur: onContainerBlur
      }), mockFocused && !mergedOpen && /* @__PURE__ */ React80.createElement("span", {
        style: {
          width: 0,
          height: 0,
          position: "absolute",
          overflow: "hidden",
          opacity: 0
        },
        "aria-live": "polite"
      }, "".concat(displayValues.map(function(_ref) {
        var label = _ref.label, value = _ref.value;
        return ["number", "string"].includes(_typeof(label)) ? label : value;
      }).join(", "))), selectorNode, arrowNode, clearNode);
    }
    return /* @__PURE__ */ React80.createElement(BaseSelectContext.Provider, {
      value: baseSelectContext
    }, renderNode);
  });
  if (true) {
    BaseSelect.displayName = "BaseSelect";
  }
  var BaseSelect_default = BaseSelect;

  // node_modules/rc-select/es/hooks/useCache.js
  var React81 = __toESM(require_react());
  var useCache_default = function(labeledValues, valueOptions) {
    var cacheRef = React81.useRef({
      values: /* @__PURE__ */ new Map(),
      options: /* @__PURE__ */ new Map()
    });
    var filledLabeledValues = React81.useMemo(function() {
      var _cacheRef$current = cacheRef.current, prevValueCache = _cacheRef$current.values, prevOptionCache = _cacheRef$current.options;
      var patchedValues = labeledValues.map(function(item) {
        if (item.label === void 0) {
          var _prevValueCache$get;
          return _objectSpread2(_objectSpread2({}, item), {}, {
            label: (_prevValueCache$get = prevValueCache.get(item.value)) === null || _prevValueCache$get === void 0 ? void 0 : _prevValueCache$get.label
          });
        }
        return item;
      });
      var valueCache = /* @__PURE__ */ new Map();
      var optionCache = /* @__PURE__ */ new Map();
      patchedValues.forEach(function(item) {
        valueCache.set(item.value, item);
        optionCache.set(item.value, valueOptions.get(item.value) || prevOptionCache.get(item.value));
      });
      cacheRef.current.values = valueCache;
      cacheRef.current.options = optionCache;
      return patchedValues;
    }, [labeledValues, valueOptions]);
    var getOption = React81.useCallback(function(val) {
      return valueOptions.get(val) || cacheRef.current.options.get(val);
    }, [valueOptions]);
    return [filledLabeledValues, getOption];
  };

  // node_modules/rc-select/es/hooks/useFilterOptions.js
  var React82 = __toESM(require_react());
  function includes(test, search) {
    return toArray3(test).join("").toUpperCase().includes(search);
  }
  var useFilterOptions_default = function(options, fieldNames, searchValue, filterOption, optionFilterProp) {
    return React82.useMemo(function() {
      if (!searchValue || filterOption === false) {
        return options;
      }
      var fieldOptions = fieldNames.options, fieldLabel = fieldNames.label, fieldValue = fieldNames.value;
      var filteredOptions = [];
      var customizeFilter = typeof filterOption === "function";
      var upperSearch = searchValue.toUpperCase();
      var filterFunc = customizeFilter ? filterOption : function(_, option) {
        if (optionFilterProp) {
          return includes(option[optionFilterProp], upperSearch);
        }
        if (option[fieldOptions]) {
          return includes(option[fieldLabel !== "children" ? fieldLabel : "label"], upperSearch);
        }
        return includes(option[fieldValue], upperSearch);
      };
      var wrapOption = customizeFilter ? function(opt) {
        return injectPropsWithOption(opt);
      } : function(opt) {
        return opt;
      };
      options.forEach(function(item) {
        if (item[fieldOptions]) {
          var matchGroup = filterFunc(searchValue, wrapOption(item));
          if (matchGroup) {
            filteredOptions.push(item);
          } else {
            var subOptions = item[fieldOptions].filter(function(subItem) {
              return filterFunc(searchValue, wrapOption(subItem));
            });
            if (subOptions.length) {
              filteredOptions.push(_objectSpread2(_objectSpread2({}, item), {}, _defineProperty({}, fieldOptions, subOptions)));
            }
          }
          return;
        }
        if (filterFunc(searchValue, wrapOption(item))) {
          filteredOptions.push(item);
        }
      });
      return filteredOptions;
    }, [options, filterOption, optionFilterProp, searchValue, fieldNames]);
  };

  // node_modules/rc-select/es/hooks/useId.js
  var React83 = __toESM(require_react());
  var uuid = 0;
  var isBrowserClient2 = canUseDom();
  function getUUID() {
    var retId;
    if (isBrowserClient2) {
      retId = uuid;
      uuid += 1;
    } else {
      retId = "TEST_OR_SSR";
    }
    return retId;
  }
  function useId(id2) {
    var _React$useState = React83.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), innerId = _React$useState2[0], setInnerId = _React$useState2[1];
    React83.useEffect(function() {
      setInnerId("rc_select_".concat(getUUID()));
    }, []);
    return id2 || innerId;
  }

  // node_modules/rc-select/es/hooks/useOptions.js
  var React85 = __toESM(require_react());

  // node_modules/rc-select/es/utils/legacyUtil.js
  var React84 = __toESM(require_react());
  var _excluded14 = ["children", "value"];
  var _excluded24 = ["children"];
  function convertNodeToOption(node) {
    var _ref = node, key2 = _ref.key, _ref$props = _ref.props, children = _ref$props.children, value = _ref$props.value, restProps = _objectWithoutProperties(_ref$props, _excluded14);
    return _objectSpread2({
      key: key2,
      value: value !== void 0 ? value : key2,
      children
    }, restProps);
  }
  function convertChildrenToData(nodes) {
    var optionOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    return toArray(nodes).map(function(node, index3) {
      if (!/* @__PURE__ */ React84.isValidElement(node) || !node.type) {
        return null;
      }
      var _ref2 = node, isSelectOptGroup = _ref2.type.isSelectOptGroup, key2 = _ref2.key, _ref2$props = _ref2.props, children = _ref2$props.children, restProps = _objectWithoutProperties(_ref2$props, _excluded24);
      if (optionOnly || !isSelectOptGroup) {
        return convertNodeToOption(node);
      }
      return _objectSpread2(_objectSpread2({
        key: "__RC_SELECT_GRP__".concat(key2 === null ? index3 : key2, "__"),
        label: key2
      }, restProps), {}, {
        options: convertChildrenToData(children)
      });
    }).filter(function(data) {
      return data;
    });
  }

  // node_modules/rc-select/es/hooks/useOptions.js
  function useOptions(options, children, fieldNames, optionFilterProp, optionLabelProp) {
    return React85.useMemo(function() {
      var mergedOptions = options;
      var childrenAsData = !options;
      if (childrenAsData) {
        mergedOptions = convertChildrenToData(children);
      }
      var valueOptions = /* @__PURE__ */ new Map();
      var labelOptions = /* @__PURE__ */ new Map();
      var setLabelOptions = function setLabelOptions2(labelOptionsMap, option, key2) {
        if (key2 && typeof key2 === "string") {
          labelOptionsMap.set(option[key2], option);
        }
      };
      function dig(optionList) {
        var isChildren = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        for (var i3 = 0; i3 < optionList.length; i3 += 1) {
          var option = optionList[i3];
          if (!option[fieldNames.options] || isChildren) {
            valueOptions.set(option[fieldNames.value], option);
            setLabelOptions(labelOptions, option, fieldNames.label);
            setLabelOptions(labelOptions, option, optionFilterProp);
            setLabelOptions(labelOptions, option, optionLabelProp);
          } else {
            dig(option[fieldNames.options], true);
          }
        }
      }
      dig(mergedOptions);
      return {
        options: mergedOptions,
        valueOptions,
        labelOptions
      };
    }, [options, children, fieldNames, optionFilterProp, optionLabelProp]);
  }

  // node_modules/rc-select/es/hooks/useRefFunc.js
  var React86 = __toESM(require_react());
  function useRefFunc(callback) {
    var funcRef = React86.useRef();
    funcRef.current = callback;
    var cacheFn = React86.useCallback(function() {
      return funcRef.current.apply(funcRef, arguments);
    }, []);
    return cacheFn;
  }

  // node_modules/rc-select/es/OptGroup.js
  var OptGroup = function OptGroup2() {
    return null;
  };
  OptGroup.isSelectOptGroup = true;
  var OptGroup_default = OptGroup;

  // node_modules/rc-select/es/Option.js
  var Option = function Option2() {
    return null;
  };
  Option.isSelectOption = true;
  var Option_default = Option;

  // node_modules/rc-select/es/OptionList.js
  var React96 = __toESM(require_react());
  var import_react27 = __toESM(require_react());
  var import_classnames23 = __toESM(require_classnames());

  // node_modules/rc-virtual-list/es/List.js
  var React94 = __toESM(require_react());
  var import_react26 = __toESM(require_react());
  var import_classnames22 = __toESM(require_classnames());

  // node_modules/rc-virtual-list/es/Filler.js
  var React87 = __toESM(require_react());
  var import_classnames20 = __toESM(require_classnames());
  var Filler = /* @__PURE__ */ React87.forwardRef(function(_ref, ref) {
    var height = _ref.height, offset3 = _ref.offset, children = _ref.children, prefixCls = _ref.prefixCls, onInnerResize = _ref.onInnerResize, innerProps = _ref.innerProps;
    var outerStyle = {};
    var innerStyle = {
      display: "flex",
      flexDirection: "column"
    };
    if (offset3 !== void 0) {
      outerStyle = {
        height,
        position: "relative",
        overflow: "hidden"
      };
      innerStyle = _objectSpread2(_objectSpread2({}, innerStyle), {}, {
        transform: "translateY(".concat(offset3, "px)"),
        position: "absolute",
        left: 0,
        right: 0,
        top: 0
      });
    }
    return /* @__PURE__ */ React87.createElement("div", {
      style: outerStyle
    }, /* @__PURE__ */ React87.createElement(es_default, {
      onResize: function onResize2(_ref2) {
        var offsetHeight = _ref2.offsetHeight;
        if (offsetHeight && onInnerResize) {
          onInnerResize();
        }
      }
    }, /* @__PURE__ */ React87.createElement("div", _extends({
      style: innerStyle,
      className: (0, import_classnames20.default)(_defineProperty({}, "".concat(prefixCls, "-holder-inner"), prefixCls)),
      ref
    }, innerProps), children)));
  });
  Filler.displayName = "Filler";
  var Filler_default = Filler;

  // node_modules/rc-virtual-list/es/ScrollBar.js
  var React88 = __toESM(require_react());
  var import_classnames21 = __toESM(require_classnames());
  var MIN_SIZE = 20;
  function getPageY(e3) {
    return "touches" in e3 ? e3.touches[0].pageY : e3.pageY;
  }
  var ScrollBar = /* @__PURE__ */ function(_React$Component) {
    _inherits(ScrollBar2, _React$Component);
    var _super = _createSuper(ScrollBar2);
    function ScrollBar2() {
      var _this;
      _classCallCheck(this, ScrollBar2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.moveRaf = null;
      _this.scrollbarRef = /* @__PURE__ */ React88.createRef();
      _this.thumbRef = /* @__PURE__ */ React88.createRef();
      _this.visibleTimeout = null;
      _this.state = {
        dragging: false,
        pageY: null,
        startTop: null,
        visible: false
      };
      _this.delayHidden = function() {
        clearTimeout(_this.visibleTimeout);
        _this.setState({
          visible: true
        });
        _this.visibleTimeout = setTimeout(function() {
          _this.setState({
            visible: false
          });
        }, 2e3);
      };
      _this.onScrollbarTouchStart = function(e3) {
        e3.preventDefault();
      };
      _this.onContainerMouseDown = function(e3) {
        e3.stopPropagation();
        e3.preventDefault();
      };
      _this.patchEvents = function() {
        window.addEventListener("mousemove", _this.onMouseMove);
        window.addEventListener("mouseup", _this.onMouseUp);
        _this.thumbRef.current.addEventListener("touchmove", _this.onMouseMove);
        _this.thumbRef.current.addEventListener("touchend", _this.onMouseUp);
      };
      _this.removeEvents = function() {
        var _this$scrollbarRef$cu;
        window.removeEventListener("mousemove", _this.onMouseMove);
        window.removeEventListener("mouseup", _this.onMouseUp);
        (_this$scrollbarRef$cu = _this.scrollbarRef.current) === null || _this$scrollbarRef$cu === void 0 ? void 0 : _this$scrollbarRef$cu.removeEventListener("touchstart", _this.onScrollbarTouchStart);
        if (_this.thumbRef.current) {
          _this.thumbRef.current.removeEventListener("touchstart", _this.onMouseDown);
          _this.thumbRef.current.removeEventListener("touchmove", _this.onMouseMove);
          _this.thumbRef.current.removeEventListener("touchend", _this.onMouseUp);
        }
        raf_default.cancel(_this.moveRaf);
      };
      _this.onMouseDown = function(e3) {
        var onStartMove = _this.props.onStartMove;
        _this.setState({
          dragging: true,
          pageY: getPageY(e3),
          startTop: _this.getTop()
        });
        onStartMove();
        _this.patchEvents();
        e3.stopPropagation();
        e3.preventDefault();
      };
      _this.onMouseMove = function(e3) {
        var _this$state = _this.state, dragging = _this$state.dragging, pageY = _this$state.pageY, startTop = _this$state.startTop;
        var onScroll = _this.props.onScroll;
        raf_default.cancel(_this.moveRaf);
        if (dragging) {
          var offsetY = getPageY(e3) - pageY;
          var newTop = startTop + offsetY;
          var enableScrollRange = _this.getEnableScrollRange();
          var enableHeightRange = _this.getEnableHeightRange();
          var ptg = enableHeightRange ? newTop / enableHeightRange : 0;
          var newScrollTop = Math.ceil(ptg * enableScrollRange);
          _this.moveRaf = raf_default(function() {
            onScroll(newScrollTop);
          });
        }
      };
      _this.onMouseUp = function() {
        var onStopMove = _this.props.onStopMove;
        _this.setState({
          dragging: false
        });
        onStopMove();
        _this.removeEvents();
      };
      _this.getSpinHeight = function() {
        var _this$props = _this.props, height = _this$props.height, count2 = _this$props.count;
        var baseHeight = height / count2 * 10;
        baseHeight = Math.max(baseHeight, MIN_SIZE);
        baseHeight = Math.min(baseHeight, height / 2);
        return Math.floor(baseHeight);
      };
      _this.getEnableScrollRange = function() {
        var _this$props2 = _this.props, scrollHeight = _this$props2.scrollHeight, height = _this$props2.height;
        return scrollHeight - height || 0;
      };
      _this.getEnableHeightRange = function() {
        var height = _this.props.height;
        var spinHeight = _this.getSpinHeight();
        return height - spinHeight || 0;
      };
      _this.getTop = function() {
        var scrollTop = _this.props.scrollTop;
        var enableScrollRange = _this.getEnableScrollRange();
        var enableHeightRange = _this.getEnableHeightRange();
        if (scrollTop === 0 || enableScrollRange === 0) {
          return 0;
        }
        var ptg = scrollTop / enableScrollRange;
        return ptg * enableHeightRange;
      };
      _this.showScroll = function() {
        var _this$props3 = _this.props, height = _this$props3.height, scrollHeight = _this$props3.scrollHeight;
        return scrollHeight > height;
      };
      return _this;
    }
    _createClass(ScrollBar2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.scrollbarRef.current.addEventListener("touchstart", this.onScrollbarTouchStart);
        this.thumbRef.current.addEventListener("touchstart", this.onMouseDown);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.scrollTop !== this.props.scrollTop) {
          this.delayHidden();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.removeEvents();
        clearTimeout(this.visibleTimeout);
      }
    }, {
      key: "render",
      value: (
        // ====================== Render =======================
        function render4() {
          var _this$state2 = this.state, dragging = _this$state2.dragging, visible = _this$state2.visible;
          var prefixCls = this.props.prefixCls;
          var spinHeight = this.getSpinHeight();
          var top = this.getTop();
          var canScroll = this.showScroll();
          var mergedVisible = canScroll && visible;
          return /* @__PURE__ */ React88.createElement("div", {
            ref: this.scrollbarRef,
            className: (0, import_classnames21.default)("".concat(prefixCls, "-scrollbar"), _defineProperty({}, "".concat(prefixCls, "-scrollbar-show"), canScroll)),
            style: {
              width: 8,
              top: 0,
              bottom: 0,
              right: 0,
              position: "absolute",
              display: mergedVisible ? null : "none"
            },
            onMouseDown: this.onContainerMouseDown,
            onMouseMove: this.delayHidden
          }, /* @__PURE__ */ React88.createElement("div", {
            ref: this.thumbRef,
            className: (0, import_classnames21.default)("".concat(prefixCls, "-scrollbar-thumb"), _defineProperty({}, "".concat(prefixCls, "-scrollbar-thumb-moving"), dragging)),
            style: {
              width: "100%",
              height: spinHeight,
              top,
              left: 0,
              position: "absolute",
              background: "rgba(0, 0, 0, 0.5)",
              borderRadius: 99,
              cursor: "pointer",
              userSelect: "none"
            },
            onMouseDown: this.onMouseDown
          }));
        }
      )
    }]);
    return ScrollBar2;
  }(React88.Component);

  // node_modules/rc-virtual-list/es/hooks/useChildren.js
  var React90 = __toESM(require_react());

  // node_modules/rc-virtual-list/es/Item.js
  var React89 = __toESM(require_react());
  function Item2(_ref) {
    var children = _ref.children, setRef = _ref.setRef;
    var refFunc = React89.useCallback(function(node) {
      setRef(node);
    }, []);
    return /* @__PURE__ */ React89.cloneElement(children, {
      ref: refFunc
    });
  }

  // node_modules/rc-virtual-list/es/hooks/useChildren.js
  function useChildren(list, startIndex, endIndex, setNodeRef, renderFunc, _ref) {
    var getKey2 = _ref.getKey;
    return list.slice(startIndex, endIndex + 1).map(function(item, index3) {
      var eleIndex = startIndex + index3;
      var node = renderFunc(item, eleIndex, {
        // style: status === 'MEASURE_START' ? { visibility: 'hidden' } : {},
      });
      var key2 = getKey2(item);
      return /* @__PURE__ */ React90.createElement(Item2, {
        key: key2,
        setRef: function setRef(ele) {
          return setNodeRef(item, ele);
        }
      }, node);
    });
  }

  // node_modules/rc-virtual-list/es/hooks/useHeights.js
  var React91 = __toESM(require_react());
  var import_react22 = __toESM(require_react());

  // node_modules/rc-virtual-list/es/utils/CacheMap.js
  var CacheMap = /* @__PURE__ */ function() {
    function CacheMap2() {
      _classCallCheck(this, CacheMap2);
      this.maps = void 0;
      this.maps = /* @__PURE__ */ Object.create(null);
    }
    _createClass(CacheMap2, [{
      key: "set",
      value: function set2(key2, value) {
        this.maps[key2] = value;
      }
    }, {
      key: "get",
      value: function get3(key2) {
        return this.maps[key2];
      }
    }]);
    return CacheMap2;
  }();
  var CacheMap_default = CacheMap;

  // node_modules/rc-virtual-list/es/hooks/useHeights.js
  function useHeights(getKey2, onItemAdd, onItemRemove) {
    var _React$useState = React91.useState(0), _React$useState2 = _slicedToArray(_React$useState, 2), updatedMark = _React$useState2[0], setUpdatedMark = _React$useState2[1];
    var instanceRef = (0, import_react22.useRef)(/* @__PURE__ */ new Map());
    var heightsRef = (0, import_react22.useRef)(new CacheMap_default());
    var collectRafRef = (0, import_react22.useRef)();
    function cancelRaf() {
      raf_default.cancel(collectRafRef.current);
    }
    function collectHeight() {
      cancelRaf();
      collectRafRef.current = raf_default(function() {
        instanceRef.current.forEach(function(element, key2) {
          if (element && element.offsetParent) {
            var htmlElement = findDOMNode(element);
            var offsetHeight = htmlElement.offsetHeight;
            if (heightsRef.current.get(key2) !== offsetHeight) {
              heightsRef.current.set(key2, htmlElement.offsetHeight);
            }
          }
        });
        setUpdatedMark(function(c2) {
          return c2 + 1;
        });
      });
    }
    function setInstanceRef(item, instance) {
      var key2 = getKey2(item);
      var origin = instanceRef.current.get(key2);
      if (instance) {
        instanceRef.current.set(key2, instance);
        collectHeight();
      } else {
        instanceRef.current.delete(key2);
      }
      if (!origin !== !instance) {
        if (instance) {
          onItemAdd === null || onItemAdd === void 0 ? void 0 : onItemAdd(item);
        } else {
          onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(item);
        }
      }
    }
    (0, import_react22.useEffect)(function() {
      return cancelRaf;
    }, []);
    return [setInstanceRef, collectHeight, heightsRef.current, updatedMark];
  }

  // node_modules/rc-virtual-list/es/hooks/useScrollTo.js
  var React92 = __toESM(require_react());
  function useScrollTo(containerRef, data, heights, itemHeight, getKey2, collectHeight, syncScrollTop, triggerFlash) {
    var scrollRef = React92.useRef();
    return function(arg) {
      if (arg === null || arg === void 0) {
        triggerFlash();
        return;
      }
      raf_default.cancel(scrollRef.current);
      if (typeof arg === "number") {
        syncScrollTop(arg);
      } else if (arg && _typeof(arg) === "object") {
        var index3;
        var align = arg.align;
        if ("index" in arg) {
          index3 = arg.index;
        } else {
          index3 = data.findIndex(function(item) {
            return getKey2(item) === arg.key;
          });
        }
        var _arg$offset = arg.offset, offset3 = _arg$offset === void 0 ? 0 : _arg$offset;
        var syncScroll = function syncScroll2(times, targetAlign) {
          if (times < 0 || !containerRef.current)
            return;
          var height = containerRef.current.clientHeight;
          var needCollectHeight = false;
          var newTargetAlign = targetAlign;
          if (height) {
            var mergedAlign = targetAlign || align;
            var stackTop = 0;
            var itemTop = 0;
            var itemBottom = 0;
            var maxLen = Math.min(data.length, index3);
            for (var i3 = 0; i3 <= maxLen; i3 += 1) {
              var key2 = getKey2(data[i3]);
              itemTop = stackTop;
              var cacheHeight = heights.get(key2);
              itemBottom = itemTop + (cacheHeight === void 0 ? itemHeight : cacheHeight);
              stackTop = itemBottom;
              if (i3 === index3 && cacheHeight === void 0) {
                needCollectHeight = true;
              }
            }
            var targetTop = null;
            switch (mergedAlign) {
              case "top":
                targetTop = itemTop - offset3;
                break;
              case "bottom":
                targetTop = itemBottom - height + offset3;
                break;
              default: {
                var scrollTop = containerRef.current.scrollTop;
                var scrollBottom = scrollTop + height;
                if (itemTop < scrollTop) {
                  newTargetAlign = "top";
                } else if (itemBottom > scrollBottom) {
                  newTargetAlign = "bottom";
                }
              }
            }
            if (targetTop !== null && targetTop !== containerRef.current.scrollTop) {
              syncScrollTop(targetTop);
            }
          }
          scrollRef.current = raf_default(function() {
            if (needCollectHeight) {
              collectHeight();
            }
            syncScroll2(times - 1, newTargetAlign);
          }, 2);
        };
        syncScroll(3);
      }
    };
  }

  // node_modules/rc-virtual-list/es/hooks/useDiffItem.js
  var React93 = __toESM(require_react());

  // node_modules/rc-virtual-list/es/utils/algorithmUtil.js
  function findListDiffIndex(originList, targetList, getKey2) {
    var originLen = originList.length;
    var targetLen = targetList.length;
    var shortList;
    var longList;
    if (originLen === 0 && targetLen === 0) {
      return null;
    }
    if (originLen < targetLen) {
      shortList = originList;
      longList = targetList;
    } else {
      shortList = targetList;
      longList = originList;
    }
    var notExistKey = {
      __EMPTY_ITEM__: true
    };
    function getItemKey(item) {
      if (item !== void 0) {
        return getKey2(item);
      }
      return notExistKey;
    }
    var diffIndex = null;
    var multiple = Math.abs(originLen - targetLen) !== 1;
    for (var i3 = 0; i3 < longList.length; i3 += 1) {
      var shortKey = getItemKey(shortList[i3]);
      var longKey = getItemKey(longList[i3]);
      if (shortKey !== longKey) {
        diffIndex = i3;
        multiple = multiple || shortKey !== getItemKey(longList[i3 + 1]);
        break;
      }
    }
    return diffIndex === null ? null : {
      index: diffIndex,
      multiple
    };
  }

  // node_modules/rc-virtual-list/es/hooks/useDiffItem.js
  function useDiffItem(data, getKey2, onDiff) {
    var _React$useState = React93.useState(data), _React$useState2 = _slicedToArray(_React$useState, 2), prevData = _React$useState2[0], setPrevData = _React$useState2[1];
    var _React$useState3 = React93.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), diffItem = _React$useState4[0], setDiffItem = _React$useState4[1];
    React93.useEffect(function() {
      var diff = findListDiffIndex(prevData || [], data || [], getKey2);
      if ((diff === null || diff === void 0 ? void 0 : diff.index) !== void 0) {
        onDiff === null || onDiff === void 0 ? void 0 : onDiff(diff.index);
        setDiffItem(data[diff.index]);
      }
      setPrevData(data);
    }, [data]);
    return [diffItem];
  }

  // node_modules/rc-virtual-list/es/hooks/useFrameWheel.js
  var import_react24 = __toESM(require_react());

  // node_modules/rc-virtual-list/es/utils/isFirefox.js
  var isFF = (typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) === "object" && /Firefox/i.test(navigator.userAgent);
  var isFirefox_default = isFF;

  // node_modules/rc-virtual-list/es/hooks/useOriginScroll.js
  var import_react23 = __toESM(require_react());
  var useOriginScroll_default = function(isScrollAtTop, isScrollAtBottom) {
    var lockRef = (0, import_react23.useRef)(false);
    var lockTimeoutRef = (0, import_react23.useRef)(null);
    function lockScroll() {
      clearTimeout(lockTimeoutRef.current);
      lockRef.current = true;
      lockTimeoutRef.current = setTimeout(function() {
        lockRef.current = false;
      }, 50);
    }
    var scrollPingRef = (0, import_react23.useRef)({
      top: isScrollAtTop,
      bottom: isScrollAtBottom
    });
    scrollPingRef.current.top = isScrollAtTop;
    scrollPingRef.current.bottom = isScrollAtBottom;
    return function(deltaY) {
      var smoothOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var originScroll = (
        // Pass origin wheel when on the top
        deltaY < 0 && scrollPingRef.current.top || // Pass origin wheel when on the bottom
        deltaY > 0 && scrollPingRef.current.bottom
      );
      if (smoothOffset && originScroll) {
        clearTimeout(lockTimeoutRef.current);
        lockRef.current = false;
      } else if (!originScroll || lockRef.current) {
        lockScroll();
      }
      return !lockRef.current && originScroll;
    };
  };

  // node_modules/rc-virtual-list/es/hooks/useFrameWheel.js
  function useFrameWheel(inVirtual, isScrollAtTop, isScrollAtBottom, onWheelDelta) {
    var offsetRef = (0, import_react24.useRef)(0);
    var nextFrameRef = (0, import_react24.useRef)(null);
    var wheelValueRef = (0, import_react24.useRef)(null);
    var isMouseScrollRef = (0, import_react24.useRef)(false);
    var originScroll = useOriginScroll_default(isScrollAtTop, isScrollAtBottom);
    function onWheel(event) {
      if (!inVirtual)
        return;
      raf_default.cancel(nextFrameRef.current);
      var deltaY = event.deltaY;
      offsetRef.current += deltaY;
      wheelValueRef.current = deltaY;
      if (originScroll(deltaY))
        return;
      if (!isFirefox_default) {
        event.preventDefault();
      }
      nextFrameRef.current = raf_default(function() {
        var patchMultiple = isMouseScrollRef.current ? 10 : 1;
        onWheelDelta(offsetRef.current * patchMultiple);
        offsetRef.current = 0;
      });
    }
    function onFireFoxScroll(event) {
      if (!inVirtual)
        return;
      isMouseScrollRef.current = event.detail === wheelValueRef.current;
    }
    return [onWheel, onFireFoxScroll];
  }

  // node_modules/rc-virtual-list/es/hooks/useMobileTouchMove.js
  var import_react25 = __toESM(require_react());
  var SMOOTH_PTG = 14 / 15;
  function useMobileTouchMove(inVirtual, listRef, callback) {
    var touchedRef = (0, import_react25.useRef)(false);
    var touchYRef = (0, import_react25.useRef)(0);
    var elementRef = (0, import_react25.useRef)(null);
    var intervalRef = (0, import_react25.useRef)(null);
    var cleanUpEvents;
    var onTouchMove = function onTouchMove2(e3) {
      if (touchedRef.current) {
        var currentY = Math.ceil(e3.touches[0].pageY);
        var offsetY = touchYRef.current - currentY;
        touchYRef.current = currentY;
        if (callback(offsetY)) {
          e3.preventDefault();
        }
        clearInterval(intervalRef.current);
        intervalRef.current = setInterval(function() {
          offsetY *= SMOOTH_PTG;
          if (!callback(offsetY, true) || Math.abs(offsetY) <= 0.1) {
            clearInterval(intervalRef.current);
          }
        }, 16);
      }
    };
    var onTouchEnd = function onTouchEnd2() {
      touchedRef.current = false;
      cleanUpEvents();
    };
    var onTouchStart = function onTouchStart2(e3) {
      cleanUpEvents();
      if (e3.touches.length === 1 && !touchedRef.current) {
        touchedRef.current = true;
        touchYRef.current = Math.ceil(e3.touches[0].pageY);
        elementRef.current = e3.target;
        elementRef.current.addEventListener("touchmove", onTouchMove);
        elementRef.current.addEventListener("touchend", onTouchEnd);
      }
    };
    cleanUpEvents = function cleanUpEvents2() {
      if (elementRef.current) {
        elementRef.current.removeEventListener("touchmove", onTouchMove);
        elementRef.current.removeEventListener("touchend", onTouchEnd);
      }
    };
    useLayoutEffect_default(function() {
      if (inVirtual) {
        listRef.current.addEventListener("touchstart", onTouchStart);
      }
      return function() {
        var _listRef$current;
        (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.removeEventListener("touchstart", onTouchStart);
        cleanUpEvents();
        clearInterval(intervalRef.current);
      };
    }, [inVirtual]);
  }

  // node_modules/rc-virtual-list/es/List.js
  var _excluded15 = ["prefixCls", "className", "height", "itemHeight", "fullHeight", "style", "data", "children", "itemKey", "virtual", "component", "onScroll", "onVisibleChange", "innerProps"];
  var EMPTY_DATA = [];
  var ScrollStyle = {
    overflowY: "auto",
    overflowAnchor: "none"
  };
  function RawList(props, ref) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-virtual-list" : _props$prefixCls, className = props.className, height = props.height, itemHeight = props.itemHeight, _props$fullHeight = props.fullHeight, fullHeight = _props$fullHeight === void 0 ? true : _props$fullHeight, style2 = props.style, data = props.data, children = props.children, itemKey2 = props.itemKey, virtual = props.virtual, _props$component = props.component, Component27 = _props$component === void 0 ? "div" : _props$component, onScroll = props.onScroll, onVisibleChange = props.onVisibleChange, innerProps = props.innerProps, restProps = _objectWithoutProperties(props, _excluded15);
    var useVirtual = !!(virtual !== false && height && itemHeight);
    var inVirtual = useVirtual && data && itemHeight * data.length > height;
    var _useState = (0, import_react26.useState)(0), _useState2 = _slicedToArray(_useState, 2), scrollTop = _useState2[0], setScrollTop = _useState2[1];
    var _useState3 = (0, import_react26.useState)(false), _useState4 = _slicedToArray(_useState3, 2), scrollMoving = _useState4[0], setScrollMoving = _useState4[1];
    var mergedClassName = (0, import_classnames22.default)(prefixCls, className);
    var mergedData = data || EMPTY_DATA;
    var componentRef = (0, import_react26.useRef)();
    var fillerInnerRef = (0, import_react26.useRef)();
    var scrollBarRef = (0, import_react26.useRef)();
    var getKey2 = React94.useCallback(function(item) {
      if (typeof itemKey2 === "function") {
        return itemKey2(item);
      }
      return item === null || item === void 0 ? void 0 : item[itemKey2];
    }, [itemKey2]);
    var sharedConfig = {
      getKey: getKey2
    };
    function syncScrollTop(newTop) {
      setScrollTop(function(origin) {
        var value;
        if (typeof newTop === "function") {
          value = newTop(origin);
        } else {
          value = newTop;
        }
        var alignedTop = keepInRange(value);
        componentRef.current.scrollTop = alignedTop;
        return alignedTop;
      });
    }
    var rangeRef = (0, import_react26.useRef)({
      start: 0,
      end: mergedData.length
    });
    var diffItemRef = (0, import_react26.useRef)();
    var _useDiffItem = useDiffItem(mergedData, getKey2), _useDiffItem2 = _slicedToArray(_useDiffItem, 1), diffItem = _useDiffItem2[0];
    diffItemRef.current = diffItem;
    var _useHeights = useHeights(getKey2, null, null), _useHeights2 = _slicedToArray(_useHeights, 4), setInstanceRef = _useHeights2[0], collectHeight = _useHeights2[1], heights = _useHeights2[2], heightUpdatedMark = _useHeights2[3];
    var _React$useMemo = React94.useMemo(function() {
      if (!useVirtual) {
        return {
          scrollHeight: void 0,
          start: 0,
          end: mergedData.length - 1,
          offset: void 0
        };
      }
      if (!inVirtual) {
        var _fillerInnerRef$curre;
        return {
          scrollHeight: ((_fillerInnerRef$curre = fillerInnerRef.current) === null || _fillerInnerRef$curre === void 0 ? void 0 : _fillerInnerRef$curre.offsetHeight) || 0,
          start: 0,
          end: mergedData.length - 1,
          offset: void 0
        };
      }
      var itemTop = 0;
      var startIndex;
      var startOffset;
      var endIndex;
      var dataLen = mergedData.length;
      for (var i3 = 0; i3 < dataLen; i3 += 1) {
        var item = mergedData[i3];
        var key2 = getKey2(item);
        var cacheHeight = heights.get(key2);
        var currentItemBottom = itemTop + (cacheHeight === void 0 ? itemHeight : cacheHeight);
        if (currentItemBottom >= scrollTop && startIndex === void 0) {
          startIndex = i3;
          startOffset = itemTop;
        }
        if (currentItemBottom > scrollTop + height && endIndex === void 0) {
          endIndex = i3;
        }
        itemTop = currentItemBottom;
      }
      if (startIndex === void 0) {
        startIndex = 0;
        startOffset = 0;
        endIndex = Math.ceil(height / itemHeight);
      }
      if (endIndex === void 0) {
        endIndex = mergedData.length - 1;
      }
      endIndex = Math.min(endIndex + 1, mergedData.length);
      return {
        scrollHeight: itemTop,
        start: startIndex,
        end: endIndex,
        offset: startOffset
      };
    }, [inVirtual, useVirtual, scrollTop, mergedData, heightUpdatedMark, height]), scrollHeight = _React$useMemo.scrollHeight, start = _React$useMemo.start, end = _React$useMemo.end, offset3 = _React$useMemo.offset;
    rangeRef.current.start = start;
    rangeRef.current.end = end;
    var maxScrollHeight = scrollHeight - height;
    var maxScrollHeightRef = (0, import_react26.useRef)(maxScrollHeight);
    maxScrollHeightRef.current = maxScrollHeight;
    function keepInRange(newScrollTop) {
      var newTop = newScrollTop;
      if (!Number.isNaN(maxScrollHeightRef.current)) {
        newTop = Math.min(newTop, maxScrollHeightRef.current);
      }
      newTop = Math.max(newTop, 0);
      return newTop;
    }
    var isScrollAtTop = scrollTop <= 0;
    var isScrollAtBottom = scrollTop >= maxScrollHeight;
    var originScroll = useOriginScroll_default(isScrollAtTop, isScrollAtBottom);
    function onScrollBar(newScrollTop) {
      var newTop = newScrollTop;
      syncScrollTop(newTop);
    }
    function onFallbackScroll(e3) {
      var newScrollTop = e3.currentTarget.scrollTop;
      if (newScrollTop !== scrollTop) {
        syncScrollTop(newScrollTop);
      }
      onScroll === null || onScroll === void 0 ? void 0 : onScroll(e3);
    }
    var _useFrameWheel = useFrameWheel(useVirtual, isScrollAtTop, isScrollAtBottom, function(offsetY) {
      syncScrollTop(function(top) {
        var newTop = top + offsetY;
        return newTop;
      });
    }), _useFrameWheel2 = _slicedToArray(_useFrameWheel, 2), onRawWheel = _useFrameWheel2[0], onFireFoxScroll = _useFrameWheel2[1];
    useMobileTouchMove(useVirtual, componentRef, function(deltaY, smoothOffset) {
      if (originScroll(deltaY, smoothOffset)) {
        return false;
      }
      onRawWheel({
        preventDefault: function preventDefault() {
        },
        deltaY
      });
      return true;
    });
    useLayoutEffect_default(function() {
      function onMozMousePixelScroll(e3) {
        if (useVirtual) {
          e3.preventDefault();
        }
      }
      componentRef.current.addEventListener("wheel", onRawWheel);
      componentRef.current.addEventListener("DOMMouseScroll", onFireFoxScroll);
      componentRef.current.addEventListener("MozMousePixelScroll", onMozMousePixelScroll);
      return function() {
        if (componentRef.current) {
          componentRef.current.removeEventListener("wheel", onRawWheel);
          componentRef.current.removeEventListener("DOMMouseScroll", onFireFoxScroll);
          componentRef.current.removeEventListener("MozMousePixelScroll", onMozMousePixelScroll);
        }
      };
    }, [useVirtual]);
    var scrollTo = useScrollTo(componentRef, mergedData, heights, itemHeight, getKey2, collectHeight, syncScrollTop, function() {
      var _scrollBarRef$current;
      (_scrollBarRef$current = scrollBarRef.current) === null || _scrollBarRef$current === void 0 ? void 0 : _scrollBarRef$current.delayHidden();
    });
    React94.useImperativeHandle(ref, function() {
      return {
        scrollTo
      };
    });
    useLayoutEffect_default(function() {
      if (onVisibleChange) {
        var renderList = mergedData.slice(start, end + 1);
        onVisibleChange(renderList, mergedData);
      }
    }, [start, end, mergedData]);
    var listChildren = useChildren(mergedData, start, end, setInstanceRef, children, sharedConfig);
    var componentStyle = null;
    if (height) {
      componentStyle = _objectSpread2(_defineProperty({}, fullHeight ? "height" : "maxHeight", height), ScrollStyle);
      if (useVirtual) {
        componentStyle.overflowY = "hidden";
        if (scrollMoving) {
          componentStyle.pointerEvents = "none";
        }
      }
    }
    return /* @__PURE__ */ React94.createElement("div", _extends({
      style: _objectSpread2(_objectSpread2({}, style2), {}, {
        position: "relative"
      }),
      className: mergedClassName
    }, restProps), /* @__PURE__ */ React94.createElement(Component27, {
      className: "".concat(prefixCls, "-holder"),
      style: componentStyle,
      ref: componentRef,
      onScroll: onFallbackScroll
    }, /* @__PURE__ */ React94.createElement(Filler_default, {
      prefixCls,
      height: scrollHeight,
      offset: offset3,
      onInnerResize: collectHeight,
      ref: fillerInnerRef,
      innerProps
    }, listChildren)), useVirtual && /* @__PURE__ */ React94.createElement(ScrollBar, {
      ref: scrollBarRef,
      prefixCls,
      scrollTop,
      height,
      scrollHeight,
      count: mergedData.length,
      onScroll: onScrollBar,
      onStartMove: function onStartMove() {
        setScrollMoving(true);
      },
      onStopMove: function onStopMove() {
        setScrollMoving(false);
      }
    }));
  }
  var List3 = /* @__PURE__ */ React94.forwardRef(RawList);
  List3.displayName = "List";
  var List_default2 = List3;

  // node_modules/rc-virtual-list/es/index.js
  var es_default8 = List_default2;

  // node_modules/rc-select/es/utils/platformUtil.js
  function isPlatformMac() {
    return /(mac\sos|macintosh)/i.test(navigator.appVersion);
  }

  // node_modules/rc-select/es/SelectContext.js
  var React95 = __toESM(require_react());
  var SelectContext = /* @__PURE__ */ React95.createContext(null);
  var SelectContext_default = SelectContext;

  // node_modules/rc-select/es/OptionList.js
  var _excluded16 = ["disabled", "title", "children", "style", "className"];
  function isTitleType2(content) {
    return typeof content === "string" || typeof content === "number";
  }
  var OptionList = function OptionList2(_, ref) {
    var _useBaseProps = useBaseProps(), prefixCls = _useBaseProps.prefixCls, id2 = _useBaseProps.id, open = _useBaseProps.open, multiple = _useBaseProps.multiple, mode = _useBaseProps.mode, searchValue = _useBaseProps.searchValue, toggleOpen = _useBaseProps.toggleOpen, notFoundContent = _useBaseProps.notFoundContent, onPopupScroll = _useBaseProps.onPopupScroll;
    var _React$useContext = React96.useContext(SelectContext_default), flattenOptions2 = _React$useContext.flattenOptions, onActiveValue = _React$useContext.onActiveValue, defaultActiveFirstOption = _React$useContext.defaultActiveFirstOption, onSelect = _React$useContext.onSelect, menuItemSelectedIcon = _React$useContext.menuItemSelectedIcon, rawValues = _React$useContext.rawValues, fieldNames = _React$useContext.fieldNames, virtual = _React$useContext.virtual, listHeight = _React$useContext.listHeight, listItemHeight = _React$useContext.listItemHeight;
    var itemPrefixCls = "".concat(prefixCls, "-item");
    var memoFlattenOptions = useMemo(function() {
      return flattenOptions2;
    }, [open, flattenOptions2], function(prev, next) {
      return next[0] && prev[1] !== next[1];
    });
    var listRef = React96.useRef(null);
    var onListMouseDown = function onListMouseDown2(event) {
      event.preventDefault();
    };
    var scrollIntoView2 = function scrollIntoView3(args) {
      if (listRef.current) {
        listRef.current.scrollTo(typeof args === "number" ? {
          index: args
        } : args);
      }
    };
    var getEnabledActiveIndex = function getEnabledActiveIndex2(index3) {
      var offset3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var len = memoFlattenOptions.length;
      for (var i3 = 0; i3 < len; i3 += 1) {
        var current = (index3 + i3 * offset3 + len) % len;
        var _memoFlattenOptions$c = memoFlattenOptions[current], group = _memoFlattenOptions$c.group, data = _memoFlattenOptions$c.data;
        if (!group && !data.disabled) {
          return current;
        }
      }
      return -1;
    };
    var _React$useState = React96.useState(function() {
      return getEnabledActiveIndex(0);
    }), _React$useState2 = _slicedToArray(_React$useState, 2), activeIndex = _React$useState2[0], setActiveIndex = _React$useState2[1];
    var setActive = function setActive2(index3) {
      var fromKeyboard = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      setActiveIndex(index3);
      var info = {
        source: fromKeyboard ? "keyboard" : "mouse"
      };
      var flattenItem = memoFlattenOptions[index3];
      if (!flattenItem) {
        onActiveValue(null, -1, info);
        return;
      }
      onActiveValue(flattenItem.value, index3, info);
    };
    (0, import_react27.useEffect)(function() {
      setActive(defaultActiveFirstOption !== false ? getEnabledActiveIndex(0) : -1);
    }, [memoFlattenOptions.length, searchValue]);
    var isSelected = React96.useCallback(function(value) {
      return rawValues.has(value) && mode !== "combobox";
    }, [mode, _toConsumableArray(rawValues).toString(), rawValues.size]);
    (0, import_react27.useEffect)(function() {
      var timeoutId = setTimeout(function() {
        if (!multiple && open && rawValues.size === 1) {
          var value = Array.from(rawValues)[0];
          var index3 = memoFlattenOptions.findIndex(function(_ref) {
            var data = _ref.data;
            return data.value === value;
          });
          if (index3 !== -1) {
            setActive(index3);
            scrollIntoView2(index3);
          }
        }
      });
      if (open) {
        var _listRef$current;
        (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.scrollTo(void 0);
      }
      return function() {
        return clearTimeout(timeoutId);
      };
    }, [open, searchValue]);
    var onSelectValue = function onSelectValue2(value) {
      if (value !== void 0) {
        onSelect(value, {
          selected: !rawValues.has(value)
        });
      }
      if (!multiple) {
        toggleOpen(false);
      }
    };
    React96.useImperativeHandle(ref, function() {
      return {
        onKeyDown: function onKeyDown2(event) {
          var which = event.which, ctrlKey = event.ctrlKey;
          switch (which) {
            case KeyCode_default.N:
            case KeyCode_default.P:
            case KeyCode_default.UP:
            case KeyCode_default.DOWN: {
              var offset3 = 0;
              if (which === KeyCode_default.UP) {
                offset3 = -1;
              } else if (which === KeyCode_default.DOWN) {
                offset3 = 1;
              } else if (isPlatformMac() && ctrlKey) {
                if (which === KeyCode_default.N) {
                  offset3 = 1;
                } else if (which === KeyCode_default.P) {
                  offset3 = -1;
                }
              }
              if (offset3 !== 0) {
                var nextActiveIndex = getEnabledActiveIndex(activeIndex + offset3, offset3);
                scrollIntoView2(nextActiveIndex);
                setActive(nextActiveIndex, true);
              }
              break;
            }
            case KeyCode_default.ENTER: {
              var item = memoFlattenOptions[activeIndex];
              if (item && !item.data.disabled) {
                onSelectValue(item.value);
              } else {
                onSelectValue(void 0);
              }
              if (open) {
                event.preventDefault();
              }
              break;
            }
            case KeyCode_default.ESC: {
              toggleOpen(false);
              if (open) {
                event.stopPropagation();
              }
            }
          }
        },
        onKeyUp: function onKeyUp2() {
        },
        scrollTo: function scrollTo(index3) {
          scrollIntoView2(index3);
        }
      };
    });
    if (memoFlattenOptions.length === 0) {
      return /* @__PURE__ */ React96.createElement("div", {
        role: "listbox",
        id: "".concat(id2, "_list"),
        className: "".concat(itemPrefixCls, "-empty"),
        onMouseDown: onListMouseDown
      }, notFoundContent);
    }
    var omitFieldNameList = Object.keys(fieldNames).map(function(key2) {
      return fieldNames[key2];
    });
    var getLabel = function getLabel2(item) {
      return item.label;
    };
    var renderItem = function renderItem2(index3) {
      var item = memoFlattenOptions[index3];
      if (!item)
        return null;
      var itemData = item.data || {};
      var value = itemData.value;
      var group = item.group;
      var attrs = pickAttrs(itemData, true);
      var mergedLabel = getLabel(item);
      return item ? /* @__PURE__ */ React96.createElement("div", _extends({
        "aria-label": typeof mergedLabel === "string" && !group ? mergedLabel : null
      }, attrs, {
        key: index3,
        role: group ? "presentation" : "option",
        id: "".concat(id2, "_list_").concat(index3),
        "aria-selected": isSelected(value)
      }), value) : null;
    };
    return /* @__PURE__ */ React96.createElement(React96.Fragment, null, /* @__PURE__ */ React96.createElement("div", {
      role: "listbox",
      id: "".concat(id2, "_list"),
      style: {
        height: 0,
        width: 0,
        overflow: "hidden"
      }
    }, renderItem(activeIndex - 1), renderItem(activeIndex), renderItem(activeIndex + 1)), /* @__PURE__ */ React96.createElement(es_default8, {
      itemKey: "key",
      ref: listRef,
      data: memoFlattenOptions,
      height: listHeight,
      itemHeight: listItemHeight,
      fullHeight: false,
      onMouseDown: onListMouseDown,
      onScroll: onPopupScroll,
      virtual
    }, function(item, itemIndex) {
      var _classNames;
      var group = item.group, groupOption = item.groupOption, data = item.data, label = item.label, value = item.value;
      var key2 = data.key;
      if (group) {
        var _data$title;
        var groupTitle = (_data$title = data.title) !== null && _data$title !== void 0 ? _data$title : isTitleType2(label) ? label.toString() : void 0;
        return /* @__PURE__ */ React96.createElement("div", {
          className: (0, import_classnames23.default)(itemPrefixCls, "".concat(itemPrefixCls, "-group")),
          title: groupTitle
        }, label !== void 0 ? label : key2);
      }
      var disabled = data.disabled, title = data.title, children = data.children, style2 = data.style, className = data.className, otherProps = _objectWithoutProperties(data, _excluded16);
      var passedProps = omit(otherProps, omitFieldNameList);
      var selected = isSelected(value);
      var optionPrefixCls = "".concat(itemPrefixCls, "-option");
      var optionClassName = (0, import_classnames23.default)(itemPrefixCls, optionPrefixCls, className, (_classNames = {}, _defineProperty(_classNames, "".concat(optionPrefixCls, "-grouped"), groupOption), _defineProperty(_classNames, "".concat(optionPrefixCls, "-active"), activeIndex === itemIndex && !disabled), _defineProperty(_classNames, "".concat(optionPrefixCls, "-disabled"), disabled), _defineProperty(_classNames, "".concat(optionPrefixCls, "-selected"), selected), _classNames));
      var mergedLabel = getLabel(item);
      var iconVisible = !menuItemSelectedIcon || typeof menuItemSelectedIcon === "function" || selected;
      var content = typeof mergedLabel === "number" ? mergedLabel : mergedLabel || value;
      var optionTitle = isTitleType2(content) ? content.toString() : void 0;
      if (title !== void 0) {
        optionTitle = title;
      }
      return /* @__PURE__ */ React96.createElement("div", _extends({}, pickAttrs(passedProps), {
        "aria-selected": selected,
        className: optionClassName,
        title: optionTitle,
        onMouseMove: function onMouseMove() {
          if (activeIndex === itemIndex || disabled) {
            return;
          }
          setActive(itemIndex);
        },
        onClick: function onClick() {
          if (!disabled) {
            onSelectValue(value);
          }
        },
        style: style2
      }), /* @__PURE__ */ React96.createElement("div", {
        className: "".concat(optionPrefixCls, "-content")
      }, content), /* @__PURE__ */ React96.isValidElement(menuItemSelectedIcon) || selected, iconVisible && /* @__PURE__ */ React96.createElement(TransBtn_default, {
        className: "".concat(itemPrefixCls, "-option-state"),
        customizeIcon: menuItemSelectedIcon,
        customizeIconProps: {
          isSelected: selected
        }
      }, selected ? "\u2713" : null));
    }));
  };
  var RefOptionList = /* @__PURE__ */ React96.forwardRef(OptionList);
  RefOptionList.displayName = "OptionList";
  var OptionList_default = RefOptionList;

  // node_modules/rc-select/es/utils/warningPropsUtil.js
  var React97 = __toESM(require_react());
  function warningProps(props) {
    var mode = props.mode, options = props.options, children = props.children, backfill = props.backfill, allowClear = props.allowClear, placeholder = props.placeholder, getInputElement = props.getInputElement, showSearch = props.showSearch, onSearch = props.onSearch, defaultOpen = props.defaultOpen, autoFocus = props.autoFocus, labelInValue = props.labelInValue, value = props.value, inputValue = props.inputValue, optionLabelProp = props.optionLabelProp;
    var multiple = isMultiple(mode);
    var mergedShowSearch = showSearch !== void 0 ? showSearch : multiple || mode === "combobox";
    var mergedOptions = options || convertChildrenToData(children);
    warning_default(mode !== "tags" || mergedOptions.every(function(opt) {
      return !opt.disabled;
    }), "Please avoid setting option to disabled in tags mode since user can always type text as tag.");
    if (mode === "tags" || mode === "combobox") {
      var hasNumberValue = mergedOptions.some(function(item) {
        if (item.options) {
          return item.options.some(function(opt) {
            return typeof ("value" in opt ? opt.value : opt.key) === "number";
          });
        }
        return typeof ("value" in item ? item.value : item.key) === "number";
      });
      warning_default(!hasNumberValue, "`value` of Option should not use number type when `mode` is `tags` or `combobox`.");
    }
    warning_default(mode !== "combobox" || !optionLabelProp, "`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.");
    warning_default(mode === "combobox" || !backfill, "`backfill` only works with `combobox` mode.");
    warning_default(mode === "combobox" || !getInputElement, "`getInputElement` only work with `combobox` mode.");
    noteOnce(mode !== "combobox" || !getInputElement || !allowClear || !placeholder, "Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.");
    if (onSearch && !mergedShowSearch && mode !== "combobox" && mode !== "tags") {
      warning_default(false, "`onSearch` should work with `showSearch` instead of use alone.");
    }
    noteOnce(!defaultOpen || autoFocus, "`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autoFocus` if needed.");
    if (value !== void 0 && value !== null) {
      var values = toArray3(value);
      warning_default(!labelInValue || values.every(function(val) {
        return _typeof(val) === "object" && ("key" in val || "value" in val);
      }), "`value` should in shape of `{ value: string | number, label?: ReactNode }` when you set `labelInValue` to `true`");
      warning_default(!multiple || Array.isArray(value), "`value` should be array when `mode` is `multiple` or `tags`");
    }
    if (children) {
      var invalidateChildType = null;
      toArray(children).some(function(node) {
        if (!/* @__PURE__ */ React97.isValidElement(node) || !node.type) {
          return false;
        }
        var _ref = node, type4 = _ref.type;
        if (type4.isSelectOption) {
          return false;
        }
        if (type4.isSelectOptGroup) {
          var allChildrenValid = toArray(node.props.children).every(function(subNode) {
            if (!/* @__PURE__ */ React97.isValidElement(subNode) || !node.type || subNode.type.isSelectOption) {
              return true;
            }
            invalidateChildType = subNode.type;
            return false;
          });
          if (allChildrenValid) {
            return false;
          }
          return true;
        }
        invalidateChildType = type4;
        return true;
      });
      if (invalidateChildType) {
        warning_default(false, "`children` should be `Select.Option` or `Select.OptGroup` instead of `".concat(invalidateChildType.displayName || invalidateChildType.name || invalidateChildType, "`."));
      }
      warning_default(inputValue === void 0, "`inputValue` is deprecated, please use `searchValue` instead.");
    }
  }
  function warningNullOptions(options, fieldNames) {
    if (options) {
      var recursiveOptions = function recursiveOptions2(optionsList) {
        var inGroup = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        for (var i3 = 0; i3 < optionsList.length; i3++) {
          var option = optionsList[i3];
          if (option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.value] === null) {
            warning_default(false, "`value` in Select options should not be `null`.");
            return true;
          }
          if (!inGroup && Array.isArray(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.options]) && recursiveOptions2(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.options], true)) {
            break;
          }
        }
      };
      recursiveOptions(options);
    }
  }
  var warningPropsUtil_default = warningProps;

  // node_modules/rc-select/es/Select.js
  var _excluded17 = ["id", "mode", "prefixCls", "backfill", "fieldNames", "inputValue", "searchValue", "onSearch", "autoClearSearchValue", "onSelect", "onDeselect", "dropdownMatchSelectWidth", "filterOption", "filterSort", "optionFilterProp", "optionLabelProp", "options", "children", "defaultActiveFirstOption", "menuItemSelectedIcon", "virtual", "listHeight", "listItemHeight", "value", "defaultValue", "labelInValue", "onChange"];
  var OMIT_DOM_PROPS = ["inputValue"];
  function isRawValue(value) {
    return !value || _typeof(value) !== "object";
  }
  var Select = /* @__PURE__ */ React98.forwardRef(function(props, ref) {
    var id2 = props.id, mode = props.mode, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-select" : _props$prefixCls, backfill = props.backfill, fieldNames = props.fieldNames, inputValue = props.inputValue, searchValue = props.searchValue, onSearch = props.onSearch, _props$autoClearSearc = props.autoClearSearchValue, autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc, onSelect = props.onSelect, onDeselect = props.onDeselect, _props$dropdownMatchS = props.dropdownMatchSelectWidth, dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS, filterOption = props.filterOption, filterSort = props.filterSort, optionFilterProp = props.optionFilterProp, optionLabelProp = props.optionLabelProp, options = props.options, children = props.children, defaultActiveFirstOption = props.defaultActiveFirstOption, menuItemSelectedIcon = props.menuItemSelectedIcon, virtual = props.virtual, _props$listHeight = props.listHeight, listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight, _props$listItemHeight = props.listItemHeight, listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight, value = props.value, defaultValue = props.defaultValue, labelInValue = props.labelInValue, onChange3 = props.onChange, restProps = _objectWithoutProperties(props, _excluded17);
    var mergedId = useId(id2);
    var multiple = isMultiple(mode);
    var childrenAsData = !!(!options && children);
    var mergedFilterOption = React98.useMemo(function() {
      if (filterOption === void 0 && mode === "combobox") {
        return false;
      }
      return filterOption;
    }, [filterOption, mode]);
    var mergedFieldNames = React98.useMemo(
      function() {
        return fillFieldNames(fieldNames, childrenAsData);
      },
      /* eslint-disable react-hooks/exhaustive-deps */
      [
        // We stringify fieldNames to avoid unnecessary re-renders.
        JSON.stringify(fieldNames),
        childrenAsData
      ]
      /* eslint-enable react-hooks/exhaustive-deps */
    );
    var _useMergedState = useMergedState("", {
      value: searchValue !== void 0 ? searchValue : inputValue,
      postState: function postState(search) {
        return search || "";
      }
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedSearchValue = _useMergedState2[0], setSearchValue = _useMergedState2[1];
    var parsedOptions = useOptions(options, children, mergedFieldNames, optionFilterProp, optionLabelProp);
    var valueOptions = parsedOptions.valueOptions, labelOptions = parsedOptions.labelOptions, mergedOptions = parsedOptions.options;
    var convert2LabelValues = React98.useCallback(function(draftValues) {
      var valueList = toArray3(draftValues);
      return valueList.map(function(val) {
        var rawValue;
        var rawLabel;
        var rawKey;
        var rawDisabled;
        var rawTitle;
        if (isRawValue(val)) {
          rawValue = val;
        } else {
          var _val$value;
          rawKey = val.key;
          rawLabel = val.label;
          rawValue = (_val$value = val.value) !== null && _val$value !== void 0 ? _val$value : rawKey;
        }
        var option = valueOptions.get(rawValue);
        if (option) {
          var _option$key;
          if (rawLabel === void 0)
            rawLabel = option === null || option === void 0 ? void 0 : option[optionLabelProp || mergedFieldNames.label];
          if (rawKey === void 0)
            rawKey = (_option$key = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key !== void 0 ? _option$key : rawValue;
          rawDisabled = option === null || option === void 0 ? void 0 : option.disabled;
          rawTitle = option === null || option === void 0 ? void 0 : option.title;
          if (!optionLabelProp) {
            var optionLabel = option === null || option === void 0 ? void 0 : option[mergedFieldNames.label];
            if (optionLabel !== void 0 && optionLabel !== rawLabel) {
              warning_default(false, "`label` of `value` is not same as `label` in Select options.");
            }
          }
        }
        return {
          label: rawLabel,
          value: rawValue,
          key: rawKey,
          disabled: rawDisabled,
          title: rawTitle
        };
      });
    }, [mergedFieldNames, optionLabelProp, valueOptions]);
    var _useMergedState3 = useMergedState(defaultValue, {
      value
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), internalValue = _useMergedState4[0], setInternalValue = _useMergedState4[1];
    var rawLabeledValues = React98.useMemo(function() {
      var _values$;
      var values = convert2LabelValues(internalValue);
      if (mode === "combobox" && !((_values$ = values[0]) !== null && _values$ !== void 0 && _values$.value)) {
        return [];
      }
      return values;
    }, [internalValue, convert2LabelValues, mode]);
    var _useCache = useCache_default(rawLabeledValues, valueOptions), _useCache2 = _slicedToArray(_useCache, 2), mergedValues = _useCache2[0], getMixedOption = _useCache2[1];
    var displayValues = React98.useMemo(function() {
      if (!mode && mergedValues.length === 1) {
        var firstValue = mergedValues[0];
        if (firstValue.value === null && (firstValue.label === null || firstValue.label === void 0)) {
          return [];
        }
      }
      return mergedValues.map(function(item) {
        var _item$label;
        return _objectSpread2(_objectSpread2({}, item), {}, {
          label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value
        });
      });
    }, [mode, mergedValues]);
    var rawValues = React98.useMemo(function() {
      return new Set(mergedValues.map(function(val) {
        return val.value;
      }));
    }, [mergedValues]);
    React98.useEffect(function() {
      if (mode === "combobox") {
        var _mergedValues$;
        var strValue = (_mergedValues$ = mergedValues[0]) === null || _mergedValues$ === void 0 ? void 0 : _mergedValues$.value;
        setSearchValue(hasValue2(strValue) ? String(strValue) : "");
      }
    }, [mergedValues]);
    var createTagOption = useRefFunc(function(val, label) {
      var _ref;
      var mergedLabel = label !== null && label !== void 0 ? label : val;
      return _ref = {}, _defineProperty(_ref, mergedFieldNames.value, val), _defineProperty(_ref, mergedFieldNames.label, mergedLabel), _ref;
    });
    var filledTagOptions = React98.useMemo(function() {
      if (mode !== "tags") {
        return mergedOptions;
      }
      var cloneOptions = _toConsumableArray(mergedOptions);
      var existOptions = function existOptions2(val) {
        return valueOptions.has(val);
      };
      _toConsumableArray(mergedValues).sort(function(a2, b2) {
        return a2.value < b2.value ? -1 : 1;
      }).forEach(function(item) {
        var val = item.value;
        if (!existOptions(val)) {
          cloneOptions.push(createTagOption(val, item.label));
        }
      });
      return cloneOptions;
    }, [createTagOption, mergedOptions, valueOptions, mergedValues, mode]);
    var filteredOptions = useFilterOptions_default(filledTagOptions, mergedFieldNames, mergedSearchValue, mergedFilterOption, optionFilterProp);
    var filledSearchOptions = React98.useMemo(function() {
      if (mode !== "tags" || !mergedSearchValue || filteredOptions.some(function(item) {
        return item[optionFilterProp || "value"] === mergedSearchValue;
      })) {
        return filteredOptions;
      }
      return [createTagOption(mergedSearchValue)].concat(_toConsumableArray(filteredOptions));
    }, [createTagOption, optionFilterProp, mode, filteredOptions, mergedSearchValue]);
    var orderedFilteredOptions = React98.useMemo(function() {
      if (!filterSort) {
        return filledSearchOptions;
      }
      return _toConsumableArray(filledSearchOptions).sort(function(a2, b2) {
        return filterSort(a2, b2);
      });
    }, [filledSearchOptions, filterSort]);
    var displayOptions = React98.useMemo(function() {
      return flattenOptions(orderedFilteredOptions, {
        fieldNames: mergedFieldNames,
        childrenAsData
      });
    }, [orderedFilteredOptions, mergedFieldNames, childrenAsData]);
    var triggerChange = function triggerChange2(values) {
      var labeledValues = convert2LabelValues(values);
      setInternalValue(labeledValues);
      if (onChange3 && // Trigger event only when value changed
      (labeledValues.length !== mergedValues.length || labeledValues.some(function(newVal, index3) {
        var _mergedValues$index;
        return ((_mergedValues$index = mergedValues[index3]) === null || _mergedValues$index === void 0 ? void 0 : _mergedValues$index.value) !== (newVal === null || newVal === void 0 ? void 0 : newVal.value);
      }))) {
        var returnValues = labelInValue ? labeledValues : labeledValues.map(function(v2) {
          return v2.value;
        });
        var returnOptions = labeledValues.map(function(v2) {
          return injectPropsWithOption(getMixedOption(v2.value));
        });
        onChange3(
          // Value
          multiple ? returnValues : returnValues[0],
          // Option
          multiple ? returnOptions : returnOptions[0]
        );
      }
    };
    var _React$useState = React98.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), activeValue = _React$useState2[0], setActiveValue = _React$useState2[1];
    var _React$useState3 = React98.useState(0), _React$useState4 = _slicedToArray(_React$useState3, 2), accessibilityIndex = _React$useState4[0], setAccessibilityIndex = _React$useState4[1];
    var mergedDefaultActiveFirstOption = defaultActiveFirstOption !== void 0 ? defaultActiveFirstOption : mode !== "combobox";
    var onActiveValue = React98.useCallback(function(active, index3) {
      var _ref2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref2$source = _ref2.source, source = _ref2$source === void 0 ? "keyboard" : _ref2$source;
      setAccessibilityIndex(index3);
      if (backfill && mode === "combobox" && active !== null && source === "keyboard") {
        setActiveValue(String(active));
      }
    }, [backfill, mode]);
    var triggerSelect = function triggerSelect2(val, selected, type4) {
      var getSelectEnt = function getSelectEnt2() {
        var _option$key2;
        var option = getMixedOption(val);
        return [labelInValue ? {
          label: option === null || option === void 0 ? void 0 : option[mergedFieldNames.label],
          value: val,
          key: (_option$key2 = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key2 !== void 0 ? _option$key2 : val
        } : val, injectPropsWithOption(option)];
      };
      if (selected && onSelect) {
        var _getSelectEnt = getSelectEnt(), _getSelectEnt2 = _slicedToArray(_getSelectEnt, 2), wrappedValue = _getSelectEnt2[0], _option = _getSelectEnt2[1];
        onSelect(wrappedValue, _option);
      } else if (!selected && onDeselect && type4 !== "clear") {
        var _getSelectEnt3 = getSelectEnt(), _getSelectEnt4 = _slicedToArray(_getSelectEnt3, 2), _wrappedValue = _getSelectEnt4[0], _option2 = _getSelectEnt4[1];
        onDeselect(_wrappedValue, _option2);
      }
    };
    var onInternalSelect = useRefFunc(function(val, info) {
      var cloneValues;
      var mergedSelect = multiple ? info.selected : true;
      if (mergedSelect) {
        cloneValues = multiple ? [].concat(_toConsumableArray(mergedValues), [val]) : [val];
      } else {
        cloneValues = mergedValues.filter(function(v2) {
          return v2.value !== val;
        });
      }
      triggerChange(cloneValues);
      triggerSelect(val, mergedSelect);
      if (mode === "combobox") {
        setActiveValue("");
      } else if (!isMultiple || autoClearSearchValue) {
        setSearchValue("");
        setActiveValue("");
      }
    });
    var onDisplayValuesChange = function onDisplayValuesChange2(nextValues, info) {
      triggerChange(nextValues);
      var type4 = info.type, values = info.values;
      if (type4 === "remove" || type4 === "clear") {
        values.forEach(function(item) {
          triggerSelect(item.value, false, type4);
        });
      }
    };
    var onInternalSearch = function onInternalSearch2(searchText, info) {
      setSearchValue(searchText);
      setActiveValue(null);
      if (info.source === "submit") {
        var formatted = (searchText || "").trim();
        if (formatted) {
          var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), [formatted])));
          triggerChange(newRawValues);
          triggerSelect(formatted, true);
          setSearchValue("");
        }
        return;
      }
      if (info.source !== "blur") {
        if (mode === "combobox") {
          triggerChange(searchText);
        }
        onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);
      }
    };
    var onInternalSearchSplit = function onInternalSearchSplit2(words) {
      var patchValues = words;
      if (mode !== "tags") {
        patchValues = words.map(function(word) {
          var opt = labelOptions.get(word);
          return opt === null || opt === void 0 ? void 0 : opt.value;
        }).filter(function(val) {
          return val !== void 0;
        });
      }
      var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), _toConsumableArray(patchValues))));
      triggerChange(newRawValues);
      newRawValues.forEach(function(newRawValue) {
        triggerSelect(newRawValue, true);
      });
    };
    var selectContext = React98.useMemo(function() {
      var realVirtual = virtual !== false && dropdownMatchSelectWidth !== false;
      return _objectSpread2(_objectSpread2({}, parsedOptions), {}, {
        flattenOptions: displayOptions,
        onActiveValue,
        defaultActiveFirstOption: mergedDefaultActiveFirstOption,
        onSelect: onInternalSelect,
        menuItemSelectedIcon,
        rawValues,
        fieldNames: mergedFieldNames,
        virtual: realVirtual,
        listHeight,
        listItemHeight,
        childrenAsData
      });
    }, [parsedOptions, displayOptions, onActiveValue, mergedDefaultActiveFirstOption, onInternalSelect, menuItemSelectedIcon, rawValues, mergedFieldNames, virtual, dropdownMatchSelectWidth, listHeight, listItemHeight, childrenAsData]);
    if (true) {
      warningPropsUtil_default(props);
      warningNullOptions(mergedOptions, mergedFieldNames);
    }
    return /* @__PURE__ */ React98.createElement(SelectContext_default.Provider, {
      value: selectContext
    }, /* @__PURE__ */ React98.createElement(BaseSelect_default, _extends({}, restProps, {
      // >>> MISC
      id: mergedId,
      prefixCls,
      ref,
      omitDomProps: OMIT_DOM_PROPS,
      mode,
      displayValues,
      onDisplayValuesChange,
      searchValue: mergedSearchValue,
      onSearch: onInternalSearch,
      autoClearSearchValue,
      onSearchSplit: onInternalSearchSplit,
      dropdownMatchSelectWidth,
      OptionList: OptionList_default,
      emptyOptions: !displayOptions.length,
      activeValue,
      activeDescendantId: "".concat(mergedId, "_list_").concat(accessibilityIndex)
    })));
  });
  if (true) {
    Select.displayName = "Select";
  }
  var TypedSelect = Select;
  TypedSelect.Option = Option_default;
  TypedSelect.OptGroup = OptGroup_default;
  var Select_default = TypedSelect;

  // node_modules/rc-select/es/index.js
  var es_default9 = Select_default;

  // node_modules/antd/es/select/index.js
  var React108 = __toESM(require_react());
  var import_react29 = __toESM(require_react());

  // node_modules/antd/es/config-provider/defaultRenderEmpty.js
  var React102 = __toESM(require_react());

  // node_modules/antd/es/empty/index.js
  var import_classnames24 = __toESM(require_classnames());
  var React101 = __toESM(require_react());

  // node_modules/antd/es/empty/empty.js
  var React99 = __toESM(require_react());
  var Empty = function Empty2() {
    var _React$useContext = React99.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("empty-img-default");
    return /* @__PURE__ */ React99.createElement("svg", {
      className: prefixCls,
      width: "184",
      height: "152",
      viewBox: "0 0 184 152",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */ React99.createElement("g", {
      fill: "none",
      fillRule: "evenodd"
    }, /* @__PURE__ */ React99.createElement("g", {
      transform: "translate(24 31.67)"
    }, /* @__PURE__ */ React99.createElement("ellipse", {
      className: "".concat(prefixCls, "-ellipse"),
      cx: "67.797",
      cy: "106.89",
      rx: "67.797",
      ry: "12.668"
    }), /* @__PURE__ */ React99.createElement("path", {
      className: "".concat(prefixCls, "-path-1"),
      d: "M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z"
    }), /* @__PURE__ */ React99.createElement("path", {
      className: "".concat(prefixCls, "-path-2"),
      d: "M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",
      transform: "translate(13.56)"
    }), /* @__PURE__ */ React99.createElement("path", {
      className: "".concat(prefixCls, "-path-3"),
      d: "M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z"
    }), /* @__PURE__ */ React99.createElement("path", {
      className: "".concat(prefixCls, "-path-4"),
      d: "M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z"
    })), /* @__PURE__ */ React99.createElement("path", {
      className: "".concat(prefixCls, "-path-5"),
      d: "M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z"
    }), /* @__PURE__ */ React99.createElement("g", {
      className: "".concat(prefixCls, "-g"),
      transform: "translate(149.65 15.383)"
    }, /* @__PURE__ */ React99.createElement("ellipse", {
      cx: "20.654",
      cy: "3.167",
      rx: "2.849",
      ry: "2.815"
    }), /* @__PURE__ */ React99.createElement("path", {
      d: "M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"
    }))));
  };
  var empty_default = Empty;

  // node_modules/antd/es/empty/simple.js
  var React100 = __toESM(require_react());
  var Simple = function Simple2() {
    var _React$useContext = React100.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("empty-img-simple");
    return /* @__PURE__ */ React100.createElement("svg", {
      className: prefixCls,
      width: "64",
      height: "41",
      viewBox: "0 0 64 41",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */ React100.createElement("g", {
      transform: "translate(0 1)",
      fill: "none",
      fillRule: "evenodd"
    }, /* @__PURE__ */ React100.createElement("ellipse", {
      className: "".concat(prefixCls, "-ellipse"),
      cx: "32",
      cy: "33",
      rx: "32",
      ry: "7"
    }), /* @__PURE__ */ React100.createElement("g", {
      className: "".concat(prefixCls, "-g"),
      fillRule: "nonzero"
    }, /* @__PURE__ */ React100.createElement("path", {
      d: "M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
    }), /* @__PURE__ */ React100.createElement("path", {
      d: "M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",
      className: "".concat(prefixCls, "-path")
    }))));
  };
  var simple_default = Simple;

  // node_modules/antd/es/empty/index.js
  var __rest2 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var defaultEmptyImg = /* @__PURE__ */ React101.createElement(empty_default, null);
  var simpleEmptyImg = /* @__PURE__ */ React101.createElement(simple_default, null);
  var Empty3 = function Empty4(_a) {
    var className = _a.className, customizePrefixCls = _a.prefixCls, _a$image = _a.image, image = _a$image === void 0 ? defaultEmptyImg : _a$image, description = _a.description, children = _a.children, imageStyle = _a.imageStyle, restProps = __rest2(_a, ["className", "prefixCls", "image", "description", "children", "imageStyle"]);
    var _React$useContext = React101.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    return /* @__PURE__ */ React101.createElement(LocaleReceiver, {
      componentName: "Empty"
    }, function(contextLocale) {
      var _classNames;
      var prefixCls = getPrefixCls("empty", customizePrefixCls);
      var des = typeof description !== "undefined" ? description : contextLocale.description;
      var alt = typeof des === "string" ? des : "empty";
      var imageNode = null;
      if (typeof image === "string") {
        imageNode = /* @__PURE__ */ React101.createElement("img", {
          alt,
          src: image
        });
      } else {
        imageNode = image;
      }
      return /* @__PURE__ */ React101.createElement("div", _extends({
        className: (0, import_classnames24.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-normal"), image === simpleEmptyImg), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className)
      }, restProps), /* @__PURE__ */ React101.createElement("div", {
        className: "".concat(prefixCls, "-image"),
        style: imageStyle
      }, imageNode), des && /* @__PURE__ */ React101.createElement("div", {
        className: "".concat(prefixCls, "-description")
      }, des), children && /* @__PURE__ */ React101.createElement("div", {
        className: "".concat(prefixCls, "-footer")
      }, children));
    });
  };
  Empty3.PRESENTED_IMAGE_DEFAULT = defaultEmptyImg;
  Empty3.PRESENTED_IMAGE_SIMPLE = simpleEmptyImg;
  var empty_default2 = Empty3;

  // node_modules/antd/es/config-provider/defaultRenderEmpty.js
  var defaultRenderEmpty = function defaultRenderEmpty2(componentName) {
    return /* @__PURE__ */ React102.createElement(ConfigConsumer, null, function(_ref) {
      var getPrefixCls = _ref.getPrefixCls;
      var prefix = getPrefixCls("empty");
      switch (componentName) {
        case "Table":
        case "List":
          return /* @__PURE__ */ React102.createElement(empty_default2, {
            image: empty_default2.PRESENTED_IMAGE_SIMPLE
          });
        case "Select":
        case "TreeSelect":
        case "Cascader":
        case "Transfer":
        case "Mentions":
          return /* @__PURE__ */ React102.createElement(empty_default2, {
            image: empty_default2.PRESENTED_IMAGE_SIMPLE,
            className: "".concat(prefix, "-small")
          });
        default:
          return /* @__PURE__ */ React102.createElement(empty_default2, null);
      }
    });
  };
  var defaultRenderEmpty_default = defaultRenderEmpty;

  // node_modules/antd/es/form/context.js
  var React103 = __toESM(require_react());
  var import_react28 = __toESM(require_react());
  var FormContext2 = /* @__PURE__ */ React103.createContext({
    labelAlign: "right",
    vertical: false,
    itemRef: function itemRef() {
    }
  });
  var NoStyleItemContext = /* @__PURE__ */ React103.createContext(null);
  var FormProvider3 = function FormProvider4(props) {
    var providerProps = omit(props, ["prefixCls"]);
    return /* @__PURE__ */ React103.createElement(FormProvider, _extends({}, providerProps));
  };
  var FormItemPrefixContext = /* @__PURE__ */ React103.createContext({
    prefixCls: ""
  });
  var FormItemInputContext = /* @__PURE__ */ React103.createContext({});
  var NoFormStyle = function NoFormStyle2(_ref) {
    var children = _ref.children, status = _ref.status, override = _ref.override;
    var formItemInputContext = (0, import_react28.useContext)(FormItemInputContext);
    var newFormItemInputContext = (0, import_react28.useMemo)(function() {
      var newContext = _extends({}, formItemInputContext);
      if (override) {
        delete newContext.isFormItemInput;
      }
      if (status) {
        delete newContext.status;
        delete newContext.hasFeedback;
        delete newContext.feedbackIcon;
      }
      return newContext;
    }, [status, override, formItemInputContext]);
    return /* @__PURE__ */ React103.createElement(FormItemInputContext.Provider, {
      value: newFormItemInputContext
    }, children);
  };

  // node_modules/antd/es/_util/type.js
  var tuple = function tuple2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return args;
  };
  var tupleNum = function tupleNum2() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return args;
  };

  // node_modules/antd/es/_util/motion.js
  var getCollapsedHeight = function getCollapsedHeight2() {
    return {
      height: 0,
      opacity: 0
    };
  };
  var getRealHeight = function getRealHeight2(node) {
    var scrollHeight = node.scrollHeight;
    return {
      height: scrollHeight,
      opacity: 1
    };
  };
  var getCurrentHeight = function getCurrentHeight2(node) {
    return {
      height: node ? node.offsetHeight : 0
    };
  };
  var skipOpacityTransition = function skipOpacityTransition2(_, event) {
    return (event === null || event === void 0 ? void 0 : event.deadline) === true || event.propertyName === "height";
  };
  var collapseMotion = {
    motionName: "ant-motion-collapse",
    onAppearStart: getCollapsedHeight,
    onEnterStart: getCollapsedHeight,
    onAppearActive: getRealHeight,
    onEnterActive: getRealHeight,
    onLeaveStart: getCurrentHeight,
    onLeaveActive: getCollapsedHeight,
    onAppearEnd: skipOpacityTransition,
    onEnterEnd: skipOpacityTransition,
    onLeaveEnd: skipOpacityTransition,
    motionDeadline: 500
  };
  var SelectPlacements = tuple("bottomLeft", "bottomRight", "topLeft", "topRight");
  var getTransitionDirection = function getTransitionDirection2(placement) {
    if (placement !== void 0 && (placement === "topLeft" || placement === "topRight")) {
      return "slide-down";
    }
    return "slide-up";
  };
  var getTransitionName3 = function getTransitionName4(rootPrefixCls, motion2, transitionName2) {
    if (transitionName2 !== void 0) {
      return transitionName2;
    }
    return "".concat(rootPrefixCls, "-").concat(motion2);
  };
  var motion_default = collapseMotion;

  // node_modules/antd/es/_util/statusUtils.js
  var import_classnames25 = __toESM(require_classnames());
  var InputStatuses = tuple("warning", "error", "");
  function getStatusClassNames(prefixCls, status, hasFeedback) {
    var _classNames;
    return (0, import_classnames25.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-status-success"), status === "success"), _defineProperty(_classNames, "".concat(prefixCls, "-status-warning"), status === "warning"), _defineProperty(_classNames, "".concat(prefixCls, "-status-error"), status === "error"), _defineProperty(_classNames, "".concat(prefixCls, "-status-validating"), status === "validating"), _defineProperty(_classNames, "".concat(prefixCls, "-has-feedback"), hasFeedback), _classNames));
  }
  var getMergedStatus = function getMergedStatus2(contextStatus, customStatus) {
    return customStatus || contextStatus;
  };

  // node_modules/@ant-design/icons/es/icons/CheckOutlined.js
  var React104 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CheckOutlined.js
  var CheckOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z" } }] }, "name": "check", "theme": "outlined" };
  var CheckOutlined_default = CheckOutlined;

  // node_modules/@ant-design/icons/es/icons/CheckOutlined.js
  var CheckOutlined2 = function CheckOutlined3(props, ref) {
    return /* @__PURE__ */ React104.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CheckOutlined_default
    }));
  };
  CheckOutlined2.displayName = "CheckOutlined";
  var CheckOutlined_default2 = /* @__PURE__ */ React104.forwardRef(CheckOutlined2);

  // node_modules/@ant-design/icons/es/icons/DownOutlined.js
  var React105 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DownOutlined.js
  var DownOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z" } }] }, "name": "down", "theme": "outlined" };
  var DownOutlined_default = DownOutlined;

  // node_modules/@ant-design/icons/es/icons/DownOutlined.js
  var DownOutlined2 = function DownOutlined3(props, ref) {
    return /* @__PURE__ */ React105.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: DownOutlined_default
    }));
  };
  DownOutlined2.displayName = "DownOutlined";
  var DownOutlined_default2 = /* @__PURE__ */ React105.forwardRef(DownOutlined2);

  // node_modules/@ant-design/icons/es/icons/SearchOutlined.js
  var React106 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/SearchOutlined.js
  var SearchOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z" } }] }, "name": "search", "theme": "outlined" };
  var SearchOutlined_default = SearchOutlined;

  // node_modules/@ant-design/icons/es/icons/SearchOutlined.js
  var SearchOutlined2 = function SearchOutlined3(props, ref) {
    return /* @__PURE__ */ React106.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: SearchOutlined_default
    }));
  };
  SearchOutlined2.displayName = "SearchOutlined";
  var SearchOutlined_default2 = /* @__PURE__ */ React106.forwardRef(SearchOutlined2);

  // node_modules/antd/es/select/utils/iconUtil.js
  var React107 = __toESM(require_react());
  function getIcons(_ref) {
    var suffixIcon = _ref.suffixIcon, clearIcon = _ref.clearIcon, menuItemSelectedIcon = _ref.menuItemSelectedIcon, removeIcon = _ref.removeIcon, loading = _ref.loading, multiple = _ref.multiple, hasFeedback = _ref.hasFeedback, prefixCls = _ref.prefixCls, showArrow = _ref.showArrow, feedbackIcon = _ref.feedbackIcon;
    var mergedClearIcon = clearIcon;
    if (!clearIcon) {
      mergedClearIcon = /* @__PURE__ */ React107.createElement(CloseCircleFilled_default2, null);
    }
    var getSuffixIconNode = function getSuffixIconNode2(arrowIcon) {
      return /* @__PURE__ */ React107.createElement(React107.Fragment, null, showArrow !== false && arrowIcon, hasFeedback && feedbackIcon);
    };
    var mergedSuffixIcon = null;
    if (suffixIcon !== void 0) {
      mergedSuffixIcon = getSuffixIconNode(suffixIcon);
    } else if (loading) {
      mergedSuffixIcon = getSuffixIconNode(/* @__PURE__ */ React107.createElement(LoadingOutlined_default2, {
        spin: true
      }));
    } else {
      var iconCls = "".concat(prefixCls, "-suffix");
      mergedSuffixIcon = function mergedSuffixIcon2(_ref2) {
        var open = _ref2.open, showSearch = _ref2.showSearch;
        if (open && showSearch) {
          return getSuffixIconNode(/* @__PURE__ */ React107.createElement(SearchOutlined_default2, {
            className: iconCls
          }));
        }
        return getSuffixIconNode(/* @__PURE__ */ React107.createElement(DownOutlined_default2, {
          className: iconCls
        }));
      };
    }
    var mergedItemIcon = null;
    if (menuItemSelectedIcon !== void 0) {
      mergedItemIcon = menuItemSelectedIcon;
    } else if (multiple) {
      mergedItemIcon = /* @__PURE__ */ React107.createElement(CheckOutlined_default2, null);
    } else {
      mergedItemIcon = null;
    }
    var mergedRemoveIcon = null;
    if (removeIcon !== void 0) {
      mergedRemoveIcon = removeIcon;
    } else {
      mergedRemoveIcon = /* @__PURE__ */ React107.createElement(CloseOutlined_default2, null);
    }
    return {
      clearIcon: mergedClearIcon,
      suffixIcon: mergedSuffixIcon,
      itemIcon: mergedItemIcon,
      removeIcon: mergedRemoveIcon
    };
  }

  // node_modules/antd/es/select/index.js
  var __rest3 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var SECRET_COMBOBOX_MODE_DO_NOT_USE = "SECRET_COMBOBOX_MODE_DO_NOT_USE";
  var InternalSelect = function InternalSelect2(_a, ref) {
    var _classNames2;
    var customizePrefixCls = _a.prefixCls, _a$bordered = _a.bordered, bordered = _a$bordered === void 0 ? true : _a$bordered, className = _a.className, getPopupContainer = _a.getPopupContainer, dropdownClassName = _a.dropdownClassName, popupClassName = _a.popupClassName, _a$listHeight = _a.listHeight, listHeight = _a$listHeight === void 0 ? 256 : _a$listHeight, placement = _a.placement, _a$listItemHeight = _a.listItemHeight, listItemHeight = _a$listItemHeight === void 0 ? 24 : _a$listItemHeight, customizeSize = _a.size, customDisabled = _a.disabled, notFoundContent = _a.notFoundContent, customStatus = _a.status, showArrow = _a.showArrow, props = __rest3(_a, ["prefixCls", "bordered", "className", "getPopupContainer", "dropdownClassName", "popupClassName", "listHeight", "placement", "listItemHeight", "size", "disabled", "notFoundContent", "status", "showArrow"]);
    var _React$useContext = React108.useContext(ConfigContext), getContextPopupContainer = _React$useContext.getPopupContainer, getPrefixCls = _React$useContext.getPrefixCls, renderEmpty = _React$useContext.renderEmpty, direction = _React$useContext.direction, virtual = _React$useContext.virtual, dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth;
    var size = React108.useContext(SizeContext_default);
    var prefixCls = getPrefixCls("select", customizePrefixCls);
    var rootPrefixCls = getPrefixCls();
    var mode = React108.useMemo(function() {
      var m2 = props.mode;
      if (m2 === "combobox") {
        return void 0;
      }
      if (m2 === SECRET_COMBOBOX_MODE_DO_NOT_USE) {
        return "combobox";
      }
      return m2;
    }, [props.mode]);
    var isMultiple2 = mode === "multiple" || mode === "tags";
    var mergedShowArrow = showArrow !== void 0 ? showArrow : props.loading || !(isMultiple2 || mode === "combobox");
    true ? warning_default2(!dropdownClassName, "Select", "`dropdownClassName` is deprecated which will be removed in next major version. Please use `popupClassName` instead.") : void 0;
    var _useContext = (0, import_react29.useContext)(FormItemInputContext), contextStatus = _useContext.status, hasFeedback = _useContext.hasFeedback, isFormItemInput = _useContext.isFormItemInput, feedbackIcon = _useContext.feedbackIcon;
    var mergedStatus = getMergedStatus(contextStatus, customStatus);
    var mergedNotFound;
    if (notFoundContent !== void 0) {
      mergedNotFound = notFoundContent;
    } else if (mode === "combobox") {
      mergedNotFound = null;
    } else {
      mergedNotFound = (renderEmpty || defaultRenderEmpty_default)("Select");
    }
    var _getIcons = getIcons(_extends(_extends({}, props), {
      multiple: isMultiple2,
      hasFeedback,
      feedbackIcon,
      showArrow: mergedShowArrow,
      prefixCls
    })), suffixIcon = _getIcons.suffixIcon, itemIcon = _getIcons.itemIcon, removeIcon = _getIcons.removeIcon, clearIcon = _getIcons.clearIcon;
    var selectProps = omit(props, ["suffixIcon", "itemIcon"]);
    var rcSelectRtlDropdownClassName = (0, import_classnames26.default)(popupClassName || dropdownClassName, _defineProperty({}, "".concat(prefixCls, "-dropdown-").concat(direction), direction === "rtl"));
    var mergedSize = customizeSize || size;
    var disabled = React108.useContext(DisabledContext_default);
    var mergedDisabled = customDisabled || disabled;
    var mergedClassName = (0, import_classnames26.default)((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-lg"), mergedSize === "large"), _defineProperty(_classNames2, "".concat(prefixCls, "-sm"), mergedSize === "small"), _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames2, "".concat(prefixCls, "-borderless"), !bordered), _defineProperty(_classNames2, "".concat(prefixCls, "-in-form-item"), isFormItemInput), _classNames2), getStatusClassNames(prefixCls, mergedStatus, hasFeedback), className);
    var getPlacement = function getPlacement2() {
      if (placement !== void 0) {
        return placement;
      }
      return direction === "rtl" ? "bottomRight" : "bottomLeft";
    };
    return /* @__PURE__ */ React108.createElement(es_default9, _extends({
      ref,
      virtual,
      dropdownMatchSelectWidth
    }, selectProps, {
      transitionName: getTransitionName3(rootPrefixCls, getTransitionDirection(placement), props.transitionName),
      listHeight,
      listItemHeight,
      mode,
      prefixCls,
      placement: getPlacement(),
      direction,
      inputIcon: suffixIcon,
      menuItemSelectedIcon: itemIcon,
      removeIcon,
      clearIcon,
      notFoundContent: mergedNotFound,
      className: mergedClassName,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      dropdownClassName: rcSelectRtlDropdownClassName,
      showArrow: hasFeedback || showArrow,
      disabled: mergedDisabled
    }));
  };
  var Select2 = /* @__PURE__ */ React108.forwardRef(InternalSelect);
  Select2.SECRET_COMBOBOX_MODE_DO_NOT_USE = SECRET_COMBOBOX_MODE_DO_NOT_USE;
  Select2.Option = Option_default;
  Select2.OptGroup = OptGroup_default;
  var select_default = Select2;

  // node_modules/antd/es/grid/hooks/useBreakpoint.js
  var import_react30 = __toESM(require_react());

  // node_modules/antd/es/_util/hooks/useForceUpdate.js
  var React109 = __toESM(require_react());
  function useForceUpdate() {
    var _React$useReducer = React109.useReducer(function(x) {
      return x + 1;
    }, 0), _React$useReducer2 = _slicedToArray(_React$useReducer, 2), forceUpdate = _React$useReducer2[1];
    return forceUpdate;
  }

  // node_modules/antd/es/_util/responsiveObserve.js
  var responsiveArray = ["xxl", "xl", "lg", "md", "sm", "xs"];
  var responsiveMap = {
    xs: "(max-width: 575px)",
    sm: "(min-width: 576px)",
    md: "(min-width: 768px)",
    lg: "(min-width: 992px)",
    xl: "(min-width: 1200px)",
    xxl: "(min-width: 1600px)"
  };
  var subscribers = /* @__PURE__ */ new Map();
  var subUid = -1;
  var screens = {};
  var responsiveObserve = {
    matchHandlers: {},
    dispatch: function dispatch(pointMap) {
      screens = pointMap;
      subscribers.forEach(function(func) {
        return func(screens);
      });
      return subscribers.size >= 1;
    },
    subscribe: function subscribe(func) {
      if (!subscribers.size)
        this.register();
      subUid += 1;
      subscribers.set(subUid, func);
      func(screens);
      return subUid;
    },
    unsubscribe: function unsubscribe(token) {
      subscribers["delete"](token);
      if (!subscribers.size)
        this.unregister();
    },
    unregister: function unregister() {
      var _this = this;
      Object.keys(responsiveMap).forEach(function(screen) {
        var matchMediaQuery = responsiveMap[screen];
        var handler = _this.matchHandlers[matchMediaQuery];
        handler === null || handler === void 0 ? void 0 : handler.mql.removeListener(handler === null || handler === void 0 ? void 0 : handler.listener);
      });
      subscribers.clear();
    },
    register: function register2() {
      var _this2 = this;
      Object.keys(responsiveMap).forEach(function(screen) {
        var matchMediaQuery = responsiveMap[screen];
        var listener = function listener2(_ref) {
          var matches = _ref.matches;
          _this2.dispatch(_extends(_extends({}, screens), _defineProperty({}, screen, matches)));
        };
        var mql = window.matchMedia(matchMediaQuery);
        mql.addListener(listener);
        _this2.matchHandlers[matchMediaQuery] = {
          mql,
          listener
        };
        listener(mql);
      });
    }
  };
  var responsiveObserve_default = responsiveObserve;

  // node_modules/antd/es/grid/hooks/useBreakpoint.js
  function useBreakpoint() {
    var refreshOnChange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    var screensRef = (0, import_react30.useRef)({});
    var forceUpdate = useForceUpdate();
    (0, import_react30.useEffect)(function() {
      var token = responsiveObserve_default.subscribe(function(supportScreens) {
        screensRef.current = supportScreens;
        if (refreshOnChange) {
          forceUpdate();
        }
      });
      return function() {
        return responsiveObserve_default.unsubscribe(token);
      };
    }, []);
    return screensRef.current;
  }
  var useBreakpoint_default = useBreakpoint;

  // node_modules/antd/es/tooltip/index.js
  var import_classnames28 = __toESM(require_classnames());

  // node_modules/rc-tooltip/es/Tooltip.js
  var React111 = __toESM(require_react());
  var import_react31 = __toESM(require_react());

  // node_modules/rc-tooltip/es/placements.js
  var autoAdjustOverflow = {
    adjustX: 1,
    adjustY: 1
  };
  var targetOffset = [0, 0];
  var placements = {
    left: {
      points: ["cr", "cl"],
      overflow: autoAdjustOverflow,
      offset: [-4, 0],
      targetOffset
    },
    right: {
      points: ["cl", "cr"],
      overflow: autoAdjustOverflow,
      offset: [4, 0],
      targetOffset
    },
    top: {
      points: ["bc", "tc"],
      overflow: autoAdjustOverflow,
      offset: [0, -4],
      targetOffset
    },
    bottom: {
      points: ["tc", "bc"],
      overflow: autoAdjustOverflow,
      offset: [0, 4],
      targetOffset
    },
    topLeft: {
      points: ["bl", "tl"],
      overflow: autoAdjustOverflow,
      offset: [0, -4],
      targetOffset
    },
    leftTop: {
      points: ["tr", "tl"],
      overflow: autoAdjustOverflow,
      offset: [-4, 0],
      targetOffset
    },
    topRight: {
      points: ["br", "tr"],
      overflow: autoAdjustOverflow,
      offset: [0, -4],
      targetOffset
    },
    rightTop: {
      points: ["tl", "tr"],
      overflow: autoAdjustOverflow,
      offset: [4, 0],
      targetOffset
    },
    bottomRight: {
      points: ["tr", "br"],
      overflow: autoAdjustOverflow,
      offset: [0, 4],
      targetOffset
    },
    rightBottom: {
      points: ["bl", "br"],
      overflow: autoAdjustOverflow,
      offset: [4, 0],
      targetOffset
    },
    bottomLeft: {
      points: ["tl", "bl"],
      overflow: autoAdjustOverflow,
      offset: [0, 4],
      targetOffset
    },
    leftBottom: {
      points: ["br", "bl"],
      overflow: autoAdjustOverflow,
      offset: [-4, 0],
      targetOffset
    }
  };

  // node_modules/rc-tooltip/es/Popup.js
  var React110 = __toESM(require_react());
  var import_classnames27 = __toESM(require_classnames());
  function Popup2(props) {
    var showArrow = props.showArrow, arrowContent = props.arrowContent, children = props.children, prefixCls = props.prefixCls, id2 = props.id, overlayInnerStyle = props.overlayInnerStyle, className = props.className, style2 = props.style;
    return /* @__PURE__ */ React110.createElement("div", {
      className: (0, import_classnames27.default)("".concat(prefixCls, "-content"), className),
      style: style2
    }, showArrow !== false && /* @__PURE__ */ React110.createElement("div", {
      className: "".concat(prefixCls, "-arrow"),
      key: "arrow"
    }, arrowContent), /* @__PURE__ */ React110.createElement("div", {
      className: "".concat(prefixCls, "-inner"),
      id: id2,
      role: "tooltip",
      style: overlayInnerStyle
    }, typeof children === "function" ? children() : children));
  }

  // node_modules/rc-tooltip/es/Tooltip.js
  var Tooltip = function Tooltip2(props, ref) {
    var overlayClassName = props.overlayClassName, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? ["hover"] : _props$trigger, _props$mouseEnterDela = props.mouseEnterDelay, mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0 : _props$mouseEnterDela, _props$mouseLeaveDela = props.mouseLeaveDelay, mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela, overlayStyle = props.overlayStyle, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-tooltip" : _props$prefixCls, children = props.children, onVisibleChange = props.onVisibleChange, afterVisibleChange = props.afterVisibleChange, transitionName2 = props.transitionName, animation = props.animation, motion2 = props.motion, _props$placement = props.placement, placement = _props$placement === void 0 ? "right" : _props$placement, _props$align = props.align, align = _props$align === void 0 ? {} : _props$align, _props$destroyTooltip = props.destroyTooltipOnHide, destroyTooltipOnHide = _props$destroyTooltip === void 0 ? false : _props$destroyTooltip, defaultVisible = props.defaultVisible, getTooltipContainer = props.getTooltipContainer, overlayInnerStyle = props.overlayInnerStyle, arrowContent = props.arrowContent, overlay = props.overlay, id2 = props.id, showArrow = props.showArrow, restProps = _objectWithoutProperties(props, ["overlayClassName", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "prefixCls", "children", "onVisibleChange", "afterVisibleChange", "transitionName", "animation", "motion", "placement", "align", "destroyTooltipOnHide", "defaultVisible", "getTooltipContainer", "overlayInnerStyle", "arrowContent", "overlay", "id", "showArrow"]);
    var domRef = (0, import_react31.useRef)(null);
    (0, import_react31.useImperativeHandle)(ref, function() {
      return domRef.current;
    });
    var extraProps = _objectSpread2({}, restProps);
    if ("visible" in props) {
      extraProps.popupVisible = props.visible;
    }
    var getPopupElement = function getPopupElement2() {
      return /* @__PURE__ */ React111.createElement(Popup2, {
        showArrow,
        arrowContent,
        key: "content",
        prefixCls,
        id: id2,
        overlayInnerStyle
      }, overlay);
    };
    var destroyTooltip = false;
    var autoDestroy = false;
    if (typeof destroyTooltipOnHide === "boolean") {
      destroyTooltip = destroyTooltipOnHide;
    } else if (destroyTooltipOnHide && _typeof(destroyTooltipOnHide) === "object") {
      var keepParent = destroyTooltipOnHide.keepParent;
      destroyTooltip = keepParent === true;
      autoDestroy = keepParent === false;
    }
    return /* @__PURE__ */ React111.createElement(es_default7, _extends({
      popupClassName: overlayClassName,
      prefixCls,
      popup: getPopupElement,
      action: trigger,
      builtinPlacements: placements,
      popupPlacement: placement,
      ref: domRef,
      popupAlign: align,
      getPopupContainer: getTooltipContainer,
      onPopupVisibleChange: onVisibleChange,
      afterPopupVisibleChange: afterVisibleChange,
      popupTransitionName: transitionName2,
      popupAnimation: animation,
      popupMotion: motion2,
      defaultPopupVisible: defaultVisible,
      destroyPopupOnHide: destroyTooltip,
      autoDestroy,
      mouseLeaveDelay,
      popupStyle: overlayStyle,
      mouseEnterDelay
    }, extraProps), children);
  };
  var Tooltip_default = /* @__PURE__ */ (0, import_react31.forwardRef)(Tooltip);

  // node_modules/rc-tooltip/es/index.js
  var es_default10 = Tooltip_default;

  // node_modules/antd/es/tooltip/index.js
  var React112 = __toESM(require_react());

  // node_modules/antd/es/_util/colors.js
  var PresetStatusColorTypes = tuple("success", "processing", "error", "default", "warning");
  var PresetColorTypes = tuple("pink", "red", "yellow", "orange", "cyan", "green", "blue", "purple", "geekblue", "magenta", "volcano", "gold", "lime");

  // node_modules/antd/es/_util/placements.js
  var autoAdjustOverflowEnabled = {
    adjustX: 1,
    adjustY: 1
  };
  var autoAdjustOverflowDisabled = {
    adjustX: 0,
    adjustY: 0
  };
  var targetOffset2 = [0, 0];
  function getOverflowOptions(autoAdjustOverflow4) {
    if (typeof autoAdjustOverflow4 === "boolean") {
      return autoAdjustOverflow4 ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;
    }
    return _extends(_extends({}, autoAdjustOverflowDisabled), autoAdjustOverflow4);
  }
  function getPlacements(config) {
    var _config$arrowWidth = config.arrowWidth, arrowWidth = _config$arrowWidth === void 0 ? 4 : _config$arrowWidth, _config$horizontalArr = config.horizontalArrowShift, horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr, _config$verticalArrow = config.verticalArrowShift, verticalArrowShift = _config$verticalArrow === void 0 ? 8 : _config$verticalArrow, autoAdjustOverflow4 = config.autoAdjustOverflow, arrowPointAtCenter = config.arrowPointAtCenter;
    var placementMap = {
      left: {
        points: ["cr", "cl"],
        offset: [-4, 0]
      },
      right: {
        points: ["cl", "cr"],
        offset: [4, 0]
      },
      top: {
        points: ["bc", "tc"],
        offset: [0, -4]
      },
      bottom: {
        points: ["tc", "bc"],
        offset: [0, 4]
      },
      topLeft: {
        points: ["bl", "tc"],
        offset: [-(horizontalArrowShift + arrowWidth), -4]
      },
      leftTop: {
        points: ["tr", "cl"],
        offset: [-4, -(verticalArrowShift + arrowWidth)]
      },
      topRight: {
        points: ["br", "tc"],
        offset: [horizontalArrowShift + arrowWidth, -4]
      },
      rightTop: {
        points: ["tl", "cr"],
        offset: [4, -(verticalArrowShift + arrowWidth)]
      },
      bottomRight: {
        points: ["tr", "bc"],
        offset: [horizontalArrowShift + arrowWidth, 4]
      },
      rightBottom: {
        points: ["bl", "cr"],
        offset: [4, verticalArrowShift + arrowWidth]
      },
      bottomLeft: {
        points: ["tl", "bc"],
        offset: [-(horizontalArrowShift + arrowWidth), 4]
      },
      leftBottom: {
        points: ["br", "cl"],
        offset: [-4, verticalArrowShift + arrowWidth]
      }
    };
    Object.keys(placementMap).forEach(function(key2) {
      placementMap[key2] = arrowPointAtCenter ? _extends(_extends({}, placementMap[key2]), {
        overflow: getOverflowOptions(autoAdjustOverflow4),
        targetOffset: targetOffset2
      }) : _extends(_extends({}, placements[key2]), {
        overflow: getOverflowOptions(autoAdjustOverflow4)
      });
      placementMap[key2].ignoreShake = true;
    });
    return placementMap;
  }

  // node_modules/antd/es/tooltip/index.js
  var __rest4 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var splitObject = function splitObject2(obj, keys) {
    var picked = {};
    var omitted = _extends({}, obj);
    keys.forEach(function(key2) {
      if (obj && key2 in obj) {
        picked[key2] = obj[key2];
        delete omitted[key2];
      }
    });
    return {
      picked,
      omitted
    };
  };
  var PresetColorRegex = new RegExp("^(".concat(PresetColorTypes.join("|"), ")(-inverse)?$"));
  function getDisabledCompatibleChildren(element, prefixCls) {
    var elementType = element.type;
    if ((elementType.__ANT_BUTTON === true || element.type === "button") && element.props.disabled || elementType.__ANT_SWITCH === true && (element.props.disabled || element.props.loading) || elementType.__ANT_RADIO === true && element.props.disabled) {
      var _splitObject = splitObject(element.props.style, ["position", "left", "right", "top", "bottom", "float", "display", "zIndex"]), picked = _splitObject.picked, omitted = _splitObject.omitted;
      var spanStyle = _extends(_extends({
        display: "inline-block"
      }, picked), {
        cursor: "not-allowed",
        width: element.props.block ? "100%" : null
      });
      var buttonStyle = _extends(_extends({}, omitted), {
        pointerEvents: "none"
      });
      var child = cloneElement6(element, {
        style: buttonStyle,
        className: null
      });
      return /* @__PURE__ */ React112.createElement("span", {
        style: spanStyle,
        className: (0, import_classnames28.default)(element.props.className, "".concat(prefixCls, "-disabled-compatible-wrapper"))
      }, child);
    }
    return element;
  }
  var Tooltip3 = /* @__PURE__ */ React112.forwardRef(function(props, ref) {
    var _classNames2;
    var _React$useContext = React112.useContext(ConfigContext), getContextPopupContainer = _React$useContext.getPopupContainer, getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    if (true) {
      [["visible", "open"], ["defaultVisible", "defaultOpen"], ["onVisibleChange", "onOpenChange"], ["afterVisibleChange", "afterOpenChange"]].forEach(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 2), deprecatedName = _ref2[0], newName = _ref2[1];
        true ? warning_default2(!(deprecatedName in props), "Tooltip", "`".concat(deprecatedName, "` is deprecated which will be removed in next major version, please use `").concat(newName, "` instead.")) : void 0;
      });
    }
    var _useMergedState = useMergedState(false, {
      value: props.open !== void 0 ? props.open : props.visible,
      defaultValue: props.defaultOpen !== void 0 ? props.defaultOpen : props.defaultVisible
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), open = _useMergedState2[0], setOpen = _useMergedState2[1];
    var isNoTitle = function isNoTitle2() {
      var title = props.title, overlay = props.overlay;
      return !title && !overlay && title !== 0;
    };
    var onOpenChange = function onOpenChange2(vis) {
      var _a, _b;
      setOpen(isNoTitle() ? false : vis);
      if (!isNoTitle()) {
        (_a = props.onOpenChange) === null || _a === void 0 ? void 0 : _a.call(props, vis);
        (_b = props.onVisibleChange) === null || _b === void 0 ? void 0 : _b.call(props, vis);
      }
    };
    var getTooltipPlacements = function getTooltipPlacements2() {
      var builtinPlacements = props.builtinPlacements, arrowPointAtCenter = props.arrowPointAtCenter, autoAdjustOverflow4 = props.autoAdjustOverflow;
      return builtinPlacements || getPlacements({
        arrowPointAtCenter,
        autoAdjustOverflow: autoAdjustOverflow4
      });
    };
    var onPopupAlign = function onPopupAlign2(domNode, align) {
      var placements4 = getTooltipPlacements();
      var placement = Object.keys(placements4).find(function(key2) {
        return placements4[key2].points[0] === align.points[0] && placements4[key2].points[1] === align.points[1];
      });
      if (!placement) {
        return;
      }
      var rect = domNode.getBoundingClientRect();
      var transformOrigin = {
        top: "50%",
        left: "50%"
      };
      if (placement.indexOf("top") >= 0 || placement.indexOf("Bottom") >= 0) {
        transformOrigin.top = "".concat(rect.height - align.offset[1], "px");
      } else if (placement.indexOf("Top") >= 0 || placement.indexOf("bottom") >= 0) {
        transformOrigin.top = "".concat(-align.offset[1], "px");
      }
      if (placement.indexOf("left") >= 0 || placement.indexOf("Right") >= 0) {
        transformOrigin.left = "".concat(rect.width - align.offset[0], "px");
      } else if (placement.indexOf("right") >= 0 || placement.indexOf("Left") >= 0) {
        transformOrigin.left = "".concat(-align.offset[0], "px");
      }
      domNode.style.transformOrigin = "".concat(transformOrigin.left, " ").concat(transformOrigin.top);
    };
    var getOverlay = function getOverlay2() {
      var title = props.title, overlay = props.overlay;
      if (title === 0) {
        return title;
      }
      return overlay || title || "";
    };
    var getPopupContainer = props.getPopupContainer, otherProps = __rest4(props, ["getPopupContainer"]);
    var customizePrefixCls = props.prefixCls, openClassName = props.openClassName, getTooltipContainer = props.getTooltipContainer, overlayClassName = props.overlayClassName, color = props.color, overlayInnerStyle = props.overlayInnerStyle, children = props.children;
    var prefixCls = getPrefixCls("tooltip", customizePrefixCls);
    var rootPrefixCls = getPrefixCls();
    var tempOpen = open;
    if (!("open" in props) && !("visible" in props) && isNoTitle()) {
      tempOpen = false;
    }
    var child = getDisabledCompatibleChildren(isValidElement6(children) && !isFragment2(children) ? children : /* @__PURE__ */ React112.createElement("span", null, children), prefixCls);
    var childProps = child.props;
    var childCls = !childProps.className || typeof childProps.className === "string" ? (0, import_classnames28.default)(childProps.className, _defineProperty({}, openClassName || "".concat(prefixCls, "-open"), true)) : childProps.className;
    var customOverlayClassName = (0, import_classnames28.default)(overlayClassName, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames2, "".concat(prefixCls, "-").concat(color), color && PresetColorRegex.test(color)), _classNames2));
    var formattedOverlayInnerStyle = overlayInnerStyle;
    var arrowContentStyle;
    if (color && !PresetColorRegex.test(color)) {
      formattedOverlayInnerStyle = _extends(_extends({}, overlayInnerStyle), {
        background: color
      });
      arrowContentStyle = {
        "--antd-arrow-background-color": color
      };
    }
    return /* @__PURE__ */ React112.createElement(es_default10, _extends({}, otherProps, {
      prefixCls,
      overlayClassName: customOverlayClassName,
      getTooltipContainer: getPopupContainer || getTooltipContainer || getContextPopupContainer,
      ref,
      builtinPlacements: getTooltipPlacements(),
      overlay: getOverlay(),
      visible: tempOpen,
      onVisibleChange: onOpenChange,
      onPopupAlign,
      overlayInnerStyle: formattedOverlayInnerStyle,
      arrowContent: /* @__PURE__ */ React112.createElement("span", {
        className: "".concat(prefixCls, "-arrow-content"),
        style: arrowContentStyle
      }),
      motion: {
        motionName: getTransitionName3(rootPrefixCls, "zoom-big-fast", props.transitionName),
        motionDeadline: 1e3
      }
    }), tempOpen ? cloneElement6(child, {
      className: childCls
    }) : child);
  });
  if (true) {
    Tooltip3.displayName = "Tooltip";
  }
  Tooltip3.defaultProps = {
    placement: "top",
    mouseEnterDelay: 0.1,
    mouseLeaveDelay: 0.1,
    arrowPointAtCenter: false,
    autoAdjustOverflow: true
  };
  var tooltip_default = Tooltip3;

  // node_modules/@ant-design/icons/es/icons/EllipsisOutlined.js
  var React113 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EllipsisOutlined.js
  var EllipsisOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z" } }] }, "name": "ellipsis", "theme": "outlined" };
  var EllipsisOutlined_default = EllipsisOutlined;

  // node_modules/@ant-design/icons/es/icons/EllipsisOutlined.js
  var EllipsisOutlined2 = function EllipsisOutlined3(props, ref) {
    return /* @__PURE__ */ React113.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: EllipsisOutlined_default
    }));
  };
  EllipsisOutlined2.displayName = "EllipsisOutlined";
  var EllipsisOutlined_default2 = /* @__PURE__ */ React113.forwardRef(EllipsisOutlined2);

  // node_modules/antd/es/menu/index.js
  var import_classnames41 = __toESM(require_classnames());

  // node_modules/rc-menu/es/Menu.js
  var React131 = __toESM(require_react());
  var import_classnames33 = __toESM(require_classnames());
  var import_shallowequal2 = __toESM(require_shallowequal());

  // node_modules/rc-menu/es/MenuItem.js
  var React121 = __toESM(require_react());
  var import_classnames29 = __toESM(require_classnames());

  // node_modules/rc-menu/es/context/MenuContext.js
  var React114 = __toESM(require_react());
  var import_shallowequal = __toESM(require_shallowequal());
  var _excluded18 = ["children", "locked"];
  var MenuContext = /* @__PURE__ */ React114.createContext(null);
  function mergeProps(origin, target) {
    var clone2 = _objectSpread2({}, origin);
    Object.keys(target).forEach(function(key2) {
      var value = target[key2];
      if (value !== void 0) {
        clone2[key2] = value;
      }
    });
    return clone2;
  }
  function InheritableContextProvider(_ref) {
    var children = _ref.children, locked = _ref.locked, restProps = _objectWithoutProperties(_ref, _excluded18);
    var context = React114.useContext(MenuContext);
    var inheritableContext = useMemo(function() {
      return mergeProps(context, restProps);
    }, [context, restProps], function(prev, next) {
      return !locked && (prev[0] !== next[0] || !(0, import_shallowequal.default)(prev[1], next[1]));
    });
    return /* @__PURE__ */ React114.createElement(MenuContext.Provider, {
      value: inheritableContext
    }, children);
  }

  // node_modules/rc-menu/es/hooks/useActive.js
  var React115 = __toESM(require_react());
  function useActive(eventKey, disabled, onMouseEnter, onMouseLeave) {
    var _React$useContext = React115.useContext(MenuContext), activeKey = _React$useContext.activeKey, onActive = _React$useContext.onActive, onInactive = _React$useContext.onInactive;
    var ret = {
      active: activeKey === eventKey
    };
    if (!disabled) {
      ret.onMouseEnter = function(domEvent) {
        onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({
          key: eventKey,
          domEvent
        });
        onActive(eventKey);
      };
      ret.onMouseLeave = function(domEvent) {
        onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave({
          key: eventKey,
          domEvent
        });
        onInactive(eventKey);
      };
    }
    return ret;
  }

  // node_modules/rc-menu/es/utils/warnUtil.js
  var _excluded19 = ["item"];
  function warnItemProp(_ref) {
    var item = _ref.item, restInfo = _objectWithoutProperties(_ref, _excluded19);
    Object.defineProperty(restInfo, "item", {
      get: function get3() {
        warning_default(false, "`info.item` is deprecated since we will move to function component that not provides React Node instance in future.");
        return item;
      }
    });
    return restInfo;
  }

  // node_modules/rc-menu/es/Icon.js
  var React116 = __toESM(require_react());
  function Icon2(_ref) {
    var icon = _ref.icon, props = _ref.props, children = _ref.children;
    var iconNode;
    if (typeof icon === "function") {
      iconNode = /* @__PURE__ */ React116.createElement(icon, _objectSpread2({}, props));
    } else {
      iconNode = icon;
    }
    return iconNode || children || null;
  }

  // node_modules/rc-menu/es/hooks/useDirectionStyle.js
  var React117 = __toESM(require_react());
  function useDirectionStyle(level) {
    var _React$useContext = React117.useContext(MenuContext), mode = _React$useContext.mode, rtl3 = _React$useContext.rtl, inlineIndent = _React$useContext.inlineIndent;
    if (mode !== "inline") {
      return null;
    }
    var len = level;
    return rtl3 ? {
      paddingRight: len * inlineIndent
    } : {
      paddingLeft: len * inlineIndent
    };
  }

  // node_modules/rc-menu/es/context/PathContext.js
  var React118 = __toESM(require_react());
  var EmptyList = [];
  var PathRegisterContext = /* @__PURE__ */ React118.createContext(null);
  function useMeasure() {
    return React118.useContext(PathRegisterContext);
  }
  var PathTrackerContext = /* @__PURE__ */ React118.createContext(EmptyList);
  function useFullPath(eventKey) {
    var parentKeyPath = React118.useContext(PathTrackerContext);
    return React118.useMemo(function() {
      return eventKey !== void 0 ? [].concat(_toConsumableArray(parentKeyPath), [eventKey]) : parentKeyPath;
    }, [parentKeyPath, eventKey]);
  }
  var PathUserContext = /* @__PURE__ */ React118.createContext(null);

  // node_modules/rc-menu/es/context/IdContext.js
  var React119 = __toESM(require_react());
  var IdContext = /* @__PURE__ */ React119.createContext(null);
  function getMenuId(uuid7, eventKey) {
    if (uuid7 === void 0) {
      return null;
    }
    return "".concat(uuid7, "-").concat(eventKey);
  }
  function useMenuId(eventKey) {
    var id2 = React119.useContext(IdContext);
    return getMenuId(id2, eventKey);
  }

  // node_modules/rc-menu/es/context/PrivateContext.js
  var React120 = __toESM(require_react());
  var PrivateContext = /* @__PURE__ */ React120.createContext({});
  var PrivateContext_default = PrivateContext;

  // node_modules/rc-menu/es/MenuItem.js
  var _excluded20 = ["title", "attribute", "elementRef"];
  var _excluded25 = ["style", "className", "eventKey", "warnKey", "disabled", "itemIcon", "children", "role", "onMouseEnter", "onMouseLeave", "onClick", "onKeyDown", "onFocus"];
  var _excluded33 = ["active"];
  var LegacyMenuItem = /* @__PURE__ */ function(_React$Component) {
    _inherits(LegacyMenuItem2, _React$Component);
    var _super = _createSuper(LegacyMenuItem2);
    function LegacyMenuItem2() {
      _classCallCheck(this, LegacyMenuItem2);
      return _super.apply(this, arguments);
    }
    _createClass(LegacyMenuItem2, [{
      key: "render",
      value: function render4() {
        var _this$props = this.props, title = _this$props.title, attribute = _this$props.attribute, elementRef = _this$props.elementRef, restProps = _objectWithoutProperties(_this$props, _excluded20);
        var passedProps = omit(restProps, ["eventKey"]);
        warning_default(!attribute, "`attribute` of Menu.Item is deprecated. Please pass attribute directly.");
        return /* @__PURE__ */ React121.createElement(es_default5.Item, _extends({}, attribute, {
          title: typeof title === "string" ? title : void 0
        }, passedProps, {
          ref: elementRef
        }));
      }
    }]);
    return LegacyMenuItem2;
  }(React121.Component);
  var InternalMenuItem = function InternalMenuItem2(props) {
    var _classNames;
    var style2 = props.style, className = props.className, eventKey = props.eventKey, warnKey = props.warnKey, disabled = props.disabled, itemIcon = props.itemIcon, children = props.children, role = props.role, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onClick = props.onClick, onKeyDown2 = props.onKeyDown, onFocus2 = props.onFocus, restProps = _objectWithoutProperties(props, _excluded25);
    var domDataId = useMenuId(eventKey);
    var _React$useContext = React121.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, onItemClick2 = _React$useContext.onItemClick, contextDisabled = _React$useContext.disabled, overflowDisabled = _React$useContext.overflowDisabled, contextItemIcon = _React$useContext.itemIcon, selectedKeys = _React$useContext.selectedKeys, onActive = _React$useContext.onActive;
    var _React$useContext2 = React121.useContext(PrivateContext_default), _internalRenderMenuItem = _React$useContext2._internalRenderMenuItem;
    var itemCls = "".concat(prefixCls, "-item");
    var legacyMenuItemRef = React121.useRef();
    var elementRef = React121.useRef();
    var mergedDisabled = contextDisabled || disabled;
    var connectedKeys = useFullPath(eventKey);
    if (warnKey) {
      warning_default(false, "MenuItem should not leave undefined `key`.");
    }
    var getEventInfo = function getEventInfo2(e3) {
      return {
        key: eventKey,
        // Note: For legacy code is reversed which not like other antd component
        keyPath: _toConsumableArray(connectedKeys).reverse(),
        item: legacyMenuItemRef.current,
        domEvent: e3
      };
    };
    var mergedItemIcon = itemIcon || contextItemIcon;
    var _useActive = useActive(eventKey, mergedDisabled, onMouseEnter, onMouseLeave), active = _useActive.active, activeProps = _objectWithoutProperties(_useActive, _excluded33);
    var selected = selectedKeys.includes(eventKey);
    var directionStyle = useDirectionStyle(connectedKeys.length);
    var onInternalClick = function onInternalClick2(e3) {
      if (mergedDisabled) {
        return;
      }
      var info = getEventInfo(e3);
      onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));
      onItemClick2(info);
    };
    var onInternalKeyDown = function onInternalKeyDown2(e3) {
      onKeyDown2 === null || onKeyDown2 === void 0 ? void 0 : onKeyDown2(e3);
      if (e3.which === KeyCode_default.ENTER) {
        var info = getEventInfo(e3);
        onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));
        onItemClick2(info);
      }
    };
    var onInternalFocus = function onInternalFocus2(e3) {
      onActive(eventKey);
      onFocus2 === null || onFocus2 === void 0 ? void 0 : onFocus2(e3);
    };
    var optionRoleProps = {};
    if (props.role === "option") {
      optionRoleProps["aria-selected"] = selected;
    }
    var renderNode = /* @__PURE__ */ React121.createElement(LegacyMenuItem, _extends({
      ref: legacyMenuItemRef,
      elementRef,
      role: role === null ? "none" : role || "menuitem",
      tabIndex: disabled ? null : -1,
      "data-menu-id": overflowDisabled && domDataId ? null : domDataId
    }, restProps, activeProps, optionRoleProps, {
      component: "li",
      "aria-disabled": disabled,
      style: _objectSpread2(_objectSpread2({}, directionStyle), style2),
      className: (0, import_classnames29.default)(itemCls, (_classNames = {}, _defineProperty(_classNames, "".concat(itemCls, "-active"), active), _defineProperty(_classNames, "".concat(itemCls, "-selected"), selected), _defineProperty(_classNames, "".concat(itemCls, "-disabled"), mergedDisabled), _classNames), className),
      onClick: onInternalClick,
      onKeyDown: onInternalKeyDown,
      onFocus: onInternalFocus
    }), children, /* @__PURE__ */ React121.createElement(Icon2, {
      props: _objectSpread2(_objectSpread2({}, props), {}, {
        isSelected: selected
      }),
      icon: mergedItemIcon
    }));
    if (_internalRenderMenuItem) {
      renderNode = _internalRenderMenuItem(renderNode, props, {
        selected
      });
    }
    return renderNode;
  };
  function MenuItem(props) {
    var eventKey = props.eventKey;
    var measure = useMeasure();
    var connectedKeyPath = useFullPath(eventKey);
    React121.useEffect(function() {
      if (measure) {
        measure.registerPath(eventKey, connectedKeyPath);
        return function() {
          measure.unregisterPath(eventKey, connectedKeyPath);
        };
      }
    }, [connectedKeyPath]);
    if (measure) {
      return null;
    }
    return /* @__PURE__ */ React121.createElement(InternalMenuItem, props);
  }
  var MenuItem_default = MenuItem;

  // node_modules/rc-menu/es/utils/nodeUtil.js
  var React122 = __toESM(require_react());
  var _excluded21 = ["label", "children", "key", "type"];
  function parseChildren(children, keyPath) {
    return toArray(children).map(function(child, index3) {
      if (/* @__PURE__ */ React122.isValidElement(child)) {
        var _child$props$eventKey, _child$props;
        var key2 = child.key;
        var eventKey = (_child$props$eventKey = (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.eventKey) !== null && _child$props$eventKey !== void 0 ? _child$props$eventKey : key2;
        var emptyKey = eventKey === null || eventKey === void 0;
        if (emptyKey) {
          eventKey = "tmp_key-".concat([].concat(_toConsumableArray(keyPath), [index3]).join("-"));
        }
        var cloneProps = {
          key: eventKey,
          eventKey
        };
        if (emptyKey) {
          cloneProps.warnKey = true;
        }
        return /* @__PURE__ */ React122.cloneElement(child, cloneProps);
      }
      return child;
    });
  }
  function convertItemsToNodes(list) {
    return (list || []).map(function(opt, index3) {
      if (opt && _typeof(opt) === "object") {
        var label = opt.label, children = opt.children, key2 = opt.key, type4 = opt.type, restProps = _objectWithoutProperties(opt, _excluded21);
        var mergedKey = key2 !== null && key2 !== void 0 ? key2 : "tmp-".concat(index3);
        if (children || type4 === "group") {
          if (type4 === "group") {
            return /* @__PURE__ */ React122.createElement(MenuItemGroup, _extends({
              key: mergedKey
            }, restProps, {
              title: label
            }), convertItemsToNodes(children));
          }
          return /* @__PURE__ */ React122.createElement(SubMenu, _extends({
            key: mergedKey
          }, restProps, {
            title: label
          }), convertItemsToNodes(children));
        }
        if (type4 === "divider") {
          return /* @__PURE__ */ React122.createElement(Divider, _extends({
            key: mergedKey
          }, restProps));
        }
        return /* @__PURE__ */ React122.createElement(MenuItem_default, _extends({
          key: mergedKey
        }, restProps), label);
      }
      return null;
    }).filter(function(opt) {
      return opt;
    });
  }
  function parseItems(children, items, keyPath) {
    var childNodes = children;
    if (items) {
      childNodes = convertItemsToNodes(items);
    }
    return parseChildren(childNodes, keyPath);
  }

  // node_modules/rc-menu/es/hooks/useMemoCallback.js
  var React123 = __toESM(require_react());
  function useMemoCallback(func) {
    var funRef = React123.useRef(func);
    funRef.current = func;
    var callback = React123.useCallback(function() {
      var _funRef$current;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return (_funRef$current = funRef.current) === null || _funRef$current === void 0 ? void 0 : _funRef$current.call.apply(_funRef$current, [funRef].concat(args));
    }, []);
    return func ? callback : void 0;
  }

  // node_modules/rc-menu/es/SubMenu/index.js
  var React127 = __toESM(require_react());
  var import_classnames32 = __toESM(require_classnames());

  // node_modules/rc-menu/es/SubMenu/SubMenuList.js
  var React124 = __toESM(require_react());
  var import_classnames30 = __toESM(require_classnames());
  var _excluded26 = ["className", "children"];
  var InternalSubMenuList = function InternalSubMenuList2(_ref, ref) {
    var className = _ref.className, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded26);
    var _React$useContext = React124.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, mode = _React$useContext.mode, rtl3 = _React$useContext.rtl;
    return /* @__PURE__ */ React124.createElement("ul", _extends({
      className: (0, import_classnames30.default)(prefixCls, rtl3 && "".concat(prefixCls, "-rtl"), "".concat(prefixCls, "-sub"), "".concat(prefixCls, "-").concat(mode === "inline" ? "inline" : "vertical"), className)
    }, restProps, {
      "data-menu-list": true,
      ref
    }), children);
  };
  var SubMenuList = /* @__PURE__ */ React124.forwardRef(InternalSubMenuList);
  SubMenuList.displayName = "SubMenuList";
  var SubMenuList_default = SubMenuList;

  // node_modules/rc-menu/es/SubMenu/PopupTrigger.js
  var React125 = __toESM(require_react());
  var import_classnames31 = __toESM(require_classnames());

  // node_modules/rc-menu/es/placements.js
  var autoAdjustOverflow2 = {
    adjustX: 1,
    adjustY: 1
  };
  var placements2 = {
    topLeft: {
      points: ["bl", "tl"],
      overflow: autoAdjustOverflow2,
      offset: [0, -7]
    },
    bottomLeft: {
      points: ["tl", "bl"],
      overflow: autoAdjustOverflow2,
      offset: [0, 7]
    },
    leftTop: {
      points: ["tr", "tl"],
      overflow: autoAdjustOverflow2,
      offset: [-4, 0]
    },
    rightTop: {
      points: ["tl", "tr"],
      overflow: autoAdjustOverflow2,
      offset: [4, 0]
    }
  };
  var placementsRtl = {
    topLeft: {
      points: ["bl", "tl"],
      overflow: autoAdjustOverflow2,
      offset: [0, -7]
    },
    bottomLeft: {
      points: ["tl", "bl"],
      overflow: autoAdjustOverflow2,
      offset: [0, 7]
    },
    rightTop: {
      points: ["tr", "tl"],
      overflow: autoAdjustOverflow2,
      offset: [-4, 0]
    },
    leftTop: {
      points: ["tl", "tr"],
      overflow: autoAdjustOverflow2,
      offset: [4, 0]
    }
  };

  // node_modules/rc-menu/es/utils/motionUtil.js
  function getMotion2(mode, motion2, defaultMotions) {
    if (motion2) {
      return motion2;
    }
    if (defaultMotions) {
      return defaultMotions[mode] || defaultMotions.other;
    }
    return void 0;
  }

  // node_modules/rc-menu/es/SubMenu/PopupTrigger.js
  var popupPlacementMap = {
    horizontal: "bottomLeft",
    vertical: "rightTop",
    "vertical-left": "rightTop",
    "vertical-right": "leftTop"
  };
  function PopupTrigger(_ref) {
    var prefixCls = _ref.prefixCls, visible = _ref.visible, children = _ref.children, popup = _ref.popup, popupClassName = _ref.popupClassName, popupOffset = _ref.popupOffset, disabled = _ref.disabled, mode = _ref.mode, onVisibleChange = _ref.onVisibleChange;
    var _React$useContext = React125.useContext(MenuContext), getPopupContainer = _React$useContext.getPopupContainer, rtl3 = _React$useContext.rtl, subMenuOpenDelay = _React$useContext.subMenuOpenDelay, subMenuCloseDelay = _React$useContext.subMenuCloseDelay, builtinPlacements = _React$useContext.builtinPlacements, triggerSubMenuAction = _React$useContext.triggerSubMenuAction, forceSubMenuRender = _React$useContext.forceSubMenuRender, rootClassName = _React$useContext.rootClassName, motion2 = _React$useContext.motion, defaultMotions = _React$useContext.defaultMotions;
    var _React$useState = React125.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), innerVisible = _React$useState2[0], setInnerVisible = _React$useState2[1];
    var placement = rtl3 ? _objectSpread2(_objectSpread2({}, placementsRtl), builtinPlacements) : _objectSpread2(_objectSpread2({}, placements2), builtinPlacements);
    var popupPlacement = popupPlacementMap[mode];
    var targetMotion = getMotion2(mode, motion2, defaultMotions);
    var mergedMotion = _objectSpread2(_objectSpread2({}, targetMotion), {}, {
      leavedClassName: "".concat(prefixCls, "-hidden"),
      removeOnLeave: false,
      motionAppear: true
    });
    var visibleRef = React125.useRef();
    React125.useEffect(function() {
      visibleRef.current = raf_default(function() {
        setInnerVisible(visible);
      });
      return function() {
        raf_default.cancel(visibleRef.current);
      };
    }, [visible]);
    return /* @__PURE__ */ React125.createElement(es_default7, {
      prefixCls,
      popupClassName: (0, import_classnames31.default)("".concat(prefixCls, "-popup"), _defineProperty({}, "".concat(prefixCls, "-rtl"), rtl3), popupClassName, rootClassName),
      stretch: mode === "horizontal" ? "minWidth" : null,
      getPopupContainer,
      builtinPlacements: placement,
      popupPlacement,
      popupVisible: innerVisible,
      popup,
      popupAlign: popupOffset && {
        offset: popupOffset
      },
      action: disabled ? [] : [triggerSubMenuAction],
      mouseEnterDelay: subMenuOpenDelay,
      mouseLeaveDelay: subMenuCloseDelay,
      onPopupVisibleChange: onVisibleChange,
      forceRender: forceSubMenuRender,
      popupMotion: mergedMotion
    }, children);
  }

  // node_modules/rc-menu/es/SubMenu/InlineSubMenuList.js
  var React126 = __toESM(require_react());
  function InlineSubMenuList(_ref) {
    var id2 = _ref.id, open = _ref.open, keyPath = _ref.keyPath, children = _ref.children;
    var fixedMode = "inline";
    var _React$useContext = React126.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, forceSubMenuRender = _React$useContext.forceSubMenuRender, motion2 = _React$useContext.motion, defaultMotions = _React$useContext.defaultMotions, mode = _React$useContext.mode;
    var sameModeRef = React126.useRef(false);
    sameModeRef.current = mode === fixedMode;
    var _React$useState = React126.useState(!sameModeRef.current), _React$useState2 = _slicedToArray(_React$useState, 2), destroy3 = _React$useState2[0], setDestroy = _React$useState2[1];
    var mergedOpen = sameModeRef.current ? open : false;
    React126.useEffect(function() {
      if (sameModeRef.current) {
        setDestroy(false);
      }
    }, [mode]);
    var mergedMotion = _objectSpread2({}, getMotion2(fixedMode, motion2, defaultMotions));
    if (keyPath.length > 1) {
      mergedMotion.motionAppear = false;
    }
    var originOnVisibleChanged = mergedMotion.onVisibleChanged;
    mergedMotion.onVisibleChanged = function(newVisible) {
      if (!sameModeRef.current && !newVisible) {
        setDestroy(true);
      }
      return originOnVisibleChanged === null || originOnVisibleChanged === void 0 ? void 0 : originOnVisibleChanged(newVisible);
    };
    if (destroy3) {
      return null;
    }
    return /* @__PURE__ */ React126.createElement(InheritableContextProvider, {
      mode: fixedMode,
      locked: !sameModeRef.current
    }, /* @__PURE__ */ React126.createElement(es_default3, _extends({
      visible: mergedOpen
    }, mergedMotion, {
      forceRender: forceSubMenuRender,
      removeOnLeave: false,
      leavedClassName: "".concat(prefixCls, "-hidden")
    }), function(_ref2) {
      var motionClassName = _ref2.className, motionStyle = _ref2.style;
      return /* @__PURE__ */ React126.createElement(SubMenuList_default, {
        id: id2,
        className: motionClassName,
        style: motionStyle
      }, children);
    }));
  }

  // node_modules/rc-menu/es/SubMenu/index.js
  var _excluded27 = ["style", "className", "title", "eventKey", "warnKey", "disabled", "internalPopupClose", "children", "itemIcon", "expandIcon", "popupClassName", "popupOffset", "onClick", "onMouseEnter", "onMouseLeave", "onTitleClick", "onTitleMouseEnter", "onTitleMouseLeave"];
  var _excluded28 = ["active"];
  var InternalSubMenu = function InternalSubMenu2(props) {
    var _classNames;
    var style2 = props.style, className = props.className, title = props.title, eventKey = props.eventKey, warnKey = props.warnKey, disabled = props.disabled, internalPopupClose = props.internalPopupClose, children = props.children, itemIcon = props.itemIcon, expandIcon = props.expandIcon, popupClassName = props.popupClassName, popupOffset = props.popupOffset, onClick = props.onClick, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onTitleClick = props.onTitleClick, onTitleMouseEnter = props.onTitleMouseEnter, onTitleMouseLeave = props.onTitleMouseLeave, restProps = _objectWithoutProperties(props, _excluded27);
    var domDataId = useMenuId(eventKey);
    var _React$useContext = React127.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, mode = _React$useContext.mode, openKeys = _React$useContext.openKeys, contextDisabled = _React$useContext.disabled, overflowDisabled = _React$useContext.overflowDisabled, activeKey = _React$useContext.activeKey, selectedKeys = _React$useContext.selectedKeys, contextItemIcon = _React$useContext.itemIcon, contextExpandIcon = _React$useContext.expandIcon, onItemClick2 = _React$useContext.onItemClick, onOpenChange = _React$useContext.onOpenChange, onActive = _React$useContext.onActive;
    var _React$useContext2 = React127.useContext(PrivateContext_default), _internalRenderSubMenuItem = _React$useContext2._internalRenderSubMenuItem;
    var _React$useContext3 = React127.useContext(PathUserContext), isSubPathKey = _React$useContext3.isSubPathKey;
    var connectedPath = useFullPath();
    var subMenuPrefixCls = "".concat(prefixCls, "-submenu");
    var mergedDisabled = contextDisabled || disabled;
    var elementRef = React127.useRef();
    var popupRef = React127.useRef();
    if (warnKey) {
      warning_default(false, "SubMenu should not leave undefined `key`.");
    }
    var mergedItemIcon = itemIcon || contextItemIcon;
    var mergedExpandIcon = expandIcon || contextExpandIcon;
    var originOpen = openKeys.includes(eventKey);
    var open = !overflowDisabled && originOpen;
    var childrenSelected = isSubPathKey(selectedKeys, eventKey);
    var _useActive = useActive(eventKey, mergedDisabled, onTitleMouseEnter, onTitleMouseLeave), active = _useActive.active, activeProps = _objectWithoutProperties(_useActive, _excluded28);
    var _React$useState = React127.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), childrenActive = _React$useState2[0], setChildrenActive = _React$useState2[1];
    var triggerChildrenActive = function triggerChildrenActive2(newActive) {
      if (!mergedDisabled) {
        setChildrenActive(newActive);
      }
    };
    var onInternalMouseEnter = function onInternalMouseEnter2(domEvent) {
      triggerChildrenActive(true);
      onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({
        key: eventKey,
        domEvent
      });
    };
    var onInternalMouseLeave = function onInternalMouseLeave2(domEvent) {
      triggerChildrenActive(false);
      onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave({
        key: eventKey,
        domEvent
      });
    };
    var mergedActive = React127.useMemo(function() {
      if (active) {
        return active;
      }
      if (mode !== "inline") {
        return childrenActive || isSubPathKey([activeKey], eventKey);
      }
      return false;
    }, [mode, active, activeKey, childrenActive, eventKey, isSubPathKey]);
    var directionStyle = useDirectionStyle(connectedPath.length);
    var onInternalTitleClick = function onInternalTitleClick2(e3) {
      if (mergedDisabled) {
        return;
      }
      onTitleClick === null || onTitleClick === void 0 ? void 0 : onTitleClick({
        key: eventKey,
        domEvent: e3
      });
      if (mode === "inline") {
        onOpenChange(eventKey, !originOpen);
      }
    };
    var onMergedItemClick = useMemoCallback(function(info) {
      onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));
      onItemClick2(info);
    });
    var onPopupVisibleChange = function onPopupVisibleChange2(newVisible) {
      if (mode !== "inline") {
        onOpenChange(eventKey, newVisible);
      }
    };
    var onInternalFocus = function onInternalFocus2() {
      onActive(eventKey);
    };
    var popupId = domDataId && "".concat(domDataId, "-popup");
    var titleNode = /* @__PURE__ */ React127.createElement("div", _extends({
      role: "menuitem",
      style: directionStyle,
      className: "".concat(subMenuPrefixCls, "-title"),
      tabIndex: mergedDisabled ? null : -1,
      ref: elementRef,
      title: typeof title === "string" ? title : null,
      "data-menu-id": overflowDisabled && domDataId ? null : domDataId,
      "aria-expanded": open,
      "aria-haspopup": true,
      "aria-controls": popupId,
      "aria-disabled": mergedDisabled,
      onClick: onInternalTitleClick,
      onFocus: onInternalFocus
    }, activeProps), title, /* @__PURE__ */ React127.createElement(Icon2, {
      icon: mode !== "horizontal" ? mergedExpandIcon : null,
      props: _objectSpread2(_objectSpread2({}, props), {}, {
        isOpen: open,
        // [Legacy] Not sure why need this mark
        isSubMenu: true
      })
    }, /* @__PURE__ */ React127.createElement("i", {
      className: "".concat(subMenuPrefixCls, "-arrow")
    })));
    var triggerModeRef = React127.useRef(mode);
    if (mode !== "inline") {
      triggerModeRef.current = connectedPath.length > 1 ? "vertical" : mode;
    }
    if (!overflowDisabled) {
      var triggerMode = triggerModeRef.current;
      titleNode = /* @__PURE__ */ React127.createElement(PopupTrigger, {
        mode: triggerMode,
        prefixCls: subMenuPrefixCls,
        visible: !internalPopupClose && open && mode !== "inline",
        popupClassName,
        popupOffset,
        popup: /* @__PURE__ */ React127.createElement(
          InheritableContextProvider,
          {
            mode: triggerMode === "horizontal" ? "vertical" : triggerMode
          },
          /* @__PURE__ */ React127.createElement(SubMenuList_default, {
            id: popupId,
            ref: popupRef
          }, children)
        ),
        disabled: mergedDisabled,
        onVisibleChange: onPopupVisibleChange
      }, titleNode);
    }
    var listNode = /* @__PURE__ */ React127.createElement(es_default5.Item, _extends({
      role: "none"
    }, restProps, {
      component: "li",
      style: style2,
      className: (0, import_classnames32.default)(subMenuPrefixCls, "".concat(subMenuPrefixCls, "-").concat(mode), className, (_classNames = {}, _defineProperty(_classNames, "".concat(subMenuPrefixCls, "-open"), open), _defineProperty(_classNames, "".concat(subMenuPrefixCls, "-active"), mergedActive), _defineProperty(_classNames, "".concat(subMenuPrefixCls, "-selected"), childrenSelected), _defineProperty(_classNames, "".concat(subMenuPrefixCls, "-disabled"), mergedDisabled), _classNames)),
      onMouseEnter: onInternalMouseEnter,
      onMouseLeave: onInternalMouseLeave
    }), titleNode, !overflowDisabled && /* @__PURE__ */ React127.createElement(InlineSubMenuList, {
      id: popupId,
      open,
      keyPath: connectedPath
    }, children));
    if (_internalRenderSubMenuItem) {
      listNode = _internalRenderSubMenuItem(listNode, props, {
        selected: childrenSelected,
        active: mergedActive,
        open,
        disabled: mergedDisabled
      });
    }
    return /* @__PURE__ */ React127.createElement(InheritableContextProvider, {
      onItemClick: onMergedItemClick,
      mode: mode === "horizontal" ? "vertical" : mode,
      itemIcon: mergedItemIcon,
      expandIcon: mergedExpandIcon
    }, listNode);
  };
  function SubMenu(props) {
    var eventKey = props.eventKey, children = props.children;
    var connectedKeyPath = useFullPath(eventKey);
    var childList = parseChildren(children, connectedKeyPath);
    var measure = useMeasure();
    React127.useEffect(function() {
      if (measure) {
        measure.registerPath(eventKey, connectedKeyPath);
        return function() {
          measure.unregisterPath(eventKey, connectedKeyPath);
        };
      }
    }, [connectedKeyPath]);
    var renderNode;
    if (measure) {
      renderNode = childList;
    } else {
      renderNode = /* @__PURE__ */ React127.createElement(InternalSubMenu, props, childList);
    }
    return /* @__PURE__ */ React127.createElement(PathTrackerContext.Provider, {
      value: connectedKeyPath
    }, renderNode);
  }

  // node_modules/rc-menu/es/hooks/useAccessibility.js
  var React128 = __toESM(require_react());

  // node_modules/rc-util/es/Dom/focus.js
  function focusable(node) {
    var includePositive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (isVisible_default(node)) {
      var nodeName = node.nodeName.toLowerCase();
      var isFocusableElement = (
        // Focusable element
        ["input", "select", "textarea", "button"].includes(nodeName) || // Editable element
        node.isContentEditable || // Anchor with href element
        nodeName === "a" && !!node.getAttribute("href")
      );
      var tabIndexAttr = node.getAttribute("tabindex");
      var tabIndexNum = Number(tabIndexAttr);
      var tabIndex = null;
      if (tabIndexAttr && !Number.isNaN(tabIndexNum)) {
        tabIndex = tabIndexNum;
      } else if (isFocusableElement && tabIndex === null) {
        tabIndex = 0;
      }
      if (isFocusableElement && node.disabled) {
        tabIndex = null;
      }
      return tabIndex !== null && (tabIndex >= 0 || includePositive && tabIndex < 0);
    }
    return false;
  }
  function getFocusNodeList(node) {
    var includePositive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var res = _toConsumableArray(node.querySelectorAll("*")).filter(function(child) {
      return focusable(child, includePositive);
    });
    if (focusable(node, includePositive)) {
      res.unshift(node);
    }
    return res;
  }

  // node_modules/rc-menu/es/hooks/useAccessibility.js
  var LEFT2 = KeyCode_default.LEFT;
  var RIGHT = KeyCode_default.RIGHT;
  var UP = KeyCode_default.UP;
  var DOWN = KeyCode_default.DOWN;
  var ENTER = KeyCode_default.ENTER;
  var ESC = KeyCode_default.ESC;
  var HOME = KeyCode_default.HOME;
  var END = KeyCode_default.END;
  var ArrowKeys = [UP, DOWN, LEFT2, RIGHT];
  function getOffset2(mode, isRootLevel, isRtl, which) {
    var _inline, _horizontal, _vertical, _offsets;
    var prev = "prev";
    var next = "next";
    var children = "children";
    var parent = "parent";
    if (mode === "inline" && which === ENTER) {
      return {
        inlineTrigger: true
      };
    }
    var inline = (_inline = {}, _defineProperty(_inline, UP, prev), _defineProperty(_inline, DOWN, next), _inline);
    var horizontal = (_horizontal = {}, _defineProperty(_horizontal, LEFT2, isRtl ? next : prev), _defineProperty(_horizontal, RIGHT, isRtl ? prev : next), _defineProperty(_horizontal, DOWN, children), _defineProperty(_horizontal, ENTER, children), _horizontal);
    var vertical = (_vertical = {}, _defineProperty(_vertical, UP, prev), _defineProperty(_vertical, DOWN, next), _defineProperty(_vertical, ENTER, children), _defineProperty(_vertical, ESC, parent), _defineProperty(_vertical, LEFT2, isRtl ? children : parent), _defineProperty(_vertical, RIGHT, isRtl ? parent : children), _vertical);
    var offsets = {
      inline,
      horizontal,
      vertical,
      inlineSub: inline,
      horizontalSub: vertical,
      verticalSub: vertical
    };
    var type4 = (_offsets = offsets["".concat(mode).concat(isRootLevel ? "" : "Sub")]) === null || _offsets === void 0 ? void 0 : _offsets[which];
    switch (type4) {
      case prev:
        return {
          offset: -1,
          sibling: true
        };
      case next:
        return {
          offset: 1,
          sibling: true
        };
      case parent:
        return {
          offset: -1,
          sibling: false
        };
      case children:
        return {
          offset: 1,
          sibling: false
        };
      default:
        return null;
    }
  }
  function findContainerUL(element) {
    var current = element;
    while (current) {
      if (current.getAttribute("data-menu-list")) {
        return current;
      }
      current = current.parentElement;
    }
    return null;
  }
  function getFocusElement(activeElement, elements) {
    var current = activeElement || document.activeElement;
    while (current) {
      if (elements.has(current)) {
        return current;
      }
      current = current.parentElement;
    }
    return null;
  }
  function getFocusableElements(container, elements) {
    var list = getFocusNodeList(container, true);
    return list.filter(function(ele) {
      return elements.has(ele);
    });
  }
  function getNextFocusElement(parentQueryContainer, elements, focusMenuElement) {
    var offset3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
    if (!parentQueryContainer) {
      return null;
    }
    var sameLevelFocusableMenuElementList = getFocusableElements(parentQueryContainer, elements);
    var count2 = sameLevelFocusableMenuElementList.length;
    var focusIndex = sameLevelFocusableMenuElementList.findIndex(function(ele) {
      return focusMenuElement === ele;
    });
    if (offset3 < 0) {
      if (focusIndex === -1) {
        focusIndex = count2 - 1;
      } else {
        focusIndex -= 1;
      }
    } else if (offset3 > 0) {
      focusIndex += 1;
    }
    focusIndex = (focusIndex + count2) % count2;
    return sameLevelFocusableMenuElementList[focusIndex];
  }
  function useAccessibility(mode, activeKey, isRtl, id2, containerRef, getKeys, getKeyPath, triggerActiveKey, triggerAccessibilityOpen, originOnKeyDown) {
    var rafRef = React128.useRef();
    var activeRef = React128.useRef();
    activeRef.current = activeKey;
    var cleanRaf = function cleanRaf2() {
      raf_default.cancel(rafRef.current);
    };
    React128.useEffect(function() {
      return function() {
        cleanRaf();
      };
    }, []);
    return function(e3) {
      var which = e3.which;
      if ([].concat(ArrowKeys, [ENTER, ESC, HOME, END]).includes(which)) {
        var elements;
        var key2element;
        var element2key;
        var refreshElements = function refreshElements2() {
          elements = /* @__PURE__ */ new Set();
          key2element = /* @__PURE__ */ new Map();
          element2key = /* @__PURE__ */ new Map();
          var keys = getKeys();
          keys.forEach(function(key2) {
            var element = document.querySelector("[data-menu-id='".concat(getMenuId(id2, key2), "']"));
            if (element) {
              elements.add(element);
              element2key.set(element, key2);
              key2element.set(key2, element);
            }
          });
          return elements;
        };
        refreshElements();
        var activeElement = key2element.get(activeKey);
        var focusMenuElement = getFocusElement(activeElement, elements);
        var focusMenuKey = element2key.get(focusMenuElement);
        var offsetObj = getOffset2(mode, getKeyPath(focusMenuKey, true).length === 1, isRtl, which);
        if (!offsetObj && which !== HOME && which !== END) {
          return;
        }
        if (ArrowKeys.includes(which) || [HOME, END].includes(which)) {
          e3.preventDefault();
        }
        var tryFocus = function tryFocus2(menuElement) {
          if (menuElement) {
            var focusTargetElement = menuElement;
            var link = menuElement.querySelector("a");
            if (link === null || link === void 0 ? void 0 : link.getAttribute("href")) {
              focusTargetElement = link;
            }
            var targetKey = element2key.get(menuElement);
            triggerActiveKey(targetKey);
            cleanRaf();
            rafRef.current = raf_default(function() {
              if (activeRef.current === targetKey) {
                focusTargetElement.focus();
              }
            });
          }
        };
        if ([HOME, END].includes(which) || offsetObj.sibling || !focusMenuElement) {
          var parentQueryContainer;
          if (!focusMenuElement || mode === "inline") {
            parentQueryContainer = containerRef.current;
          } else {
            parentQueryContainer = findContainerUL(focusMenuElement);
          }
          var targetElement;
          var focusableElements = getFocusableElements(parentQueryContainer, elements);
          if (which === HOME) {
            targetElement = focusableElements[0];
          } else if (which === END) {
            targetElement = focusableElements[focusableElements.length - 1];
          } else {
            targetElement = getNextFocusElement(parentQueryContainer, elements, focusMenuElement, offsetObj.offset);
          }
          tryFocus(targetElement);
        } else if (offsetObj.inlineTrigger) {
          triggerAccessibilityOpen(focusMenuKey);
        } else if (offsetObj.offset > 0) {
          triggerAccessibilityOpen(focusMenuKey, true);
          cleanRaf();
          rafRef.current = raf_default(function() {
            refreshElements();
            var controlId = focusMenuElement.getAttribute("aria-controls");
            var subQueryContainer = document.getElementById(controlId);
            var targetElement2 = getNextFocusElement(subQueryContainer, elements);
            tryFocus(targetElement2);
          }, 5);
        } else if (offsetObj.offset < 0) {
          var keyPath = getKeyPath(focusMenuKey, true);
          var parentKey = keyPath[keyPath.length - 2];
          var parentMenuElement = key2element.get(parentKey);
          triggerAccessibilityOpen(parentKey, false);
          tryFocus(parentMenuElement);
        }
      }
      originOnKeyDown === null || originOnKeyDown === void 0 ? void 0 : originOnKeyDown(e3);
    };
  }

  // node_modules/rc-menu/es/hooks/useUUID.js
  var React129 = __toESM(require_react());
  var uniquePrefix = Math.random().toFixed(5).toString().slice(2);
  var internalId = 0;
  function useUUID(id2) {
    var _useMergedState = useMergedState(id2, {
      value: id2
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), uuid7 = _useMergedState2[0], setUUID = _useMergedState2[1];
    React129.useEffect(function() {
      internalId += 1;
      var newId = false ? "test" : "".concat(uniquePrefix, "-").concat(internalId);
      setUUID("rc-menu-uuid-".concat(newId));
    }, []);
    return uuid7;
  }

  // node_modules/rc-menu/es/hooks/useKeyRecords.js
  var React130 = __toESM(require_react());
  var import_react32 = __toESM(require_react());

  // node_modules/rc-menu/es/utils/timeUtil.js
  function nextSlice(callback) {
    Promise.resolve().then(callback);
  }

  // node_modules/rc-menu/es/hooks/useKeyRecords.js
  var PATH_SPLIT = "__RC_UTIL_PATH_SPLIT__";
  var getPathStr = function getPathStr2(keyPath) {
    return keyPath.join(PATH_SPLIT);
  };
  var getPathKeys = function getPathKeys2(keyPathStr) {
    return keyPathStr.split(PATH_SPLIT);
  };
  var OVERFLOW_KEY = "rc-menu-more";
  function useKeyRecords() {
    var _React$useState = React130.useState({}), _React$useState2 = _slicedToArray(_React$useState, 2), internalForceUpdate = _React$useState2[1];
    var key2pathRef = (0, import_react32.useRef)(/* @__PURE__ */ new Map());
    var path2keyRef = (0, import_react32.useRef)(/* @__PURE__ */ new Map());
    var _React$useState3 = React130.useState([]), _React$useState4 = _slicedToArray(_React$useState3, 2), overflowKeys = _React$useState4[0], setOverflowKeys = _React$useState4[1];
    var updateRef = (0, import_react32.useRef)(0);
    var destroyRef = (0, import_react32.useRef)(false);
    var forceUpdate = function forceUpdate2() {
      if (!destroyRef.current) {
        internalForceUpdate({});
      }
    };
    var registerPath = (0, import_react32.useCallback)(function(key2, keyPath) {
      if (true) {
        warning_default(!key2pathRef.current.has(key2), "Duplicated key '".concat(key2, "' used in Menu by path [").concat(keyPath.join(" > "), "]"));
      }
      var connectedPath = getPathStr(keyPath);
      path2keyRef.current.set(connectedPath, key2);
      key2pathRef.current.set(key2, connectedPath);
      updateRef.current += 1;
      var id2 = updateRef.current;
      nextSlice(function() {
        if (id2 === updateRef.current) {
          forceUpdate();
        }
      });
    }, []);
    var unregisterPath = (0, import_react32.useCallback)(function(key2, keyPath) {
      var connectedPath = getPathStr(keyPath);
      path2keyRef.current.delete(connectedPath);
      key2pathRef.current.delete(key2);
    }, []);
    var refreshOverflowKeys = (0, import_react32.useCallback)(function(keys) {
      setOverflowKeys(keys);
    }, []);
    var getKeyPath = (0, import_react32.useCallback)(function(eventKey, includeOverflow) {
      var fullPath = key2pathRef.current.get(eventKey) || "";
      var keys = getPathKeys(fullPath);
      if (includeOverflow && overflowKeys.includes(keys[0])) {
        keys.unshift(OVERFLOW_KEY);
      }
      return keys;
    }, [overflowKeys]);
    var isSubPathKey = (0, import_react32.useCallback)(function(pathKeys, eventKey) {
      return pathKeys.some(function(pathKey) {
        var pathKeyList = getKeyPath(pathKey, true);
        return pathKeyList.includes(eventKey);
      });
    }, [getKeyPath]);
    var getKeys = function getKeys2() {
      var keys = _toConsumableArray(key2pathRef.current.keys());
      if (overflowKeys.length) {
        keys.push(OVERFLOW_KEY);
      }
      return keys;
    };
    var getSubPathKeys = (0, import_react32.useCallback)(function(key2) {
      var connectedPath = "".concat(key2pathRef.current.get(key2)).concat(PATH_SPLIT);
      var pathKeys = /* @__PURE__ */ new Set();
      _toConsumableArray(path2keyRef.current.keys()).forEach(function(pathKey) {
        if (pathKey.startsWith(connectedPath)) {
          pathKeys.add(path2keyRef.current.get(pathKey));
        }
      });
      return pathKeys;
    }, []);
    React130.useEffect(function() {
      return function() {
        destroyRef.current = true;
      };
    }, []);
    return {
      // Register
      registerPath,
      unregisterPath,
      refreshOverflowKeys,
      // Util
      isSubPathKey,
      getKeyPath,
      getKeys,
      getSubPathKeys
    };
  }

  // node_modules/rc-menu/es/Menu.js
  var import_react33 = __toESM(require_react());
  var _excluded29 = ["prefixCls", "rootClassName", "style", "className", "tabIndex", "items", "children", "direction", "id", "mode", "inlineCollapsed", "disabled", "disabledOverflow", "subMenuOpenDelay", "subMenuCloseDelay", "forceSubMenuRender", "defaultOpenKeys", "openKeys", "activeKey", "defaultActiveFirst", "selectable", "multiple", "defaultSelectedKeys", "selectedKeys", "onSelect", "onDeselect", "inlineIndent", "motion", "defaultMotions", "triggerSubMenuAction", "builtinPlacements", "itemIcon", "expandIcon", "overflowedIndicator", "overflowedIndicatorPopupClassName", "getPopupContainer", "onClick", "onOpenChange", "onKeyDown", "openAnimation", "openTransitionName", "_internalRenderMenuItem", "_internalRenderSubMenuItem"];
  var EMPTY_LIST = [];
  var Menu = /* @__PURE__ */ React131.forwardRef(function(props, ref) {
    var _childList$, _classNames;
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-menu" : _props$prefixCls, rootClassName = props.rootClassName, style2 = props.style, className = props.className, _props$tabIndex = props.tabIndex, tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex, items = props.items, children = props.children, direction = props.direction, id2 = props.id, _props$mode = props.mode, mode = _props$mode === void 0 ? "vertical" : _props$mode, inlineCollapsed = props.inlineCollapsed, disabled = props.disabled, disabledOverflow = props.disabledOverflow, _props$subMenuOpenDel = props.subMenuOpenDelay, subMenuOpenDelay = _props$subMenuOpenDel === void 0 ? 0.1 : _props$subMenuOpenDel, _props$subMenuCloseDe = props.subMenuCloseDelay, subMenuCloseDelay = _props$subMenuCloseDe === void 0 ? 0.1 : _props$subMenuCloseDe, forceSubMenuRender = props.forceSubMenuRender, defaultOpenKeys = props.defaultOpenKeys, openKeys = props.openKeys, activeKey = props.activeKey, defaultActiveFirst = props.defaultActiveFirst, _props$selectable = props.selectable, selectable = _props$selectable === void 0 ? true : _props$selectable, _props$multiple = props.multiple, multiple = _props$multiple === void 0 ? false : _props$multiple, defaultSelectedKeys = props.defaultSelectedKeys, selectedKeys = props.selectedKeys, onSelect = props.onSelect, onDeselect = props.onDeselect, _props$inlineIndent = props.inlineIndent, inlineIndent = _props$inlineIndent === void 0 ? 24 : _props$inlineIndent, motion2 = props.motion, defaultMotions = props.defaultMotions, _props$triggerSubMenu = props.triggerSubMenuAction, triggerSubMenuAction = _props$triggerSubMenu === void 0 ? "hover" : _props$triggerSubMenu, builtinPlacements = props.builtinPlacements, itemIcon = props.itemIcon, expandIcon = props.expandIcon, _props$overflowedIndi = props.overflowedIndicator, overflowedIndicator = _props$overflowedIndi === void 0 ? "..." : _props$overflowedIndi, overflowedIndicatorPopupClassName = props.overflowedIndicatorPopupClassName, getPopupContainer = props.getPopupContainer, onClick = props.onClick, onOpenChange = props.onOpenChange, onKeyDown2 = props.onKeyDown, openAnimation = props.openAnimation, openTransitionName = props.openTransitionName, _internalRenderMenuItem = props._internalRenderMenuItem, _internalRenderSubMenuItem = props._internalRenderSubMenuItem, restProps = _objectWithoutProperties(props, _excluded29);
    var childList = React131.useMemo(function() {
      return parseItems(children, items, EMPTY_LIST);
    }, [children, items]);
    var _React$useState = React131.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), mounted = _React$useState2[0], setMounted = _React$useState2[1];
    var containerRef = React131.useRef();
    var uuid7 = useUUID(id2);
    var isRtl = direction === "rtl";
    if (true) {
      warning_default(!openAnimation && !openTransitionName, "`openAnimation` and `openTransitionName` is removed. Please use `motion` or `defaultMotion` instead.");
    }
    var _React$useMemo = React131.useMemo(function() {
      if ((mode === "inline" || mode === "vertical") && inlineCollapsed) {
        return ["vertical", inlineCollapsed];
      }
      return [mode, false];
    }, [mode, inlineCollapsed]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), mergedMode = _React$useMemo2[0], mergedInlineCollapsed = _React$useMemo2[1];
    var _React$useState3 = React131.useState(0), _React$useState4 = _slicedToArray(_React$useState3, 2), lastVisibleIndex = _React$useState4[0], setLastVisibleIndex = _React$useState4[1];
    var allVisible = lastVisibleIndex >= childList.length - 1 || mergedMode !== "horizontal" || disabledOverflow;
    var _useMergedState = useMergedState(defaultOpenKeys, {
      value: openKeys,
      postState: function postState(keys) {
        return keys || EMPTY_LIST;
      }
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedOpenKeys = _useMergedState2[0], setMergedOpenKeys = _useMergedState2[1];
    var triggerOpenKeys = function triggerOpenKeys2(keys) {
      setMergedOpenKeys(keys);
      onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(keys);
    };
    var _React$useState5 = React131.useState(mergedOpenKeys), _React$useState6 = _slicedToArray(_React$useState5, 2), inlineCacheOpenKeys = _React$useState6[0], setInlineCacheOpenKeys = _React$useState6[1];
    var isInlineMode = mergedMode === "inline";
    var mountRef = React131.useRef(false);
    React131.useEffect(function() {
      if (isInlineMode) {
        setInlineCacheOpenKeys(mergedOpenKeys);
      }
    }, [mergedOpenKeys]);
    React131.useEffect(function() {
      if (!mountRef.current) {
        return;
      }
      if (isInlineMode) {
        setMergedOpenKeys(inlineCacheOpenKeys);
      } else {
        triggerOpenKeys(EMPTY_LIST);
      }
    }, [isInlineMode]);
    React131.useEffect(function() {
      mountRef.current = true;
      return function() {
        mountRef.current = false;
      };
    }, []);
    var _useKeyRecords = useKeyRecords(), registerPath = _useKeyRecords.registerPath, unregisterPath = _useKeyRecords.unregisterPath, refreshOverflowKeys = _useKeyRecords.refreshOverflowKeys, isSubPathKey = _useKeyRecords.isSubPathKey, getKeyPath = _useKeyRecords.getKeyPath, getKeys = _useKeyRecords.getKeys, getSubPathKeys = _useKeyRecords.getSubPathKeys;
    var registerPathContext = React131.useMemo(function() {
      return {
        registerPath,
        unregisterPath
      };
    }, [registerPath, unregisterPath]);
    var pathUserContext = React131.useMemo(function() {
      return {
        isSubPathKey
      };
    }, [isSubPathKey]);
    React131.useEffect(function() {
      refreshOverflowKeys(allVisible ? EMPTY_LIST : childList.slice(lastVisibleIndex + 1).map(function(child) {
        return child.key;
      }));
    }, [lastVisibleIndex, allVisible]);
    var _useMergedState3 = useMergedState(activeKey || defaultActiveFirst && ((_childList$ = childList[0]) === null || _childList$ === void 0 ? void 0 : _childList$.key), {
      value: activeKey
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), mergedActiveKey = _useMergedState4[0], setMergedActiveKey = _useMergedState4[1];
    var onActive = useMemoCallback(function(key2) {
      setMergedActiveKey(key2);
    });
    var onInactive = useMemoCallback(function() {
      setMergedActiveKey(void 0);
    });
    (0, import_react33.useImperativeHandle)(ref, function() {
      return {
        list: containerRef.current,
        focus: function focus(options) {
          var _childList$find;
          var shouldFocusKey = mergedActiveKey !== null && mergedActiveKey !== void 0 ? mergedActiveKey : (_childList$find = childList.find(function(node) {
            return !node.props.disabled;
          })) === null || _childList$find === void 0 ? void 0 : _childList$find.key;
          if (shouldFocusKey) {
            var _containerRef$current, _containerRef$current2, _containerRef$current3;
            (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : (_containerRef$current2 = _containerRef$current.querySelector("li[data-menu-id='".concat(getMenuId(uuid7, shouldFocusKey), "']"))) === null || _containerRef$current2 === void 0 ? void 0 : (_containerRef$current3 = _containerRef$current2.focus) === null || _containerRef$current3 === void 0 ? void 0 : _containerRef$current3.call(_containerRef$current2, options);
          }
        }
      };
    });
    var _useMergedState5 = useMergedState(defaultSelectedKeys || [], {
      value: selectedKeys,
      // Legacy convert key to array
      postState: function postState(keys) {
        if (Array.isArray(keys)) {
          return keys;
        }
        if (keys === null || keys === void 0) {
          return EMPTY_LIST;
        }
        return [keys];
      }
    }), _useMergedState6 = _slicedToArray(_useMergedState5, 2), mergedSelectKeys = _useMergedState6[0], setMergedSelectKeys = _useMergedState6[1];
    var triggerSelection = function triggerSelection2(info) {
      if (selectable) {
        var targetKey = info.key;
        var exist = mergedSelectKeys.includes(targetKey);
        var newSelectKeys;
        if (multiple) {
          if (exist) {
            newSelectKeys = mergedSelectKeys.filter(function(key2) {
              return key2 !== targetKey;
            });
          } else {
            newSelectKeys = [].concat(_toConsumableArray(mergedSelectKeys), [targetKey]);
          }
        } else {
          newSelectKeys = [targetKey];
        }
        setMergedSelectKeys(newSelectKeys);
        var selectInfo = _objectSpread2(_objectSpread2({}, info), {}, {
          selectedKeys: newSelectKeys
        });
        if (exist) {
          onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect(selectInfo);
        } else {
          onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectInfo);
        }
      }
      if (!multiple && mergedOpenKeys.length && mergedMode !== "inline") {
        triggerOpenKeys(EMPTY_LIST);
      }
    };
    var onInternalClick = useMemoCallback(function(info) {
      onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));
      triggerSelection(info);
    });
    var onInternalOpenChange = useMemoCallback(function(key2, open) {
      var newOpenKeys = mergedOpenKeys.filter(function(k) {
        return k !== key2;
      });
      if (open) {
        newOpenKeys.push(key2);
      } else if (mergedMode !== "inline") {
        var subPathKeys = getSubPathKeys(key2);
        newOpenKeys = newOpenKeys.filter(function(k) {
          return !subPathKeys.has(k);
        });
      }
      if (!(0, import_shallowequal2.default)(mergedOpenKeys, newOpenKeys)) {
        triggerOpenKeys(newOpenKeys);
      }
    });
    var getInternalPopupContainer = useMemoCallback(getPopupContainer);
    var triggerAccessibilityOpen = function triggerAccessibilityOpen2(key2, open) {
      var nextOpen = open !== null && open !== void 0 ? open : !mergedOpenKeys.includes(key2);
      onInternalOpenChange(key2, nextOpen);
    };
    var onInternalKeyDown = useAccessibility(mergedMode, mergedActiveKey, isRtl, uuid7, containerRef, getKeys, getKeyPath, setMergedActiveKey, triggerAccessibilityOpen, onKeyDown2);
    React131.useEffect(function() {
      setMounted(true);
    }, []);
    var privateContext = React131.useMemo(function() {
      return {
        _internalRenderMenuItem,
        _internalRenderSubMenuItem
      };
    }, [_internalRenderMenuItem, _internalRenderSubMenuItem]);
    var wrappedChildList = mergedMode !== "horizontal" || disabledOverflow ? childList : (
      // Need wrap for overflow dropdown that do not response for open
      childList.map(function(child, index3) {
        return (
          // Always wrap provider to avoid sub node re-mount
          /* @__PURE__ */ React131.createElement(InheritableContextProvider, {
            key: child.key,
            overflowDisabled: index3 > lastVisibleIndex
          }, child)
        );
      })
    );
    var container = /* @__PURE__ */ React131.createElement(es_default5, _extends({
      id: id2,
      ref: containerRef,
      prefixCls: "".concat(prefixCls, "-overflow"),
      component: "ul",
      itemComponent: MenuItem_default,
      className: (0, import_classnames33.default)(prefixCls, "".concat(prefixCls, "-root"), "".concat(prefixCls, "-").concat(mergedMode), className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-inline-collapsed"), mergedInlineCollapsed), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), isRtl), _classNames), rootClassName),
      dir: direction,
      style: style2,
      role: "menu",
      tabIndex,
      data: wrappedChildList,
      renderRawItem: function renderRawItem(node) {
        return node;
      },
      renderRawRest: function renderRawRest(omitItems) {
        var len = omitItems.length;
        var originOmitItems = len ? childList.slice(-len) : null;
        return /* @__PURE__ */ React131.createElement(SubMenu, {
          eventKey: OVERFLOW_KEY,
          title: overflowedIndicator,
          disabled: allVisible,
          internalPopupClose: len === 0,
          popupClassName: overflowedIndicatorPopupClassName
        }, originOmitItems);
      },
      maxCount: mergedMode !== "horizontal" || disabledOverflow ? es_default5.INVALIDATE : es_default5.RESPONSIVE,
      ssr: "full",
      "data-menu-list": true,
      onVisibleChange: function onVisibleChange(newLastIndex) {
        setLastVisibleIndex(newLastIndex);
      },
      onKeyDown: onInternalKeyDown
    }, restProps));
    return /* @__PURE__ */ React131.createElement(PrivateContext_default.Provider, {
      value: privateContext
    }, /* @__PURE__ */ React131.createElement(IdContext.Provider, {
      value: uuid7
    }, /* @__PURE__ */ React131.createElement(InheritableContextProvider, {
      prefixCls,
      rootClassName,
      mode: mergedMode,
      openKeys: mergedOpenKeys,
      rtl: isRtl,
      disabled,
      motion: mounted ? motion2 : null,
      defaultMotions: mounted ? defaultMotions : null,
      activeKey: mergedActiveKey,
      onActive,
      onInactive,
      selectedKeys: mergedSelectKeys,
      inlineIndent,
      subMenuOpenDelay,
      subMenuCloseDelay,
      forceSubMenuRender,
      builtinPlacements,
      triggerSubMenuAction,
      getPopupContainer: getInternalPopupContainer,
      itemIcon,
      expandIcon,
      onItemClick: onInternalClick,
      onOpenChange: onInternalOpenChange
    }, /* @__PURE__ */ React131.createElement(PathUserContext.Provider, {
      value: pathUserContext
    }, container), /* @__PURE__ */ React131.createElement("div", {
      style: {
        display: "none"
      },
      "aria-hidden": true
    }, /* @__PURE__ */ React131.createElement(PathRegisterContext.Provider, {
      value: registerPathContext
    }, childList)))));
  });
  var Menu_default = Menu;

  // node_modules/rc-menu/es/MenuItemGroup.js
  var React132 = __toESM(require_react());
  var import_classnames34 = __toESM(require_classnames());
  var _excluded30 = ["className", "title", "eventKey", "children"];
  var _excluded210 = ["children"];
  var InternalMenuItemGroup = function InternalMenuItemGroup2(_ref) {
    var className = _ref.className, title = _ref.title, eventKey = _ref.eventKey, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded30);
    var _React$useContext = React132.useContext(MenuContext), prefixCls = _React$useContext.prefixCls;
    var groupPrefixCls = "".concat(prefixCls, "-item-group");
    return /* @__PURE__ */ React132.createElement("li", _extends({}, restProps, {
      onClick: function onClick(e3) {
        return e3.stopPropagation();
      },
      className: (0, import_classnames34.default)(groupPrefixCls, className)
    }), /* @__PURE__ */ React132.createElement("div", {
      className: "".concat(groupPrefixCls, "-title"),
      title: typeof title === "string" ? title : void 0
    }, title), /* @__PURE__ */ React132.createElement("ul", {
      className: "".concat(groupPrefixCls, "-list")
    }, children));
  };
  function MenuItemGroup(_ref2) {
    var children = _ref2.children, props = _objectWithoutProperties(_ref2, _excluded210);
    var connectedKeyPath = useFullPath(props.eventKey);
    var childList = parseChildren(children, connectedKeyPath);
    var measure = useMeasure();
    if (measure) {
      return childList;
    }
    return /* @__PURE__ */ React132.createElement(InternalMenuItemGroup, omit(props, ["warnKey"]), childList);
  }

  // node_modules/rc-menu/es/Divider.js
  var React133 = __toESM(require_react());
  var import_classnames35 = __toESM(require_classnames());
  function Divider(_ref) {
    var className = _ref.className, style2 = _ref.style;
    var _React$useContext = React133.useContext(MenuContext), prefixCls = _React$useContext.prefixCls;
    var measure = useMeasure();
    if (measure) {
      return null;
    }
    return /* @__PURE__ */ React133.createElement("li", {
      className: (0, import_classnames35.default)("".concat(prefixCls, "-item-divider"), className),
      style: style2
    });
  }

  // node_modules/rc-menu/es/index.js
  var ExportMenu = Menu_default;
  ExportMenu.Item = MenuItem_default;
  ExportMenu.SubMenu = SubMenu;
  ExportMenu.ItemGroup = MenuItemGroup;
  ExportMenu.Divider = Divider;
  var es_default11 = ExportMenu;

  // node_modules/antd/es/menu/index.js
  var React144 = __toESM(require_react());
  var import_react36 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/BarsOutlined.js
  var React134 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/BarsOutlined.js
  var BarsOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM104 228a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0z" } }] }, "name": "bars", "theme": "outlined" };
  var BarsOutlined_default = BarsOutlined;

  // node_modules/@ant-design/icons/es/icons/BarsOutlined.js
  var BarsOutlined2 = function BarsOutlined3(props, ref) {
    return /* @__PURE__ */ React134.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: BarsOutlined_default
    }));
  };
  BarsOutlined2.displayName = "BarsOutlined";
  var BarsOutlined_default2 = /* @__PURE__ */ React134.forwardRef(BarsOutlined2);

  // node_modules/@ant-design/icons/es/icons/LeftOutlined.js
  var React135 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/LeftOutlined.js
  var LeftOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z" } }] }, "name": "left", "theme": "outlined" };
  var LeftOutlined_default = LeftOutlined;

  // node_modules/@ant-design/icons/es/icons/LeftOutlined.js
  var LeftOutlined2 = function LeftOutlined3(props, ref) {
    return /* @__PURE__ */ React135.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: LeftOutlined_default
    }));
  };
  LeftOutlined2.displayName = "LeftOutlined";
  var LeftOutlined_default2 = /* @__PURE__ */ React135.forwardRef(LeftOutlined2);

  // node_modules/@ant-design/icons/es/icons/RightOutlined.js
  var React136 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/RightOutlined.js
  var RightOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z" } }] }, "name": "right", "theme": "outlined" };
  var RightOutlined_default = RightOutlined;

  // node_modules/@ant-design/icons/es/icons/RightOutlined.js
  var RightOutlined2 = function RightOutlined3(props, ref) {
    return /* @__PURE__ */ React136.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: RightOutlined_default
    }));
  };
  RightOutlined2.displayName = "RightOutlined";
  var RightOutlined_default2 = /* @__PURE__ */ React136.forwardRef(RightOutlined2);

  // node_modules/antd/es/layout/Sider.js
  var import_classnames37 = __toESM(require_classnames());
  var React138 = __toESM(require_react());
  var import_react34 = __toESM(require_react());

  // node_modules/antd/es/_util/isNumeric.js
  var isNumeric = function isNumeric2(value) {
    return !isNaN(parseFloat(value)) && isFinite(value);
  };
  var isNumeric_default = isNumeric;

  // node_modules/antd/es/layout/layout.js
  var import_classnames36 = __toESM(require_classnames());
  var React137 = __toESM(require_react());
  var __rest5 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var LayoutContext = /* @__PURE__ */ React137.createContext({
    siderHook: {
      addSider: function addSider() {
        return null;
      },
      removeSider: function removeSider() {
        return null;
      }
    }
  });
  function generator(_ref) {
    var suffixCls = _ref.suffixCls, tagName = _ref.tagName, displayName = _ref.displayName;
    return function(BasicComponent) {
      var Adapter = /* @__PURE__ */ React137.forwardRef(function(props, ref) {
        var _React$useContext = React137.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
        var customizePrefixCls = props.prefixCls;
        var prefixCls = getPrefixCls(suffixCls, customizePrefixCls);
        return /* @__PURE__ */ React137.createElement(BasicComponent, _extends({
          ref,
          prefixCls,
          tagName
        }, props));
      });
      if (true) {
        Adapter.displayName = displayName;
      }
      return Adapter;
    };
  }
  var Basic = /* @__PURE__ */ React137.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, className = props.className, children = props.children, tagName = props.tagName, others = __rest5(props, ["prefixCls", "className", "children", "tagName"]);
    var classString = (0, import_classnames36.default)(prefixCls, className);
    return /* @__PURE__ */ React137.createElement(tagName, _extends(_extends({
      className: classString
    }, others), {
      ref
    }), children);
  });
  var BasicLayout = /* @__PURE__ */ React137.forwardRef(function(props, ref) {
    var _classNames;
    var _React$useContext2 = React137.useContext(ConfigContext), direction = _React$useContext2.direction;
    var _React$useState = React137.useState([]), _React$useState2 = _slicedToArray(_React$useState, 2), siders = _React$useState2[0], setSiders = _React$useState2[1];
    var prefixCls = props.prefixCls, className = props.className, children = props.children, hasSider = props.hasSider, Tag = props.tagName, others = __rest5(props, ["prefixCls", "className", "children", "hasSider", "tagName"]);
    var classString = (0, import_classnames36.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-has-sider"), typeof hasSider === "boolean" ? hasSider : siders.length > 0), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    var contextValue = React137.useMemo(function() {
      return {
        siderHook: {
          addSider: function addSider2(id2) {
            setSiders(function(prev) {
              return [].concat(_toConsumableArray(prev), [id2]);
            });
          },
          removeSider: function removeSider2(id2) {
            setSiders(function(prev) {
              return prev.filter(function(currentId) {
                return currentId !== id2;
              });
            });
          }
        }
      };
    }, []);
    return /* @__PURE__ */ React137.createElement(LayoutContext.Provider, {
      value: contextValue
    }, /* @__PURE__ */ React137.createElement(Tag, _extends({
      ref,
      className: classString
    }, others), children));
  });
  var Layout = generator({
    suffixCls: "layout",
    tagName: "section",
    displayName: "Layout"
  })(BasicLayout);
  var Header = generator({
    suffixCls: "layout-header",
    tagName: "header",
    displayName: "Header"
  })(Basic);
  var Footer = generator({
    suffixCls: "layout-footer",
    tagName: "footer",
    displayName: "Footer"
  })(Basic);
  var Content = generator({
    suffixCls: "layout-content",
    tagName: "main",
    displayName: "Content"
  })(Basic);

  // node_modules/antd/es/layout/Sider.js
  var __rest6 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var dimensionMaxMap = {
    xs: "479.98px",
    sm: "575.98px",
    md: "767.98px",
    lg: "991.98px",
    xl: "1199.98px",
    xxl: "1599.98px"
  };
  var SiderContext = /* @__PURE__ */ React138.createContext({});
  var generateId = function() {
    var i3 = 0;
    return function() {
      var prefix = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      i3 += 1;
      return "".concat(prefix).concat(i3);
    };
  }();
  var Sider = /* @__PURE__ */ React138.forwardRef(function(_a, ref) {
    var customizePrefixCls = _a.prefixCls, className = _a.className, trigger = _a.trigger, children = _a.children, _a$defaultCollapsed = _a.defaultCollapsed, defaultCollapsed = _a$defaultCollapsed === void 0 ? false : _a$defaultCollapsed, _a$theme = _a.theme, theme = _a$theme === void 0 ? "dark" : _a$theme, _a$style = _a.style, style2 = _a$style === void 0 ? {} : _a$style, _a$collapsible = _a.collapsible, collapsible = _a$collapsible === void 0 ? false : _a$collapsible, _a$reverseArrow = _a.reverseArrow, reverseArrow = _a$reverseArrow === void 0 ? false : _a$reverseArrow, _a$width = _a.width, width = _a$width === void 0 ? 200 : _a$width, _a$collapsedWidth = _a.collapsedWidth, collapsedWidth = _a$collapsedWidth === void 0 ? 80 : _a$collapsedWidth, zeroWidthTriggerStyle = _a.zeroWidthTriggerStyle, breakpoint = _a.breakpoint, onCollapse = _a.onCollapse, onBreakpoint = _a.onBreakpoint, props = __rest6(_a, ["prefixCls", "className", "trigger", "children", "defaultCollapsed", "theme", "style", "collapsible", "reverseArrow", "width", "collapsedWidth", "zeroWidthTriggerStyle", "breakpoint", "onCollapse", "onBreakpoint"]);
    var _useContext = (0, import_react34.useContext)(LayoutContext), siderHook = _useContext.siderHook;
    var _useState = (0, import_react34.useState)("collapsed" in props ? props.collapsed : defaultCollapsed), _useState2 = _slicedToArray(_useState, 2), collapsed = _useState2[0], setCollapsed = _useState2[1];
    var _useState3 = (0, import_react34.useState)(false), _useState4 = _slicedToArray(_useState3, 2), below = _useState4[0], setBelow = _useState4[1];
    (0, import_react34.useEffect)(function() {
      if ("collapsed" in props) {
        setCollapsed(props.collapsed);
      }
    }, [props.collapsed]);
    var handleSetCollapsed = function handleSetCollapsed2(value, type4) {
      if (!("collapsed" in props)) {
        setCollapsed(value);
      }
      onCollapse === null || onCollapse === void 0 ? void 0 : onCollapse(value, type4);
    };
    var responsiveHandlerRef = (0, import_react34.useRef)();
    responsiveHandlerRef.current = function(mql) {
      setBelow(mql.matches);
      onBreakpoint === null || onBreakpoint === void 0 ? void 0 : onBreakpoint(mql.matches);
      if (collapsed !== mql.matches) {
        handleSetCollapsed(mql.matches, "responsive");
      }
    };
    (0, import_react34.useEffect)(function() {
      function responsiveHandler(mql2) {
        return responsiveHandlerRef.current(mql2);
      }
      var mql;
      if (typeof window !== "undefined") {
        var _window = window, matchMedia = _window.matchMedia;
        if (matchMedia && breakpoint && breakpoint in dimensionMaxMap) {
          mql = matchMedia("(max-width: ".concat(dimensionMaxMap[breakpoint], ")"));
          try {
            mql.addEventListener("change", responsiveHandler);
          } catch (error) {
            mql.addListener(responsiveHandler);
          }
          responsiveHandler(mql);
        }
      }
      return function() {
        try {
          mql === null || mql === void 0 ? void 0 : mql.removeEventListener("change", responsiveHandler);
        } catch (error) {
          mql === null || mql === void 0 ? void 0 : mql.removeListener(responsiveHandler);
        }
      };
    }, [breakpoint]);
    (0, import_react34.useEffect)(function() {
      var uniqueId = generateId("ant-sider-");
      siderHook.addSider(uniqueId);
      return function() {
        return siderHook.removeSider(uniqueId);
      };
    }, []);
    var toggle = function toggle2() {
      handleSetCollapsed(!collapsed, "clickTrigger");
    };
    var _useContext2 = (0, import_react34.useContext)(ConfigContext), getPrefixCls = _useContext2.getPrefixCls;
    var renderSider = function renderSider2() {
      var _classNames;
      var prefixCls = getPrefixCls("layout-sider", customizePrefixCls);
      var divProps = omit(props, ["collapsed"]);
      var rawWidth = collapsed ? collapsedWidth : width;
      var siderWidth = isNumeric_default(rawWidth) ? "".concat(rawWidth, "px") : String(rawWidth);
      var zeroWidthTrigger = parseFloat(String(collapsedWidth || 0)) === 0 ? /* @__PURE__ */ React138.createElement("span", {
        onClick: toggle,
        className: (0, import_classnames37.default)("".concat(prefixCls, "-zero-width-trigger"), "".concat(prefixCls, "-zero-width-trigger-").concat(reverseArrow ? "right" : "left")),
        style: zeroWidthTriggerStyle
      }, trigger || /* @__PURE__ */ React138.createElement(BarsOutlined_default2, null)) : null;
      var iconObj = {
        expanded: reverseArrow ? /* @__PURE__ */ React138.createElement(RightOutlined_default2, null) : /* @__PURE__ */ React138.createElement(LeftOutlined_default2, null),
        collapsed: reverseArrow ? /* @__PURE__ */ React138.createElement(LeftOutlined_default2, null) : /* @__PURE__ */ React138.createElement(RightOutlined_default2, null)
      };
      var status = collapsed ? "collapsed" : "expanded";
      var defaultTrigger = iconObj[status];
      var triggerDom = trigger !== null ? zeroWidthTrigger || /* @__PURE__ */ React138.createElement("div", {
        className: "".concat(prefixCls, "-trigger"),
        onClick: toggle,
        style: {
          width: siderWidth
        }
      }, trigger || defaultTrigger) : null;
      var divStyle = _extends(_extends({}, style2), {
        flex: "0 0 ".concat(siderWidth),
        maxWidth: siderWidth,
        minWidth: siderWidth,
        width: siderWidth
      });
      var siderCls = (0, import_classnames37.default)(prefixCls, "".concat(prefixCls, "-").concat(theme), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-collapsed"), !!collapsed), _defineProperty(_classNames, "".concat(prefixCls, "-has-trigger"), collapsible && trigger !== null && !zeroWidthTrigger), _defineProperty(_classNames, "".concat(prefixCls, "-below"), !!below), _defineProperty(_classNames, "".concat(prefixCls, "-zero-width"), parseFloat(siderWidth) === 0), _classNames), className);
      return /* @__PURE__ */ React138.createElement("aside", _extends({
        className: siderCls
      }, divProps, {
        style: divStyle,
        ref
      }), /* @__PURE__ */ React138.createElement("div", {
        className: "".concat(prefixCls, "-children")
      }, children), collapsible || below && zeroWidthTrigger ? triggerDom : null);
    };
    var contextValue = React138.useMemo(function() {
      return {
        siderCollapsed: collapsed
      };
    }, [collapsed]);
    return /* @__PURE__ */ React138.createElement(SiderContext.Provider, {
      value: contextValue
    }, renderSider());
  });
  if (true) {
    Sider.displayName = "Sider";
  }

  // node_modules/antd/es/menu/hooks/useItems.js
  var React142 = __toESM(require_react());

  // node_modules/antd/es/menu/MenuDivider.js
  var import_classnames38 = __toESM(require_classnames());
  var React139 = __toESM(require_react());
  var __rest7 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var MenuDivider = function MenuDivider2(_a) {
    var customizePrefixCls = _a.prefixCls, className = _a.className, dashed = _a.dashed, restProps = __rest7(_a, ["prefixCls", "className", "dashed"]);
    var _React$useContext = React139.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("menu", customizePrefixCls);
    var classString = (0, import_classnames38.default)(_defineProperty({}, "".concat(prefixCls, "-item-divider-dashed"), !!dashed), className);
    return /* @__PURE__ */ React139.createElement(Divider, _extends({
      className: classString
    }, restProps));
  };
  var MenuDivider_default = MenuDivider;

  // node_modules/antd/es/menu/MenuItem.js
  var import_classnames39 = __toESM(require_classnames());
  var React140 = __toESM(require_react());

  // node_modules/antd/es/menu/MenuContext.js
  var import_react35 = __toESM(require_react());
  var MenuContext2 = /* @__PURE__ */ (0, import_react35.createContext)({
    prefixCls: "",
    firstLevel: true,
    inlineCollapsed: false
  });
  var MenuContext_default = MenuContext2;

  // node_modules/antd/es/menu/MenuItem.js
  var __rest8 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var MenuItem2 = /* @__PURE__ */ function(_React$Component) {
    _inherits(MenuItem3, _React$Component);
    var _super = _createSuper(MenuItem3);
    function MenuItem3() {
      var _this;
      _classCallCheck(this, MenuItem3);
      _this = _super.apply(this, arguments);
      _this.renderItem = function(_ref) {
        var _classNames;
        var siderCollapsed = _ref.siderCollapsed;
        var _a;
        var _this$context = _this.context, prefixCls = _this$context.prefixCls, firstLevel = _this$context.firstLevel, inlineCollapsed = _this$context.inlineCollapsed, direction = _this$context.direction, disableMenuItemTitleTooltip = _this$context.disableMenuItemTitleTooltip;
        var _this$props = _this.props, className = _this$props.className, children = _this$props.children;
        var _b = _this.props, title = _b.title, icon = _b.icon, danger = _b.danger, rest = __rest8(_b, ["title", "icon", "danger"]);
        var tooltipTitle = title;
        if (typeof title === "undefined") {
          tooltipTitle = firstLevel ? children : "";
        } else if (title === false) {
          tooltipTitle = "";
        }
        var tooltipProps = {
          title: tooltipTitle
        };
        if (!siderCollapsed && !inlineCollapsed) {
          tooltipProps.title = null;
          tooltipProps.open = false;
        }
        var childrenLength = toArray(children).length;
        var returnNode = /* @__PURE__ */ React140.createElement(MenuItem_default, _extends({}, rest, {
          className: (0, import_classnames39.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-item-danger"), danger), _defineProperty(_classNames, "".concat(prefixCls, "-item-only-child"), (icon ? childrenLength + 1 : childrenLength) === 1), _classNames), className),
          title: typeof title === "string" ? title : void 0
        }), cloneElement6(icon, {
          className: (0, import_classnames39.default)(isValidElement6(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : "", "".concat(prefixCls, "-item-icon"))
        }), _this.renderItemChildren(inlineCollapsed));
        if (!disableMenuItemTitleTooltip) {
          returnNode = /* @__PURE__ */ React140.createElement(tooltip_default, _extends({}, tooltipProps, {
            placement: direction === "rtl" ? "left" : "right",
            overlayClassName: "".concat(prefixCls, "-inline-collapsed-tooltip")
          }), returnNode);
        }
        return returnNode;
      };
      return _this;
    }
    _createClass(MenuItem3, [{
      key: "renderItemChildren",
      value: function renderItemChildren(inlineCollapsed) {
        var _this$context2 = this.context, prefixCls = _this$context2.prefixCls, firstLevel = _this$context2.firstLevel;
        var _this$props2 = this.props, icon = _this$props2.icon, children = _this$props2.children;
        var wrapNode = /* @__PURE__ */ React140.createElement("span", {
          className: "".concat(prefixCls, "-title-content")
        }, children);
        if (!icon || isValidElement6(children) && children.type === "span") {
          if (children && inlineCollapsed && firstLevel && typeof children === "string") {
            return /* @__PURE__ */ React140.createElement("div", {
              className: "".concat(prefixCls, "-inline-collapsed-noicon")
            }, children.charAt(0));
          }
        }
        return wrapNode;
      }
    }, {
      key: "render",
      value: function render4() {
        return /* @__PURE__ */ React140.createElement(SiderContext.Consumer, null, this.renderItem);
      }
    }]);
    return MenuItem3;
  }(React140.Component);
  MenuItem2.contextType = MenuContext_default;

  // node_modules/antd/es/menu/SubMenu.js
  var import_classnames40 = __toESM(require_classnames());
  var React141 = __toESM(require_react());
  function SubMenu2(props) {
    var _a;
    var popupClassName = props.popupClassName, icon = props.icon, title = props.title, theme = props.theme;
    var context = React141.useContext(MenuContext_default);
    var prefixCls = context.prefixCls, inlineCollapsed = context.inlineCollapsed, antdMenuTheme = context.antdMenuTheme;
    var parentPath = useFullPath();
    var titleNode;
    if (!icon) {
      titleNode = inlineCollapsed && !parentPath.length && title && typeof title === "string" ? /* @__PURE__ */ React141.createElement("div", {
        className: "".concat(prefixCls, "-inline-collapsed-noicon")
      }, title.charAt(0)) : /* @__PURE__ */ React141.createElement("span", {
        className: "".concat(prefixCls, "-title-content")
      }, title);
    } else {
      var titleIsSpan = isValidElement6(title) && title.type === "span";
      titleNode = /* @__PURE__ */ React141.createElement(React141.Fragment, null, cloneElement6(icon, {
        className: (0, import_classnames40.default)(isValidElement6(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : "", "".concat(prefixCls, "-item-icon"))
      }), titleIsSpan ? title : /* @__PURE__ */ React141.createElement("span", {
        className: "".concat(prefixCls, "-title-content")
      }, title));
    }
    var contextValue = React141.useMemo(function() {
      return _extends(_extends({}, context), {
        firstLevel: false
      });
    }, [context]);
    return /* @__PURE__ */ React141.createElement(MenuContext_default.Provider, {
      value: contextValue
    }, /* @__PURE__ */ React141.createElement(SubMenu, _extends({}, omit(props, ["icon"]), {
      title: titleNode,
      popupClassName: (0, import_classnames40.default)(prefixCls, "".concat(prefixCls, "-").concat(theme || antdMenuTheme), popupClassName)
    })));
  }
  var SubMenu_default = SubMenu2;

  // node_modules/antd/es/menu/hooks/useItems.js
  var __rest9 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  function convertItemsToNodes2(list) {
    return (list || []).map(function(opt, index3) {
      if (opt && _typeof(opt) === "object") {
        var _a = opt, label = _a.label, children = _a.children, key2 = _a.key, type4 = _a.type, restProps = __rest9(_a, ["label", "children", "key", "type"]);
        var mergedKey = key2 !== null && key2 !== void 0 ? key2 : "tmp-".concat(index3);
        if (children || type4 === "group") {
          if (type4 === "group") {
            return /* @__PURE__ */ React142.createElement(MenuItemGroup, _extends({
              key: mergedKey
            }, restProps, {
              title: label
            }), convertItemsToNodes2(children));
          }
          return /* @__PURE__ */ React142.createElement(SubMenu_default, _extends({
            key: mergedKey
          }, restProps, {
            title: label
          }), convertItemsToNodes2(children));
        }
        if (type4 === "divider") {
          return /* @__PURE__ */ React142.createElement(MenuDivider_default, _extends({
            key: mergedKey
          }, restProps));
        }
        return /* @__PURE__ */ React142.createElement(MenuItem2, _extends({
          key: mergedKey
        }, restProps), label);
      }
      return null;
    }).filter(function(opt) {
      return opt;
    });
  }
  function useItems(items) {
    return React142.useMemo(function() {
      if (!items) {
        return items;
      }
      return convertItemsToNodes2(items);
    }, [items]);
  }

  // node_modules/antd/es/menu/OverrideContext.js
  var React143 = __toESM(require_react());
  var __rest10 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var OverrideContext = /* @__PURE__ */ React143.createContext(null);
  var OverrideProvider = function OverrideProvider2(_a) {
    var children = _a.children, restProps = __rest10(_a, ["children"]);
    var override = React143.useContext(OverrideContext);
    var context = React143.useMemo(function() {
      return _extends(_extends({}, override), restProps);
    }, [
      override,
      restProps.prefixCls,
      // restProps.expandIcon, Not mark as deps since this is a ReactNode
      restProps.mode,
      restProps.selectable
      // restProps.validator, Not mark as deps since this is a function
    ]);
    return /* @__PURE__ */ React143.createElement(OverrideContext.Provider, {
      value: context
    }, children);
  };
  var OverrideContext_default = OverrideContext;

  // node_modules/antd/es/menu/index.js
  var __rest11 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var InternalMenu = /* @__PURE__ */ (0, import_react36.forwardRef)(function(props, ref) {
    var _a;
    var override = React144.useContext(OverrideContext_default) || {};
    var _React$useContext = React144.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, getPopupContainer = _React$useContext.getPopupContainer, direction = _React$useContext.direction;
    var rootPrefixCls = getPrefixCls();
    var customizePrefixCls = props.prefixCls, className = props.className, _props$theme = props.theme, theme = _props$theme === void 0 ? "light" : _props$theme, expandIcon = props.expandIcon, _internalDisableMenuItemTitleTooltip = props._internalDisableMenuItemTitleTooltip, inlineCollapsed = props.inlineCollapsed, siderCollapsed = props.siderCollapsed, items = props.items, children = props.children, mode = props.mode, selectable = props.selectable, onClick = props.onClick, restProps = __rest11(props, ["prefixCls", "className", "theme", "expandIcon", "_internalDisableMenuItemTitleTooltip", "inlineCollapsed", "siderCollapsed", "items", "children", "mode", "selectable", "onClick"]);
    var passedProps = omit(restProps, ["collapsedWidth"]);
    var mergedChildren = useItems(items) || children;
    true ? warning_default2(!("inlineCollapsed" in props && mode !== "inline"), "Menu", "`inlineCollapsed` should only be used when `mode` is inline.") : void 0;
    true ? warning_default2(!(props.siderCollapsed !== void 0 && "inlineCollapsed" in props), "Menu", "`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.") : void 0;
    true ? warning_default2("items" in props && !children, "Menu", "`children` will be removed in next major version. Please use `items` instead.") : void 0;
    (_a = override.validator) === null || _a === void 0 ? void 0 : _a.call(override, {
      mode
    });
    var onItemClick2 = useEvent(function() {
      var _a2;
      onClick === null || onClick === void 0 ? void 0 : onClick.apply(void 0, arguments);
      (_a2 = override === null || override === void 0 ? void 0 : override.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(override);
    });
    var mergedMode = override.mode || mode;
    var mergedSelectable = selectable !== null && selectable !== void 0 ? selectable : override.selectable;
    var mergedInlineCollapsed = React144.useMemo(function() {
      if (siderCollapsed !== void 0) {
        return siderCollapsed;
      }
      return inlineCollapsed;
    }, [inlineCollapsed, siderCollapsed]);
    var defaultMotions = {
      horizontal: {
        motionName: "".concat(rootPrefixCls, "-slide-up")
      },
      inline: motion_default,
      other: {
        motionName: "".concat(rootPrefixCls, "-zoom-big")
      }
    };
    var prefixCls = getPrefixCls("menu", customizePrefixCls || override.prefixCls);
    var menuClassName = (0, import_classnames41.default)("".concat(prefixCls, "-").concat(theme), className);
    var mergedExpandIcon;
    if (typeof expandIcon === "function") {
      mergedExpandIcon = expandIcon;
    } else {
      mergedExpandIcon = cloneElement6(expandIcon || override.expandIcon, {
        className: "".concat(prefixCls, "-submenu-expand-icon")
      });
    }
    var contextValue = React144.useMemo(function() {
      return {
        prefixCls,
        inlineCollapsed: mergedInlineCollapsed || false,
        antdMenuTheme: theme,
        direction,
        firstLevel: true,
        disableMenuItemTitleTooltip: _internalDisableMenuItemTitleTooltip
      };
    }, [prefixCls, mergedInlineCollapsed, theme, direction, _internalDisableMenuItemTitleTooltip]);
    return /* @__PURE__ */ React144.createElement(OverrideContext_default.Provider, {
      value: null
    }, /* @__PURE__ */ React144.createElement(MenuContext_default.Provider, {
      value: contextValue
    }, /* @__PURE__ */ React144.createElement(es_default11, _extends({
      getPopupContainer,
      overflowedIndicator: /* @__PURE__ */ React144.createElement(EllipsisOutlined_default2, null),
      overflowedIndicatorPopupClassName: "".concat(prefixCls, "-").concat(theme),
      mode: mergedMode,
      selectable: mergedSelectable,
      onClick: onItemClick2
    }, passedProps, {
      inlineCollapsed: mergedInlineCollapsed,
      className: menuClassName,
      prefixCls,
      direction,
      defaultMotions,
      expandIcon: mergedExpandIcon,
      ref
    }), mergedChildren)));
  });
  var Menu2 = /* @__PURE__ */ function(_React$Component) {
    _inherits(Menu3, _React$Component);
    var _super = _createSuper(Menu3);
    function Menu3() {
      var _this;
      _classCallCheck(this, Menu3);
      _this = _super.apply(this, arguments);
      _this.focus = function(options) {
        var _a;
        (_a = _this.menu) === null || _a === void 0 ? void 0 : _a.focus(options);
      };
      return _this;
    }
    _createClass(Menu3, [{
      key: "render",
      value: function render4() {
        var _this2 = this;
        return /* @__PURE__ */ React144.createElement(SiderContext.Consumer, null, function(context) {
          return /* @__PURE__ */ React144.createElement(InternalMenu, _extends({
            ref: function ref(node) {
              _this2.menu = node;
            }
          }, _this2.props, context));
        });
      }
    }]);
    return Menu3;
  }(React144.Component);
  Menu2.Divider = MenuDivider_default;
  Menu2.Item = MenuItem2;
  Menu2.SubMenu = SubMenu_default;
  Menu2.ItemGroup = MenuItemGroup;
  var menu_default = Menu2;

  // node_modules/antd/es/dropdown/dropdown.js
  var import_classnames46 = __toESM(require_classnames());

  // node_modules/rc-dropdown/es/Dropdown.js
  var React146 = __toESM(require_react());
  var import_classnames42 = __toESM(require_classnames());

  // node_modules/rc-dropdown/es/placements.js
  var autoAdjustOverflow3 = {
    adjustX: 1,
    adjustY: 1
  };
  var targetOffset3 = [0, 0];
  var placements3 = {
    topLeft: {
      points: ["bl", "tl"],
      overflow: autoAdjustOverflow3,
      offset: [0, -4],
      targetOffset: targetOffset3
    },
    topCenter: {
      points: ["bc", "tc"],
      overflow: autoAdjustOverflow3,
      offset: [0, -4],
      targetOffset: targetOffset3
    },
    topRight: {
      points: ["br", "tr"],
      overflow: autoAdjustOverflow3,
      offset: [0, -4],
      targetOffset: targetOffset3
    },
    bottomLeft: {
      points: ["tl", "bl"],
      overflow: autoAdjustOverflow3,
      offset: [0, 4],
      targetOffset: targetOffset3
    },
    bottomCenter: {
      points: ["tc", "bc"],
      overflow: autoAdjustOverflow3,
      offset: [0, 4],
      targetOffset: targetOffset3
    },
    bottomRight: {
      points: ["tr", "br"],
      overflow: autoAdjustOverflow3,
      offset: [0, 4],
      targetOffset: targetOffset3
    }
  };
  var placements_default = placements3;

  // node_modules/rc-dropdown/es/hooks/useAccessibility.js
  var React145 = __toESM(require_react());
  var ESC2 = KeyCode_default.ESC;
  var TAB = KeyCode_default.TAB;
  function useAccessibility2(_ref) {
    var visible = _ref.visible, setTriggerVisible = _ref.setTriggerVisible, triggerRef = _ref.triggerRef, onVisibleChange = _ref.onVisibleChange, autoFocus = _ref.autoFocus;
    var focusMenuRef = React145.useRef(false);
    var handleCloseMenuAndReturnFocus = function handleCloseMenuAndReturnFocus2() {
      if (visible && triggerRef.current) {
        var _triggerRef$current, _triggerRef$current$t, _triggerRef$current$t2, _triggerRef$current$t3;
        (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : (_triggerRef$current$t = _triggerRef$current.triggerRef) === null || _triggerRef$current$t === void 0 ? void 0 : (_triggerRef$current$t2 = _triggerRef$current$t.current) === null || _triggerRef$current$t2 === void 0 ? void 0 : (_triggerRef$current$t3 = _triggerRef$current$t2.focus) === null || _triggerRef$current$t3 === void 0 ? void 0 : _triggerRef$current$t3.call(_triggerRef$current$t2);
        setTriggerVisible(false);
        if (typeof onVisibleChange === "function") {
          onVisibleChange(false);
        }
      }
    };
    var focusMenu = function focusMenu2() {
      var _triggerRef$current2, _triggerRef$current2$, _triggerRef$current2$2, _triggerRef$current2$3;
      var elements = getFocusNodeList((_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : (_triggerRef$current2$ = _triggerRef$current2.popupRef) === null || _triggerRef$current2$ === void 0 ? void 0 : (_triggerRef$current2$2 = _triggerRef$current2$.current) === null || _triggerRef$current2$2 === void 0 ? void 0 : (_triggerRef$current2$3 = _triggerRef$current2$2.getElement) === null || _triggerRef$current2$3 === void 0 ? void 0 : _triggerRef$current2$3.call(_triggerRef$current2$2));
      var firstElement = elements[0];
      if (firstElement === null || firstElement === void 0 ? void 0 : firstElement.focus) {
        firstElement.focus();
        focusMenuRef.current = true;
        return true;
      }
      return false;
    };
    var handleKeyDown = function handleKeyDown2(event) {
      switch (event.keyCode) {
        case ESC2:
          handleCloseMenuAndReturnFocus();
          break;
        case TAB: {
          var focusResult = false;
          if (!focusMenuRef.current) {
            focusResult = focusMenu();
          }
          if (focusResult) {
            event.preventDefault();
          } else {
            handleCloseMenuAndReturnFocus();
          }
          break;
        }
      }
    };
    React145.useEffect(function() {
      if (visible) {
        window.addEventListener("keydown", handleKeyDown);
        if (autoFocus) {
          raf_default(focusMenu, 3);
        }
        return function() {
          window.removeEventListener("keydown", handleKeyDown);
          focusMenuRef.current = false;
        };
      }
      return function() {
        focusMenuRef.current = false;
      };
    }, [visible]);
  }

  // node_modules/rc-dropdown/es/Dropdown.js
  var _excluded31 = ["arrow", "prefixCls", "transitionName", "animation", "align", "placement", "placements", "getPopupContainer", "showAction", "hideAction", "overlayClassName", "overlayStyle", "visible", "trigger", "autoFocus"];
  function Dropdown(props, ref) {
    var _props$arrow = props.arrow, arrow = _props$arrow === void 0 ? false : _props$arrow, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-dropdown" : _props$prefixCls, transitionName2 = props.transitionName, animation = props.animation, align = props.align, _props$placement = props.placement, placement = _props$placement === void 0 ? "bottomLeft" : _props$placement, _props$placements = props.placements, placements4 = _props$placements === void 0 ? placements_default : _props$placements, getPopupContainer = props.getPopupContainer, showAction = props.showAction, hideAction = props.hideAction, overlayClassName = props.overlayClassName, overlayStyle = props.overlayStyle, visible = props.visible, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? ["hover"] : _props$trigger, autoFocus = props.autoFocus, otherProps = _objectWithoutProperties(props, _excluded31);
    var _React$useState = React146.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), triggerVisible = _React$useState2[0], setTriggerVisible = _React$useState2[1];
    var mergedVisible = "visible" in props ? visible : triggerVisible;
    var triggerRef = React146.useRef(null);
    React146.useImperativeHandle(ref, function() {
      return triggerRef.current;
    });
    useAccessibility2({
      visible: mergedVisible,
      setTriggerVisible,
      triggerRef,
      onVisibleChange: props.onVisibleChange,
      autoFocus
    });
    var getOverlayElement = function getOverlayElement2() {
      var overlay = props.overlay;
      var overlayElement;
      if (typeof overlay === "function") {
        overlayElement = overlay();
      } else {
        overlayElement = overlay;
      }
      return overlayElement;
    };
    var onClick = function onClick2(e3) {
      var onOverlayClick = props.onOverlayClick;
      setTriggerVisible(false);
      if (onOverlayClick) {
        onOverlayClick(e3);
      }
    };
    var onVisibleChange = function onVisibleChange2(newVisible) {
      var onVisibleChangeProp = props.onVisibleChange;
      setTriggerVisible(newVisible);
      if (typeof onVisibleChangeProp === "function") {
        onVisibleChangeProp(newVisible);
      }
    };
    var getMenuElement = function getMenuElement2() {
      var overlayElement = getOverlayElement();
      return /* @__PURE__ */ React146.createElement(React146.Fragment, null, arrow && /* @__PURE__ */ React146.createElement("div", {
        className: "".concat(prefixCls, "-arrow")
      }), overlayElement);
    };
    var getMenuElementOrLambda = function getMenuElementOrLambda2() {
      var overlay = props.overlay;
      if (typeof overlay === "function") {
        return getMenuElement;
      }
      return getMenuElement();
    };
    var getMinOverlayWidthMatchTrigger = function getMinOverlayWidthMatchTrigger2() {
      var minOverlayWidthMatchTrigger = props.minOverlayWidthMatchTrigger, alignPoint2 = props.alignPoint;
      if ("minOverlayWidthMatchTrigger" in props) {
        return minOverlayWidthMatchTrigger;
      }
      return !alignPoint2;
    };
    var getOpenClassName = function getOpenClassName2() {
      var openClassName = props.openClassName;
      if (openClassName !== void 0) {
        return openClassName;
      }
      return "".concat(prefixCls, "-open");
    };
    var renderChildren = function renderChildren2() {
      var children = props.children;
      var childrenProps = children.props ? children.props : {};
      var childClassName = (0, import_classnames42.default)(childrenProps.className, getOpenClassName());
      return mergedVisible && children ? /* @__PURE__ */ React146.cloneElement(children, {
        className: childClassName
      }) : children;
    };
    var triggerHideAction = hideAction;
    if (!triggerHideAction && trigger.indexOf("contextMenu") !== -1) {
      triggerHideAction = ["click"];
    }
    return /* @__PURE__ */ React146.createElement(es_default7, _objectSpread2(_objectSpread2({
      builtinPlacements: placements4
    }, otherProps), {}, {
      prefixCls,
      ref: triggerRef,
      popupClassName: (0, import_classnames42.default)(overlayClassName, _defineProperty({}, "".concat(prefixCls, "-show-arrow"), arrow)),
      popupStyle: overlayStyle,
      action: trigger,
      showAction,
      hideAction: triggerHideAction || [],
      popupPlacement: placement,
      popupAlign: align,
      popupTransitionName: transitionName2,
      popupAnimation: animation,
      popupVisible: mergedVisible,
      stretch: getMinOverlayWidthMatchTrigger() ? "minWidth" : "",
      popup: getMenuElementOrLambda(),
      onPopupVisibleChange: onVisibleChange,
      onPopupClick: onClick,
      getPopupContainer
    }), renderChildren());
  }
  var Dropdown_default = /* @__PURE__ */ React146.forwardRef(Dropdown);

  // node_modules/rc-dropdown/es/index.js
  var es_default12 = Dropdown_default;

  // node_modules/antd/es/dropdown/dropdown.js
  var React152 = __toESM(require_react());

  // node_modules/antd/es/dropdown/dropdown-button.js
  var import_classnames45 = __toESM(require_classnames());
  var React151 = __toESM(require_react());

  // node_modules/antd/es/button/button.js
  var import_classnames44 = __toESM(require_classnames());
  var React150 = __toESM(require_react());

  // node_modules/antd/es/_util/wave.js
  var React147 = __toESM(require_react());
  var import_react37 = __toESM(require_react());

  // node_modules/antd/es/_util/raf.js
  var id = 0;
  var ids = {};
  function wrapperRaf3(callback) {
    var delayFrames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var myId = id++;
    var restFrames = delayFrames;
    function internalCallback() {
      restFrames -= 1;
      if (restFrames <= 0) {
        callback();
        delete ids[myId];
      } else {
        ids[myId] = raf_default(internalCallback);
      }
    }
    ids[myId] = raf_default(internalCallback);
    return myId;
  }
  wrapperRaf3.cancel = function cancel(pid) {
    if (pid === void 0)
      return;
    raf_default.cancel(ids[pid]);
    delete ids[pid];
  };
  wrapperRaf3.ids = ids;

  // node_modules/antd/es/_util/wave.js
  var styleForPseudo;
  function isHidden(element) {
    if (false) {
      return false;
    }
    return !element || element.offsetParent === null || element.hidden;
  }
  function getValidateContainer(nodeRoot) {
    if (nodeRoot instanceof Document) {
      return nodeRoot.body;
    }
    return Array.from(nodeRoot.childNodes).find(function(ele) {
      return (ele === null || ele === void 0 ? void 0 : ele.nodeType) === Node.ELEMENT_NODE;
    });
  }
  function isNotGrey(color) {
    var match2 = (color || "").match(/rgba?\((\d*), (\d*), (\d*)(, [\d.]*)?\)/);
    if (match2 && match2[1] && match2[2] && match2[3]) {
      return !(match2[1] === match2[2] && match2[2] === match2[3]);
    }
    return true;
  }
  var InternalWave = /* @__PURE__ */ function(_React$Component) {
    _inherits(InternalWave2, _React$Component);
    var _super = _createSuper(InternalWave2);
    function InternalWave2() {
      var _this;
      _classCallCheck(this, InternalWave2);
      _this = _super.apply(this, arguments);
      _this.containerRef = /* @__PURE__ */ React147.createRef();
      _this.animationStart = false;
      _this.destroyed = false;
      _this.onClick = function(node, waveColor) {
        var _a, _b;
        var _this$props = _this.props, insertExtraNode = _this$props.insertExtraNode, disabled = _this$props.disabled;
        if (disabled || !node || isHidden(node) || node.className.indexOf("-leave") >= 0) {
          return;
        }
        _this.extraNode = document.createElement("div");
        var _assertThisInitialize = _assertThisInitialized(_this), extraNode = _assertThisInitialize.extraNode;
        var getPrefixCls = _this.context.getPrefixCls;
        extraNode.className = "".concat(getPrefixCls(""), "-click-animating-node");
        var attributeName = _this.getAttributeName();
        node.setAttribute(attributeName, "true");
        if (waveColor && waveColor !== "#ffffff" && waveColor !== "rgb(255, 255, 255)" && isNotGrey(waveColor) && !/rgba\((?:\d*, ){3}0\)/.test(waveColor) && // any transparent rgba color
        waveColor !== "transparent") {
          extraNode.style.borderColor = waveColor;
          var nodeRoot = ((_a = node.getRootNode) === null || _a === void 0 ? void 0 : _a.call(node)) || node.ownerDocument;
          var nodeBody = (_b = getValidateContainer(nodeRoot)) !== null && _b !== void 0 ? _b : nodeRoot;
          styleForPseudo = updateCSS("\n      [".concat(getPrefixCls(""), "-click-animating-without-extra-node='true']::after, .").concat(getPrefixCls(""), "-click-animating-node {\n        --antd-wave-shadow-color: ").concat(waveColor, ";\n      }"), "antd-wave", {
            csp: _this.csp,
            attachTo: nodeBody
          });
        }
        if (insertExtraNode) {
          node.appendChild(extraNode);
        }
        ["transition", "animation"].forEach(function(name5) {
          node.addEventListener("".concat(name5, "start"), _this.onTransitionStart);
          node.addEventListener("".concat(name5, "end"), _this.onTransitionEnd);
        });
      };
      _this.onTransitionStart = function(e3) {
        if (_this.destroyed) {
          return;
        }
        var node = _this.containerRef.current;
        if (!e3 || e3.target !== node || _this.animationStart) {
          return;
        }
        _this.resetEffect(node);
      };
      _this.onTransitionEnd = function(e3) {
        if (!e3 || e3.animationName !== "fadeEffect") {
          return;
        }
        _this.resetEffect(e3.target);
      };
      _this.bindAnimationEvent = function(node) {
        if (!node || !node.getAttribute || node.getAttribute("disabled") || node.className.indexOf("disabled") >= 0) {
          return;
        }
        var onClick = function onClick2(e3) {
          if (e3.target.tagName === "INPUT" || isHidden(e3.target)) {
            return;
          }
          _this.resetEffect(node);
          var waveColor = getComputedStyle(node).getPropertyValue("border-top-color") || // Firefox Compatible
          getComputedStyle(node).getPropertyValue("border-color") || getComputedStyle(node).getPropertyValue("background-color");
          _this.clickWaveTimeoutId = window.setTimeout(function() {
            return _this.onClick(node, waveColor);
          }, 0);
          wrapperRaf3.cancel(_this.animationStartId);
          _this.animationStart = true;
          _this.animationStartId = wrapperRaf3(function() {
            _this.animationStart = false;
          }, 10);
        };
        node.addEventListener("click", onClick, true);
        return {
          cancel: function cancel2() {
            node.removeEventListener("click", onClick, true);
          }
        };
      };
      _this.renderWave = function(_ref) {
        var csp = _ref.csp;
        var children = _this.props.children;
        _this.csp = csp;
        if (!/* @__PURE__ */ React147.isValidElement(children))
          return children;
        var ref = _this.containerRef;
        if (supportRef(children)) {
          ref = composeRef(children.ref, _this.containerRef);
        }
        return cloneElement6(children, {
          ref
        });
      };
      return _this;
    }
    _createClass(InternalWave2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.destroyed = false;
        var node = this.containerRef.current;
        if (!node || node.nodeType !== 1) {
          return;
        }
        this.instance = this.bindAnimationEvent(node);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.instance) {
          this.instance.cancel();
        }
        if (this.clickWaveTimeoutId) {
          clearTimeout(this.clickWaveTimeoutId);
        }
        this.destroyed = true;
      }
    }, {
      key: "getAttributeName",
      value: function getAttributeName() {
        var getPrefixCls = this.context.getPrefixCls;
        var insertExtraNode = this.props.insertExtraNode;
        return insertExtraNode ? "".concat(getPrefixCls(""), "-click-animating") : "".concat(getPrefixCls(""), "-click-animating-without-extra-node");
      }
    }, {
      key: "resetEffect",
      value: function resetEffect(node) {
        var _this2 = this;
        if (!node || node === this.extraNode || !(node instanceof Element)) {
          return;
        }
        var insertExtraNode = this.props.insertExtraNode;
        var attributeName = this.getAttributeName();
        node.setAttribute(attributeName, "false");
        if (styleForPseudo) {
          styleForPseudo.innerHTML = "";
        }
        if (insertExtraNode && this.extraNode && node.contains(this.extraNode)) {
          node.removeChild(this.extraNode);
        }
        ["transition", "animation"].forEach(function(name5) {
          node.removeEventListener("".concat(name5, "start"), _this2.onTransitionStart);
          node.removeEventListener("".concat(name5, "end"), _this2.onTransitionEnd);
        });
      }
    }, {
      key: "render",
      value: function render4() {
        return /* @__PURE__ */ React147.createElement(ConfigConsumer, null, this.renderWave);
      }
    }]);
    return InternalWave2;
  }(React147.Component);
  InternalWave.contextType = ConfigContext;
  var Wave = /* @__PURE__ */ (0, import_react37.forwardRef)(function(props, ref) {
    return /* @__PURE__ */ React147.createElement(InternalWave, _extends({
      ref
    }, props));
  });
  var wave_default = Wave;

  // node_modules/antd/es/button/button-group.js
  var import_classnames43 = __toESM(require_classnames());
  var React148 = __toESM(require_react());
  var __rest12 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var GroupSizeContext = /* @__PURE__ */ React148.createContext(void 0);
  var ButtonGroup = function ButtonGroup2(props) {
    var _classNames;
    var _React$useContext = React148.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var customizePrefixCls = props.prefixCls, size = props.size, className = props.className, others = __rest12(props, ["prefixCls", "size", "className"]);
    var prefixCls = getPrefixCls("btn-group", customizePrefixCls);
    var sizeCls = "";
    switch (size) {
      case "large":
        sizeCls = "lg";
        break;
      case "small":
        sizeCls = "sm";
        break;
      case "middle":
      case void 0:
        break;
      default:
        true ? warning_default2(!size, "Button.Group", "Invalid prop `size`.") : void 0;
    }
    var classes = (0, import_classnames43.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    return /* @__PURE__ */ React148.createElement(GroupSizeContext.Provider, {
      value: size
    }, /* @__PURE__ */ React148.createElement("div", _extends({}, others, {
      className: classes
    })));
  };
  var button_group_default = ButtonGroup;

  // node_modules/antd/es/button/LoadingIcon.js
  var import_react38 = __toESM(require_react());
  var getCollapsedWidth = function getCollapsedWidth2() {
    return {
      width: 0,
      opacity: 0,
      transform: "scale(0)"
    };
  };
  var getRealWidth = function getRealWidth2(node) {
    return {
      width: node.scrollWidth,
      opacity: 1,
      transform: "scale(1)"
    };
  };
  var LoadingIcon = function LoadingIcon2(_ref) {
    var prefixCls = _ref.prefixCls, loading = _ref.loading, existIcon = _ref.existIcon;
    var visible = !!loading;
    if (existIcon) {
      return /* @__PURE__ */ import_react38.default.createElement("span", {
        className: "".concat(prefixCls, "-loading-icon")
      }, /* @__PURE__ */ import_react38.default.createElement(LoadingOutlined_default2, null));
    }
    return /* @__PURE__ */ import_react38.default.createElement(es_default3, {
      visible,
      // We do not really use this motionName
      motionName: "".concat(prefixCls, "-loading-icon-motion"),
      removeOnLeave: true,
      onAppearStart: getCollapsedWidth,
      onAppearActive: getRealWidth,
      onEnterStart: getCollapsedWidth,
      onEnterActive: getRealWidth,
      onLeaveStart: getRealWidth,
      onLeaveActive: getCollapsedWidth
    }, function(_ref2, ref) {
      var className = _ref2.className, style2 = _ref2.style;
      return /* @__PURE__ */ import_react38.default.createElement("span", {
        className: "".concat(prefixCls, "-loading-icon"),
        style: style2,
        ref
      }, /* @__PURE__ */ import_react38.default.createElement(LoadingOutlined_default2, {
        className
      }));
    });
  };
  var LoadingIcon_default = LoadingIcon;

  // node_modules/antd/es/button/button.js
  var __rest13 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var rxTwoCNChar = /^[\u4e00-\u9fa5]{2}$/;
  var isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);
  function isString(str) {
    return typeof str === "string";
  }
  function isUnBorderedButtonType(type4) {
    return type4 === "text" || type4 === "link";
  }
  function isReactFragment(node) {
    return /* @__PURE__ */ React150.isValidElement(node) && node.type === React150.Fragment;
  }
  function insertSpace(child, needInserted) {
    if (child === null || child === void 0) {
      return;
    }
    var SPACE = needInserted ? " " : "";
    if (typeof child !== "string" && typeof child !== "number" && isString(child.type) && isTwoCNChar(child.props.children)) {
      return cloneElement6(child, {
        children: child.props.children.split("").join(SPACE)
      });
    }
    if (typeof child === "string") {
      return isTwoCNChar(child) ? /* @__PURE__ */ React150.createElement("span", null, child.split("").join(SPACE)) : /* @__PURE__ */ React150.createElement("span", null, child);
    }
    if (isReactFragment(child)) {
      return /* @__PURE__ */ React150.createElement("span", null, child);
    }
    return child;
  }
  function spaceChildren(children, needInserted) {
    var isPrevChildPure = false;
    var childList = [];
    React150.Children.forEach(children, function(child) {
      var type4 = _typeof(child);
      var isCurrentChildPure = type4 === "string" || type4 === "number";
      if (isPrevChildPure && isCurrentChildPure) {
        var lastIndex = childList.length - 1;
        var lastChild = childList[lastIndex];
        childList[lastIndex] = "".concat(lastChild).concat(child);
      } else {
        childList.push(child);
      }
      isPrevChildPure = isCurrentChildPure;
    });
    return React150.Children.map(childList, function(child) {
      return insertSpace(child, needInserted);
    });
  }
  var ButtonTypes = tuple("default", "primary", "ghost", "dashed", "link", "text");
  var ButtonShapes = tuple("default", "circle", "round");
  var ButtonHTMLTypes = tuple("submit", "button", "reset");
  function convertLegacyProps(type4) {
    if (type4 === "danger") {
      return {
        danger: true
      };
    }
    return {
      type: type4
    };
  }
  var InternalButton = function InternalButton2(props, ref) {
    var _classNames;
    var _props$loading = props.loading, loading = _props$loading === void 0 ? false : _props$loading, customizePrefixCls = props.prefixCls, _props$type = props.type, type4 = _props$type === void 0 ? "default" : _props$type, danger = props.danger, _props$shape = props.shape, shape = _props$shape === void 0 ? "default" : _props$shape, customizeSize = props.size, customDisabled = props.disabled, className = props.className, children = props.children, icon = props.icon, _props$ghost = props.ghost, ghost = _props$ghost === void 0 ? false : _props$ghost, _props$block = props.block, block = _props$block === void 0 ? false : _props$block, _props$htmlType = props.htmlType, htmlType = _props$htmlType === void 0 ? "button" : _props$htmlType, rest = __rest13(props, ["loading", "prefixCls", "type", "danger", "shape", "size", "disabled", "className", "children", "icon", "ghost", "block", "htmlType"]);
    var size = React150.useContext(SizeContext_default);
    var disabled = React150.useContext(DisabledContext_default);
    var mergedDisabled = customDisabled || disabled;
    var groupSize = React150.useContext(GroupSizeContext);
    var _React$useState = React150.useState(!!loading), _React$useState2 = _slicedToArray(_React$useState, 2), innerLoading = _React$useState2[0], setLoading = _React$useState2[1];
    var _React$useState3 = React150.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), hasTwoCNChar = _React$useState4[0], setHasTwoCNChar = _React$useState4[1];
    var _React$useContext = React150.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, autoInsertSpaceInButton = _React$useContext.autoInsertSpaceInButton, direction = _React$useContext.direction;
    var buttonRef = ref || /* @__PURE__ */ React150.createRef();
    var isNeedInserted = function isNeedInserted2() {
      return React150.Children.count(children) === 1 && !icon && !isUnBorderedButtonType(type4);
    };
    var fixTwoCNChar = function fixTwoCNChar2() {
      if (!buttonRef || !buttonRef.current || autoInsertSpaceInButton === false) {
        return;
      }
      var buttonText = buttonRef.current.textContent;
      if (isNeedInserted() && isTwoCNChar(buttonText)) {
        if (!hasTwoCNChar) {
          setHasTwoCNChar(true);
        }
      } else if (hasTwoCNChar) {
        setHasTwoCNChar(false);
      }
    };
    var loadingOrDelay = typeof loading === "boolean" ? loading : (loading === null || loading === void 0 ? void 0 : loading.delay) || true;
    React150.useEffect(function() {
      var delayTimer = null;
      if (typeof loadingOrDelay === "number") {
        delayTimer = window.setTimeout(function() {
          delayTimer = null;
          setLoading(loadingOrDelay);
        }, loadingOrDelay);
      } else {
        setLoading(loadingOrDelay);
      }
      return function() {
        if (delayTimer) {
          window.clearTimeout(delayTimer);
          delayTimer = null;
        }
      };
    }, [loadingOrDelay]);
    React150.useEffect(fixTwoCNChar, [buttonRef]);
    var handleClick = function handleClick2(e3) {
      var onClick = props.onClick;
      if (innerLoading || mergedDisabled) {
        e3.preventDefault();
        return;
      }
      onClick === null || onClick === void 0 ? void 0 : onClick(e3);
    };
    true ? warning_default2(!(typeof icon === "string" && icon.length > 2), "Button", "`icon` is using ReactNode instead of string naming in v4. Please check `".concat(icon, "` at https://ant.design/components/icon")) : void 0;
    true ? warning_default2(!(ghost && isUnBorderedButtonType(type4)), "Button", "`link` or `text` button can't be a `ghost` button.") : void 0;
    var prefixCls = getPrefixCls("btn", customizePrefixCls);
    var autoInsertSpace = autoInsertSpaceInButton !== false;
    var sizeClassNameMap = {
      large: "lg",
      small: "sm",
      middle: void 0
    };
    var sizeFullname = groupSize || customizeSize || size;
    var sizeCls = sizeFullname ? sizeClassNameMap[sizeFullname] || "" : "";
    var iconType = innerLoading ? "loading" : icon;
    var linkButtonRestProps = omit(rest, ["navigate"]);
    var classes = (0, import_classnames44.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(shape), shape !== "default" && shape), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(type4), type4), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), _defineProperty(_classNames, "".concat(prefixCls, "-icon-only"), !children && children !== 0 && !!iconType), _defineProperty(_classNames, "".concat(prefixCls, "-background-ghost"), ghost && !isUnBorderedButtonType(type4)), _defineProperty(_classNames, "".concat(prefixCls, "-loading"), innerLoading), _defineProperty(_classNames, "".concat(prefixCls, "-two-chinese-chars"), hasTwoCNChar && autoInsertSpace && !innerLoading), _defineProperty(_classNames, "".concat(prefixCls, "-block"), block), _defineProperty(_classNames, "".concat(prefixCls, "-dangerous"), !!danger), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), linkButtonRestProps.href !== void 0 && mergedDisabled), _classNames), className);
    var iconNode = icon && !innerLoading ? icon : /* @__PURE__ */ React150.createElement(LoadingIcon_default, {
      existIcon: !!icon,
      prefixCls,
      loading: !!innerLoading
    });
    var kids = children || children === 0 ? spaceChildren(children, isNeedInserted() && autoInsertSpace) : null;
    if (linkButtonRestProps.href !== void 0) {
      return /* @__PURE__ */ React150.createElement("a", _extends({}, linkButtonRestProps, {
        className: classes,
        onClick: handleClick,
        ref: buttonRef
      }), iconNode, kids);
    }
    var buttonNode = /* @__PURE__ */ React150.createElement("button", _extends({}, rest, {
      type: htmlType,
      className: classes,
      onClick: handleClick,
      disabled: mergedDisabled,
      ref: buttonRef
    }), iconNode, kids);
    if (isUnBorderedButtonType(type4)) {
      return buttonNode;
    }
    return /* @__PURE__ */ React150.createElement(wave_default, {
      disabled: !!innerLoading
    }, buttonNode);
  };
  var Button = /* @__PURE__ */ React150.forwardRef(InternalButton);
  if (true) {
    Button.displayName = "Button";
  }
  Button.Group = button_group_default;
  Button.__ANT_BUTTON = true;
  var button_default = Button;

  // node_modules/antd/es/button/index.js
  var button_default2 = button_default;

  // node_modules/antd/es/dropdown/dropdown-button.js
  var __rest14 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var ButtonGroup3 = button_default2.Group;
  var DropdownButton = function DropdownButton2(props) {
    var _React$useContext = React151.useContext(ConfigContext), getContextPopupContainer = _React$useContext.getPopupContainer, getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var customizePrefixCls = props.prefixCls, _props$type = props.type, type4 = _props$type === void 0 ? "default" : _props$type, danger = props.danger, disabled = props.disabled, loading = props.loading, onClick = props.onClick, htmlType = props.htmlType, children = props.children, className = props.className, overlay = props.overlay, trigger = props.trigger, align = props.align, visible = props.visible, open = props.open, onVisibleChange = props.onVisibleChange, onOpenChange = props.onOpenChange, placement = props.placement, getPopupContainer = props.getPopupContainer, href = props.href, _props$icon = props.icon, icon = _props$icon === void 0 ? /* @__PURE__ */ React151.createElement(EllipsisOutlined_default2, null) : _props$icon, title = props.title, _props$buttonsRender = props.buttonsRender, buttonsRender = _props$buttonsRender === void 0 ? function(buttons) {
      return buttons;
    } : _props$buttonsRender, mouseEnterDelay = props.mouseEnterDelay, mouseLeaveDelay = props.mouseLeaveDelay, overlayClassName = props.overlayClassName, overlayStyle = props.overlayStyle, destroyPopupOnHide = props.destroyPopupOnHide, restProps = __rest14(props, ["prefixCls", "type", "danger", "disabled", "loading", "onClick", "htmlType", "children", "className", "overlay", "trigger", "align", "visible", "open", "onVisibleChange", "onOpenChange", "placement", "getPopupContainer", "href", "icon", "title", "buttonsRender", "mouseEnterDelay", "mouseLeaveDelay", "overlayClassName", "overlayStyle", "destroyPopupOnHide"]);
    var prefixCls = getPrefixCls("dropdown-button", customizePrefixCls);
    var dropdownProps = {
      align,
      overlay,
      disabled,
      trigger: disabled ? [] : trigger,
      onOpenChange: onOpenChange || onVisibleChange,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      mouseEnterDelay,
      mouseLeaveDelay,
      overlayClassName,
      overlayStyle,
      destroyPopupOnHide
    };
    if ("open" in props) {
      dropdownProps.open = open;
    } else if ("visible" in props) {
      dropdownProps.open = visible;
    }
    if ("placement" in props) {
      dropdownProps.placement = placement;
    } else {
      dropdownProps.placement = direction === "rtl" ? "bottomLeft" : "bottomRight";
    }
    var leftButton = /* @__PURE__ */ React151.createElement(button_default2, {
      type: type4,
      danger,
      disabled,
      loading,
      onClick,
      htmlType,
      href,
      title
    }, children);
    var rightButton = /* @__PURE__ */ React151.createElement(button_default2, {
      type: type4,
      danger,
      icon
    });
    var _buttonsRender = buttonsRender([leftButton, rightButton]), _buttonsRender2 = _slicedToArray(_buttonsRender, 2), leftButtonToRender = _buttonsRender2[0], rightButtonToRender = _buttonsRender2[1];
    return /* @__PURE__ */ React151.createElement(ButtonGroup3, _extends({}, restProps, {
      className: (0, import_classnames45.default)(prefixCls, className)
    }), leftButtonToRender, /* @__PURE__ */ React151.createElement(dropdown_default, _extends({}, dropdownProps), rightButtonToRender));
  };
  DropdownButton.__ANT_BUTTON = true;
  var dropdown_button_default = DropdownButton;

  // node_modules/antd/es/dropdown/dropdown.js
  var Placements = tuple("topLeft", "topCenter", "topRight", "bottomLeft", "bottomCenter", "bottomRight", "top", "bottom");
  var Dropdown2 = function Dropdown3(props) {
    var _React$useContext = React152.useContext(ConfigContext), getContextPopupContainer = _React$useContext.getPopupContainer, getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    if (true) {
      [["visible", "open"], ["onVisibleChange", "onOpenChange"]].forEach(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 2), deprecatedName = _ref2[0], newName = _ref2[1];
        true ? warning_default2(!(deprecatedName in props), "Dropdown", "`".concat(deprecatedName, "` is deprecated which will be removed in next major version, please use `").concat(newName, "` instead.")) : void 0;
      });
    }
    var getTransitionName5 = function getTransitionName6() {
      var rootPrefixCls = getPrefixCls();
      var _props$placement = props.placement, placement = _props$placement === void 0 ? "" : _props$placement, transitionName2 = props.transitionName;
      if (transitionName2 !== void 0) {
        return transitionName2;
      }
      if (placement.includes("top")) {
        return "".concat(rootPrefixCls, "-slide-down");
      }
      return "".concat(rootPrefixCls, "-slide-up");
    };
    var getPlacement = function getPlacement2() {
      var placement = props.placement;
      if (!placement) {
        return direction === "rtl" ? "bottomRight" : "bottomLeft";
      }
      if (placement.includes("Center")) {
        var newPlacement = placement.slice(0, placement.indexOf("Center"));
        true ? warning_default2(!placement.includes("Center"), "Dropdown", "You are using '".concat(placement, "' placement in Dropdown, which is deprecated. Try to use '").concat(newPlacement, "' instead.")) : void 0;
        return newPlacement;
      }
      return placement;
    };
    var arrow = props.arrow, customizePrefixCls = props.prefixCls, children = props.children, trigger = props.trigger, disabled = props.disabled, getPopupContainer = props.getPopupContainer, overlayClassName = props.overlayClassName, visible = props.visible, open = props.open, onVisibleChange = props.onVisibleChange, onOpenChange = props.onOpenChange, _props$mouseEnterDela = props.mouseEnterDelay, mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0.15 : _props$mouseEnterDela, _props$mouseLeaveDela = props.mouseLeaveDelay, mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela;
    var prefixCls = getPrefixCls("dropdown", customizePrefixCls);
    var child = React152.Children.only(children);
    var dropdownTrigger = cloneElement6(child, {
      className: (0, import_classnames46.default)("".concat(prefixCls, "-trigger"), _defineProperty({}, "".concat(prefixCls, "-rtl"), direction === "rtl"), child.props.className),
      disabled
    });
    var triggerActions = disabled ? [] : trigger;
    var alignPoint2;
    if (triggerActions && triggerActions.includes("contextMenu")) {
      alignPoint2 = true;
    }
    var _useMergedState = useMergedState(false, {
      value: open !== void 0 ? open : visible
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedOpen = _useMergedState2[0], setOpen = _useMergedState2[1];
    var onInnerOpenChange = useEvent(function(nextOpen) {
      onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(nextOpen);
      onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(nextOpen);
      setOpen(nextOpen);
    });
    var overlayClassNameCustomized = (0, import_classnames46.default)(overlayClassName, _defineProperty({}, "".concat(prefixCls, "-rtl"), direction === "rtl"));
    var builtinPlacements = getPlacements({
      arrowPointAtCenter: _typeof(arrow) === "object" && arrow.pointAtCenter,
      autoAdjustOverflow: true
    });
    var onMenuClick = React152.useCallback(function() {
      setOpen(false);
    }, []);
    var renderOverlay = function renderOverlay2() {
      var overlay = props.overlay;
      var overlayNode;
      if (typeof overlay === "function") {
        overlayNode = overlay();
      } else {
        overlayNode = overlay;
      }
      overlayNode = React152.Children.only(typeof overlayNode === "string" ? /* @__PURE__ */ React152.createElement("span", null, overlayNode) : overlayNode);
      return /* @__PURE__ */ React152.createElement(OverrideProvider, {
        prefixCls: "".concat(prefixCls, "-menu"),
        expandIcon: /* @__PURE__ */ React152.createElement("span", {
          className: "".concat(prefixCls, "-menu-submenu-arrow")
        }, /* @__PURE__ */ React152.createElement(RightOutlined_default2, {
          className: "".concat(prefixCls, "-menu-submenu-arrow-icon")
        })),
        mode: "vertical",
        selectable: false,
        onClick: onMenuClick,
        validator: function validator(_ref3) {
          var mode = _ref3.mode;
          true ? warning_default2(!mode || mode === "vertical", "Dropdown", 'mode="'.concat(mode, `" is not supported for Dropdown's Menu.`)) : void 0;
        }
      }, overlayNode);
    };
    return /* @__PURE__ */ React152.createElement(es_default12, _extends({
      alignPoint: alignPoint2
    }, props, {
      mouseEnterDelay,
      mouseLeaveDelay,
      visible: mergedOpen,
      builtinPlacements,
      arrow: !!arrow,
      overlayClassName: overlayClassNameCustomized,
      prefixCls,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      transitionName: getTransitionName5(),
      trigger: triggerActions,
      overlay: renderOverlay,
      placement: getPlacement(),
      onVisibleChange: onInnerOpenChange
    }), dropdownTrigger);
  };
  Dropdown2.Button = dropdown_button_default;
  var dropdown_default = Dropdown2;

  // node_modules/antd/es/radio/group.js
  var import_classnames49 = __toESM(require_classnames());
  var React156 = __toESM(require_react());

  // node_modules/antd/es/radio/context.js
  var React153 = __toESM(require_react());
  var RadioGroupContext = /* @__PURE__ */ React153.createContext(null);
  var RadioGroupContextProvider = RadioGroupContext.Provider;
  var context_default3 = RadioGroupContext;
  var RadioOptionTypeContext = /* @__PURE__ */ React153.createContext(null);
  var RadioOptionTypeContextProvider = RadioOptionTypeContext.Provider;

  // node_modules/antd/es/radio/radio.js
  var import_classnames48 = __toESM(require_classnames());

  // node_modules/rc-checkbox/es/index.js
  var import_react39 = __toESM(require_react());
  var import_classnames47 = __toESM(require_classnames());
  var Checkbox = /* @__PURE__ */ function(_Component) {
    _inherits(Checkbox2, _Component);
    var _super = _createSuper(Checkbox2);
    function Checkbox2(props) {
      var _this;
      _classCallCheck(this, Checkbox2);
      _this = _super.call(this, props);
      _this.handleChange = function(e3) {
        var _this$props = _this.props, disabled = _this$props.disabled, onChange3 = _this$props.onChange;
        if (disabled) {
          return;
        }
        if (!("checked" in _this.props)) {
          _this.setState({
            checked: e3.target.checked
          });
        }
        if (onChange3) {
          onChange3({
            target: _objectSpread2(_objectSpread2({}, _this.props), {}, {
              checked: e3.target.checked
            }),
            stopPropagation: function stopPropagation() {
              e3.stopPropagation();
            },
            preventDefault: function preventDefault() {
              e3.preventDefault();
            },
            nativeEvent: e3.nativeEvent
          });
        }
      };
      _this.saveInput = function(node) {
        _this.input = node;
      };
      var checked = "checked" in props ? props.checked : props.defaultChecked;
      _this.state = {
        checked
      };
      return _this;
    }
    _createClass(Checkbox2, [{
      key: "focus",
      value: function focus() {
        this.input.focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        this.input.blur();
      }
    }, {
      key: "render",
      value: function render4() {
        var _classNames;
        var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, style2 = _this$props2.style, name5 = _this$props2.name, id2 = _this$props2.id, type4 = _this$props2.type, disabled = _this$props2.disabled, readOnly = _this$props2.readOnly, tabIndex = _this$props2.tabIndex, onClick = _this$props2.onClick, onFocus2 = _this$props2.onFocus, onBlur2 = _this$props2.onBlur, onKeyDown2 = _this$props2.onKeyDown, onKeyPress2 = _this$props2.onKeyPress, onKeyUp2 = _this$props2.onKeyUp, autoFocus = _this$props2.autoFocus, value = _this$props2.value, required4 = _this$props2.required, others = _objectWithoutProperties(_this$props2, ["prefixCls", "className", "style", "name", "id", "type", "disabled", "readOnly", "tabIndex", "onClick", "onFocus", "onBlur", "onKeyDown", "onKeyPress", "onKeyUp", "autoFocus", "value", "required"]);
        var globalProps = Object.keys(others).reduce(function(prev, key2) {
          if (key2.substr(0, 5) === "aria-" || key2.substr(0, 5) === "data-" || key2 === "role") {
            prev[key2] = others[key2];
          }
          return prev;
        }, {});
        var checked = this.state.checked;
        var classString = (0, import_classnames47.default)(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-checked"), checked), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), disabled), _classNames));
        return /* @__PURE__ */ import_react39.default.createElement("span", {
          className: classString,
          style: style2
        }, /* @__PURE__ */ import_react39.default.createElement("input", _extends({
          name: name5,
          id: id2,
          type: type4,
          required: required4,
          readOnly,
          disabled,
          tabIndex,
          className: "".concat(prefixCls, "-input"),
          checked: !!checked,
          onClick,
          onFocus: onFocus2,
          onBlur: onBlur2,
          onKeyUp: onKeyUp2,
          onKeyDown: onKeyDown2,
          onKeyPress: onKeyPress2,
          onChange: this.handleChange,
          autoFocus,
          ref: this.saveInput,
          value
        }, globalProps)), /* @__PURE__ */ import_react39.default.createElement("span", {
          className: "".concat(prefixCls, "-inner")
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, state) {
        if ("checked" in props) {
          return _objectSpread2(_objectSpread2({}, state), {}, {
            checked: props.checked
          });
        }
        return null;
      }
    }]);
    return Checkbox2;
  }(import_react39.Component);
  Checkbox.defaultProps = {
    prefixCls: "rc-checkbox",
    className: "",
    style: {},
    type: "checkbox",
    defaultChecked: false,
    onFocus: function onFocus() {
    },
    onBlur: function onBlur() {
    },
    onChange: function onChange() {
    },
    onKeyDown: function onKeyDown() {
    },
    onKeyPress: function onKeyPress() {
    },
    onKeyUp: function onKeyUp() {
    }
  };
  var es_default13 = Checkbox;

  // node_modules/antd/es/radio/radio.js
  var React155 = __toESM(require_react());
  var import_react40 = __toESM(require_react());
  var __rest15 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var InternalRadio = function InternalRadio2(props, ref) {
    var _classNames;
    var groupContext = React155.useContext(context_default3);
    var radioOptionTypeContext = React155.useContext(RadioOptionTypeContext);
    var _React$useContext = React155.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var innerRef = React155.useRef();
    var mergedRef = composeRef(ref, innerRef);
    var _useContext = (0, import_react40.useContext)(FormItemInputContext), isFormItemInput = _useContext.isFormItemInput;
    true ? warning_default2(!("optionType" in props), "Radio", "`optionType` is only support in Radio.Group.") : void 0;
    var onChange3 = function onChange4(e3) {
      var _a, _b;
      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, e3);
      (_b = groupContext === null || groupContext === void 0 ? void 0 : groupContext.onChange) === null || _b === void 0 ? void 0 : _b.call(groupContext, e3);
    };
    var customizePrefixCls = props.prefixCls, className = props.className, children = props.children, style2 = props.style, customDisabled = props.disabled, restProps = __rest15(props, ["prefixCls", "className", "children", "style", "disabled"]);
    var radioPrefixCls = getPrefixCls("radio", customizePrefixCls);
    var prefixCls = ((groupContext === null || groupContext === void 0 ? void 0 : groupContext.optionType) || radioOptionTypeContext) === "button" ? "".concat(radioPrefixCls, "-button") : radioPrefixCls;
    var radioProps = _extends({}, restProps);
    var disabled = React155.useContext(DisabledContext_default);
    radioProps.disabled = customDisabled || disabled;
    if (groupContext) {
      radioProps.name = groupContext.name;
      radioProps.onChange = onChange3;
      radioProps.checked = props.value === groupContext.value;
      radioProps.disabled = radioProps.disabled || groupContext.disabled;
    }
    var wrapperClassString = (0, import_classnames48.default)("".concat(prefixCls, "-wrapper"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-wrapper-checked"), radioProps.checked), _defineProperty(_classNames, "".concat(prefixCls, "-wrapper-disabled"), radioProps.disabled), _defineProperty(_classNames, "".concat(prefixCls, "-wrapper-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-wrapper-in-form-item"), isFormItemInput), _classNames), className);
    return (
      // eslint-disable-next-line jsx-a11y/label-has-associated-control
      /* @__PURE__ */ React155.createElement("label", {
        className: wrapperClassString,
        style: style2,
        onMouseEnter: props.onMouseEnter,
        onMouseLeave: props.onMouseLeave
      }, /* @__PURE__ */ React155.createElement(es_default13, _extends({}, radioProps, {
        type: "radio",
        prefixCls,
        ref: mergedRef
      })), children !== void 0 ? /* @__PURE__ */ React155.createElement("span", null, children) : null)
    );
  };
  var Radio = /* @__PURE__ */ React155.forwardRef(InternalRadio);
  if (true) {
    Radio.displayName = "Radio";
  }
  var radio_default = Radio;

  // node_modules/antd/es/radio/group.js
  var RadioGroup = /* @__PURE__ */ React156.forwardRef(function(props, ref) {
    var _classNames;
    var _React$useContext = React156.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var size = React156.useContext(SizeContext_default);
    var _useMergedState = useMergedState(props.defaultValue, {
      value: props.value
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), value = _useMergedState2[0], setValue2 = _useMergedState2[1];
    var onRadioChange = function onRadioChange2(ev) {
      var lastValue = value;
      var val = ev.target.value;
      if (!("value" in props)) {
        setValue2(val);
      }
      var onChange3 = props.onChange;
      if (onChange3 && val !== lastValue) {
        onChange3(ev);
      }
    };
    var customizePrefixCls = props.prefixCls, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className, options = props.options, _props$buttonStyle = props.buttonStyle, buttonStyle = _props$buttonStyle === void 0 ? "outline" : _props$buttonStyle, disabled = props.disabled, children = props.children, customizeSize = props.size, style2 = props.style, id2 = props.id, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onFocus2 = props.onFocus, onBlur2 = props.onBlur;
    var prefixCls = getPrefixCls("radio", customizePrefixCls);
    var groupPrefixCls = "".concat(prefixCls, "-group");
    var childrenToRender = children;
    if (options && options.length > 0) {
      childrenToRender = options.map(function(option) {
        if (typeof option === "string" || typeof option === "number") {
          return /* @__PURE__ */ React156.createElement(radio_default, {
            key: option.toString(),
            prefixCls,
            disabled,
            value: option,
            checked: value === option
          }, option);
        }
        return /* @__PURE__ */ React156.createElement(radio_default, {
          key: "radio-group-value-options-".concat(option.value),
          prefixCls,
          disabled: option.disabled || disabled,
          value: option.value,
          checked: value === option.value,
          style: option.style
        }, option.label);
      });
    }
    var mergedSize = customizeSize || size;
    var classString = (0, import_classnames49.default)(groupPrefixCls, "".concat(groupPrefixCls, "-").concat(buttonStyle), (_classNames = {}, _defineProperty(_classNames, "".concat(groupPrefixCls, "-").concat(mergedSize), mergedSize), _defineProperty(_classNames, "".concat(groupPrefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    return /* @__PURE__ */ React156.createElement("div", _extends({}, getDataOrAriaProps(props), {
      className: classString,
      style: style2,
      onMouseEnter,
      onMouseLeave,
      onFocus: onFocus2,
      onBlur: onBlur2,
      id: id2,
      ref
    }), /* @__PURE__ */ React156.createElement(RadioGroupContextProvider, {
      value: {
        onChange: onRadioChange,
        value,
        disabled: props.disabled,
        name: props.name,
        optionType: props.optionType
      }
    }, childrenToRender));
  });
  var group_default = /* @__PURE__ */ React156.memo(RadioGroup);

  // node_modules/antd/es/radio/radioButton.js
  var React157 = __toESM(require_react());
  var __rest16 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var RadioButton = function RadioButton2(props, ref) {
    var _React$useContext = React157.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var customizePrefixCls = props.prefixCls, radioProps = __rest16(props, ["prefixCls"]);
    var prefixCls = getPrefixCls("radio", customizePrefixCls);
    return /* @__PURE__ */ React157.createElement(RadioOptionTypeContextProvider, {
      value: "button"
    }, /* @__PURE__ */ React157.createElement(radio_default, _extends({
      prefixCls
    }, radioProps, {
      type: "radio",
      ref
    })));
  };
  var radioButton_default = /* @__PURE__ */ React157.forwardRef(RadioButton);

  // node_modules/antd/es/radio/index.js
  var Radio2 = radio_default;
  Radio2.Button = radioButton_default;
  Radio2.Group = group_default;
  Radio2.__ANT_RADIO = true;
  var radio_default2 = Radio2;

  // node_modules/antd/es/card/Card.js
  var import_classnames67 = __toESM(require_classnames());
  var React183 = __toESM(require_react());

  // node_modules/antd/es/skeleton/Skeleton.js
  var import_classnames58 = __toESM(require_classnames());
  var React167 = __toESM(require_react());

  // node_modules/antd/es/skeleton/Avatar.js
  var import_classnames51 = __toESM(require_classnames());
  var React159 = __toESM(require_react());

  // node_modules/antd/es/skeleton/Element.js
  var import_classnames50 = __toESM(require_classnames());
  var React158 = __toESM(require_react());
  var Element2 = function Element3(props) {
    var _classNames, _classNames2;
    var prefixCls = props.prefixCls, className = props.className, style2 = props.style, size = props.size, shape = props.shape;
    var sizeCls = (0, import_classnames50.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-lg"), size === "large"), _defineProperty(_classNames, "".concat(prefixCls, "-sm"), size === "small"), _classNames));
    var shapeCls = (0, import_classnames50.default)((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-circle"), shape === "circle"), _defineProperty(_classNames2, "".concat(prefixCls, "-square"), shape === "square"), _defineProperty(_classNames2, "".concat(prefixCls, "-round"), shape === "round"), _classNames2));
    var sizeStyle = React158.useMemo(function() {
      return typeof size === "number" ? {
        width: size,
        height: size,
        lineHeight: "".concat(size, "px")
      } : {};
    }, [size]);
    return /* @__PURE__ */ React158.createElement("span", {
      className: (0, import_classnames50.default)(prefixCls, sizeCls, shapeCls, className),
      style: _extends(_extends({}, sizeStyle), style2)
    });
  };
  var Element_default = Element2;

  // node_modules/antd/es/skeleton/Avatar.js
  var SkeletonAvatar = function SkeletonAvatar2(props) {
    var customizePrefixCls = props.prefixCls, className = props.className, active = props.active, _props$shape = props.shape, shape = _props$shape === void 0 ? "circle" : _props$shape, _props$size = props.size, size = _props$size === void 0 ? "default" : _props$size;
    var _React$useContext = React159.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    var otherProps = omit(props, ["prefixCls", "className"]);
    var cls = (0, import_classnames51.default)(prefixCls, "".concat(prefixCls, "-element"), _defineProperty({}, "".concat(prefixCls, "-active"), active), className);
    return /* @__PURE__ */ React159.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React159.createElement(Element_default, _extends({
      prefixCls: "".concat(prefixCls, "-avatar"),
      shape,
      size
    }, otherProps)));
  };
  var Avatar_default = SkeletonAvatar;

  // node_modules/antd/es/skeleton/Button.js
  var import_classnames52 = __toESM(require_classnames());
  var React160 = __toESM(require_react());
  var SkeletonButton = function SkeletonButton2(props) {
    var _classNames;
    var customizePrefixCls = props.prefixCls, className = props.className, active = props.active, _props$block = props.block, block = _props$block === void 0 ? false : _props$block, _props$size = props.size, size = _props$size === void 0 ? "default" : _props$size;
    var _React$useContext = React160.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    var otherProps = omit(props, ["prefixCls"]);
    var cls = (0, import_classnames52.default)(prefixCls, "".concat(prefixCls, "-element"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-active"), active), _defineProperty(_classNames, "".concat(prefixCls, "-block"), block), _classNames), className);
    return /* @__PURE__ */ React160.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React160.createElement(Element_default, _extends({
      prefixCls: "".concat(prefixCls, "-button"),
      size
    }, otherProps)));
  };
  var Button_default = SkeletonButton;

  // node_modules/@ant-design/icons/es/icons/DotChartOutlined.js
  var React161 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DotChartOutlined.js
  var DotChartOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M888 792H200V168c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v688c0 4.4 3.6 8 8 8h752c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM288 604a64 64 0 10128 0 64 64 0 10-128 0zm118-224a48 48 0 1096 0 48 48 0 10-96 0zm158 228a96 96 0 10192 0 96 96 0 10-192 0zm148-314a56 56 0 10112 0 56 56 0 10-112 0z" } }] }, "name": "dot-chart", "theme": "outlined" };
  var DotChartOutlined_default = DotChartOutlined;

  // node_modules/@ant-design/icons/es/icons/DotChartOutlined.js
  var DotChartOutlined2 = function DotChartOutlined3(props, ref) {
    return /* @__PURE__ */ React161.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: DotChartOutlined_default
    }));
  };
  DotChartOutlined2.displayName = "DotChartOutlined";
  var DotChartOutlined_default2 = /* @__PURE__ */ React161.forwardRef(DotChartOutlined2);

  // node_modules/antd/es/skeleton/Node.js
  var import_classnames53 = __toESM(require_classnames());
  var React162 = __toESM(require_react());
  var SkeletonNode = function SkeletonNode2(props) {
    var customizePrefixCls = props.prefixCls, className = props.className, style2 = props.style, active = props.active, children = props.children;
    var _React$useContext = React162.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    var cls = (0, import_classnames53.default)(prefixCls, "".concat(prefixCls, "-element"), _defineProperty({}, "".concat(prefixCls, "-active"), active), className);
    var content = children !== null && children !== void 0 ? children : /* @__PURE__ */ React162.createElement(DotChartOutlined_default2, null);
    return /* @__PURE__ */ React162.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React162.createElement("div", {
      className: (0, import_classnames53.default)("".concat(prefixCls, "-image"), className),
      style: style2
    }, content));
  };
  var Node_default = SkeletonNode;

  // node_modules/antd/es/skeleton/Image.js
  var import_classnames54 = __toESM(require_classnames());
  var React163 = __toESM(require_react());
  var path = "M365.714286 329.142857q0 45.714286-32.036571 77.677714t-77.677714 32.036571-77.677714-32.036571-32.036571-77.677714 32.036571-77.677714 77.677714-32.036571 77.677714 32.036571 32.036571 77.677714zM950.857143 548.571429l0 256-804.571429 0 0-109.714286 182.857143-182.857143 91.428571 91.428571 292.571429-292.571429zM1005.714286 146.285714l-914.285714 0q-7.460571 0-12.873143 5.412571t-5.412571 12.873143l0 694.857143q0 7.460571 5.412571 12.873143t12.873143 5.412571l914.285714 0q7.460571 0 12.873143-5.412571t5.412571-12.873143l0-694.857143q0-7.460571-5.412571-12.873143t-12.873143-5.412571zM1097.142857 164.571429l0 694.857143q0 37.741714-26.843429 64.585143t-64.585143 26.843429l-914.285714 0q-37.741714 0-64.585143-26.843429t-26.843429-64.585143l0-694.857143q0-37.741714 26.843429-64.585143t64.585143-26.843429l914.285714 0q37.741714 0 64.585143 26.843429t26.843429 64.585143z";
  var SkeletonImage = function SkeletonImage2(props) {
    var customizePrefixCls = props.prefixCls, className = props.className, style2 = props.style, active = props.active;
    var _React$useContext = React163.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    var cls = (0, import_classnames54.default)(prefixCls, "".concat(prefixCls, "-element"), _defineProperty({}, "".concat(prefixCls, "-active"), active), className);
    return /* @__PURE__ */ React163.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React163.createElement("div", {
      className: (0, import_classnames54.default)("".concat(prefixCls, "-image"), className),
      style: style2
    }, /* @__PURE__ */ React163.createElement("svg", {
      viewBox: "0 0 1098 1024",
      xmlns: "http://www.w3.org/2000/svg",
      className: "".concat(prefixCls, "-image-svg")
    }, /* @__PURE__ */ React163.createElement("path", {
      d: path,
      className: "".concat(prefixCls, "-image-path")
    }))));
  };
  var Image_default = SkeletonImage;

  // node_modules/antd/es/skeleton/Input.js
  var import_classnames55 = __toESM(require_classnames());
  var React164 = __toESM(require_react());
  var SkeletonInput = function SkeletonInput2(props) {
    var _classNames;
    var customizePrefixCls = props.prefixCls, className = props.className, active = props.active, block = props.block, _props$size = props.size, size = _props$size === void 0 ? "default" : _props$size;
    var _React$useContext = React164.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    var otherProps = omit(props, ["prefixCls"]);
    var cls = (0, import_classnames55.default)(prefixCls, "".concat(prefixCls, "-element"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-active"), active), _defineProperty(_classNames, "".concat(prefixCls, "-block"), block), _classNames), className);
    return /* @__PURE__ */ React164.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React164.createElement(Element_default, _extends({
      prefixCls: "".concat(prefixCls, "-input"),
      size
    }, otherProps)));
  };
  var Input_default2 = SkeletonInput;

  // node_modules/antd/es/skeleton/Paragraph.js
  var import_classnames56 = __toESM(require_classnames());
  var React165 = __toESM(require_react());
  var Paragraph = function Paragraph2(props) {
    var getWidth = function getWidth2(index3) {
      var width = props.width, _props$rows = props.rows, rows2 = _props$rows === void 0 ? 2 : _props$rows;
      if (Array.isArray(width)) {
        return width[index3];
      }
      if (rows2 - 1 === index3) {
        return width;
      }
      return void 0;
    };
    var prefixCls = props.prefixCls, className = props.className, style2 = props.style, rows = props.rows;
    var rowList = _toConsumableArray(Array(rows)).map(function(_, index3) {
      return (
        // eslint-disable-next-line react/no-array-index-key
        /* @__PURE__ */ React165.createElement("li", {
          key: index3,
          style: {
            width: getWidth(index3)
          }
        })
      );
    });
    return /* @__PURE__ */ React165.createElement("ul", {
      className: (0, import_classnames56.default)(prefixCls, className),
      style: style2
    }, rowList);
  };
  var Paragraph_default = Paragraph;

  // node_modules/antd/es/skeleton/Title.js
  var import_classnames57 = __toESM(require_classnames());
  var React166 = __toESM(require_react());
  var Title = function Title2(_ref) {
    var prefixCls = _ref.prefixCls, className = _ref.className, width = _ref.width, style2 = _ref.style;
    return /* @__PURE__ */ React166.createElement("h3", {
      className: (0, import_classnames57.default)(prefixCls, className),
      style: _extends({
        width
      }, style2)
    });
  };
  var Title_default = Title;

  // node_modules/antd/es/skeleton/Skeleton.js
  function getComponentProps(prop) {
    if (prop && _typeof(prop) === "object") {
      return prop;
    }
    return {};
  }
  function getAvatarBasicProps(hasTitle, hasParagraph) {
    if (hasTitle && !hasParagraph) {
      return {
        size: "large",
        shape: "square"
      };
    }
    return {
      size: "large",
      shape: "circle"
    };
  }
  function getTitleBasicProps(hasAvatar, hasParagraph) {
    if (!hasAvatar && hasParagraph) {
      return {
        width: "38%"
      };
    }
    if (hasAvatar && hasParagraph) {
      return {
        width: "50%"
      };
    }
    return {};
  }
  function getParagraphBasicProps(hasAvatar, hasTitle) {
    var basicProps = {};
    if (!hasAvatar || !hasTitle) {
      basicProps.width = "61%";
    }
    if (!hasAvatar && hasTitle) {
      basicProps.rows = 3;
    } else {
      basicProps.rows = 2;
    }
    return basicProps;
  }
  var Skeleton = function Skeleton2(props) {
    var customizePrefixCls = props.prefixCls, loading = props.loading, className = props.className, style2 = props.style, children = props.children, _props$avatar = props.avatar, avatar = _props$avatar === void 0 ? false : _props$avatar, _props$title = props.title, title = _props$title === void 0 ? true : _props$title, _props$paragraph = props.paragraph, paragraph = _props$paragraph === void 0 ? true : _props$paragraph, active = props.active, round = props.round;
    var _React$useContext = React167.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    if (loading || !("loading" in props)) {
      var _classNames;
      var hasAvatar = !!avatar;
      var hasTitle = !!title;
      var hasParagraph = !!paragraph;
      var avatarNode;
      if (hasAvatar) {
        var avatarProps = _extends(_extends({
          prefixCls: "".concat(prefixCls, "-avatar")
        }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));
        avatarNode = /* @__PURE__ */ React167.createElement("div", {
          className: "".concat(prefixCls, "-header")
        }, /* @__PURE__ */ React167.createElement(Element_default, _extends({}, avatarProps)));
      }
      var contentNode;
      if (hasTitle || hasParagraph) {
        var $title;
        if (hasTitle) {
          var titleProps = _extends(_extends({
            prefixCls: "".concat(prefixCls, "-title")
          }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));
          $title = /* @__PURE__ */ React167.createElement(Title_default, _extends({}, titleProps));
        }
        var paragraphNode;
        if (hasParagraph) {
          var paragraphProps = _extends(_extends({
            prefixCls: "".concat(prefixCls, "-paragraph")
          }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));
          paragraphNode = /* @__PURE__ */ React167.createElement(Paragraph_default, _extends({}, paragraphProps));
        }
        contentNode = /* @__PURE__ */ React167.createElement("div", {
          className: "".concat(prefixCls, "-content")
        }, $title, paragraphNode);
      }
      var cls = (0, import_classnames58.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-with-avatar"), hasAvatar), _defineProperty(_classNames, "".concat(prefixCls, "-active"), active), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-round"), round), _classNames), className);
      return /* @__PURE__ */ React167.createElement("div", {
        className: cls,
        style: style2
      }, avatarNode, contentNode);
    }
    return typeof children !== "undefined" ? children : null;
  };
  Skeleton.Button = Button_default;
  Skeleton.Avatar = Avatar_default;
  Skeleton.Input = Input_default2;
  Skeleton.Image = Image_default;
  Skeleton.Node = Node_default;
  var Skeleton_default = Skeleton;

  // node_modules/antd/es/skeleton/index.js
  var skeleton_default = Skeleton_default;

  // node_modules/@ant-design/icons/es/icons/PlusOutlined.js
  var React168 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/PlusOutlined.js
  var PlusOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "defs", "attrs": {}, "children": [{ "tag": "style", "attrs": {} }] }, { "tag": "path", "attrs": { "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z" } }, { "tag": "path", "attrs": { "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z" } }] }, "name": "plus", "theme": "outlined" };
  var PlusOutlined_default = PlusOutlined;

  // node_modules/@ant-design/icons/es/icons/PlusOutlined.js
  var PlusOutlined2 = function PlusOutlined3(props, ref) {
    return /* @__PURE__ */ React168.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: PlusOutlined_default
    }));
  };
  PlusOutlined2.displayName = "PlusOutlined";
  var PlusOutlined_default2 = /* @__PURE__ */ React168.forwardRef(PlusOutlined2);

  // node_modules/antd/es/tabs/index.js
  var import_classnames65 = __toESM(require_classnames());

  // node_modules/rc-tabs/es/Tabs.js
  var React179 = __toESM(require_react());
  var import_react51 = __toESM(require_react());
  var import_classnames64 = __toESM(require_classnames());

  // node_modules/rc-tabs/es/TabPanelList/index.js
  var React170 = __toESM(require_react());
  var import_classnames60 = __toESM(require_classnames());

  // node_modules/rc-tabs/es/TabContext.js
  var import_react41 = __toESM(require_react());
  var TabContext_default = /* @__PURE__ */ (0, import_react41.createContext)(null);

  // node_modules/rc-tabs/es/TabPanelList/TabPane.js
  var React169 = __toESM(require_react());
  var import_classnames59 = __toESM(require_classnames());
  var TabPane = /* @__PURE__ */ React169.forwardRef(function(_ref, ref) {
    var prefixCls = _ref.prefixCls, className = _ref.className, style2 = _ref.style, id2 = _ref.id, active = _ref.active, tabKey = _ref.tabKey, children = _ref.children;
    return /* @__PURE__ */ React169.createElement("div", {
      id: id2 && "".concat(id2, "-panel-").concat(tabKey),
      role: "tabpanel",
      tabIndex: active ? 0 : -1,
      "aria-labelledby": id2 && "".concat(id2, "-tab-").concat(tabKey),
      "aria-hidden": !active,
      style: style2,
      className: (0, import_classnames59.default)(prefixCls, active && "".concat(prefixCls, "-active"), className),
      ref
    }, children);
  });
  if (true) {
    TabPane.displayName = "TabPane";
  }
  var TabPane_default = TabPane;

  // node_modules/rc-tabs/es/TabPanelList/index.js
  var _excluded34 = ["key", "forceRender", "style", "className"];
  function TabPanelList(_ref) {
    var id2 = _ref.id, activeKey = _ref.activeKey, animated = _ref.animated, tabPosition = _ref.tabPosition, destroyInactiveTabPane = _ref.destroyInactiveTabPane;
    var _React$useContext = React170.useContext(TabContext_default), prefixCls = _React$useContext.prefixCls, tabs = _React$useContext.tabs;
    var tabPaneAnimated = animated.tabPane;
    var tabPanePrefixCls = "".concat(prefixCls, "-tabpane");
    return /* @__PURE__ */ React170.createElement("div", {
      className: (0, import_classnames60.default)("".concat(prefixCls, "-content-holder"))
    }, /* @__PURE__ */ React170.createElement("div", {
      className: (0, import_classnames60.default)("".concat(prefixCls, "-content"), "".concat(prefixCls, "-content-").concat(tabPosition), _defineProperty({}, "".concat(prefixCls, "-content-animated"), tabPaneAnimated))
    }, tabs.map(function(_ref2) {
      var key2 = _ref2.key, forceRender = _ref2.forceRender, paneStyle = _ref2.style, paneClassName = _ref2.className, restTabProps = _objectWithoutProperties(_ref2, _excluded34);
      var active = key2 === activeKey;
      return /* @__PURE__ */ React170.createElement(es_default3, _extends({
        key: key2,
        visible: active,
        forceRender,
        removeOnLeave: !!destroyInactiveTabPane,
        leavedClassName: "".concat(tabPanePrefixCls, "-hidden")
      }, animated.tabPaneMotion), function(_ref3, ref) {
        var motionStyle = _ref3.style, motionClassName = _ref3.className;
        return /* @__PURE__ */ React170.createElement(TabPane_default, _extends({}, restTabProps, {
          prefixCls: tabPanePrefixCls,
          id: id2,
          tabKey: key2,
          animated: tabPaneAnimated,
          active,
          style: _objectSpread2(_objectSpread2({}, paneStyle), motionStyle),
          className: (0, import_classnames60.default)(paneClassName, motionClassName),
          ref
        }));
      });
    })));
  }

  // node_modules/rc-tabs/es/TabNavList/Wrapper.js
  var import_react49 = __toESM(require_react());

  // node_modules/rc-tabs/es/TabNavList/index.js
  var React177 = __toESM(require_react());
  var import_react48 = __toESM(require_react());
  var import_classnames63 = __toESM(require_classnames());

  // node_modules/rc-tabs/es/hooks/useRaf.js
  var import_react42 = __toESM(require_react());
  function useRaf(callback) {
    var rafRef = (0, import_react42.useRef)();
    var removedRef = (0, import_react42.useRef)(false);
    function trigger() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (!removedRef.current) {
        raf_default.cancel(rafRef.current);
        rafRef.current = raf_default(function() {
          callback.apply(void 0, args);
        });
      }
    }
    (0, import_react42.useEffect)(function() {
      removedRef.current = false;
      return function() {
        removedRef.current = true;
        raf_default.cancel(rafRef.current);
      };
    }, []);
    return trigger;
  }
  function useRafState(defaultState) {
    var batchRef = (0, import_react42.useRef)([]);
    var _useState = (0, import_react42.useState)({}), _useState2 = _slicedToArray(_useState, 2), forceUpdate = _useState2[1];
    var state = (0, import_react42.useRef)(typeof defaultState === "function" ? defaultState() : defaultState);
    var flushUpdate = useRaf(function() {
      var current = state.current;
      batchRef.current.forEach(function(callback) {
        current = callback(current);
      });
      batchRef.current = [];
      state.current = current;
      forceUpdate({});
    });
    function updater(callback) {
      batchRef.current.push(callback);
      flushUpdate();
    }
    return [state.current, updater];
  }

  // node_modules/rc-tabs/es/TabNavList/TabNode.js
  var React171 = __toESM(require_react());
  var import_classnames61 = __toESM(require_classnames());
  function TabNode(_ref, ref) {
    var _classNames;
    var prefixCls = _ref.prefixCls, id2 = _ref.id, active = _ref.active, _ref$tab = _ref.tab, key2 = _ref$tab.key, label = _ref$tab.label, disabled = _ref$tab.disabled, closeIcon = _ref$tab.closeIcon, closable = _ref.closable, renderWrapper = _ref.renderWrapper, removeAriaLabel = _ref.removeAriaLabel, editable = _ref.editable, onClick = _ref.onClick, onRemove = _ref.onRemove, onFocus2 = _ref.onFocus, style2 = _ref.style;
    var tabPrefix = "".concat(prefixCls, "-tab");
    React171.useEffect(function() {
      return onRemove;
    }, []);
    var removable = editable && closable !== false && !disabled;
    function onInternalClick(e3) {
      if (disabled) {
        return;
      }
      onClick(e3);
    }
    function onRemoveTab(event) {
      event.preventDefault();
      event.stopPropagation();
      editable.onEdit("remove", {
        key: key2,
        event
      });
    }
    var node = /* @__PURE__ */ React171.createElement("div", {
      key: key2,
      ref,
      className: (0, import_classnames61.default)(tabPrefix, (_classNames = {}, _defineProperty(_classNames, "".concat(tabPrefix, "-with-remove"), removable), _defineProperty(_classNames, "".concat(tabPrefix, "-active"), active), _defineProperty(_classNames, "".concat(tabPrefix, "-disabled"), disabled), _classNames)),
      style: style2,
      onClick: onInternalClick
    }, /* @__PURE__ */ React171.createElement("div", {
      role: "tab",
      "aria-selected": active,
      id: id2 && "".concat(id2, "-tab-").concat(key2),
      className: "".concat(tabPrefix, "-btn"),
      "aria-controls": id2 && "".concat(id2, "-panel-").concat(key2),
      "aria-disabled": disabled,
      tabIndex: disabled ? null : 0,
      onClick: function onClick2(e3) {
        e3.stopPropagation();
        onInternalClick(e3);
      },
      onKeyDown: function onKeyDown2(e3) {
        if ([KeyCode_default.SPACE, KeyCode_default.ENTER].includes(e3.which)) {
          e3.preventDefault();
          onInternalClick(e3);
        }
      },
      onFocus: onFocus2
    }, label), removable && /* @__PURE__ */ React171.createElement("button", {
      type: "button",
      "aria-label": removeAriaLabel || "remove",
      tabIndex: 0,
      className: "".concat(tabPrefix, "-remove"),
      onClick: function onClick2(e3) {
        e3.stopPropagation();
        onRemoveTab(e3);
      }
    }, closeIcon || editable.removeIcon || "\xD7"));
    return renderWrapper ? renderWrapper(node) : node;
  }
  var TabNode_default = /* @__PURE__ */ React171.forwardRef(TabNode);

  // node_modules/rc-tabs/es/hooks/useOffsets.js
  var import_react43 = __toESM(require_react());
  var DEFAULT_SIZE = {
    width: 0,
    height: 0,
    left: 0,
    top: 0
  };
  function useOffsets(tabs, tabSizes, holderScrollWidth) {
    return (0, import_react43.useMemo)(function() {
      var _tabs$;
      var map3 = /* @__PURE__ */ new Map();
      var lastOffset = tabSizes.get((_tabs$ = tabs[0]) === null || _tabs$ === void 0 ? void 0 : _tabs$.key) || DEFAULT_SIZE;
      var rightOffset = lastOffset.left + lastOffset.width;
      for (var i3 = 0; i3 < tabs.length; i3 += 1) {
        var key2 = tabs[i3].key;
        var data = tabSizes.get(key2);
        if (!data) {
          var _tabs;
          data = tabSizes.get((_tabs = tabs[i3 - 1]) === null || _tabs === void 0 ? void 0 : _tabs.key) || DEFAULT_SIZE;
        }
        var entity = map3.get(key2) || _objectSpread2({}, data);
        entity.right = rightOffset - entity.left - entity.width;
        map3.set(key2, entity);
      }
      return map3;
    }, [tabs.map(function(tab) {
      return tab.key;
    }).join("_"), tabSizes, holderScrollWidth]);
  }

  // node_modules/rc-tabs/es/hooks/useVisibleRange.js
  var import_react44 = __toESM(require_react());
  var DEFAULT_SIZE2 = {
    width: 0,
    height: 0,
    left: 0,
    top: 0,
    right: 0
  };
  function useVisibleRange(tabOffsets, containerSize, tabContentNodeSize, addNodeSize, _ref) {
    var tabs = _ref.tabs, tabPosition = _ref.tabPosition, rtl3 = _ref.rtl;
    var unit;
    var position;
    var transformSize;
    if (["top", "bottom"].includes(tabPosition)) {
      unit = "width";
      position = rtl3 ? "right" : "left";
      transformSize = Math.abs(containerSize.left);
    } else {
      unit = "height";
      position = "top";
      transformSize = -containerSize.top;
    }
    var basicSize = containerSize[unit];
    var tabContentSize = tabContentNodeSize[unit];
    var addSize = addNodeSize[unit];
    var mergedBasicSize = basicSize;
    if (tabContentSize + addSize > basicSize && tabContentSize < basicSize) {
      mergedBasicSize = basicSize - addSize;
    }
    return (0, import_react44.useMemo)(function() {
      if (!tabs.length) {
        return [0, 0];
      }
      var len = tabs.length;
      var endIndex = len;
      for (var i3 = 0; i3 < len; i3 += 1) {
        var offset3 = tabOffsets.get(tabs[i3].key) || DEFAULT_SIZE2;
        if (offset3[position] + offset3[unit] > transformSize + mergedBasicSize) {
          endIndex = i3 - 1;
          break;
        }
      }
      var startIndex = 0;
      for (var _i = len - 1; _i >= 0; _i -= 1) {
        var _offset = tabOffsets.get(tabs[_i].key) || DEFAULT_SIZE2;
        if (_offset[position] < transformSize) {
          startIndex = _i + 1;
          break;
        }
      }
      return [startIndex, endIndex];
    }, [tabOffsets, transformSize, mergedBasicSize, tabPosition, tabs.map(function(tab) {
      return tab.key;
    }).join("_"), rtl3]);
  }

  // node_modules/rc-tabs/es/TabNavList/OperationNode.js
  var React173 = __toESM(require_react());
  var import_classnames62 = __toESM(require_classnames());
  var import_react45 = __toESM(require_react());

  // node_modules/rc-tabs/es/TabNavList/AddButton.js
  var React172 = __toESM(require_react());
  function AddButton(_ref, ref) {
    var prefixCls = _ref.prefixCls, editable = _ref.editable, locale4 = _ref.locale, style2 = _ref.style;
    if (!editable || editable.showAdd === false) {
      return null;
    }
    return /* @__PURE__ */ React172.createElement("button", {
      ref,
      type: "button",
      className: "".concat(prefixCls, "-nav-add"),
      style: style2,
      "aria-label": (locale4 === null || locale4 === void 0 ? void 0 : locale4.addAriaLabel) || "Add tab",
      onClick: function onClick(event) {
        editable.onEdit("add", {
          event
        });
      }
    }, editable.addIcon || "+");
  }
  var AddButton_default = /* @__PURE__ */ React172.forwardRef(AddButton);

  // node_modules/rc-tabs/es/TabNavList/OperationNode.js
  function OperationNode(_ref, ref) {
    var prefixCls = _ref.prefixCls, id2 = _ref.id, tabs = _ref.tabs, locale4 = _ref.locale, mobile = _ref.mobile, _ref$moreIcon = _ref.moreIcon, moreIcon = _ref$moreIcon === void 0 ? "More" : _ref$moreIcon, moreTransitionName = _ref.moreTransitionName, style2 = _ref.style, className = _ref.className, editable = _ref.editable, tabBarGutter = _ref.tabBarGutter, rtl3 = _ref.rtl, removeAriaLabel = _ref.removeAriaLabel, onTabClick = _ref.onTabClick, getPopupContainer = _ref.getPopupContainer, popupClassName = _ref.popupClassName;
    var _useState = (0, import_react45.useState)(false), _useState2 = _slicedToArray(_useState, 2), open = _useState2[0], setOpen = _useState2[1];
    var _useState3 = (0, import_react45.useState)(null), _useState4 = _slicedToArray(_useState3, 2), selectedKey = _useState4[0], setSelectedKey = _useState4[1];
    var popupId = "".concat(id2, "-more-popup");
    var dropdownPrefix = "".concat(prefixCls, "-dropdown");
    var selectedItemId = selectedKey !== null ? "".concat(popupId, "-").concat(selectedKey) : null;
    var dropdownAriaLabel = locale4 === null || locale4 === void 0 ? void 0 : locale4.dropdownAriaLabel;
    function onRemoveTab(event, key2) {
      event.preventDefault();
      event.stopPropagation();
      editable.onEdit("remove", {
        key: key2,
        event
      });
    }
    var menu = /* @__PURE__ */ React173.createElement(es_default11, {
      onClick: function onClick(_ref2) {
        var key2 = _ref2.key, domEvent = _ref2.domEvent;
        onTabClick(key2, domEvent);
        setOpen(false);
      },
      prefixCls: "".concat(dropdownPrefix, "-menu"),
      id: popupId,
      tabIndex: -1,
      role: "listbox",
      "aria-activedescendant": selectedItemId,
      selectedKeys: [selectedKey],
      "aria-label": dropdownAriaLabel !== void 0 ? dropdownAriaLabel : "expanded dropdown"
    }, tabs.map(function(tab) {
      var removable = editable && tab.closable !== false && !tab.disabled;
      return /* @__PURE__ */ React173.createElement(MenuItem_default, {
        key: tab.key,
        id: "".concat(popupId, "-").concat(tab.key),
        role: "option",
        "aria-controls": id2 && "".concat(id2, "-panel-").concat(tab.key),
        disabled: tab.disabled
      }, /* @__PURE__ */ React173.createElement("span", null, tab.label), removable && /* @__PURE__ */ React173.createElement("button", {
        type: "button",
        "aria-label": removeAriaLabel || "remove",
        tabIndex: 0,
        className: "".concat(dropdownPrefix, "-menu-item-remove"),
        onClick: function onClick(e3) {
          e3.stopPropagation();
          onRemoveTab(e3, tab.key);
        }
      }, tab.closeIcon || editable.removeIcon || "\xD7"));
    }));
    function selectOffset(offset3) {
      var enabledTabs = tabs.filter(function(tab2) {
        return !tab2.disabled;
      });
      var selectedIndex = enabledTabs.findIndex(function(tab2) {
        return tab2.key === selectedKey;
      }) || 0;
      var len = enabledTabs.length;
      for (var i3 = 0; i3 < len; i3 += 1) {
        selectedIndex = (selectedIndex + offset3 + len) % len;
        var tab = enabledTabs[selectedIndex];
        if (!tab.disabled) {
          setSelectedKey(tab.key);
          return;
        }
      }
    }
    function onKeyDown2(e3) {
      var which = e3.which;
      if (!open) {
        if ([KeyCode_default.DOWN, KeyCode_default.SPACE, KeyCode_default.ENTER].includes(which)) {
          setOpen(true);
          e3.preventDefault();
        }
        return;
      }
      switch (which) {
        case KeyCode_default.UP:
          selectOffset(-1);
          e3.preventDefault();
          break;
        case KeyCode_default.DOWN:
          selectOffset(1);
          e3.preventDefault();
          break;
        case KeyCode_default.ESC:
          setOpen(false);
          break;
        case KeyCode_default.SPACE:
        case KeyCode_default.ENTER:
          if (selectedKey !== null)
            onTabClick(selectedKey, e3);
          break;
      }
    }
    (0, import_react45.useEffect)(function() {
      var ele = document.getElementById(selectedItemId);
      if (ele && ele.scrollIntoView) {
        ele.scrollIntoView(false);
      }
    }, [selectedKey]);
    (0, import_react45.useEffect)(function() {
      if (!open) {
        setSelectedKey(null);
      }
    }, [open]);
    var moreStyle = _defineProperty({}, rtl3 ? "marginRight" : "marginLeft", tabBarGutter);
    if (!tabs.length) {
      moreStyle.visibility = "hidden";
      moreStyle.order = 1;
    }
    var overlayClassName = (0, import_classnames62.default)(_defineProperty({}, "".concat(dropdownPrefix, "-rtl"), rtl3));
    var moreNode = mobile ? null : /* @__PURE__ */ React173.createElement(es_default12, {
      prefixCls: dropdownPrefix,
      overlay: menu,
      trigger: ["hover"],
      visible: tabs.length ? open : false,
      transitionName: moreTransitionName,
      onVisibleChange: setOpen,
      overlayClassName: (0, import_classnames62.default)(overlayClassName, popupClassName),
      mouseEnterDelay: 0.1,
      mouseLeaveDelay: 0.1,
      getPopupContainer
    }, /* @__PURE__ */ React173.createElement("button", {
      type: "button",
      className: "".concat(prefixCls, "-nav-more"),
      style: moreStyle,
      tabIndex: -1,
      "aria-hidden": "true",
      "aria-haspopup": "listbox",
      "aria-controls": popupId,
      id: "".concat(id2, "-more"),
      "aria-expanded": open,
      onKeyDown: onKeyDown2
    }, moreIcon));
    return /* @__PURE__ */ React173.createElement("div", {
      className: (0, import_classnames62.default)("".concat(prefixCls, "-nav-operations"), className),
      style: style2,
      ref
    }, moreNode, /* @__PURE__ */ React173.createElement(AddButton_default, {
      prefixCls,
      locale: locale4,
      editable
    }));
  }
  var OperationNode_default = /* @__PURE__ */ React173.memo(/* @__PURE__ */ React173.forwardRef(OperationNode), function(_, next) {
    return (
      // https://github.com/ant-design/ant-design/issues/32544
      // We'd better remove syntactic sugar in `rc-menu` since this has perf issue
      next.tabMoving
    );
  });

  // node_modules/rc-tabs/es/hooks/useTouchMove.js
  var React174 = __toESM(require_react());
  var import_react46 = __toESM(require_react());
  var MIN_SWIPE_DISTANCE = 0.1;
  var STOP_SWIPE_DISTANCE = 0.01;
  var REFRESH_INTERVAL = 20;
  var SPEED_OFF_MULTIPLE = Math.pow(0.995, REFRESH_INTERVAL);
  function useTouchMove(ref, onOffset) {
    var _useState = (0, import_react46.useState)(), _useState2 = _slicedToArray(_useState, 2), touchPosition = _useState2[0], setTouchPosition = _useState2[1];
    var _useState3 = (0, import_react46.useState)(0), _useState4 = _slicedToArray(_useState3, 2), lastTimestamp = _useState4[0], setLastTimestamp = _useState4[1];
    var _useState5 = (0, import_react46.useState)(0), _useState6 = _slicedToArray(_useState5, 2), lastTimeDiff = _useState6[0], setLastTimeDiff = _useState6[1];
    var _useState7 = (0, import_react46.useState)(), _useState8 = _slicedToArray(_useState7, 2), lastOffset = _useState8[0], setLastOffset = _useState8[1];
    var motionRef = (0, import_react46.useRef)();
    function onTouchStart(e3) {
      var _e$touches$ = e3.touches[0], screenX = _e$touches$.screenX, screenY = _e$touches$.screenY;
      setTouchPosition({
        x: screenX,
        y: screenY
      });
      window.clearInterval(motionRef.current);
    }
    function onTouchMove(e3) {
      if (!touchPosition)
        return;
      e3.preventDefault();
      var _e$touches$2 = e3.touches[0], screenX = _e$touches$2.screenX, screenY = _e$touches$2.screenY;
      setTouchPosition({
        x: screenX,
        y: screenY
      });
      var offsetX = screenX - touchPosition.x;
      var offsetY = screenY - touchPosition.y;
      onOffset(offsetX, offsetY);
      var now3 = Date.now();
      setLastTimestamp(now3);
      setLastTimeDiff(now3 - lastTimestamp);
      setLastOffset({
        x: offsetX,
        y: offsetY
      });
    }
    function onTouchEnd() {
      if (!touchPosition)
        return;
      setTouchPosition(null);
      setLastOffset(null);
      if (lastOffset) {
        var distanceX = lastOffset.x / lastTimeDiff;
        var distanceY = lastOffset.y / lastTimeDiff;
        var absX = Math.abs(distanceX);
        var absY = Math.abs(distanceY);
        if (Math.max(absX, absY) < MIN_SWIPE_DISTANCE)
          return;
        var currentX = distanceX;
        var currentY = distanceY;
        motionRef.current = window.setInterval(function() {
          if (Math.abs(currentX) < STOP_SWIPE_DISTANCE && Math.abs(currentY) < STOP_SWIPE_DISTANCE) {
            window.clearInterval(motionRef.current);
            return;
          }
          currentX *= SPEED_OFF_MULTIPLE;
          currentY *= SPEED_OFF_MULTIPLE;
          onOffset(currentX * REFRESH_INTERVAL, currentY * REFRESH_INTERVAL);
        }, REFRESH_INTERVAL);
      }
    }
    var lastWheelDirectionRef = (0, import_react46.useRef)();
    function onWheel(e3) {
      var deltaX = e3.deltaX, deltaY = e3.deltaY;
      var mixed = 0;
      var absX = Math.abs(deltaX);
      var absY = Math.abs(deltaY);
      if (absX === absY) {
        mixed = lastWheelDirectionRef.current === "x" ? deltaX : deltaY;
      } else if (absX > absY) {
        mixed = deltaX;
        lastWheelDirectionRef.current = "x";
      } else {
        mixed = deltaY;
        lastWheelDirectionRef.current = "y";
      }
      if (onOffset(-mixed, -mixed)) {
        e3.preventDefault();
      }
    }
    var touchEventsRef = (0, import_react46.useRef)(null);
    touchEventsRef.current = {
      onTouchStart,
      onTouchMove,
      onTouchEnd,
      onWheel
    };
    React174.useEffect(function() {
      function onProxyTouchStart(e3) {
        touchEventsRef.current.onTouchStart(e3);
      }
      function onProxyTouchMove(e3) {
        touchEventsRef.current.onTouchMove(e3);
      }
      function onProxyTouchEnd(e3) {
        touchEventsRef.current.onTouchEnd(e3);
      }
      function onProxyWheel(e3) {
        touchEventsRef.current.onWheel(e3);
      }
      document.addEventListener("touchmove", onProxyTouchMove, {
        passive: false
      });
      document.addEventListener("touchend", onProxyTouchEnd, {
        passive: false
      });
      ref.current.addEventListener("touchstart", onProxyTouchStart, {
        passive: false
      });
      ref.current.addEventListener("wheel", onProxyWheel);
      return function() {
        document.removeEventListener("touchmove", onProxyTouchMove);
        document.removeEventListener("touchend", onProxyTouchEnd);
      };
    }, []);
  }

  // node_modules/rc-tabs/es/hooks/useRefs.js
  var React175 = __toESM(require_react());
  var import_react47 = __toESM(require_react());
  function useRefs() {
    var cacheRefs = (0, import_react47.useRef)(/* @__PURE__ */ new Map());
    function getRef(key2) {
      if (!cacheRefs.current.has(key2)) {
        cacheRefs.current.set(key2, /* @__PURE__ */ React175.createRef());
      }
      return cacheRefs.current.get(key2);
    }
    function removeRef(key2) {
      cacheRefs.current.delete(key2);
    }
    return [getRef, removeRef];
  }

  // node_modules/rc-tabs/es/hooks/useSyncState.js
  var React176 = __toESM(require_react());
  function useSyncState(defaultState, onChange3) {
    var stateRef = React176.useRef(defaultState);
    var _React$useState = React176.useState({}), _React$useState2 = _slicedToArray(_React$useState, 2), forceUpdate = _React$useState2[1];
    function setState(updater) {
      var newValue = typeof updater === "function" ? updater(stateRef.current) : updater;
      if (newValue !== stateRef.current) {
        onChange3(newValue, stateRef.current);
      }
      stateRef.current = newValue;
      forceUpdate({});
    }
    return [stateRef.current, setState];
  }

  // node_modules/rc-tabs/es/TabNavList/index.js
  var ExtraContent = function ExtraContent2(_ref) {
    var position = _ref.position, prefixCls = _ref.prefixCls, extra = _ref.extra;
    if (!extra)
      return null;
    var content;
    var assertExtra = {};
    if (extra && _typeof(extra) === "object" && !/* @__PURE__ */ React177.isValidElement(extra)) {
      assertExtra = extra;
    } else {
      assertExtra.right = extra;
    }
    if (position === "right") {
      content = assertExtra.right;
    }
    if (position === "left") {
      content = assertExtra.left;
    }
    return content ? /* @__PURE__ */ React177.createElement("div", {
      className: "".concat(prefixCls, "-extra-content")
    }, content) : null;
  };
  function TabNavList(props, ref) {
    var _classNames;
    var _React$useContext = React177.useContext(TabContext_default), prefixCls = _React$useContext.prefixCls, tabs = _React$useContext.tabs;
    var className = props.className, style2 = props.style, id2 = props.id, animated = props.animated, activeKey = props.activeKey, rtl3 = props.rtl, extra = props.extra, editable = props.editable, locale4 = props.locale, tabPosition = props.tabPosition, tabBarGutter = props.tabBarGutter, children = props.children, onTabClick = props.onTabClick, onTabScroll = props.onTabScroll;
    var tabsWrapperRef = (0, import_react48.useRef)();
    var tabListRef = (0, import_react48.useRef)();
    var operationsRef = (0, import_react48.useRef)();
    var innerAddButtonRef = (0, import_react48.useRef)();
    var _useRefs = useRefs(), _useRefs2 = _slicedToArray(_useRefs, 2), getBtnRef = _useRefs2[0], removeBtnRef = _useRefs2[1];
    var tabPositionTopOrBottom = tabPosition === "top" || tabPosition === "bottom";
    var _useSyncState = useSyncState(0, function(next, prev) {
      if (tabPositionTopOrBottom && onTabScroll) {
        onTabScroll({
          direction: next > prev ? "left" : "right"
        });
      }
    }), _useSyncState2 = _slicedToArray(_useSyncState, 2), transformLeft = _useSyncState2[0], setTransformLeft = _useSyncState2[1];
    var _useSyncState3 = useSyncState(0, function(next, prev) {
      if (!tabPositionTopOrBottom && onTabScroll) {
        onTabScroll({
          direction: next > prev ? "top" : "bottom"
        });
      }
    }), _useSyncState4 = _slicedToArray(_useSyncState3, 2), transformTop = _useSyncState4[0], setTransformTop = _useSyncState4[1];
    var _useState = (0, import_react48.useState)(0), _useState2 = _slicedToArray(_useState, 2), wrapperScrollWidth = _useState2[0], setWrapperScrollWidth = _useState2[1];
    var _useState3 = (0, import_react48.useState)(0), _useState4 = _slicedToArray(_useState3, 2), wrapperScrollHeight = _useState4[0], setWrapperScrollHeight = _useState4[1];
    var _useState5 = (0, import_react48.useState)(null), _useState6 = _slicedToArray(_useState5, 2), wrapperWidth = _useState6[0], setWrapperWidth = _useState6[1];
    var _useState7 = (0, import_react48.useState)(null), _useState8 = _slicedToArray(_useState7, 2), wrapperHeight = _useState8[0], setWrapperHeight = _useState8[1];
    var _useState9 = (0, import_react48.useState)(0), _useState10 = _slicedToArray(_useState9, 2), addWidth = _useState10[0], setAddWidth = _useState10[1];
    var _useState11 = (0, import_react48.useState)(0), _useState12 = _slicedToArray(_useState11, 2), addHeight = _useState12[0], setAddHeight = _useState12[1];
    var _useRafState = useRafState(/* @__PURE__ */ new Map()), _useRafState2 = _slicedToArray(_useRafState, 2), tabSizes = _useRafState2[0], setTabSizes = _useRafState2[1];
    var tabOffsets = useOffsets(tabs, tabSizes, wrapperScrollWidth);
    var operationsHiddenClassName = "".concat(prefixCls, "-nav-operations-hidden");
    var transformMin = 0;
    var transformMax = 0;
    if (!tabPositionTopOrBottom) {
      transformMin = Math.min(0, wrapperHeight - wrapperScrollHeight);
      transformMax = 0;
    } else if (rtl3) {
      transformMin = 0;
      transformMax = Math.max(0, wrapperScrollWidth - wrapperWidth);
    } else {
      transformMin = Math.min(0, wrapperWidth - wrapperScrollWidth);
      transformMax = 0;
    }
    function alignInRange(value) {
      if (value < transformMin) {
        return transformMin;
      }
      if (value > transformMax) {
        return transformMax;
      }
      return value;
    }
    var touchMovingRef = (0, import_react48.useRef)();
    var _useState13 = (0, import_react48.useState)(), _useState14 = _slicedToArray(_useState13, 2), lockAnimation = _useState14[0], setLockAnimation = _useState14[1];
    function doLockAnimation() {
      setLockAnimation(Date.now());
    }
    function clearTouchMoving() {
      window.clearTimeout(touchMovingRef.current);
    }
    useTouchMove(tabsWrapperRef, function(offsetX, offsetY) {
      function doMove(setState, offset3) {
        setState(function(value) {
          var newValue = alignInRange(value + offset3);
          return newValue;
        });
      }
      if (tabPositionTopOrBottom) {
        if (wrapperWidth >= wrapperScrollWidth) {
          return false;
        }
        doMove(setTransformLeft, offsetX);
      } else {
        if (wrapperHeight >= wrapperScrollHeight) {
          return false;
        }
        doMove(setTransformTop, offsetY);
      }
      clearTouchMoving();
      doLockAnimation();
      return true;
    });
    (0, import_react48.useEffect)(function() {
      clearTouchMoving();
      if (lockAnimation) {
        touchMovingRef.current = window.setTimeout(function() {
          setLockAnimation(0);
        }, 100);
      }
      return clearTouchMoving;
    }, [lockAnimation]);
    function scrollToTab() {
      var key2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : activeKey;
      var tabOffset = tabOffsets.get(key2) || {
        width: 0,
        height: 0,
        left: 0,
        right: 0,
        top: 0
      };
      if (tabPositionTopOrBottom) {
        var newTransform = transformLeft;
        if (rtl3) {
          if (tabOffset.right < transformLeft) {
            newTransform = tabOffset.right;
          } else if (tabOffset.right + tabOffset.width > transformLeft + wrapperWidth) {
            newTransform = tabOffset.right + tabOffset.width - wrapperWidth;
          }
        } else if (tabOffset.left < -transformLeft) {
          newTransform = -tabOffset.left;
        } else if (tabOffset.left + tabOffset.width > -transformLeft + wrapperWidth) {
          newTransform = -(tabOffset.left + tabOffset.width - wrapperWidth);
        }
        setTransformTop(0);
        setTransformLeft(alignInRange(newTransform));
      } else {
        var _newTransform = transformTop;
        if (tabOffset.top < -transformTop) {
          _newTransform = -tabOffset.top;
        } else if (tabOffset.top + tabOffset.height > -transformTop + wrapperHeight) {
          _newTransform = -(tabOffset.top + tabOffset.height - wrapperHeight);
        }
        setTransformLeft(0);
        setTransformTop(alignInRange(_newTransform));
      }
    }
    var _useVisibleRange = useVisibleRange(tabOffsets, {
      width: wrapperWidth,
      height: wrapperHeight,
      left: transformLeft,
      top: transformTop
    }, {
      width: wrapperScrollWidth,
      height: wrapperScrollHeight
    }, {
      width: addWidth,
      height: addHeight
    }, _objectSpread2(_objectSpread2({}, props), {}, {
      tabs
    })), _useVisibleRange2 = _slicedToArray(_useVisibleRange, 2), visibleStart = _useVisibleRange2[0], visibleEnd = _useVisibleRange2[1];
    var tabNodeStyle = {};
    if (tabPosition === "top" || tabPosition === "bottom") {
      tabNodeStyle[rtl3 ? "marginRight" : "marginLeft"] = tabBarGutter;
    } else {
      tabNodeStyle.marginTop = tabBarGutter;
    }
    var tabNodes = tabs.map(function(tab, i3) {
      var key2 = tab.key;
      return /* @__PURE__ */ React177.createElement(TabNode_default, {
        id: id2,
        prefixCls,
        key: key2,
        tab,
        style: i3 === 0 ? void 0 : tabNodeStyle,
        closable: tab.closable,
        editable,
        active: key2 === activeKey,
        renderWrapper: children,
        removeAriaLabel: locale4 === null || locale4 === void 0 ? void 0 : locale4.removeAriaLabel,
        ref: getBtnRef(key2),
        onClick: function onClick(e3) {
          onTabClick(key2, e3);
        },
        onRemove: function onRemove() {
          removeBtnRef(key2);
        },
        onFocus: function onFocus2() {
          scrollToTab(key2);
          doLockAnimation();
          if (!tabsWrapperRef.current) {
            return;
          }
          if (!rtl3) {
            tabsWrapperRef.current.scrollLeft = 0;
          }
          tabsWrapperRef.current.scrollTop = 0;
        }
      });
    });
    var onListHolderResize = useRaf(function() {
      var _tabsWrapperRef$curre, _tabsWrapperRef$curre2, _innerAddButtonRef$cu, _innerAddButtonRef$cu2, _tabListRef$current, _tabListRef$current2;
      var offsetWidth = ((_tabsWrapperRef$curre = tabsWrapperRef.current) === null || _tabsWrapperRef$curre === void 0 ? void 0 : _tabsWrapperRef$curre.offsetWidth) || 0;
      var offsetHeight = ((_tabsWrapperRef$curre2 = tabsWrapperRef.current) === null || _tabsWrapperRef$curre2 === void 0 ? void 0 : _tabsWrapperRef$curre2.offsetHeight) || 0;
      var newAddWidth = ((_innerAddButtonRef$cu = innerAddButtonRef.current) === null || _innerAddButtonRef$cu === void 0 ? void 0 : _innerAddButtonRef$cu.offsetWidth) || 0;
      var newAddHeight = ((_innerAddButtonRef$cu2 = innerAddButtonRef.current) === null || _innerAddButtonRef$cu2 === void 0 ? void 0 : _innerAddButtonRef$cu2.offsetHeight) || 0;
      setWrapperWidth(offsetWidth);
      setWrapperHeight(offsetHeight);
      setAddWidth(newAddWidth);
      setAddHeight(newAddHeight);
      var newWrapperScrollWidth = (((_tabListRef$current = tabListRef.current) === null || _tabListRef$current === void 0 ? void 0 : _tabListRef$current.offsetWidth) || 0) - newAddWidth;
      var newWrapperScrollHeight = (((_tabListRef$current2 = tabListRef.current) === null || _tabListRef$current2 === void 0 ? void 0 : _tabListRef$current2.offsetHeight) || 0) - newAddHeight;
      setWrapperScrollWidth(newWrapperScrollWidth);
      setWrapperScrollHeight(newWrapperScrollHeight);
      setTabSizes(function() {
        var newSizes = /* @__PURE__ */ new Map();
        tabs.forEach(function(_ref2) {
          var key2 = _ref2.key;
          var btnNode = getBtnRef(key2).current;
          if (btnNode) {
            newSizes.set(key2, {
              width: btnNode.offsetWidth,
              height: btnNode.offsetHeight,
              left: btnNode.offsetLeft,
              top: btnNode.offsetTop
            });
          }
        });
        return newSizes;
      });
    });
    var startHiddenTabs = tabs.slice(0, visibleStart);
    var endHiddenTabs = tabs.slice(visibleEnd + 1);
    var hiddenTabs = [].concat(_toConsumableArray(startHiddenTabs), _toConsumableArray(endHiddenTabs));
    var _useState15 = (0, import_react48.useState)(), _useState16 = _slicedToArray(_useState15, 2), inkStyle = _useState16[0], setInkStyle = _useState16[1];
    var activeTabOffset = tabOffsets.get(activeKey);
    var inkBarRafRef = (0, import_react48.useRef)();
    function cleanInkBarRaf() {
      raf_default.cancel(inkBarRafRef.current);
    }
    (0, import_react48.useEffect)(function() {
      var newInkStyle = {};
      if (activeTabOffset) {
        if (tabPositionTopOrBottom) {
          if (rtl3) {
            newInkStyle.right = activeTabOffset.right;
          } else {
            newInkStyle.left = activeTabOffset.left;
          }
          newInkStyle.width = activeTabOffset.width;
        } else {
          newInkStyle.top = activeTabOffset.top;
          newInkStyle.height = activeTabOffset.height;
        }
      }
      cleanInkBarRaf();
      inkBarRafRef.current = raf_default(function() {
        setInkStyle(newInkStyle);
      });
      return cleanInkBarRaf;
    }, [activeTabOffset, tabPositionTopOrBottom, rtl3]);
    (0, import_react48.useEffect)(function() {
      scrollToTab();
    }, [activeKey, activeTabOffset, tabOffsets, tabPositionTopOrBottom]);
    (0, import_react48.useEffect)(function() {
      onListHolderResize();
    }, [rtl3, tabBarGutter, activeKey, tabs.map(function(tab) {
      return tab.key;
    }).join("_")]);
    var hasDropdown = !!hiddenTabs.length;
    var wrapPrefix = "".concat(prefixCls, "-nav-wrap");
    var pingLeft;
    var pingRight;
    var pingTop;
    var pingBottom;
    if (tabPositionTopOrBottom) {
      if (rtl3) {
        pingRight = transformLeft > 0;
        pingLeft = transformLeft + wrapperWidth < wrapperScrollWidth;
      } else {
        pingLeft = transformLeft < 0;
        pingRight = -transformLeft + wrapperWidth < wrapperScrollWidth;
      }
    } else {
      pingTop = transformTop < 0;
      pingBottom = -transformTop + wrapperHeight < wrapperScrollHeight;
    }
    return /* @__PURE__ */ React177.createElement("div", {
      ref,
      role: "tablist",
      className: (0, import_classnames63.default)("".concat(prefixCls, "-nav"), className),
      style: style2,
      onKeyDown: function onKeyDown2() {
        doLockAnimation();
      }
    }, /* @__PURE__ */ React177.createElement(ExtraContent, {
      position: "left",
      extra,
      prefixCls
    }), /* @__PURE__ */ React177.createElement(es_default, {
      onResize: onListHolderResize
    }, /* @__PURE__ */ React177.createElement("div", {
      className: (0, import_classnames63.default)(wrapPrefix, (_classNames = {}, _defineProperty(_classNames, "".concat(wrapPrefix, "-ping-left"), pingLeft), _defineProperty(_classNames, "".concat(wrapPrefix, "-ping-right"), pingRight), _defineProperty(_classNames, "".concat(wrapPrefix, "-ping-top"), pingTop), _defineProperty(_classNames, "".concat(wrapPrefix, "-ping-bottom"), pingBottom), _classNames)),
      ref: tabsWrapperRef
    }, /* @__PURE__ */ React177.createElement(es_default, {
      onResize: onListHolderResize
    }, /* @__PURE__ */ React177.createElement("div", {
      ref: tabListRef,
      className: "".concat(prefixCls, "-nav-list"),
      style: {
        transform: "translate(".concat(transformLeft, "px, ").concat(transformTop, "px)"),
        transition: lockAnimation ? "none" : void 0
      }
    }, tabNodes, /* @__PURE__ */ React177.createElement(AddButton_default, {
      ref: innerAddButtonRef,
      prefixCls,
      locale: locale4,
      editable,
      style: _objectSpread2(_objectSpread2({}, tabNodes.length === 0 ? void 0 : tabNodeStyle), {}, {
        visibility: hasDropdown ? "hidden" : null
      })
    }), /* @__PURE__ */ React177.createElement("div", {
      className: (0, import_classnames63.default)("".concat(prefixCls, "-ink-bar"), _defineProperty({}, "".concat(prefixCls, "-ink-bar-animated"), animated.inkBar)),
      style: inkStyle
    }))))), /* @__PURE__ */ React177.createElement(OperationNode_default, _extends({}, props, {
      removeAriaLabel: locale4 === null || locale4 === void 0 ? void 0 : locale4.removeAriaLabel,
      ref: operationsRef,
      prefixCls,
      tabs: hiddenTabs,
      className: !hasDropdown && operationsHiddenClassName,
      tabMoving: !!lockAnimation
    })), /* @__PURE__ */ React177.createElement(ExtraContent, {
      position: "right",
      extra,
      prefixCls
    }));
  }
  var TabNavList_default = /* @__PURE__ */ React177.forwardRef(TabNavList);

  // node_modules/rc-tabs/es/TabNavList/Wrapper.js
  var import_react50 = __toESM(require_react());
  var _excluded35 = ["renderTabBar"];
  var _excluded211 = ["label", "key"];
  function TabNavListWrapper(_ref) {
    var renderTabBar = _ref.renderTabBar, restProps = _objectWithoutProperties(_ref, _excluded35);
    var _useContext = (0, import_react50.useContext)(TabContext_default), tabs = _useContext.tabs;
    if (renderTabBar) {
      var tabNavBarProps = _objectSpread2(_objectSpread2({}, restProps), {}, {
        // Legacy support. We do not use this actually
        panes: tabs.map(function(_ref2) {
          var label = _ref2.label, key2 = _ref2.key, restTabProps = _objectWithoutProperties(_ref2, _excluded211);
          return /* @__PURE__ */ import_react49.default.createElement(TabPane_default, _extends({
            tab: label,
            key: key2,
            tabKey: key2
          }, restTabProps));
        })
      });
      return renderTabBar(tabNavBarProps, TabNavList_default);
    }
    return /* @__PURE__ */ import_react49.default.createElement(TabNavList_default, restProps);
  }

  // node_modules/rc-tabs/es/hooks/useAnimateConfig.js
  function useAnimateConfig() {
    var animated = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      inkBar: true,
      tabPane: false
    };
    var mergedAnimated;
    if (animated === false) {
      mergedAnimated = {
        inkBar: false,
        tabPane: false
      };
    } else if (animated === true) {
      mergedAnimated = {
        inkBar: true,
        tabPane: false
      };
    } else {
      mergedAnimated = _objectSpread2({
        inkBar: true
      }, _typeof(animated) === "object" ? animated : {});
    }
    if (mergedAnimated.tabPaneMotion && mergedAnimated.tabPane === void 0) {
      mergedAnimated.tabPane = true;
    }
    if (!mergedAnimated.tabPaneMotion && mergedAnimated.tabPane) {
      if (true) {
        warning_default(false, "`animated.tabPane` is true but `animated.tabPaneMotion` is not provided. Motion will not work.");
      }
      mergedAnimated.tabPane = false;
    }
    return mergedAnimated;
  }

  // node_modules/rc-tabs/es/Tabs.js
  var _excluded36 = ["id", "prefixCls", "className", "items", "direction", "activeKey", "defaultActiveKey", "editable", "animated", "tabPosition", "tabBarGutter", "tabBarStyle", "tabBarExtraContent", "locale", "moreIcon", "moreTransitionName", "destroyInactiveTabPane", "renderTabBar", "onChange", "onTabClick", "onTabScroll", "getPopupContainer", "popupClassName"];
  var uuid2 = 0;
  function Tabs(_ref, ref) {
    var _classNames;
    var id2 = _ref.id, _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? "rc-tabs" : _ref$prefixCls, className = _ref.className, items = _ref.items, direction = _ref.direction, activeKey = _ref.activeKey, defaultActiveKey = _ref.defaultActiveKey, editable = _ref.editable, animated = _ref.animated, _ref$tabPosition = _ref.tabPosition, tabPosition = _ref$tabPosition === void 0 ? "top" : _ref$tabPosition, tabBarGutter = _ref.tabBarGutter, tabBarStyle = _ref.tabBarStyle, tabBarExtraContent = _ref.tabBarExtraContent, locale4 = _ref.locale, moreIcon = _ref.moreIcon, moreTransitionName = _ref.moreTransitionName, destroyInactiveTabPane = _ref.destroyInactiveTabPane, renderTabBar = _ref.renderTabBar, onChange3 = _ref.onChange, onTabClick = _ref.onTabClick, onTabScroll = _ref.onTabScroll, getPopupContainer = _ref.getPopupContainer, popupClassName = _ref.popupClassName, restProps = _objectWithoutProperties(_ref, _excluded36);
    var tabs = React179.useMemo(function() {
      return (items || []).filter(function(item) {
        return item && _typeof(item) === "object" && "key" in item;
      });
    }, [items]);
    var rtl3 = direction === "rtl";
    var mergedAnimated = useAnimateConfig(animated);
    var _useState = (0, import_react51.useState)(false), _useState2 = _slicedToArray(_useState, 2), mobile = _useState2[0], setMobile = _useState2[1];
    (0, import_react51.useEffect)(function() {
      setMobile(isMobile_default());
    }, []);
    var _useMergedState = useMergedState(function() {
      var _tabs$;
      return (_tabs$ = tabs[0]) === null || _tabs$ === void 0 ? void 0 : _tabs$.key;
    }, {
      value: activeKey,
      defaultValue: defaultActiveKey
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedActiveKey = _useMergedState2[0], setMergedActiveKey = _useMergedState2[1];
    var _useState3 = (0, import_react51.useState)(function() {
      return tabs.findIndex(function(tab) {
        return tab.key === mergedActiveKey;
      });
    }), _useState4 = _slicedToArray(_useState3, 2), activeIndex = _useState4[0], setActiveIndex = _useState4[1];
    (0, import_react51.useEffect)(function() {
      var newActiveIndex = tabs.findIndex(function(tab) {
        return tab.key === mergedActiveKey;
      });
      if (newActiveIndex === -1) {
        var _tabs$newActiveIndex;
        newActiveIndex = Math.max(0, Math.min(activeIndex, tabs.length - 1));
        setMergedActiveKey((_tabs$newActiveIndex = tabs[newActiveIndex]) === null || _tabs$newActiveIndex === void 0 ? void 0 : _tabs$newActiveIndex.key);
      }
      setActiveIndex(newActiveIndex);
    }, [tabs.map(function(tab) {
      return tab.key;
    }).join("_"), mergedActiveKey, activeIndex]);
    var _useMergedState3 = useMergedState(null, {
      value: id2
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), mergedId = _useMergedState4[0], setMergedId = _useMergedState4[1];
    (0, import_react51.useEffect)(function() {
      if (!id2) {
        setMergedId("rc-tabs-".concat(false ? "test" : uuid2));
        uuid2 += 1;
      }
    }, []);
    function onInternalTabClick(key2, e3) {
      onTabClick === null || onTabClick === void 0 ? void 0 : onTabClick(key2, e3);
      var isActiveChanged = key2 !== mergedActiveKey;
      setMergedActiveKey(key2);
      if (isActiveChanged) {
        onChange3 === null || onChange3 === void 0 ? void 0 : onChange3(key2);
      }
    }
    var sharedProps = {
      id: mergedId,
      activeKey: mergedActiveKey,
      animated: mergedAnimated,
      tabPosition,
      rtl: rtl3,
      mobile
    };
    var tabNavBar;
    var tabNavBarProps = _objectSpread2(_objectSpread2({}, sharedProps), {}, {
      editable,
      locale: locale4,
      moreIcon,
      moreTransitionName,
      tabBarGutter,
      onTabClick: onInternalTabClick,
      onTabScroll,
      extra: tabBarExtraContent,
      style: tabBarStyle,
      panes: null,
      getPopupContainer,
      popupClassName
    });
    return /* @__PURE__ */ React179.createElement(TabContext_default.Provider, {
      value: {
        tabs,
        prefixCls
      }
    }, /* @__PURE__ */ React179.createElement("div", _extends({
      ref,
      id: id2,
      className: (0, import_classnames64.default)(prefixCls, "".concat(prefixCls, "-").concat(tabPosition), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-mobile"), mobile), _defineProperty(_classNames, "".concat(prefixCls, "-editable"), editable), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), rtl3), _classNames), className)
    }, restProps), tabNavBar, /* @__PURE__ */ React179.createElement(TabNavListWrapper, _extends({}, tabNavBarProps, {
      renderTabBar
    })), /* @__PURE__ */ React179.createElement(TabPanelList, _extends({
      destroyInactiveTabPane
    }, sharedProps, {
      animated: mergedAnimated
    }))));
  }
  var ForwardTabs = /* @__PURE__ */ React179.forwardRef(Tabs);
  if (true) {
    ForwardTabs.displayName = "Tabs";
  }
  var Tabs_default = ForwardTabs;

  // node_modules/rc-tabs/es/index.js
  var es_default14 = Tabs_default;

  // node_modules/antd/es/tabs/index.js
  var React181 = __toESM(require_react());

  // node_modules/antd/es/tabs/hooks/useAnimateConfig.js
  var motion = {
    motionAppear: false,
    motionEnter: true,
    motionLeave: true
  };
  function useAnimateConfig2(prefixCls) {
    var animated = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      inkBar: true,
      tabPane: false
    };
    var mergedAnimated;
    if (animated === false) {
      mergedAnimated = {
        inkBar: false,
        tabPane: false
      };
    } else if (animated === true) {
      mergedAnimated = {
        inkBar: true,
        tabPane: true
      };
    } else {
      mergedAnimated = _extends({
        inkBar: true
      }, _typeof(animated) === "object" ? animated : {});
    }
    if (mergedAnimated.tabPane) {
      mergedAnimated.tabPaneMotion = _extends(_extends({}, motion), {
        motionName: getTransitionName3(prefixCls, "switch")
      });
    }
    return mergedAnimated;
  }

  // node_modules/antd/es/tabs/hooks/useLegacyItems.js
  var React180 = __toESM(require_react());
  var __rest17 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  function filter(items) {
    return items.filter(function(item) {
      return item;
    });
  }
  function useLegacyItems(items, children) {
    if (items) {
      return items;
    }
    true ? warning_default2(!children, "Tabs", "Tabs.TabPane is deprecated. Please use `items` directly.") : void 0;
    var childrenItems = toArray(children).map(function(node) {
      if (/* @__PURE__ */ React180.isValidElement(node)) {
        var key2 = node.key, props = node.props;
        var _a = props || {}, tab = _a.tab, restProps = __rest17(_a, ["tab"]);
        var item = _extends(_extends({
          key: String(key2)
        }, restProps), {
          label: tab
        });
        return item;
      }
      return null;
    });
    return filter(childrenItems);
  }

  // node_modules/antd/es/tabs/TabPane.js
  var TabPane2 = function TabPane3() {
    return null;
  };
  if (true) {
    TabPane2.displayName = "DeprecatedTabPane";
  }
  var TabPane_default2 = TabPane2;

  // node_modules/antd/es/tabs/index.js
  var __rest18 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  function Tabs2(_a) {
    var type4 = _a.type, className = _a.className, propSize = _a.size, _onEdit = _a.onEdit, hideAdd = _a.hideAdd, centered = _a.centered, addIcon = _a.addIcon, children = _a.children, items = _a.items, animated = _a.animated, props = __rest18(_a, ["type", "className", "size", "onEdit", "hideAdd", "centered", "addIcon", "children", "items", "animated"]);
    var customizePrefixCls = props.prefixCls, _props$moreIcon = props.moreIcon, moreIcon = _props$moreIcon === void 0 ? /* @__PURE__ */ React181.createElement(EllipsisOutlined_default2, null) : _props$moreIcon;
    var _React$useContext = React181.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var prefixCls = getPrefixCls("tabs", customizePrefixCls);
    var editable;
    if (type4 === "editable-card") {
      editable = {
        onEdit: function onEdit(editType, _ref) {
          var key2 = _ref.key, event = _ref.event;
          _onEdit === null || _onEdit === void 0 ? void 0 : _onEdit(editType === "add" ? event : key2, editType);
        },
        removeIcon: /* @__PURE__ */ React181.createElement(CloseOutlined_default2, null),
        addIcon: addIcon || /* @__PURE__ */ React181.createElement(PlusOutlined_default2, null),
        showAdd: hideAdd !== true
      };
    }
    var rootPrefixCls = getPrefixCls();
    true ? warning_default2(!("onPrevClick" in props) && !("onNextClick" in props), "Tabs", "`onPrevClick` and `onNextClick` has been removed. Please use `onTabScroll` instead.") : void 0;
    var mergedItems = useLegacyItems(items, children);
    var mergedAnimated = useAnimateConfig2(prefixCls, animated);
    return /* @__PURE__ */ React181.createElement(SizeContext_default.Consumer, null, function(contextSize) {
      var _classNames;
      var size = propSize !== void 0 ? propSize : contextSize;
      return /* @__PURE__ */ React181.createElement(es_default14, _extends({
        direction,
        moreTransitionName: "".concat(rootPrefixCls, "-slide-up")
      }, props, {
        items: mergedItems,
        className: (0, import_classnames65.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(size), size), _defineProperty(_classNames, "".concat(prefixCls, "-card"), ["card", "editable-card"].includes(type4)), _defineProperty(_classNames, "".concat(prefixCls, "-editable-card"), type4 === "editable-card"), _defineProperty(_classNames, "".concat(prefixCls, "-centered"), centered), _classNames), className),
        editable,
        moreIcon,
        prefixCls,
        animated: mergedAnimated
      }));
    });
  }
  Tabs2.TabPane = TabPane_default2;
  var tabs_default = Tabs2;

  // node_modules/antd/es/card/Grid.js
  var import_classnames66 = __toESM(require_classnames());
  var React182 = __toESM(require_react());
  var __rest19 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var Grid = function Grid2(_a) {
    var prefixCls = _a.prefixCls, className = _a.className, _a$hoverable = _a.hoverable, hoverable = _a$hoverable === void 0 ? true : _a$hoverable, props = __rest19(_a, ["prefixCls", "className", "hoverable"]);
    return /* @__PURE__ */ React182.createElement(ConfigConsumer, null, function(_ref) {
      var getPrefixCls = _ref.getPrefixCls;
      var prefix = getPrefixCls("card", prefixCls);
      var classString = (0, import_classnames66.default)("".concat(prefix, "-grid"), className, _defineProperty({}, "".concat(prefix, "-grid-hoverable"), hoverable));
      return /* @__PURE__ */ React182.createElement("div", _extends({}, props, {
        className: classString
      }));
    });
  };
  var Grid_default = Grid;

  // node_modules/antd/es/card/Card.js
  var __rest20 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  function getAction(actions) {
    var actionList = actions.map(function(action, index3) {
      return (
        // eslint-disable-next-line react/no-array-index-key
        /* @__PURE__ */ React183.createElement("li", {
          style: {
            width: "".concat(100 / actions.length, "%")
          },
          key: "action-".concat(index3)
        }, /* @__PURE__ */ React183.createElement("span", null, action))
      );
    });
    return actionList;
  }
  var Card = /* @__PURE__ */ React183.forwardRef(function(props, ref) {
    var _extends22, _classNames;
    var _React$useContext = React183.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var size = React183.useContext(SizeContext_default);
    var onTabChange = function onTabChange2(key2) {
      var _a;
      (_a = props.onTabChange) === null || _a === void 0 ? void 0 : _a.call(props, key2);
    };
    var isContainGrid = function isContainGrid2() {
      var containGrid;
      React183.Children.forEach(props.children, function(element) {
        if (element && element.type && element.type === Grid_default) {
          containGrid = true;
        }
      });
      return containGrid;
    };
    var customizePrefixCls = props.prefixCls, className = props.className, extra = props.extra, _props$headStyle = props.headStyle, headStyle = _props$headStyle === void 0 ? {} : _props$headStyle, _props$bodyStyle = props.bodyStyle, bodyStyle = _props$bodyStyle === void 0 ? {} : _props$bodyStyle, title = props.title, loading = props.loading, _props$bordered = props.bordered, bordered = _props$bordered === void 0 ? true : _props$bordered, customizeSize = props.size, type4 = props.type, cover = props.cover, actions = props.actions, tabList = props.tabList, children = props.children, activeTabKey = props.activeTabKey, defaultActiveTabKey = props.defaultActiveTabKey, tabBarExtraContent = props.tabBarExtraContent, hoverable = props.hoverable, _props$tabProps = props.tabProps, tabProps = _props$tabProps === void 0 ? {} : _props$tabProps, others = __rest20(props, ["prefixCls", "className", "extra", "headStyle", "bodyStyle", "title", "loading", "bordered", "size", "type", "cover", "actions", "tabList", "children", "activeTabKey", "defaultActiveTabKey", "tabBarExtraContent", "hoverable", "tabProps"]);
    var prefixCls = getPrefixCls("card", customizePrefixCls);
    var loadingBlock = /* @__PURE__ */ React183.createElement(skeleton_default, {
      loading: true,
      active: true,
      paragraph: {
        rows: 4
      },
      title: false
    }, children);
    var hasActiveTabKey = activeTabKey !== void 0;
    var extraProps = _extends(_extends({}, tabProps), (_extends22 = {}, _defineProperty(_extends22, hasActiveTabKey ? "activeKey" : "defaultActiveKey", hasActiveTabKey ? activeTabKey : defaultActiveTabKey), _defineProperty(_extends22, "tabBarExtraContent", tabBarExtraContent), _extends22));
    var head;
    var tabs = tabList && tabList.length ? /* @__PURE__ */ React183.createElement(tabs_default, _extends({
      size: "large"
    }, extraProps, {
      className: "".concat(prefixCls, "-head-tabs"),
      onChange: onTabChange,
      items: tabList.map(function(item) {
        var _a;
        return {
          label: item.tab,
          key: item.key,
          disabled: (_a = item.disabled) !== null && _a !== void 0 ? _a : false
        };
      })
    })) : null;
    if (title || extra || tabs) {
      head = /* @__PURE__ */ React183.createElement("div", {
        className: "".concat(prefixCls, "-head"),
        style: headStyle
      }, /* @__PURE__ */ React183.createElement("div", {
        className: "".concat(prefixCls, "-head-wrapper")
      }, title && /* @__PURE__ */ React183.createElement("div", {
        className: "".concat(prefixCls, "-head-title")
      }, title), extra && /* @__PURE__ */ React183.createElement("div", {
        className: "".concat(prefixCls, "-extra")
      }, extra)), tabs);
    }
    var coverDom = cover ? /* @__PURE__ */ React183.createElement("div", {
      className: "".concat(prefixCls, "-cover")
    }, cover) : null;
    var body = /* @__PURE__ */ React183.createElement("div", {
      className: "".concat(prefixCls, "-body"),
      style: bodyStyle
    }, loading ? loadingBlock : children);
    var actionDom = actions && actions.length ? /* @__PURE__ */ React183.createElement("ul", {
      className: "".concat(prefixCls, "-actions")
    }, getAction(actions)) : null;
    var divProps = omit(others, ["onTabChange"]);
    var mergedSize = customizeSize || size;
    var classString = (0, import_classnames67.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-loading"), loading), _defineProperty(_classNames, "".concat(prefixCls, "-bordered"), bordered), _defineProperty(_classNames, "".concat(prefixCls, "-hoverable"), hoverable), _defineProperty(_classNames, "".concat(prefixCls, "-contain-grid"), isContainGrid()), _defineProperty(_classNames, "".concat(prefixCls, "-contain-tabs"), tabList && tabList.length), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(mergedSize), mergedSize), _defineProperty(_classNames, "".concat(prefixCls, "-type-").concat(type4), !!type4), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    return /* @__PURE__ */ React183.createElement("div", _extends({
      ref
    }, divProps, {
      className: classString
    }), head, coverDom, body, actionDom);
  });
  var Card_default = Card;

  // node_modules/antd/es/card/Meta.js
  var import_classnames68 = __toESM(require_classnames());
  var React184 = __toESM(require_react());
  var __rest21 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var Meta = function Meta2(props) {
    return /* @__PURE__ */ React184.createElement(ConfigConsumer, null, function(_ref) {
      var getPrefixCls = _ref.getPrefixCls;
      var customizePrefixCls = props.prefixCls, className = props.className, avatar = props.avatar, title = props.title, description = props.description, others = __rest21(props, ["prefixCls", "className", "avatar", "title", "description"]);
      var prefixCls = getPrefixCls("card", customizePrefixCls);
      var classString = (0, import_classnames68.default)("".concat(prefixCls, "-meta"), className);
      var avatarDom = avatar ? /* @__PURE__ */ React184.createElement("div", {
        className: "".concat(prefixCls, "-meta-avatar")
      }, avatar) : null;
      var titleDom = title ? /* @__PURE__ */ React184.createElement("div", {
        className: "".concat(prefixCls, "-meta-title")
      }, title) : null;
      var descriptionDom = description ? /* @__PURE__ */ React184.createElement("div", {
        className: "".concat(prefixCls, "-meta-description")
      }, description) : null;
      var MetaDetail = titleDom || descriptionDom ? /* @__PURE__ */ React184.createElement("div", {
        className: "".concat(prefixCls, "-meta-detail")
      }, titleDom, descriptionDom) : null;
      return /* @__PURE__ */ React184.createElement("div", _extends({}, others, {
        className: classString
      }), avatarDom, MetaDetail);
    });
  };
  var Meta_default = Meta;

  // node_modules/antd/es/card/index.js
  var Card2 = Card_default;
  Card2.Grid = Grid_default;
  Card2.Meta = Meta_default;
  var card_default = Card2;

  // node_modules/antd/es/grid/col.js
  var import_classnames69 = __toESM(require_classnames());
  var React185 = __toESM(require_react());

  // node_modules/antd/es/grid/RowContext.js
  var import_react52 = __toESM(require_react());
  var RowContext = /* @__PURE__ */ (0, import_react52.createContext)({});
  var RowContext_default = RowContext;

  // node_modules/antd/es/grid/col.js
  var __rest22 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  function parseFlex(flex) {
    if (typeof flex === "number") {
      return "".concat(flex, " ").concat(flex, " auto");
    }
    if (/^\d+(\.\d+)?(px|em|rem|%)$/.test(flex)) {
      return "0 0 ".concat(flex);
    }
    return flex;
  }
  var sizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
  var Col = /* @__PURE__ */ React185.forwardRef(function(props, ref) {
    var _classNames;
    var _React$useContext = React185.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var _React$useContext2 = React185.useContext(RowContext_default), gutter = _React$useContext2.gutter, wrap = _React$useContext2.wrap, supportFlexGap = _React$useContext2.supportFlexGap;
    var customizePrefixCls = props.prefixCls, span = props.span, order = props.order, offset3 = props.offset, push = props.push, pull = props.pull, className = props.className, children = props.children, flex = props.flex, style2 = props.style, others = __rest22(props, ["prefixCls", "span", "order", "offset", "push", "pull", "className", "children", "flex", "style"]);
    var prefixCls = getPrefixCls("col", customizePrefixCls);
    var sizeClassObj = {};
    sizes.forEach(function(size) {
      var _extends22;
      var sizeProps = {};
      var propSize = props[size];
      if (typeof propSize === "number") {
        sizeProps.span = propSize;
      } else if (_typeof(propSize) === "object") {
        sizeProps = propSize || {};
      }
      delete others[size];
      sizeClassObj = _extends(_extends({}, sizeClassObj), (_extends22 = {}, _defineProperty(_extends22, "".concat(prefixCls, "-").concat(size, "-").concat(sizeProps.span), sizeProps.span !== void 0), _defineProperty(_extends22, "".concat(prefixCls, "-").concat(size, "-order-").concat(sizeProps.order), sizeProps.order || sizeProps.order === 0), _defineProperty(_extends22, "".concat(prefixCls, "-").concat(size, "-offset-").concat(sizeProps.offset), sizeProps.offset || sizeProps.offset === 0), _defineProperty(_extends22, "".concat(prefixCls, "-").concat(size, "-push-").concat(sizeProps.push), sizeProps.push || sizeProps.push === 0), _defineProperty(_extends22, "".concat(prefixCls, "-").concat(size, "-pull-").concat(sizeProps.pull), sizeProps.pull || sizeProps.pull === 0), _defineProperty(_extends22, "".concat(prefixCls, "-rtl"), direction === "rtl"), _extends22));
    });
    var classes = (0, import_classnames69.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(span), span !== void 0), _defineProperty(_classNames, "".concat(prefixCls, "-order-").concat(order), order), _defineProperty(_classNames, "".concat(prefixCls, "-offset-").concat(offset3), offset3), _defineProperty(_classNames, "".concat(prefixCls, "-push-").concat(push), push), _defineProperty(_classNames, "".concat(prefixCls, "-pull-").concat(pull), pull), _classNames), className, sizeClassObj);
    var mergedStyle = {};
    if (gutter && gutter[0] > 0) {
      var horizontalGutter = gutter[0] / 2;
      mergedStyle.paddingLeft = horizontalGutter;
      mergedStyle.paddingRight = horizontalGutter;
    }
    if (gutter && gutter[1] > 0 && !supportFlexGap) {
      var verticalGutter = gutter[1] / 2;
      mergedStyle.paddingTop = verticalGutter;
      mergedStyle.paddingBottom = verticalGutter;
    }
    if (flex) {
      mergedStyle.flex = parseFlex(flex);
      if (wrap === false && !mergedStyle.minWidth) {
        mergedStyle.minWidth = 0;
      }
    }
    return /* @__PURE__ */ React185.createElement("div", _extends({}, others, {
      style: _extends(_extends({}, mergedStyle), style2),
      className: classes,
      ref
    }), children);
  });
  if (true) {
    Col.displayName = "Col";
  }
  var col_default = Col;

  // node_modules/antd/es/grid/row.js
  var import_classnames70 = __toESM(require_classnames());
  var React187 = __toESM(require_react());

  // node_modules/antd/es/_util/hooks/useFlexGapSupport.js
  var React186 = __toESM(require_react());

  // node_modules/rc-util/es/Dom/styleChecker.js
  var isStyleNameSupport = function isStyleNameSupport2(styleName) {
    if (canUseDom() && window.document.documentElement) {
      var styleNameList = Array.isArray(styleName) ? styleName : [styleName];
      var documentElement = window.document.documentElement;
      return styleNameList.some(function(name5) {
        return name5 in documentElement.style;
      });
    }
    return false;
  };
  var isStyleValueSupport = function isStyleValueSupport2(styleName, value) {
    if (!isStyleNameSupport(styleName)) {
      return false;
    }
    var ele = document.createElement("div");
    var origin = ele.style[styleName];
    ele.style[styleName] = value;
    return ele.style[styleName] !== origin;
  };
  function isStyleSupport(styleName, styleValue) {
    if (!Array.isArray(styleName) && styleValue !== void 0) {
      return isStyleValueSupport(styleName, styleValue);
    }
    return isStyleNameSupport(styleName);
  }

  // node_modules/antd/es/_util/styleChecker.js
  var canUseDocElement = function canUseDocElement2() {
    return canUseDom() && window.document.documentElement;
  };
  var flexGapSupported;
  var detectFlexGapSupported = function detectFlexGapSupported2() {
    if (!canUseDocElement()) {
      return false;
    }
    if (flexGapSupported !== void 0) {
      return flexGapSupported;
    }
    var flex = document.createElement("div");
    flex.style.display = "flex";
    flex.style.flexDirection = "column";
    flex.style.rowGap = "1px";
    flex.appendChild(document.createElement("div"));
    flex.appendChild(document.createElement("div"));
    document.body.appendChild(flex);
    flexGapSupported = flex.scrollHeight === 1;
    document.body.removeChild(flex);
    return flexGapSupported;
  };

  // node_modules/antd/es/_util/hooks/useFlexGapSupport.js
  var useFlexGapSupport_default = function() {
    var _React$useState = React186.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), flexible = _React$useState2[0], setFlexible = _React$useState2[1];
    React186.useEffect(function() {
      setFlexible(detectFlexGapSupported());
    }, []);
    return flexible;
  };

  // node_modules/antd/es/grid/row.js
  var __rest23 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var RowAligns = tuple("top", "middle", "bottom", "stretch");
  var RowJustify = tuple("start", "end", "center", "space-around", "space-between", "space-evenly");
  var Row = /* @__PURE__ */ React187.forwardRef(function(props, ref) {
    var _classNames;
    var customizePrefixCls = props.prefixCls, justify = props.justify, align = props.align, className = props.className, style2 = props.style, children = props.children, _props$gutter = props.gutter, gutter = _props$gutter === void 0 ? 0 : _props$gutter, wrap = props.wrap, others = __rest23(props, ["prefixCls", "justify", "align", "className", "style", "children", "gutter", "wrap"]);
    var _React$useContext = React187.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var _React$useState = React187.useState({
      xs: true,
      sm: true,
      md: true,
      lg: true,
      xl: true,
      xxl: true
    }), _React$useState2 = _slicedToArray(_React$useState, 2), screens2 = _React$useState2[0], setScreens = _React$useState2[1];
    var supportFlexGap = useFlexGapSupport_default();
    var gutterRef = React187.useRef(gutter);
    React187.useEffect(function() {
      var token = responsiveObserve_default.subscribe(function(screen) {
        var currentGutter = gutterRef.current || 0;
        if (!Array.isArray(currentGutter) && _typeof(currentGutter) === "object" || Array.isArray(currentGutter) && (_typeof(currentGutter[0]) === "object" || _typeof(currentGutter[1]) === "object")) {
          setScreens(screen);
        }
      });
      return function() {
        return responsiveObserve_default.unsubscribe(token);
      };
    }, []);
    var getGutter = function getGutter2() {
      var results = [void 0, void 0];
      var normalizedGutter = Array.isArray(gutter) ? gutter : [gutter, void 0];
      normalizedGutter.forEach(function(g2, index3) {
        if (_typeof(g2) === "object") {
          for (var i3 = 0; i3 < responsiveArray.length; i3++) {
            var breakpoint = responsiveArray[i3];
            if (screens2[breakpoint] && g2[breakpoint] !== void 0) {
              results[index3] = g2[breakpoint];
              break;
            }
          }
        } else {
          results[index3] = g2;
        }
      });
      return results;
    };
    var prefixCls = getPrefixCls("row", customizePrefixCls);
    var gutters = getGutter();
    var classes = (0, import_classnames70.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-no-wrap"), wrap === false), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(justify), justify), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(align), align), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    var rowStyle = {};
    var horizontalGutter = gutters[0] != null && gutters[0] > 0 ? gutters[0] / -2 : void 0;
    var verticalGutter = gutters[1] != null && gutters[1] > 0 ? gutters[1] / -2 : void 0;
    if (horizontalGutter) {
      rowStyle.marginLeft = horizontalGutter;
      rowStyle.marginRight = horizontalGutter;
    }
    if (supportFlexGap) {
      var _gutters = _slicedToArray(gutters, 2);
      rowStyle.rowGap = _gutters[1];
    } else if (verticalGutter) {
      rowStyle.marginTop = verticalGutter;
      rowStyle.marginBottom = verticalGutter;
    }
    var _gutters2 = _slicedToArray(gutters, 2), gutterH = _gutters2[0], gutterV = _gutters2[1];
    var rowContext = React187.useMemo(function() {
      return {
        gutter: [gutterH, gutterV],
        wrap,
        supportFlexGap
      };
    }, [gutterH, gutterV, wrap, supportFlexGap]);
    return /* @__PURE__ */ React187.createElement(RowContext_default.Provider, {
      value: rowContext
    }, /* @__PURE__ */ React187.createElement("div", _extends({}, others, {
      className: classes,
      style: _extends(_extends({}, rowStyle), style2),
      ref
    }), children));
  });
  if (true) {
    Row.displayName = "Row";
  }
  var row_default = Row;

  // node_modules/antd/es/collapse/Collapse.js
  var import_classnames75 = __toESM(require_classnames());

  // node_modules/rc-collapse/es/Collapse.js
  var React190 = __toESM(require_react());
  var import_classnames73 = __toESM(require_classnames());
  var import_shallowequal4 = __toESM(require_shallowequal());

  // node_modules/rc-collapse/es/Panel.js
  var React189 = __toESM(require_react());
  var import_classnames72 = __toESM(require_classnames());
  var import_shallowequal3 = __toESM(require_shallowequal());

  // node_modules/rc-collapse/es/PanelContent.js
  var React188 = __toESM(require_react());
  var import_classnames71 = __toESM(require_classnames());
  var PanelContent = /* @__PURE__ */ React188.forwardRef(function(props, ref) {
    var _classnames;
    var prefixCls = props.prefixCls, forceRender = props.forceRender, className = props.className, style2 = props.style, children = props.children, isActive2 = props.isActive, role = props.role;
    var _React$useState = React188.useState(isActive2 || forceRender), _React$useState2 = _slicedToArray(_React$useState, 2), rendered = _React$useState2[0], setRendered = _React$useState2[1];
    React188.useEffect(function() {
      if (forceRender || isActive2) {
        setRendered(true);
      }
    }, [forceRender, isActive2]);
    if (!rendered) {
      return null;
    }
    return /* @__PURE__ */ React188.createElement("div", {
      ref,
      className: (0, import_classnames71.default)("".concat(prefixCls, "-content"), (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "-content-active"), isActive2), _defineProperty(_classnames, "".concat(prefixCls, "-content-inactive"), !isActive2), _classnames), className),
      style: style2,
      role
    }, /* @__PURE__ */ React188.createElement("div", {
      className: "".concat(prefixCls, "-content-box")
    }, children));
  });
  PanelContent.displayName = "PanelContent";
  var PanelContent_default = PanelContent;

  // node_modules/rc-collapse/es/Panel.js
  var CollapsePanel = /* @__PURE__ */ function(_React$Component) {
    _inherits(CollapsePanel4, _React$Component);
    var _super = _createSuper(CollapsePanel4);
    function CollapsePanel4() {
      var _this;
      _classCallCheck(this, CollapsePanel4);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.onItemClick = function() {
        var _this$props = _this.props, onItemClick2 = _this$props.onItemClick, panelKey = _this$props.panelKey;
        if (typeof onItemClick2 === "function") {
          onItemClick2(panelKey);
        }
      };
      _this.handleKeyPress = function(e3) {
        if (e3.key === "Enter" || e3.keyCode === 13 || e3.which === 13) {
          _this.onItemClick();
        }
      };
      _this.renderIcon = function() {
        var _this$props2 = _this.props, showArrow = _this$props2.showArrow, expandIcon = _this$props2.expandIcon, prefixCls = _this$props2.prefixCls, collapsible = _this$props2.collapsible;
        if (!showArrow) {
          return null;
        }
        var iconNode = typeof expandIcon === "function" ? expandIcon(_this.props) : /* @__PURE__ */ React189.createElement("i", {
          className: "arrow"
        });
        return iconNode && /* @__PURE__ */ React189.createElement("div", {
          className: "".concat(prefixCls, "-expand-icon"),
          onClick: collapsible === "header" ? _this.onItemClick : null
        }, iconNode);
      };
      _this.renderTitle = function() {
        var _this$props3 = _this.props, header = _this$props3.header, prefixCls = _this$props3.prefixCls, collapsible = _this$props3.collapsible;
        return /* @__PURE__ */ React189.createElement("span", {
          className: "".concat(prefixCls, "-header-text"),
          onClick: collapsible === "header" ? _this.onItemClick : null
        }, header);
      };
      return _this;
    }
    _createClass(CollapsePanel4, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return !(0, import_shallowequal3.default)(this.props, nextProps);
      }
    }, {
      key: "render",
      value: function render4() {
        var _classNames, _classNames2;
        var _this$props4 = this.props, className = _this$props4.className, id2 = _this$props4.id, style2 = _this$props4.style, prefixCls = _this$props4.prefixCls, headerClass = _this$props4.headerClass, children = _this$props4.children, isActive2 = _this$props4.isActive, destroyInactivePanel = _this$props4.destroyInactivePanel, accordion = _this$props4.accordion, forceRender = _this$props4.forceRender, openMotion = _this$props4.openMotion, extra = _this$props4.extra, collapsible = _this$props4.collapsible;
        var disabled = collapsible === "disabled";
        var collapsibleHeader = collapsible === "header";
        var itemCls = (0, import_classnames72.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-item"), true), _defineProperty(_classNames, "".concat(prefixCls, "-item-active"), isActive2), _defineProperty(_classNames, "".concat(prefixCls, "-item-disabled"), disabled), _classNames), className);
        var headerCls = (0, import_classnames72.default)("".concat(prefixCls, "-header"), (_classNames2 = {}, _defineProperty(_classNames2, headerClass, headerClass), _defineProperty(_classNames2, "".concat(prefixCls, "-header-collapsible-only"), collapsibleHeader), _classNames2));
        var headerProps = {
          className: headerCls,
          "aria-expanded": isActive2,
          "aria-disabled": disabled,
          onKeyPress: this.handleKeyPress
        };
        if (!collapsibleHeader) {
          headerProps.onClick = this.onItemClick;
          headerProps.role = accordion ? "tab" : "button";
          headerProps.tabIndex = disabled ? -1 : 0;
        }
        var ifExtraExist = extra !== null && extra !== void 0 && typeof extra !== "boolean";
        return /* @__PURE__ */ React189.createElement("div", {
          className: itemCls,
          style: style2,
          id: id2
        }, /* @__PURE__ */ React189.createElement("div", headerProps, this.renderIcon(), this.renderTitle(), ifExtraExist && /* @__PURE__ */ React189.createElement("div", {
          className: "".concat(prefixCls, "-extra")
        }, extra)), /* @__PURE__ */ React189.createElement(es_default3, _extends({
          visible: isActive2,
          leavedClassName: "".concat(prefixCls, "-content-hidden")
        }, openMotion, {
          forceRender,
          removeOnLeave: destroyInactivePanel
        }), function(_ref, ref) {
          var motionClassName = _ref.className, motionStyle = _ref.style;
          return /* @__PURE__ */ React189.createElement(PanelContent_default, {
            ref,
            prefixCls,
            className: motionClassName,
            style: motionStyle,
            isActive: isActive2,
            forceRender,
            role: accordion ? "tabpanel" : null
          }, children);
        }));
      }
    }]);
    return CollapsePanel4;
  }(React189.Component);
  CollapsePanel.defaultProps = {
    showArrow: true,
    isActive: false,
    onItemClick: function onItemClick() {
    },
    headerClass: "",
    forceRender: false
  };
  var Panel_default = CollapsePanel;

  // node_modules/rc-collapse/es/Collapse.js
  function getActiveKeysArray(activeKey) {
    var currentActiveKey = activeKey;
    if (!Array.isArray(currentActiveKey)) {
      var activeKeyType = _typeof(currentActiveKey);
      currentActiveKey = activeKeyType === "number" || activeKeyType === "string" ? [currentActiveKey] : [];
    }
    return currentActiveKey.map(function(key2) {
      return String(key2);
    });
  }
  var Collapse = /* @__PURE__ */ function(_React$Component) {
    _inherits(Collapse5, _React$Component);
    var _super = _createSuper(Collapse5);
    function Collapse5(_props) {
      var _this;
      _classCallCheck(this, Collapse5);
      _this = _super.call(this, _props);
      _this.onClickItem = function(key2) {
        var activeKey = _this.state.activeKey;
        if (_this.props.accordion) {
          activeKey = activeKey[0] === key2 ? [] : [key2];
        } else {
          activeKey = _toConsumableArray(activeKey);
          var index3 = activeKey.indexOf(key2);
          var isActive2 = index3 > -1;
          if (isActive2) {
            activeKey.splice(index3, 1);
          } else {
            activeKey.push(key2);
          }
        }
        _this.setActiveKey(activeKey);
      };
      _this.getNewChild = function(child, index3) {
        if (!child)
          return null;
        var activeKey = _this.state.activeKey;
        var _this$props = _this.props, prefixCls = _this$props.prefixCls, openMotion = _this$props.openMotion, accordion = _this$props.accordion, rootDestroyInactivePanel = _this$props.destroyInactivePanel, expandIcon = _this$props.expandIcon, collapsible = _this$props.collapsible;
        var key2 = child.key || String(index3);
        var _child$props = child.props, header = _child$props.header, headerClass = _child$props.headerClass, destroyInactivePanel = _child$props.destroyInactivePanel, childCollapsible = _child$props.collapsible;
        var isActive2 = false;
        if (accordion) {
          isActive2 = activeKey[0] === key2;
        } else {
          isActive2 = activeKey.indexOf(key2) > -1;
        }
        var mergeCollapsible = childCollapsible !== null && childCollapsible !== void 0 ? childCollapsible : collapsible;
        var props = {
          key: key2,
          panelKey: key2,
          header,
          headerClass,
          isActive: isActive2,
          prefixCls,
          destroyInactivePanel: destroyInactivePanel !== null && destroyInactivePanel !== void 0 ? destroyInactivePanel : rootDestroyInactivePanel,
          openMotion,
          accordion,
          children: child.props.children,
          onItemClick: mergeCollapsible === "disabled" ? null : _this.onClickItem,
          expandIcon,
          collapsible: mergeCollapsible
        };
        if (typeof child.type === "string") {
          return child;
        }
        Object.keys(props).forEach(function(propName) {
          if (typeof props[propName] === "undefined") {
            delete props[propName];
          }
        });
        return /* @__PURE__ */ React190.cloneElement(child, props);
      };
      _this.getItems = function() {
        var children = _this.props.children;
        return toArray(children).map(_this.getNewChild);
      };
      _this.setActiveKey = function(activeKey) {
        if (!("activeKey" in _this.props)) {
          _this.setState({
            activeKey
          });
        }
        _this.props.onChange(_this.props.accordion ? activeKey[0] : activeKey);
      };
      var _activeKey = _props.activeKey, defaultActiveKey = _props.defaultActiveKey;
      var currentActiveKey = defaultActiveKey;
      if ("activeKey" in _props) {
        currentActiveKey = _activeKey;
      }
      _this.state = {
        activeKey: getActiveKeysArray(currentActiveKey)
      };
      return _this;
    }
    _createClass(Collapse5, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps, nextState) {
        return !(0, import_shallowequal4.default)(this.props, nextProps) || !(0, import_shallowequal4.default)(this.state, nextState);
      }
    }, {
      key: "render",
      value: function render4() {
        var _classNames;
        var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, style2 = _this$props2.style, accordion = _this$props2.accordion;
        var collapseClassName = (0, import_classnames73.default)((_classNames = {}, _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, className, !!className), _classNames));
        return /* @__PURE__ */ React190.createElement("div", {
          className: collapseClassName,
          style: style2,
          role: accordion ? "tablist" : null
        }, this.getItems());
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps) {
        var newState = {};
        if ("activeKey" in nextProps) {
          newState.activeKey = getActiveKeysArray(nextProps.activeKey);
        }
        return newState;
      }
    }]);
    return Collapse5;
  }(React190.Component);
  Collapse.defaultProps = {
    prefixCls: "rc-collapse",
    onChange: function onChange2() {
    },
    accordion: false,
    destroyInactivePanel: false
  };
  Collapse.Panel = Panel_default;
  var Collapse_default = Collapse;

  // node_modules/rc-collapse/es/index.js
  var es_default15 = Collapse_default;
  var Panel = Collapse_default.Panel;

  // node_modules/antd/es/collapse/Collapse.js
  var React192 = __toESM(require_react());

  // node_modules/antd/es/collapse/CollapsePanel.js
  var import_classnames74 = __toESM(require_classnames());
  var React191 = __toESM(require_react());
  var CollapsePanel2 = function CollapsePanel3(props) {
    true ? warning_default2(!("disabled" in props), "Collapse.Panel", '`disabled` is deprecated. Please use `collapsible="disabled"` instead.') : void 0;
    var _React$useContext = React191.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var customizePrefixCls = props.prefixCls, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className, _props$showArrow = props.showArrow, showArrow = _props$showArrow === void 0 ? true : _props$showArrow;
    var prefixCls = getPrefixCls("collapse", customizePrefixCls);
    var collapsePanelClassName = (0, import_classnames74.default)(_defineProperty({}, "".concat(prefixCls, "-no-arrow"), !showArrow), className);
    return /* @__PURE__ */ React191.createElement(es_default15.Panel, _extends({}, props, {
      prefixCls,
      className: collapsePanelClassName
    }));
  };
  var CollapsePanel_default = CollapsePanel2;

  // node_modules/antd/es/collapse/Collapse.js
  var Collapse2 = function Collapse3(props) {
    var _classNames;
    var _React$useContext = React192.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var customizePrefixCls = props.prefixCls, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className, _props$bordered = props.bordered, bordered = _props$bordered === void 0 ? true : _props$bordered, ghost = props.ghost, _props$expandIconPosi = props.expandIconPosition, expandIconPosition = _props$expandIconPosi === void 0 ? "start" : _props$expandIconPosi;
    var prefixCls = getPrefixCls("collapse", customizePrefixCls);
    true ? warning_default2(expandIconPosition !== "left" && expandIconPosition !== "right", "Collapse", "`expandIconPosition` with `left` or `right` is deprecated. Please use `start` or `end` instead.") : void 0;
    var mergedExpandIconPosition = React192.useMemo(function() {
      if (expandIconPosition === "left") {
        return "start";
      }
      return expandIconPosition === "right" ? "end" : expandIconPosition;
    }, [expandIconPosition]);
    var renderExpandIcon = function renderExpandIcon2() {
      var panelProps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var expandIcon = props.expandIcon;
      var icon = expandIcon ? expandIcon(panelProps) : /* @__PURE__ */ React192.createElement(RightOutlined_default2, {
        rotate: panelProps.isActive ? 90 : void 0
      });
      return cloneElement6(icon, function() {
        return {
          className: (0, import_classnames75.default)(icon.props.className, "".concat(prefixCls, "-arrow"))
        };
      });
    };
    var collapseClassName = (0, import_classnames75.default)("".concat(prefixCls, "-icon-position-").concat(mergedExpandIconPosition), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-ghost"), !!ghost), _classNames), className);
    var openMotion = _extends(_extends({}, motion_default), {
      motionAppear: false,
      leavedClassName: "".concat(prefixCls, "-content-hidden")
    });
    var getItems = function getItems2() {
      var children = props.children;
      return toArray(children).map(function(child, index3) {
        var _a;
        if ((_a = child.props) === null || _a === void 0 ? void 0 : _a.disabled) {
          var key2 = child.key || String(index3);
          var _child$props = child.props, disabled = _child$props.disabled, collapsible = _child$props.collapsible;
          var childProps = _extends(_extends({}, omit(child.props, ["disabled"])), {
            key: key2,
            collapsible: collapsible !== null && collapsible !== void 0 ? collapsible : disabled ? "disabled" : void 0
          });
          return cloneElement6(child, childProps);
        }
        return child;
      });
    };
    return /* @__PURE__ */ React192.createElement(es_default15, _extends({
      openMotion
    }, props, {
      expandIcon: renderExpandIcon,
      prefixCls,
      className: collapseClassName
    }), getItems());
  };
  Collapse2.Panel = CollapsePanel_default;
  var Collapse_default2 = Collapse2;

  // node_modules/antd/es/collapse/index.js
  var collapse_default = Collapse_default2;

  // node_modules/@ant-design/icons/es/icons/ClockCircleOutlined.js
  var React193 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/ClockCircleOutlined.js
  var ClockCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M686.7 638.6L544.1 535.5V288c0-4.4-3.6-8-8-8H488c-4.4 0-8 3.6-8 8v275.4c0 2.6 1.2 5 3.3 6.5l165.4 120.6c3.6 2.6 8.6 1.8 11.2-1.7l28.6-39c2.6-3.7 1.8-8.7-1.8-11.2z" } }] }, "name": "clock-circle", "theme": "outlined" };
  var ClockCircleOutlined_default = ClockCircleOutlined;

  // node_modules/@ant-design/icons/es/icons/ClockCircleOutlined.js
  var ClockCircleOutlined2 = function ClockCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React193.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: ClockCircleOutlined_default
    }));
  };
  ClockCircleOutlined2.displayName = "ClockCircleOutlined";
  var ClockCircleOutlined_default2 = /* @__PURE__ */ React193.forwardRef(ClockCircleOutlined2);

  // node_modules/antd/es/divider/index.js
  var import_classnames76 = __toESM(require_classnames());
  var React194 = __toESM(require_react());
  var __rest24 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var Divider2 = function Divider3(props) {
    var _classNames;
    var _React$useContext = React194.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var customizePrefixCls = props.prefixCls, _props$type = props.type, type4 = _props$type === void 0 ? "horizontal" : _props$type, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "center" : _props$orientation, orientationMargin = props.orientationMargin, className = props.className, children = props.children, dashed = props.dashed, plain = props.plain, restProps = __rest24(props, ["prefixCls", "type", "orientation", "orientationMargin", "className", "children", "dashed", "plain"]);
    var prefixCls = getPrefixCls("divider", customizePrefixCls);
    var orientationPrefix = orientation.length > 0 ? "-".concat(orientation) : orientation;
    var hasChildren = !!children;
    var hasCustomMarginLeft = orientation === "left" && orientationMargin != null;
    var hasCustomMarginRight = orientation === "right" && orientationMargin != null;
    var classString = (0, import_classnames76.default)(prefixCls, "".concat(prefixCls, "-").concat(type4), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-with-text"), hasChildren), _defineProperty(_classNames, "".concat(prefixCls, "-with-text").concat(orientationPrefix), hasChildren), _defineProperty(_classNames, "".concat(prefixCls, "-dashed"), !!dashed), _defineProperty(_classNames, "".concat(prefixCls, "-plain"), !!plain), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-no-default-orientation-margin-left"), hasCustomMarginLeft), _defineProperty(_classNames, "".concat(prefixCls, "-no-default-orientation-margin-right"), hasCustomMarginRight), _classNames), className);
    var innerStyle = _extends(_extends({}, hasCustomMarginLeft && {
      marginLeft: orientationMargin
    }), hasCustomMarginRight && {
      marginRight: orientationMargin
    });
    if (true) {
      true ? warning_default2(!children || type4 !== "vertical", "Divider", "`children` not working in `vertical` mode.") : void 0;
    }
    return /* @__PURE__ */ React194.createElement("div", _extends({
      className: classString
    }, restProps, {
      role: "separator"
    }), children && type4 !== "vertical" && /* @__PURE__ */ React194.createElement("span", {
      className: "".concat(prefixCls, "-inner-text"),
      style: innerStyle
    }, children));
  };
  var divider_default = Divider2;

  // node_modules/rc-util/es/PortalWrapper.js
  var React195 = __toESM(require_react());

  // node_modules/rc-util/es/getScrollBarSize.js
  var cached;
  function getScrollBarSize(fresh) {
    if (typeof document === "undefined") {
      return 0;
    }
    if (fresh || cached === void 0) {
      var inner = document.createElement("div");
      inner.style.width = "100%";
      inner.style.height = "200px";
      var outer = document.createElement("div");
      var outerStyle = outer.style;
      outerStyle.position = "absolute";
      outerStyle.top = "0";
      outerStyle.left = "0";
      outerStyle.pointerEvents = "none";
      outerStyle.visibility = "hidden";
      outerStyle.width = "200px";
      outerStyle.height = "150px";
      outerStyle.overflow = "hidden";
      outer.appendChild(inner);
      document.body.appendChild(outer);
      var widthContained = inner.offsetWidth;
      outer.style.overflow = "scroll";
      var widthScroll = inner.offsetWidth;
      if (widthContained === widthScroll) {
        widthScroll = outer.clientWidth;
      }
      document.body.removeChild(outer);
      cached = widthContained - widthScroll;
    }
    return cached;
  }

  // node_modules/rc-util/es/setStyle.js
  function setStyle(style2) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!style2) {
      return {};
    }
    var _options$element = options.element, element = _options$element === void 0 ? document.body : _options$element;
    var oldStyle = {};
    var styleKeys = Object.keys(style2);
    styleKeys.forEach(function(key2) {
      oldStyle[key2] = element.style[key2];
    });
    styleKeys.forEach(function(key2) {
      element.style[key2] = style2[key2];
    });
    return oldStyle;
  }
  var setStyle_default = setStyle;

  // node_modules/rc-util/es/switchScrollingEffect.js
  function isBodyOverflowing() {
    return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth;
  }
  var cacheStyle = {};
  var switchScrollingEffect_default = function(close2) {
    if (!isBodyOverflowing() && !close2) {
      return;
    }
    var scrollingEffectClassName2 = "ant-scrolling-effect";
    var scrollingEffectClassNameReg2 = new RegExp("".concat(scrollingEffectClassName2), "g");
    var bodyClassName = document.body.className;
    if (close2) {
      if (!scrollingEffectClassNameReg2.test(bodyClassName))
        return;
      setStyle_default(cacheStyle);
      cacheStyle = {};
      document.body.className = bodyClassName.replace(scrollingEffectClassNameReg2, "").trim();
      return;
    }
    var scrollBarSize = getScrollBarSize();
    if (scrollBarSize) {
      cacheStyle = setStyle_default({
        position: "relative",
        width: "calc(100% - ".concat(scrollBarSize, "px)")
      });
      if (!scrollingEffectClassNameReg2.test(bodyClassName)) {
        var addClassName = "".concat(bodyClassName, " ").concat(scrollingEffectClassName2);
        document.body.className = addClassName.trim();
      }
    }
  };

  // node_modules/rc-util/es/Dom/scrollLocker.js
  var uuid3 = 0;
  var locks = [];
  var scrollingEffectClassName = "ant-scrolling-effect";
  var scrollingEffectClassNameReg = new RegExp("".concat(scrollingEffectClassName), "g");
  var cacheStyle2 = /* @__PURE__ */ new Map();
  var ScrollLocker = /* @__PURE__ */ _createClass(function ScrollLocker2(_options) {
    var _this = this;
    _classCallCheck(this, ScrollLocker2);
    _defineProperty(this, "lockTarget", void 0);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "getContainer", function() {
      var _this$options;
      return (_this$options = _this.options) === null || _this$options === void 0 ? void 0 : _this$options.container;
    });
    _defineProperty(this, "reLock", function(options) {
      var findLock = locks.find(function(_ref) {
        var target = _ref.target;
        return target === _this.lockTarget;
      });
      if (findLock) {
        _this.unLock();
      }
      _this.options = options;
      if (findLock) {
        findLock.options = options;
        _this.lock();
      }
    });
    _defineProperty(this, "lock", function() {
      var _this$options3;
      if (locks.some(function(_ref2) {
        var target = _ref2.target;
        return target === _this.lockTarget;
      })) {
        return;
      }
      if (locks.some(function(_ref3) {
        var _this$options2;
        var options = _ref3.options;
        return (options === null || options === void 0 ? void 0 : options.container) === ((_this$options2 = _this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.container);
      })) {
        locks = [].concat(_toConsumableArray(locks), [{
          target: _this.lockTarget,
          options: _this.options
        }]);
        return;
      }
      var scrollBarSize = 0;
      var container = ((_this$options3 = _this.options) === null || _this$options3 === void 0 ? void 0 : _this$options3.container) || document.body;
      if (container === document.body && window.innerWidth - document.documentElement.clientWidth > 0 || container.scrollHeight > container.clientHeight) {
        if (getComputedStyle(container).overflow !== "hidden") {
          scrollBarSize = getScrollBarSize();
        }
      }
      var containerClassName = container.className;
      if (locks.filter(function(_ref4) {
        var _this$options4;
        var options = _ref4.options;
        return (options === null || options === void 0 ? void 0 : options.container) === ((_this$options4 = _this.options) === null || _this$options4 === void 0 ? void 0 : _this$options4.container);
      }).length === 0) {
        cacheStyle2.set(container, setStyle_default({
          width: scrollBarSize !== 0 ? "calc(100% - ".concat(scrollBarSize, "px)") : void 0,
          overflow: "hidden",
          overflowX: "hidden",
          overflowY: "hidden"
        }, {
          element: container
        }));
      }
      if (!scrollingEffectClassNameReg.test(containerClassName)) {
        var addClassName = "".concat(containerClassName, " ").concat(scrollingEffectClassName);
        container.className = addClassName.trim();
      }
      locks = [].concat(_toConsumableArray(locks), [{
        target: _this.lockTarget,
        options: _this.options
      }]);
    });
    _defineProperty(this, "unLock", function() {
      var _this$options5;
      var findLock = locks.find(function(_ref5) {
        var target = _ref5.target;
        return target === _this.lockTarget;
      });
      locks = locks.filter(function(_ref6) {
        var target = _ref6.target;
        return target !== _this.lockTarget;
      });
      if (!findLock || locks.some(function(_ref7) {
        var _findLock$options;
        var options = _ref7.options;
        return (options === null || options === void 0 ? void 0 : options.container) === ((_findLock$options = findLock.options) === null || _findLock$options === void 0 ? void 0 : _findLock$options.container);
      })) {
        return;
      }
      var container = ((_this$options5 = _this.options) === null || _this$options5 === void 0 ? void 0 : _this$options5.container) || document.body;
      var containerClassName = container.className;
      if (!scrollingEffectClassNameReg.test(containerClassName))
        return;
      setStyle_default(cacheStyle2.get(container), {
        element: container
      });
      cacheStyle2.delete(container);
      container.className = container.className.replace(scrollingEffectClassNameReg, "").trim();
    });
    this.lockTarget = uuid3++;
    this.options = _options;
  });

  // node_modules/rc-util/es/PortalWrapper.js
  var openCount = 0;
  var supportDom = canUseDom();
  var cacheOverflow = {};
  var getParent3 = function getParent4(getContainer3) {
    if (!supportDom) {
      return null;
    }
    if (getContainer3) {
      if (typeof getContainer3 === "string") {
        return document.querySelectorAll(getContainer3)[0];
      }
      if (typeof getContainer3 === "function") {
        return getContainer3();
      }
      if (_typeof(getContainer3) === "object" && getContainer3 instanceof window.HTMLElement) {
        return getContainer3;
      }
    }
    return document.body;
  };
  var PortalWrapper = /* @__PURE__ */ function(_React$Component) {
    _inherits(PortalWrapper2, _React$Component);
    var _super = _createSuper(PortalWrapper2);
    function PortalWrapper2(props) {
      var _this;
      _classCallCheck(this, PortalWrapper2);
      _this = _super.call(this, props);
      _defineProperty(_assertThisInitialized(_this), "container", void 0);
      _defineProperty(_assertThisInitialized(_this), "componentRef", /* @__PURE__ */ React195.createRef());
      _defineProperty(_assertThisInitialized(_this), "rafId", void 0);
      _defineProperty(_assertThisInitialized(_this), "scrollLocker", void 0);
      _defineProperty(_assertThisInitialized(_this), "renderComponent", void 0);
      _defineProperty(_assertThisInitialized(_this), "updateScrollLocker", function(prevProps) {
        var _ref = prevProps || {}, prevVisible = _ref.visible;
        var _this$props = _this.props, getContainer3 = _this$props.getContainer, visible = _this$props.visible;
        if (visible && visible !== prevVisible && supportDom && getParent3(getContainer3) !== _this.scrollLocker.getContainer()) {
          _this.scrollLocker.reLock({
            container: getParent3(getContainer3)
          });
        }
      });
      _defineProperty(_assertThisInitialized(_this), "updateOpenCount", function(prevProps) {
        var _ref2 = prevProps || {}, prevVisible = _ref2.visible, prevGetContainer = _ref2.getContainer;
        var _this$props2 = _this.props, visible = _this$props2.visible, getContainer3 = _this$props2.getContainer;
        if (visible !== prevVisible && supportDom && getParent3(getContainer3) === document.body) {
          if (visible && !prevVisible) {
            openCount += 1;
          } else if (prevProps) {
            openCount -= 1;
          }
        }
        var getContainerIsFunc = typeof getContainer3 === "function" && typeof prevGetContainer === "function";
        if (getContainerIsFunc ? getContainer3.toString() !== prevGetContainer.toString() : getContainer3 !== prevGetContainer) {
          _this.removeCurrentContainer();
        }
      });
      _defineProperty(_assertThisInitialized(_this), "attachToParent", function() {
        var force = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
        if (force || _this.container && !_this.container.parentNode) {
          var parent = getParent3(_this.props.getContainer);
          if (parent) {
            parent.appendChild(_this.container);
            return true;
          }
          return false;
        }
        return true;
      });
      _defineProperty(_assertThisInitialized(_this), "getContainer", function() {
        if (!supportDom) {
          return null;
        }
        if (!_this.container) {
          _this.container = document.createElement("div");
          _this.attachToParent(true);
        }
        _this.setWrapperClassName();
        return _this.container;
      });
      _defineProperty(_assertThisInitialized(_this), "setWrapperClassName", function() {
        var wrapperClassName = _this.props.wrapperClassName;
        if (_this.container && wrapperClassName && wrapperClassName !== _this.container.className) {
          _this.container.className = wrapperClassName;
        }
      });
      _defineProperty(_assertThisInitialized(_this), "removeCurrentContainer", function() {
        var _this$container, _this$container$paren;
        (_this$container = _this.container) === null || _this$container === void 0 ? void 0 : (_this$container$paren = _this$container.parentNode) === null || _this$container$paren === void 0 ? void 0 : _this$container$paren.removeChild(_this.container);
      });
      _defineProperty(_assertThisInitialized(_this), "switchScrollingEffect", function() {
        if (openCount === 1 && !Object.keys(cacheOverflow).length) {
          switchScrollingEffect_default();
          cacheOverflow = setStyle_default({
            overflow: "hidden",
            overflowX: "hidden",
            overflowY: "hidden"
          });
        } else if (!openCount) {
          setStyle_default(cacheOverflow);
          cacheOverflow = {};
          switchScrollingEffect_default(true);
        }
      });
      _this.scrollLocker = new ScrollLocker({
        container: getParent3(props.getContainer)
      });
      return _this;
    }
    _createClass(PortalWrapper2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
        this.updateOpenCount();
        if (!this.attachToParent()) {
          this.rafId = raf_default(function() {
            _this2.forceUpdate();
          });
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        this.updateOpenCount(prevProps);
        this.updateScrollLocker(prevProps);
        this.setWrapperClassName();
        this.attachToParent();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var _this$props3 = this.props, visible = _this$props3.visible, getContainer3 = _this$props3.getContainer;
        if (supportDom && getParent3(getContainer3) === document.body) {
          openCount = visible && openCount ? openCount - 1 : openCount;
        }
        this.removeCurrentContainer();
        raf_default.cancel(this.rafId);
      }
    }, {
      key: "render",
      value: function render4() {
        var _this$props4 = this.props, children = _this$props4.children, forceRender = _this$props4.forceRender, visible = _this$props4.visible;
        var portal = null;
        var childProps = {
          getOpenCount: function getOpenCount() {
            return openCount;
          },
          getContainer: this.getContainer,
          switchScrollingEffect: this.switchScrollingEffect,
          scrollLocker: this.scrollLocker
        };
        if (forceRender || visible || this.componentRef.current) {
          portal = /* @__PURE__ */ React195.createElement(Portal_default, {
            getContainer: this.getContainer,
            ref: this.componentRef
          }, children(childProps));
        }
        return portal;
      }
    }]);
    return PortalWrapper2;
  }(React195.Component);
  var PortalWrapper_default = PortalWrapper;

  // node_modules/antd/es/dropdown/index.js
  var dropdown_default2 = dropdown_default;

  // node_modules/antd/es/form/ErrorList.js
  var import_classnames77 = __toESM(require_classnames());
  var React197 = __toESM(require_react());

  // node_modules/antd/es/form/hooks/useDebounce.js
  var React196 = __toESM(require_react());
  function useDebounce(value) {
    var _React$useState = React196.useState(value), _React$useState2 = _slicedToArray(_React$useState, 2), cacheValue = _React$useState2[0], setCacheValue = _React$useState2[1];
    React196.useEffect(function() {
      var timeout = setTimeout(function() {
        setCacheValue(value);
      }, value.length ? 0 : 10);
      return function() {
        clearTimeout(timeout);
      };
    }, [value]);
    return cacheValue;
  }

  // node_modules/antd/es/form/ErrorList.js
  var EMPTY_LIST2 = [];
  function toErrorEntity(error, errorStatus, prefix) {
    var index3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    return {
      key: typeof error === "string" ? error : "".concat(prefix, "-").concat(index3),
      error,
      errorStatus
    };
  }
  function ErrorList(_ref) {
    var help = _ref.help, helpStatus = _ref.helpStatus, _ref$errors = _ref.errors, errors = _ref$errors === void 0 ? EMPTY_LIST2 : _ref$errors, _ref$warnings = _ref.warnings, warnings = _ref$warnings === void 0 ? EMPTY_LIST2 : _ref$warnings, rootClassName = _ref.className, fieldId = _ref.fieldId, onVisibleChanged = _ref.onVisibleChanged;
    var _React$useContext = React197.useContext(FormItemPrefixContext), prefixCls = _React$useContext.prefixCls;
    var _React$useContext2 = React197.useContext(ConfigContext), getPrefixCls = _React$useContext2.getPrefixCls;
    var baseClassName = "".concat(prefixCls, "-item-explain");
    var rootPrefixCls = getPrefixCls();
    var debounceErrors = useDebounce(errors);
    var debounceWarnings = useDebounce(warnings);
    var fullKeyList = React197.useMemo(function() {
      if (help !== void 0 && help !== null) {
        return [toErrorEntity(help, helpStatus, "help")];
      }
      return [].concat(_toConsumableArray(debounceErrors.map(function(error, index3) {
        return toErrorEntity(error, "error", "error", index3);
      })), _toConsumableArray(debounceWarnings.map(function(warning6, index3) {
        return toErrorEntity(warning6, "warning", "warning", index3);
      })));
    }, [help, helpStatus, debounceErrors, debounceWarnings]);
    var helpProps = {};
    if (fieldId) {
      helpProps.id = "".concat(fieldId, "_help");
    }
    return /* @__PURE__ */ React197.createElement(es_default3, {
      motionDeadline: motion_default.motionDeadline,
      motionName: "".concat(rootPrefixCls, "-show-help"),
      visible: !!fullKeyList.length,
      onVisibleChanged
    }, function(holderProps) {
      var holderClassName = holderProps.className, holderStyle = holderProps.style;
      return /* @__PURE__ */ React197.createElement("div", _extends({}, helpProps, {
        className: (0, import_classnames77.default)(baseClassName, holderClassName, rootClassName),
        style: holderStyle,
        role: "alert"
      }), /* @__PURE__ */ React197.createElement(CSSMotionList_default, _extends({
        keys: fullKeyList
      }, motion_default, {
        motionName: "".concat(rootPrefixCls, "-show-help-item"),
        component: false
      }), function(itemProps) {
        var key2 = itemProps.key, error = itemProps.error, errorStatus = itemProps.errorStatus, itemClassName = itemProps.className, itemStyle = itemProps.style;
        return /* @__PURE__ */ React197.createElement("div", {
          key: key2,
          className: (0, import_classnames77.default)(itemClassName, _defineProperty({}, "".concat(baseClassName, "-").concat(errorStatus), errorStatus)),
          style: itemStyle
        }, error);
      }));
    });
  }

  // node_modules/antd/es/form/Form.js
  var import_classnames78 = __toESM(require_classnames());
  var React199 = __toESM(require_react());
  var import_react53 = __toESM(require_react());

  // node_modules/antd/es/form/hooks/useForm.js
  var React198 = __toESM(require_react());

  // node_modules/compute-scroll-into-view/dist/index.mjs
  function t(t3) {
    return "object" == typeof t3 && null != t3 && 1 === t3.nodeType;
  }
  function e(t3, e3) {
    return (!e3 || "hidden" !== t3) && "visible" !== t3 && "clip" !== t3;
  }
  function n(t3, n3) {
    if (t3.clientHeight < t3.scrollHeight || t3.clientWidth < t3.scrollWidth) {
      var r3 = getComputedStyle(t3, null);
      return e(r3.overflowY, n3) || e(r3.overflowX, n3) || function(t4) {
        var e3 = function(t5) {
          if (!t5.ownerDocument || !t5.ownerDocument.defaultView)
            return null;
          try {
            return t5.ownerDocument.defaultView.frameElement;
          } catch (t6) {
            return null;
          }
        }(t4);
        return !!e3 && (e3.clientHeight < t4.scrollHeight || e3.clientWidth < t4.scrollWidth);
      }(t3);
    }
    return false;
  }
  function r(t3, e3, n3, r3, i3, o2, l2, d2) {
    return o2 < t3 && l2 > e3 || o2 > t3 && l2 < e3 ? 0 : o2 <= t3 && d2 <= n3 || l2 >= e3 && d2 >= n3 ? o2 - t3 - r3 : l2 > e3 && d2 < n3 || o2 < t3 && d2 > n3 ? l2 - e3 + i3 : 0;
  }
  var i = function(e3, i3) {
    var o2 = window, l2 = i3.scrollMode, d2 = i3.block, f2 = i3.inline, h2 = i3.boundary, u2 = i3.skipOverflowHiddenElements, s2 = "function" == typeof h2 ? h2 : function(t3) {
      return t3 !== h2;
    };
    if (!t(e3))
      throw new TypeError("Invalid target");
    for (var a2, c2, g2 = document.scrollingElement || document.documentElement, p2 = [], m2 = e3; t(m2) && s2(m2); ) {
      if ((m2 = null == (c2 = (a2 = m2).parentElement) ? a2.getRootNode().host || null : c2) === g2) {
        p2.push(m2);
        break;
      }
      null != m2 && m2 === document.body && n(m2) && !n(document.documentElement) || null != m2 && n(m2, u2) && p2.push(m2);
    }
    for (var w2 = o2.visualViewport ? o2.visualViewport.width : innerWidth, v2 = o2.visualViewport ? o2.visualViewport.height : innerHeight, W = window.scrollX || pageXOffset, H = window.scrollY || pageYOffset, b2 = e3.getBoundingClientRect(), y2 = b2.height, E2 = b2.width, M = b2.top, V = b2.right, x = b2.bottom, I = b2.left, C = "start" === d2 || "nearest" === d2 ? M : "end" === d2 ? x : M + y2 / 2, R = "center" === f2 ? I + E2 / 2 : "end" === f2 ? V : I, T2 = [], k = 0; k < p2.length; k++) {
      var B = p2[k], D = B.getBoundingClientRect(), O = D.height, X = D.width, Y = D.top, L2 = D.right, S2 = D.bottom, j = D.left;
      if ("if-needed" === l2 && M >= 0 && I >= 0 && x <= v2 && V <= w2 && M >= Y && x <= S2 && I >= j && V <= L2)
        return T2;
      var N = getComputedStyle(B), q = parseInt(N.borderLeftWidth, 10), z = parseInt(N.borderTopWidth, 10), A = parseInt(N.borderRightWidth, 10), F2 = parseInt(N.borderBottomWidth, 10), G = 0, J = 0, K = "offsetWidth" in B ? B.offsetWidth - B.clientWidth - q - A : 0, P2 = "offsetHeight" in B ? B.offsetHeight - B.clientHeight - z - F2 : 0, Q = "offsetWidth" in B ? 0 === B.offsetWidth ? 0 : X / B.offsetWidth : 0, U = "offsetHeight" in B ? 0 === B.offsetHeight ? 0 : O / B.offsetHeight : 0;
      if (g2 === B)
        G = "start" === d2 ? C : "end" === d2 ? C - v2 : "nearest" === d2 ? r(H, H + v2, v2, z, F2, H + C, H + C + y2, y2) : C - v2 / 2, J = "start" === f2 ? R : "center" === f2 ? R - w2 / 2 : "end" === f2 ? R - w2 : r(W, W + w2, w2, q, A, W + R, W + R + E2, E2), G = Math.max(0, G + H), J = Math.max(0, J + W);
      else {
        G = "start" === d2 ? C - Y - z : "end" === d2 ? C - S2 + F2 + P2 : "nearest" === d2 ? r(Y, S2, O, z, F2 + P2, C, C + y2, y2) : C - (Y + O / 2) + P2 / 2, J = "start" === f2 ? R - j - q : "center" === f2 ? R - (j + X / 2) + K / 2 : "end" === f2 ? R - L2 + A + K : r(j, L2, X, q, A + K, R, R + E2, E2);
        var Z = B.scrollLeft, $ = B.scrollTop;
        C += $ - (G = Math.max(0, Math.min($ + G / U, B.scrollHeight - O / U + P2))), R += Z - (J = Math.max(0, Math.min(Z + J / Q, B.scrollWidth - X / Q + K)));
      }
      T2.push({ el: B, top: G, left: J });
    }
    return T2;
  };

  // node_modules/scroll-into-view-if-needed/es/index.js
  function isOptionsObject(options) {
    return options === Object(options) && Object.keys(options).length !== 0;
  }
  function defaultBehavior(actions, behavior) {
    if (behavior === void 0) {
      behavior = "auto";
    }
    var canSmoothScroll = "scrollBehavior" in document.body.style;
    actions.forEach(function(_ref) {
      var el = _ref.el, top = _ref.top, left = _ref.left;
      if (el.scroll && canSmoothScroll) {
        el.scroll({
          top,
          left,
          behavior
        });
      } else {
        el.scrollTop = top;
        el.scrollLeft = left;
      }
    });
  }
  function getOptions(options) {
    if (options === false) {
      return {
        block: "end",
        inline: "nearest"
      };
    }
    if (isOptionsObject(options)) {
      return options;
    }
    return {
      block: "start",
      inline: "nearest"
    };
  }
  function scrollIntoView(target, options) {
    var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);
    if (isOptionsObject(options) && typeof options.behavior === "function") {
      return options.behavior(isTargetAttached ? i(target, options) : []);
    }
    if (!isTargetAttached) {
      return;
    }
    var computeOptions = getOptions(options);
    return defaultBehavior(i(target, computeOptions), computeOptions.behavior);
  }
  var es_default16 = scrollIntoView;

  // node_modules/antd/es/form/util.js
  var formItemNameBlackList = ["parentNode"];
  var defaultItemNamePrefixCls = "form_item";
  function toArray4(candidate) {
    if (candidate === void 0 || candidate === false)
      return [];
    return Array.isArray(candidate) ? candidate : [candidate];
  }
  function getFieldId(namePath, formName) {
    if (!namePath.length)
      return void 0;
    var mergedId = namePath.join("_");
    if (formName) {
      return "".concat(formName, "_").concat(mergedId);
    }
    var isIllegalName = formItemNameBlackList.indexOf(mergedId) >= 0;
    return isIllegalName ? "".concat(defaultItemNamePrefixCls, "_").concat(mergedId) : mergedId;
  }

  // node_modules/antd/es/form/hooks/useForm.js
  function toNamePathStr(name5) {
    var namePath = toArray4(name5);
    return namePath.join("_");
  }
  function useForm2(form) {
    var _useRcForm = useForm_default(), _useRcForm2 = _slicedToArray(_useRcForm, 1), rcForm = _useRcForm2[0];
    var itemsRef = React198.useRef({});
    var wrapForm = React198.useMemo(function() {
      return form !== null && form !== void 0 ? form : _extends(_extends({}, rcForm), {
        __INTERNAL__: {
          itemRef: function itemRef2(name5) {
            return function(node) {
              var namePathStr = toNamePathStr(name5);
              if (node) {
                itemsRef.current[namePathStr] = node;
              } else {
                delete itemsRef.current[namePathStr];
              }
            };
          }
        },
        scrollToField: function scrollToField(name5) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var namePath = toArray4(name5);
          var fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);
          var node = fieldId ? document.getElementById(fieldId) : null;
          if (node) {
            es_default16(node, _extends({
              scrollMode: "if-needed",
              block: "nearest"
            }, options));
          }
        },
        getFieldInstance: function getFieldInstance(name5) {
          var namePathStr = toNamePathStr(name5);
          return itemsRef.current[namePathStr];
        }
      });
    }, [form, rcForm]);
    return [wrapForm];
  }

  // node_modules/antd/es/form/Form.js
  var __rest25 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var InternalForm2 = function InternalForm3(props, ref) {
    var _classNames;
    var contextSize = React199.useContext(SizeContext_default);
    var contextDisabled = React199.useContext(DisabledContext_default);
    var _React$useContext = React199.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction, contextForm = _React$useContext.form;
    var customizePrefixCls = props.prefixCls, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className, _props$size = props.size, size = _props$size === void 0 ? contextSize : _props$size, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? contextDisabled : _props$disabled, form = props.form, colon = props.colon, labelAlign = props.labelAlign, labelWrap = props.labelWrap, labelCol = props.labelCol, wrapperCol = props.wrapperCol, hideRequiredMark = props.hideRequiredMark, _props$layout = props.layout, layout = _props$layout === void 0 ? "horizontal" : _props$layout, scrollToFirstError = props.scrollToFirstError, requiredMark = props.requiredMark, onFinishFailed = props.onFinishFailed, name5 = props.name, restFormProps = __rest25(props, ["prefixCls", "className", "size", "disabled", "form", "colon", "labelAlign", "labelWrap", "labelCol", "wrapperCol", "hideRequiredMark", "layout", "scrollToFirstError", "requiredMark", "onFinishFailed", "name"]);
    var mergedRequiredMark = (0, import_react53.useMemo)(function() {
      if (requiredMark !== void 0) {
        return requiredMark;
      }
      if (contextForm && contextForm.requiredMark !== void 0) {
        return contextForm.requiredMark;
      }
      if (hideRequiredMark) {
        return false;
      }
      return true;
    }, [hideRequiredMark, requiredMark, contextForm]);
    var mergedColon = colon !== null && colon !== void 0 ? colon : contextForm === null || contextForm === void 0 ? void 0 : contextForm.colon;
    var prefixCls = getPrefixCls("form", customizePrefixCls);
    var formClassName = (0, import_classnames78.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(layout), true), _defineProperty(_classNames, "".concat(prefixCls, "-hide-required-mark"), mergedRequiredMark === false), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(size), size), _classNames), className);
    var _useForm = useForm2(form), _useForm2 = _slicedToArray(_useForm, 1), wrapForm = _useForm2[0];
    var __INTERNAL__ = wrapForm.__INTERNAL__;
    __INTERNAL__.name = name5;
    var formContextValue = (0, import_react53.useMemo)(function() {
      return {
        name: name5,
        labelAlign,
        labelCol,
        labelWrap,
        wrapperCol,
        vertical: layout === "vertical",
        colon: mergedColon,
        requiredMark: mergedRequiredMark,
        itemRef: __INTERNAL__.itemRef,
        form: wrapForm
      };
    }, [name5, labelAlign, labelCol, wrapperCol, layout, mergedColon, mergedRequiredMark, wrapForm]);
    React199.useImperativeHandle(ref, function() {
      return wrapForm;
    });
    var onInternalFinishFailed = function onInternalFinishFailed2(errorInfo) {
      onFinishFailed === null || onFinishFailed === void 0 ? void 0 : onFinishFailed(errorInfo);
      var defaultScrollToFirstError = {
        block: "nearest"
      };
      if (scrollToFirstError && errorInfo.errorFields.length) {
        if (_typeof(scrollToFirstError) === "object") {
          defaultScrollToFirstError = scrollToFirstError;
        }
        wrapForm.scrollToField(errorInfo.errorFields[0].name, defaultScrollToFirstError);
      }
    };
    return /* @__PURE__ */ React199.createElement(DisabledContextProvider, {
      disabled
    }, /* @__PURE__ */ React199.createElement(SizeContextProvider, {
      size
    }, /* @__PURE__ */ React199.createElement(FormContext2.Provider, {
      value: formContextValue
    }, /* @__PURE__ */ React199.createElement(es_default2, _extends({
      id: name5
    }, restFormProps, {
      name: name5,
      onFinishFailed: onInternalFinishFailed,
      form: wrapForm,
      className: formClassName
    })))));
  };
  var Form3 = /* @__PURE__ */ React199.forwardRef(InternalForm2);
  var Form_default2 = Form3;

  // node_modules/antd/es/form/FormItem/index.js
  var React206 = __toESM(require_react());
  var import_react56 = __toESM(require_react());

  // node_modules/antd/es/form/hooks/useFormItemStatus.js
  var import_react54 = __toESM(require_react());
  var useFormItemStatus = function useFormItemStatus2() {
    var _useContext = (0, import_react54.useContext)(FormItemInputContext), status = _useContext.status;
    true ? warning_default2(status !== void 0, "Form.Item", "Form.Item.useStatus should be used under Form.Item component. For more information: ".concat(window.location.protocol, "//").concat(window.location.host, "/components/form-cn/#Form.Item.useStatus")) : void 0;
    return {
      status
    };
  };
  var useFormItemStatus_default = useFormItemStatus;

  // node_modules/antd/es/form/hooks/useFrameState.js
  var React200 = __toESM(require_react());
  var import_react55 = __toESM(require_react());
  function useFrameState(defaultValue) {
    var _React$useState = React200.useState(defaultValue), _React$useState2 = _slicedToArray(_React$useState, 2), value = _React$useState2[0], setValue2 = _React$useState2[1];
    var frameRef = (0, import_react55.useRef)(null);
    var batchRef = (0, import_react55.useRef)([]);
    var destroyRef = (0, import_react55.useRef)(false);
    React200.useEffect(function() {
      destroyRef.current = false;
      return function() {
        destroyRef.current = true;
        raf_default.cancel(frameRef.current);
        frameRef.current = null;
      };
    }, []);
    function setFrameValue(updater) {
      if (destroyRef.current) {
        return;
      }
      if (frameRef.current === null) {
        batchRef.current = [];
        frameRef.current = raf_default(function() {
          frameRef.current = null;
          setValue2(function(prevValue) {
            var current = prevValue;
            batchRef.current.forEach(function(func) {
              current = func(current);
            });
            return current;
          });
        });
      }
      batchRef.current.push(updater);
    }
    return [value, setFrameValue];
  }

  // node_modules/antd/es/form/hooks/useItemRef.js
  var React201 = __toESM(require_react());
  function useItemRef() {
    var _React$useContext = React201.useContext(FormContext2), itemRef2 = _React$useContext.itemRef;
    var cacheRef = React201.useRef({});
    function getRef(name5, children) {
      var childrenRef = children && _typeof(children) === "object" && children.ref;
      var nameStr = name5.join("_");
      if (cacheRef.current.name !== nameStr || cacheRef.current.originRef !== childrenRef) {
        cacheRef.current.name = nameStr;
        cacheRef.current.originRef = childrenRef;
        cacheRef.current.ref = composeRef(itemRef2(name5), childrenRef);
      }
      return cacheRef.current.ref;
    }
    return getRef;
  }

  // node_modules/antd/es/form/FormItem/ItemHolder.js
  var import_classnames81 = __toESM(require_classnames());
  var React205 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/QuestionCircleOutlined.js
  var React202 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/QuestionCircleOutlined.js
  var QuestionCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z" } }] }, "name": "question-circle", "theme": "outlined" };
  var QuestionCircleOutlined_default = QuestionCircleOutlined;

  // node_modules/@ant-design/icons/es/icons/QuestionCircleOutlined.js
  var QuestionCircleOutlined2 = function QuestionCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React202.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: QuestionCircleOutlined_default
    }));
  };
  QuestionCircleOutlined2.displayName = "QuestionCircleOutlined";
  var QuestionCircleOutlined_default2 = /* @__PURE__ */ React202.forwardRef(QuestionCircleOutlined2);

  // node_modules/antd/es/form/FormItemLabel.js
  var import_classnames79 = __toESM(require_classnames());
  var React203 = __toESM(require_react());
  var __rest26 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  function toTooltipProps(tooltip) {
    if (!tooltip) {
      return null;
    }
    if (_typeof(tooltip) === "object" && !/* @__PURE__ */ React203.isValidElement(tooltip)) {
      return tooltip;
    }
    return {
      title: tooltip
    };
  }
  var FormItemLabel = function FormItemLabel2(_ref) {
    var prefixCls = _ref.prefixCls, label = _ref.label, htmlFor = _ref.htmlFor, labelCol = _ref.labelCol, labelAlign = _ref.labelAlign, colon = _ref.colon, required4 = _ref.required, requiredMark = _ref.requiredMark, tooltip = _ref.tooltip;
    var _useLocaleReceiver = useLocaleReceiver("Form"), _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1), formLocale = _useLocaleReceiver2[0];
    if (!label)
      return null;
    return /* @__PURE__ */ React203.createElement(FormContext2.Consumer, {
      key: "label"
    }, function(_ref2) {
      var _classNames2;
      var vertical = _ref2.vertical, contextLabelAlign = _ref2.labelAlign, contextLabelCol = _ref2.labelCol, labelWrap = _ref2.labelWrap, contextColon = _ref2.colon;
      var _a;
      var mergedLabelCol = labelCol || contextLabelCol || {};
      var mergedLabelAlign = labelAlign || contextLabelAlign;
      var labelClsBasic = "".concat(prefixCls, "-item-label");
      var labelColClassName = (0, import_classnames79.default)(labelClsBasic, mergedLabelAlign === "left" && "".concat(labelClsBasic, "-left"), mergedLabelCol.className, _defineProperty({}, "".concat(labelClsBasic, "-wrap"), !!labelWrap));
      var labelChildren = label;
      var computedColon = colon === true || contextColon !== false && colon !== false;
      var haveColon = computedColon && !vertical;
      if (haveColon && typeof label === "string" && label.trim() !== "") {
        labelChildren = label.replace(/[:|：]\s*$/, "");
      }
      var tooltipProps = toTooltipProps(tooltip);
      if (tooltipProps) {
        var _tooltipProps$icon = tooltipProps.icon, icon = _tooltipProps$icon === void 0 ? /* @__PURE__ */ React203.createElement(QuestionCircleOutlined_default2, null) : _tooltipProps$icon, restTooltipProps = __rest26(tooltipProps, ["icon"]);
        var tooltipNode = /* @__PURE__ */ React203.createElement(tooltip_default, _extends({}, restTooltipProps), /* @__PURE__ */ React203.cloneElement(icon, {
          className: "".concat(prefixCls, "-item-tooltip"),
          title: ""
        }));
        labelChildren = /* @__PURE__ */ React203.createElement(React203.Fragment, null, labelChildren, tooltipNode);
      }
      if (requiredMark === "optional" && !required4) {
        labelChildren = /* @__PURE__ */ React203.createElement(React203.Fragment, null, labelChildren, /* @__PURE__ */ React203.createElement("span", {
          className: "".concat(prefixCls, "-item-optional"),
          title: ""
        }, (formLocale === null || formLocale === void 0 ? void 0 : formLocale.optional) || ((_a = default_default.Form) === null || _a === void 0 ? void 0 : _a.optional)));
      }
      var labelClassName = (0, import_classnames79.default)((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-item-required"), required4), _defineProperty(_classNames2, "".concat(prefixCls, "-item-required-mark-optional"), requiredMark === "optional"), _defineProperty(_classNames2, "".concat(prefixCls, "-item-no-colon"), !computedColon), _classNames2));
      return /* @__PURE__ */ React203.createElement(col_default, _extends({}, mergedLabelCol, {
        className: labelColClassName
      }), /* @__PURE__ */ React203.createElement("label", {
        htmlFor,
        className: labelClassName,
        title: typeof label === "string" ? label : ""
      }, labelChildren));
    });
  };
  var FormItemLabel_default = FormItemLabel;

  // node_modules/antd/es/form/FormItemInput.js
  var import_classnames80 = __toESM(require_classnames());
  var React204 = __toESM(require_react());
  var FormItemInput = function FormItemInput2(props) {
    var prefixCls = props.prefixCls, status = props.status, wrapperCol = props.wrapperCol, children = props.children, errors = props.errors, warnings = props.warnings, formItemRender = props._internalItemRender, extra = props.extra, help = props.help, fieldId = props.fieldId, marginBottom = props.marginBottom, onErrorVisibleChanged = props.onErrorVisibleChanged;
    var baseClassName = "".concat(prefixCls, "-item");
    var formContext = React204.useContext(FormContext2);
    var mergedWrapperCol = wrapperCol || formContext.wrapperCol || {};
    var className = (0, import_classnames80.default)("".concat(baseClassName, "-control"), mergedWrapperCol.className);
    var subFormContext = React204.useMemo(function() {
      return _extends({}, formContext);
    }, [formContext]);
    delete subFormContext.labelCol;
    delete subFormContext.wrapperCol;
    var inputDom = /* @__PURE__ */ React204.createElement("div", {
      className: "".concat(baseClassName, "-control-input")
    }, /* @__PURE__ */ React204.createElement("div", {
      className: "".concat(baseClassName, "-control-input-content")
    }, children));
    var formItemContext = React204.useMemo(function() {
      return {
        prefixCls,
        status
      };
    }, [prefixCls, status]);
    var errorListDom = marginBottom !== null || errors.length || warnings.length ? /* @__PURE__ */ React204.createElement("div", {
      style: {
        display: "flex",
        flexWrap: "nowrap"
      }
    }, /* @__PURE__ */ React204.createElement(FormItemPrefixContext.Provider, {
      value: formItemContext
    }, /* @__PURE__ */ React204.createElement(ErrorList, {
      fieldId,
      errors,
      warnings,
      help,
      helpStatus: status,
      className: "".concat(baseClassName, "-explain-connected"),
      onVisibleChanged: onErrorVisibleChanged
    })), !!marginBottom && /* @__PURE__ */ React204.createElement("div", {
      style: {
        width: 0,
        height: marginBottom
      }
    })) : null;
    var extraProps = {};
    if (fieldId) {
      extraProps.id = "".concat(fieldId, "_extra");
    }
    var extraDom = extra ? /* @__PURE__ */ React204.createElement("div", _extends({}, extraProps, {
      className: "".concat(baseClassName, "-extra")
    }), extra) : null;
    var dom = formItemRender && formItemRender.mark === "pro_table_render" && formItemRender.render ? formItemRender.render(props, {
      input: inputDom,
      errorList: errorListDom,
      extra: extraDom
    }) : /* @__PURE__ */ React204.createElement(React204.Fragment, null, inputDom, errorListDom, extraDom);
    return /* @__PURE__ */ React204.createElement(FormContext2.Provider, {
      value: subFormContext
    }, /* @__PURE__ */ React204.createElement(col_default, _extends({}, mergedWrapperCol, {
      className
    }), dom));
  };
  var FormItemInput_default = FormItemInput;

  // node_modules/antd/es/form/FormItem/ItemHolder.js
  var __rest27 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var iconMap = {
    success: CheckCircleFilled_default2,
    warning: ExclamationCircleFilled_default2,
    error: CloseCircleFilled_default2,
    validating: LoadingOutlined_default2
  };
  function ItemHolder(props) {
    var _itemClassName;
    var prefixCls = props.prefixCls, className = props.className, style2 = props.style, help = props.help, errors = props.errors, warnings = props.warnings, validateStatus2 = props.validateStatus, meta = props.meta, hasFeedback = props.hasFeedback, hidden2 = props.hidden, children = props.children, fieldId = props.fieldId, isRequired = props.isRequired, onSubItemMetaChange = props.onSubItemMetaChange, restProps = __rest27(props, ["prefixCls", "className", "style", "help", "errors", "warnings", "validateStatus", "meta", "hasFeedback", "hidden", "children", "fieldId", "isRequired", "onSubItemMetaChange"]);
    var itemPrefixCls = "".concat(prefixCls, "-item");
    var _React$useContext = React205.useContext(FormContext2), requiredMark = _React$useContext.requiredMark;
    var itemRef2 = React205.useRef(null);
    var debounceErrors = useDebounce(errors);
    var debounceWarnings = useDebounce(warnings);
    var hasHelp = help !== void 0 && help !== null;
    var hasError = !!(hasHelp || errors.length || warnings.length);
    var _React$useState = React205.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), marginBottom = _React$useState2[0], setMarginBottom = _React$useState2[1];
    useLayoutEffect_default(function() {
      if (hasError && itemRef2.current) {
        var itemStyle = getComputedStyle(itemRef2.current);
        setMarginBottom(parseInt(itemStyle.marginBottom, 10));
      }
    }, [hasError]);
    var onErrorVisibleChanged = function onErrorVisibleChanged2(nextVisible) {
      if (!nextVisible) {
        setMarginBottom(null);
      }
    };
    var mergedValidateStatus = "";
    if (validateStatus2 !== void 0) {
      mergedValidateStatus = validateStatus2;
    } else if (meta.validating) {
      mergedValidateStatus = "validating";
    } else if (debounceErrors.length) {
      mergedValidateStatus = "error";
    } else if (debounceWarnings.length) {
      mergedValidateStatus = "warning";
    } else if (meta.touched) {
      mergedValidateStatus = "success";
    }
    var formItemStatusContext = React205.useMemo(function() {
      var feedbackIcon;
      if (hasFeedback) {
        var IconNode3 = mergedValidateStatus && iconMap[mergedValidateStatus];
        feedbackIcon = IconNode3 ? /* @__PURE__ */ React205.createElement("span", {
          className: (0, import_classnames81.default)("".concat(itemPrefixCls, "-feedback-icon"), "".concat(itemPrefixCls, "-feedback-icon-").concat(mergedValidateStatus))
        }, /* @__PURE__ */ React205.createElement(IconNode3, null)) : null;
      }
      return {
        status: mergedValidateStatus,
        hasFeedback,
        feedbackIcon,
        isFormItemInput: true
      };
    }, [mergedValidateStatus, hasFeedback]);
    var itemClassName = (_itemClassName = {}, _defineProperty(_itemClassName, itemPrefixCls, true), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-with-help"), hasHelp || debounceErrors.length || debounceWarnings.length), _defineProperty(_itemClassName, "".concat(className), !!className), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-has-feedback"), mergedValidateStatus && hasFeedback), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-has-success"), mergedValidateStatus === "success"), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-has-warning"), mergedValidateStatus === "warning"), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-has-error"), mergedValidateStatus === "error"), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-is-validating"), mergedValidateStatus === "validating"), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-hidden"), hidden2), _itemClassName);
    return /* @__PURE__ */ React205.createElement("div", {
      className: (0, import_classnames81.default)(itemClassName),
      style: style2,
      ref: itemRef2
    }, /* @__PURE__ */ React205.createElement(row_default, _extends({
      className: "".concat(itemPrefixCls, "-row")
    }, omit(restProps, ["_internalItemRender", "colon", "dependencies", "extra", "fieldKey", "getValueFromEvent", "getValueProps", "htmlFor", "id", "initialValue", "isListField", "label", "labelAlign", "labelCol", "labelWrap", "messageVariables", "name", "normalize", "noStyle", "preserve", "required", "requiredMark", "rules", "shouldUpdate", "trigger", "tooltip", "validateFirst", "validateTrigger", "valuePropName", "wrapperCol"])), /* @__PURE__ */ React205.createElement(FormItemLabel_default, _extends({
      htmlFor: fieldId,
      required: isRequired,
      requiredMark
    }, props, {
      prefixCls
    })), /* @__PURE__ */ React205.createElement(FormItemInput_default, _extends({}, props, meta, {
      errors: debounceErrors,
      warnings: debounceWarnings,
      prefixCls,
      status: mergedValidateStatus,
      help,
      marginBottom,
      onErrorVisibleChanged
    }), /* @__PURE__ */ React205.createElement(NoStyleItemContext.Provider, {
      value: onSubItemMetaChange
    }, /* @__PURE__ */ React205.createElement(FormItemInputContext.Provider, {
      value: formItemStatusContext
    }, children)))), !!marginBottom && /* @__PURE__ */ React205.createElement("div", {
      className: "".concat(itemPrefixCls, "-margin-offset"),
      style: {
        marginBottom: -marginBottom
      }
    }));
  }

  // node_modules/antd/es/form/FormItem/index.js
  var NAME_SPLIT = "__SPLIT__";
  var ValidateStatuses = tuple("success", "warning", "error", "validating", "");
  var MemoInput = /* @__PURE__ */ React206.memo(function(_ref) {
    var children = _ref.children;
    return children;
  }, function(prev, next) {
    return prev.value === next.value && prev.update === next.update && prev.childProps.length === next.childProps.length && prev.childProps.every(function(value, index3) {
      return value === next.childProps[index3];
    });
  });
  function hasValidName(name5) {
    if (name5 === null) {
      true ? warning_default2(false, "Form.Item", "`null` is passed as `name` property") : void 0;
    }
    return !(name5 === void 0 || name5 === null);
  }
  function genEmptyMeta() {
    return {
      errors: [],
      warnings: [],
      touched: false,
      validating: false,
      name: []
    };
  }
  function InternalFormItem(props) {
    var name5 = props.name, noStyle = props.noStyle, dependencies = props.dependencies, customizePrefixCls = props.prefixCls, shouldUpdate = props.shouldUpdate, rules2 = props.rules, children = props.children, required4 = props.required, label = props.label, messageVariables = props.messageVariables, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? "onChange" : _props$trigger, validateTrigger = props.validateTrigger, hidden2 = props.hidden;
    var _useContext = (0, import_react56.useContext)(ConfigContext), getPrefixCls = _useContext.getPrefixCls;
    var _useContext2 = (0, import_react56.useContext)(FormContext2), formName = _useContext2.name;
    var isRenderProps = typeof children === "function";
    var notifyParentMetaChange = (0, import_react56.useContext)(NoStyleItemContext);
    var _useContext3 = (0, import_react56.useContext)(FieldContext_default), contextValidateTrigger = _useContext3.validateTrigger;
    var mergedValidateTrigger = validateTrigger !== void 0 ? validateTrigger : contextValidateTrigger;
    var hasName = hasValidName(name5);
    var prefixCls = getPrefixCls("form", customizePrefixCls);
    var listContext = React206.useContext(ListContext_default);
    var fieldKeyPathRef = React206.useRef();
    var _useFrameState = useFrameState({}), _useFrameState2 = _slicedToArray(_useFrameState, 2), subFieldErrors = _useFrameState2[0], setSubFieldErrors = _useFrameState2[1];
    var _useState = useSafeState(function() {
      return genEmptyMeta();
    }), _useState2 = _slicedToArray(_useState, 2), meta = _useState2[0], setMeta = _useState2[1];
    var onMetaChange = function onMetaChange2(nextMeta) {
      var keyInfo = listContext === null || listContext === void 0 ? void 0 : listContext.getKey(nextMeta.name);
      setMeta(nextMeta.destroy ? genEmptyMeta() : nextMeta, true);
      if (noStyle && notifyParentMetaChange) {
        var namePath = nextMeta.name;
        if (!nextMeta.destroy) {
          if (keyInfo !== void 0) {
            var _keyInfo = _slicedToArray(keyInfo, 2), fieldKey = _keyInfo[0], restPath = _keyInfo[1];
            namePath = [fieldKey].concat(_toConsumableArray(restPath));
            fieldKeyPathRef.current = namePath;
          }
        } else {
          namePath = fieldKeyPathRef.current || namePath;
        }
        notifyParentMetaChange(nextMeta, namePath);
      }
    };
    var onSubItemMetaChange = function onSubItemMetaChange2(subMeta, uniqueKeys) {
      setSubFieldErrors(function(prevSubFieldErrors) {
        var clone2 = _extends({}, prevSubFieldErrors);
        var mergedNamePath = [].concat(_toConsumableArray(subMeta.name.slice(0, -1)), _toConsumableArray(uniqueKeys));
        var mergedNameKey = mergedNamePath.join(NAME_SPLIT);
        if (subMeta.destroy) {
          delete clone2[mergedNameKey];
        } else {
          clone2[mergedNameKey] = subMeta;
        }
        return clone2;
      });
    };
    var _React$useMemo = React206.useMemo(function() {
      var errorList = _toConsumableArray(meta.errors);
      var warningList = _toConsumableArray(meta.warnings);
      Object.values(subFieldErrors).forEach(function(subFieldError) {
        errorList.push.apply(errorList, _toConsumableArray(subFieldError.errors || []));
        warningList.push.apply(warningList, _toConsumableArray(subFieldError.warnings || []));
      });
      return [errorList, warningList];
    }, [subFieldErrors, meta.errors, meta.warnings]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), mergedErrors = _React$useMemo2[0], mergedWarnings = _React$useMemo2[1];
    var getItemRef = useItemRef();
    function renderLayout(baseChildren, fieldId, isRequired) {
      if (noStyle && !hidden2) {
        return baseChildren;
      }
      return /* @__PURE__ */ React206.createElement(ItemHolder, _extends({
        key: "row"
      }, props, {
        prefixCls,
        fieldId,
        isRequired,
        errors: mergedErrors,
        warnings: mergedWarnings,
        meta,
        onSubItemMetaChange
      }), baseChildren);
    }
    if (!hasName && !isRenderProps && !dependencies) {
      return renderLayout(children);
    }
    var variables = {};
    if (typeof label === "string") {
      variables.label = label;
    } else if (name5) {
      variables.label = String(name5);
    }
    if (messageVariables) {
      variables = _extends(_extends({}, variables), messageVariables);
    }
    return /* @__PURE__ */ React206.createElement(Field_default, _extends({}, props, {
      messageVariables: variables,
      trigger,
      validateTrigger: mergedValidateTrigger,
      onMetaChange
    }), function(control, renderMeta, context) {
      var mergedName = toArray4(name5).length && renderMeta ? renderMeta.name : [];
      var fieldId = getFieldId(mergedName, formName);
      var isRequired = required4 !== void 0 ? required4 : !!(rules2 && rules2.some(function(rule) {
        if (rule && _typeof(rule) === "object" && rule.required && !rule.warningOnly) {
          return true;
        }
        if (typeof rule === "function") {
          var ruleEntity = rule(context);
          return ruleEntity && ruleEntity.required && !ruleEntity.warningOnly;
        }
        return false;
      }));
      var mergedControl = _extends({}, control);
      var childNode = null;
      true ? warning_default2(!(shouldUpdate && dependencies), "Form.Item", "`shouldUpdate` and `dependencies` shouldn't be used together. See https://ant.design/components/form/#dependencies.") : void 0;
      if (Array.isArray(children) && hasName) {
        true ? warning_default2(false, "Form.Item", "`children` is array of render props cannot have `name`.") : void 0;
        childNode = children;
      } else if (isRenderProps && (!(shouldUpdate || dependencies) || hasName)) {
        true ? warning_default2(!!(shouldUpdate || dependencies), "Form.Item", "`children` of render props only work with `shouldUpdate` or `dependencies`.") : void 0;
        true ? warning_default2(!hasName, "Form.Item", "Do not use `name` with `children` of render props since it's not a field.") : void 0;
      } else if (dependencies && !isRenderProps && !hasName) {
        true ? warning_default2(false, "Form.Item", "Must set `name` or use render props when `dependencies` is set.") : void 0;
      } else if (isValidElement6(children)) {
        true ? warning_default2(children.props.defaultValue === void 0, "Form.Item", "`defaultValue` will not work on controlled Field. You should use `initialValues` of Form instead.") : void 0;
        var childProps = _extends(_extends({}, children.props), mergedControl);
        if (!childProps.id) {
          childProps.id = fieldId;
        }
        if (props.help || mergedErrors.length > 0 || mergedWarnings.length > 0 || props.extra) {
          var describedbyArr = [];
          if (props.help || mergedErrors.length > 0) {
            describedbyArr.push("".concat(fieldId, "_help"));
          }
          if (props.extra) {
            describedbyArr.push("".concat(fieldId, "_extra"));
          }
          childProps["aria-describedby"] = describedbyArr.join(" ");
        }
        if (mergedErrors.length > 0) {
          childProps["aria-invalid"] = "true";
        }
        if (isRequired) {
          childProps["aria-required"] = "true";
        }
        if (supportRef(children)) {
          childProps.ref = getItemRef(mergedName, children);
        }
        var triggers = new Set([].concat(_toConsumableArray(toArray4(trigger)), _toConsumableArray(toArray4(mergedValidateTrigger))));
        triggers.forEach(function(eventName) {
          childProps[eventName] = function() {
            var _a2, _c2;
            var _a, _b, _c;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            (_a = mergedControl[eventName]) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [mergedControl].concat(args));
            (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : (_c2 = _c).call.apply(_c2, [_b].concat(args));
          };
        });
        var watchingChildProps = [childProps["aria-required"], childProps["aria-invalid"], childProps["aria-describedby"]];
        childNode = /* @__PURE__ */ React206.createElement(MemoInput, {
          value: mergedControl[props.valuePropName || "value"],
          update: children,
          childProps: watchingChildProps
        }, cloneElement6(children, childProps));
      } else if (isRenderProps && (shouldUpdate || dependencies) && !hasName) {
        childNode = children(context);
      } else {
        true ? warning_default2(!mergedName.length, "Form.Item", "`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.") : void 0;
        childNode = children;
      }
      return renderLayout(childNode, fieldId, isRequired);
    });
  }
  var FormItem = InternalFormItem;
  FormItem.useStatus = useFormItemStatus_default;
  var FormItem_default = FormItem;

  // node_modules/antd/es/form/FormList.js
  var React207 = __toESM(require_react());
  var __rest28 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var FormList = function FormList2(_a) {
    var customizePrefixCls = _a.prefixCls, children = _a.children, props = __rest28(_a, ["prefixCls", "children"]);
    true ? warning_default2(!!props.name, "Form.List", "Miss `name` prop.") : void 0;
    var _React$useContext = React207.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("form", customizePrefixCls);
    var contextValue = React207.useMemo(function() {
      return {
        prefixCls,
        status: "error"
      };
    }, [prefixCls]);
    return /* @__PURE__ */ React207.createElement(List_default, _extends({}, props), function(fields, operation, meta) {
      return /* @__PURE__ */ React207.createElement(FormItemPrefixContext.Provider, {
        value: contextValue
      }, children(fields.map(function(field) {
        return _extends(_extends({}, field), {
          fieldKey: field.key
        });
      }), operation, {
        errors: meta.errors,
        warnings: meta.warnings
      }));
    });
  };
  var FormList_default = FormList;

  // node_modules/antd/es/form/hooks/useFormInstance.js
  var import_react57 = __toESM(require_react());
  function useFormInstance() {
    var _useContext = (0, import_react57.useContext)(FormContext2), form = _useContext.form;
    return form;
  }

  // node_modules/antd/es/form/index.js
  var Form4 = Form_default2;
  Form4.Item = FormItem_default;
  Form4.List = FormList_default;
  Form4.ErrorList = ErrorList;
  Form4.useForm = useForm2;
  Form4.useFormInstance = useFormInstance;
  Form4.useWatch = useWatch_default;
  Form4.Provider = FormProvider3;
  Form4.create = function() {
    true ? warning_default2(false, "Form", "antd v4 removed `Form.create`. Please remove or use `@ant-design/compatible` instead.") : void 0;
  };
  var form_default = Form4;

  // node_modules/@ant-design/icons/es/icons/EyeOutlined.js
  var React208 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EyeOutlined.js
  var EyeOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z" } }] }, "name": "eye", "theme": "outlined" };
  var EyeOutlined_default = EyeOutlined;

  // node_modules/@ant-design/icons/es/icons/EyeOutlined.js
  var EyeOutlined2 = function EyeOutlined3(props, ref) {
    return /* @__PURE__ */ React208.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: EyeOutlined_default
    }));
  };
  EyeOutlined2.displayName = "EyeOutlined";
  var EyeOutlined_default2 = /* @__PURE__ */ React208.forwardRef(EyeOutlined2);

  // node_modules/rc-dialog/es/DialogWrap.js
  var React215 = __toESM(require_react());

  // node_modules/rc-dialog/es/Dialog/index.js
  var React214 = __toESM(require_react());
  var import_react60 = __toESM(require_react());
  var import_classnames85 = __toESM(require_classnames());

  // node_modules/rc-util/es/hooks/useId.js
  var React209 = __toESM(require_react());
  function getUseId() {
    var fullClone2 = _objectSpread2({}, React209);
    return fullClone2.useId;
  }
  var uuid4 = 0;
  function useId2(id2) {
    var _React$useState = React209.useState("ssr-id"), _React$useState2 = _slicedToArray(_React$useState, 2), innerId = _React$useState2[0], setInnerId = _React$useState2[1];
    var useOriginId = getUseId();
    var reactNativeId = useOriginId === null || useOriginId === void 0 ? void 0 : useOriginId();
    React209.useEffect(function() {
      if (!useOriginId) {
        var nextId = uuid4;
        uuid4 += 1;
        setInnerId("rc_unique_".concat(nextId));
      }
    }, []);
    if (id2) {
      return id2;
    }
    if (false) {
      return "test-id";
    }
    return reactNativeId || innerId;
  }

  // node_modules/rc-dialog/es/Dialog/Mask.js
  var React210 = __toESM(require_react());
  var import_classnames82 = __toESM(require_classnames());
  function Mask2(props) {
    var prefixCls = props.prefixCls, style2 = props.style, visible = props.visible, maskProps = props.maskProps, motionName = props.motionName;
    return /* @__PURE__ */ React210.createElement(es_default3, {
      key: "mask",
      visible,
      motionName,
      leavedClassName: "".concat(prefixCls, "-mask-hidden")
    }, function(_ref) {
      var motionClassName = _ref.className, motionStyle = _ref.style;
      return /* @__PURE__ */ React210.createElement("div", _extends({
        style: _objectSpread2(_objectSpread2({}, motionStyle), style2),
        className: (0, import_classnames82.default)("".concat(prefixCls, "-mask"), motionClassName)
      }, maskProps));
    });
  }

  // node_modules/rc-dialog/es/util.js
  function getMotionName(prefixCls, transitionName2, animationName) {
    var motionName = transitionName2;
    if (!motionName && animationName) {
      motionName = "".concat(prefixCls, "-").concat(animationName);
    }
    return motionName;
  }
  function getScroll2(w2, top) {
    var ret = w2["page".concat(top ? "Y" : "X", "Offset")];
    var method4 = "scroll".concat(top ? "Top" : "Left");
    if (typeof ret !== "number") {
      var d2 = w2.document;
      ret = d2.documentElement[method4];
      if (typeof ret !== "number") {
        ret = d2.body[method4];
      }
    }
    return ret;
  }
  function offset2(el) {
    var rect = el.getBoundingClientRect();
    var pos = {
      left: rect.left,
      top: rect.top
    };
    var doc = el.ownerDocument;
    var w2 = doc.defaultView || doc.parentWindow;
    pos.left += getScroll2(w2);
    pos.top += getScroll2(w2, true);
    return pos;
  }

  // node_modules/rc-dialog/es/Dialog/Content/index.js
  var React213 = __toESM(require_react());
  var import_react59 = __toESM(require_react());
  var import_classnames84 = __toESM(require_classnames());

  // node_modules/rc-dialog/es/Dialog/Content/Panel.js
  var import_react58 = __toESM(require_react());
  var import_classnames83 = __toESM(require_classnames());

  // node_modules/rc-dialog/es/Dialog/Content/MemoChildren.js
  var React211 = __toESM(require_react());
  var MemoChildren_default = /* @__PURE__ */ React211.memo(function(_ref) {
    var children = _ref.children;
    return children;
  }, function(_, _ref2) {
    var shouldUpdate = _ref2.shouldUpdate;
    return !shouldUpdate;
  });

  // node_modules/rc-dialog/es/Dialog/Content/Panel.js
  var sentinelStyle = {
    width: 0,
    height: 0,
    overflow: "hidden",
    outline: "none"
  };
  var Panel2 = /* @__PURE__ */ import_react58.default.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, className = props.className, style2 = props.style, title = props.title, ariaId = props.ariaId, footer = props.footer, closable = props.closable, closeIcon = props.closeIcon, onClose2 = props.onClose, children = props.children, bodyStyle = props.bodyStyle, bodyProps = props.bodyProps, modalRender = props.modalRender, onMouseDown = props.onMouseDown, onMouseUp = props.onMouseUp, holderRef = props.holderRef, visible = props.visible, forceRender = props.forceRender, width = props.width, height = props.height;
    var sentinelStartRef = (0, import_react58.useRef)();
    var sentinelEndRef = (0, import_react58.useRef)();
    import_react58.default.useImperativeHandle(ref, function() {
      return {
        focus: function focus() {
          var _sentinelStartRef$cur;
          (_sentinelStartRef$cur = sentinelStartRef.current) === null || _sentinelStartRef$cur === void 0 ? void 0 : _sentinelStartRef$cur.focus();
        },
        changeActive: function changeActive(next) {
          var _document = document, activeElement = _document.activeElement;
          if (next && activeElement === sentinelEndRef.current) {
            sentinelStartRef.current.focus();
          } else if (!next && activeElement === sentinelStartRef.current) {
            sentinelEndRef.current.focus();
          }
        }
      };
    });
    var contentStyle = {};
    if (width !== void 0) {
      contentStyle.width = width;
    }
    if (height !== void 0) {
      contentStyle.height = height;
    }
    var footerNode;
    if (footer) {
      footerNode = /* @__PURE__ */ import_react58.default.createElement("div", {
        className: "".concat(prefixCls, "-footer")
      }, footer);
    }
    var headerNode;
    if (title) {
      headerNode = /* @__PURE__ */ import_react58.default.createElement("div", {
        className: "".concat(prefixCls, "-header")
      }, /* @__PURE__ */ import_react58.default.createElement("div", {
        className: "".concat(prefixCls, "-title"),
        id: ariaId
      }, title));
    }
    var closer;
    if (closable) {
      closer = /* @__PURE__ */ import_react58.default.createElement("button", {
        type: "button",
        onClick: onClose2,
        "aria-label": "Close",
        className: "".concat(prefixCls, "-close")
      }, closeIcon || /* @__PURE__ */ import_react58.default.createElement("span", {
        className: "".concat(prefixCls, "-close-x")
      }));
    }
    var content = /* @__PURE__ */ import_react58.default.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, closer, headerNode, /* @__PURE__ */ import_react58.default.createElement("div", _extends({
      className: "".concat(prefixCls, "-body"),
      style: bodyStyle
    }, bodyProps), children), footerNode);
    return /* @__PURE__ */ import_react58.default.createElement("div", {
      key: "dialog-element",
      role: "dialog",
      "aria-labelledby": title ? ariaId : null,
      "aria-modal": "true",
      ref: holderRef,
      style: _objectSpread2(_objectSpread2({}, style2), contentStyle),
      className: (0, import_classnames83.default)(prefixCls, className),
      onMouseDown,
      onMouseUp
    }, /* @__PURE__ */ import_react58.default.createElement("div", {
      tabIndex: 0,
      ref: sentinelStartRef,
      style: sentinelStyle,
      "aria-hidden": "true"
    }), /* @__PURE__ */ import_react58.default.createElement(MemoChildren_default, {
      shouldUpdate: visible || forceRender
    }, modalRender ? modalRender(content) : content), /* @__PURE__ */ import_react58.default.createElement("div", {
      tabIndex: 0,
      ref: sentinelEndRef,
      style: sentinelStyle,
      "aria-hidden": "true"
    }));
  });
  if (true) {
    Panel2.displayName = "Panel";
  }
  var Panel_default2 = Panel2;

  // node_modules/rc-dialog/es/Dialog/Content/index.js
  var Content2 = /* @__PURE__ */ React213.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, title = props.title, style2 = props.style, className = props.className, visible = props.visible, forceRender = props.forceRender, destroyOnClose = props.destroyOnClose, motionName = props.motionName, ariaId = props.ariaId, onVisibleChanged = props.onVisibleChanged, mousePosition2 = props.mousePosition;
    var dialogRef = (0, import_react59.useRef)();
    var _React$useState = React213.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), transformOrigin = _React$useState2[0], setTransformOrigin = _React$useState2[1];
    var contentStyle = {};
    if (transformOrigin) {
      contentStyle.transformOrigin = transformOrigin;
    }
    function onPrepare() {
      var elementOffset = offset2(dialogRef.current);
      setTransformOrigin(mousePosition2 ? "".concat(mousePosition2.x - elementOffset.left, "px ").concat(mousePosition2.y - elementOffset.top, "px") : "");
    }
    return /* @__PURE__ */ React213.createElement(es_default3, {
      visible,
      onVisibleChanged,
      onAppearPrepare: onPrepare,
      onEnterPrepare: onPrepare,
      forceRender,
      motionName,
      removeOnLeave: destroyOnClose,
      ref: dialogRef
    }, function(_ref, motionRef) {
      var motionClassName = _ref.className, motionStyle = _ref.style;
      return /* @__PURE__ */ React213.createElement(Panel_default2, _extends({}, props, {
        ref,
        title,
        ariaId,
        prefixCls,
        holderRef: motionRef,
        style: _objectSpread2(_objectSpread2(_objectSpread2({}, motionStyle), style2), contentStyle),
        className: (0, import_classnames84.default)(className, motionClassName)
      }));
    });
  });
  Content2.displayName = "Content";
  var Content_default = Content2;

  // node_modules/rc-dialog/es/Dialog/index.js
  function Dialog(props) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-dialog" : _props$prefixCls, zIndex = props.zIndex, _props$visible = props.visible, visible = _props$visible === void 0 ? false : _props$visible, _props$keyboard = props.keyboard, keyboard = _props$keyboard === void 0 ? true : _props$keyboard, _props$focusTriggerAf = props.focusTriggerAfterClose, focusTriggerAfterClose = _props$focusTriggerAf === void 0 ? true : _props$focusTriggerAf, scrollLocker = props.scrollLocker, wrapStyle = props.wrapStyle, wrapClassName = props.wrapClassName, wrapProps = props.wrapProps, onClose2 = props.onClose, afterClose = props.afterClose, transitionName2 = props.transitionName, animation = props.animation, _props$closable = props.closable, closable = _props$closable === void 0 ? true : _props$closable, _props$mask = props.mask, mask = _props$mask === void 0 ? true : _props$mask, maskTransitionName = props.maskTransitionName, maskAnimation = props.maskAnimation, _props$maskClosable = props.maskClosable, maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable, maskStyle = props.maskStyle, maskProps = props.maskProps, rootClassName = props.rootClassName;
    var lastOutSideActiveElementRef = (0, import_react60.useRef)();
    var wrapperRef = (0, import_react60.useRef)();
    var contentRef = (0, import_react60.useRef)();
    var _React$useState = React214.useState(visible), _React$useState2 = _slicedToArray(_React$useState, 2), animatedVisible = _React$useState2[0], setAnimatedVisible = _React$useState2[1];
    var ariaId = useId2();
    function onDialogVisibleChanged(newVisible) {
      if (newVisible) {
        if (!contains(wrapperRef.current, document.activeElement)) {
          var _contentRef$current;
          lastOutSideActiveElementRef.current = document.activeElement;
          (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.focus();
        }
      } else {
        setAnimatedVisible(false);
        if (mask && lastOutSideActiveElementRef.current && focusTriggerAfterClose) {
          try {
            lastOutSideActiveElementRef.current.focus({
              preventScroll: true
            });
          } catch (e3) {
          }
          lastOutSideActiveElementRef.current = null;
        }
        if (animatedVisible) {
          afterClose === null || afterClose === void 0 ? void 0 : afterClose();
        }
      }
    }
    function onInternalClose(e3) {
      onClose2 === null || onClose2 === void 0 ? void 0 : onClose2(e3);
    }
    var contentClickRef = (0, import_react60.useRef)(false);
    var contentTimeoutRef = (0, import_react60.useRef)();
    var onContentMouseDown = function onContentMouseDown2() {
      clearTimeout(contentTimeoutRef.current);
      contentClickRef.current = true;
    };
    var onContentMouseUp = function onContentMouseUp2() {
      contentTimeoutRef.current = setTimeout(function() {
        contentClickRef.current = false;
      });
    };
    var onWrapperClick = null;
    if (maskClosable) {
      onWrapperClick = function onWrapperClick2(e3) {
        if (contentClickRef.current) {
          contentClickRef.current = false;
        } else if (wrapperRef.current === e3.target) {
          onInternalClose(e3);
        }
      };
    }
    function onWrapperKeyDown(e3) {
      if (keyboard && e3.keyCode === KeyCode_default.ESC) {
        e3.stopPropagation();
        onInternalClose(e3);
        return;
      }
      if (visible) {
        if (e3.keyCode === KeyCode_default.TAB) {
          contentRef.current.changeActive(!e3.shiftKey);
        }
      }
    }
    (0, import_react60.useEffect)(function() {
      if (visible) {
        setAnimatedVisible(true);
      }
      return function() {
      };
    }, [visible]);
    (0, import_react60.useEffect)(function() {
      return function() {
        clearTimeout(contentTimeoutRef.current);
      };
    }, []);
    (0, import_react60.useEffect)(function() {
      if (animatedVisible) {
        scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.lock();
        return scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.unLock;
      }
      return function() {
      };
    }, [animatedVisible, scrollLocker]);
    return /* @__PURE__ */ React214.createElement("div", _extends({
      className: (0, import_classnames85.default)("".concat(prefixCls, "-root"), rootClassName)
    }, pickAttrs(props, {
      data: true
    })), /* @__PURE__ */ React214.createElement(Mask2, {
      prefixCls,
      visible: mask && visible,
      motionName: getMotionName(prefixCls, maskTransitionName, maskAnimation),
      style: _objectSpread2({
        zIndex
      }, maskStyle),
      maskProps
    }), /* @__PURE__ */ React214.createElement("div", _extends({
      tabIndex: -1,
      onKeyDown: onWrapperKeyDown,
      className: (0, import_classnames85.default)("".concat(prefixCls, "-wrap"), wrapClassName),
      ref: wrapperRef,
      onClick: onWrapperClick,
      style: _objectSpread2(_objectSpread2({
        zIndex
      }, wrapStyle), {}, {
        display: !animatedVisible ? "none" : null
      })
    }, wrapProps), /* @__PURE__ */ React214.createElement(Content_default, _extends({}, props, {
      onMouseDown: onContentMouseDown,
      onMouseUp: onContentMouseUp,
      ref: contentRef,
      closable,
      ariaId,
      prefixCls,
      visible,
      onClose: onInternalClose,
      onVisibleChanged: onDialogVisibleChanged,
      motionName: getMotionName(prefixCls, transitionName2, animation)
    }))));
  }

  // node_modules/rc-dialog/es/DialogWrap.js
  var DialogWrap = function DialogWrap2(props) {
    var visible = props.visible, getContainer3 = props.getContainer, forceRender = props.forceRender, _props$destroyOnClose = props.destroyOnClose, destroyOnClose = _props$destroyOnClose === void 0 ? false : _props$destroyOnClose, _afterClose = props.afterClose;
    var _React$useState = React215.useState(visible), _React$useState2 = _slicedToArray(_React$useState, 2), animatedVisible = _React$useState2[0], setAnimatedVisible = _React$useState2[1];
    React215.useEffect(function() {
      if (visible) {
        setAnimatedVisible(true);
      }
    }, [visible]);
    if (getContainer3 === false) {
      return /* @__PURE__ */ React215.createElement(Dialog, _extends({}, props, {
        getOpenCount: function getOpenCount() {
          return 2;
        }
        // 不对 body 做任何操作。。
      }));
    }
    if (!forceRender && destroyOnClose && !animatedVisible) {
      return null;
    }
    return /* @__PURE__ */ React215.createElement(PortalWrapper_default, {
      visible,
      forceRender,
      getContainer: getContainer3
    }, function(childProps) {
      return /* @__PURE__ */ React215.createElement(Dialog, _extends({}, props, {
        destroyOnClose,
        afterClose: function afterClose() {
          _afterClose === null || _afterClose === void 0 ? void 0 : _afterClose();
          setAnimatedVisible(false);
        }
      }, childProps));
    });
  };
  DialogWrap.displayName = "Dialog";
  var DialogWrap_default = DialogWrap;

  // node_modules/rc-dialog/es/index.js
  var es_default17 = DialogWrap_default;

  // node_modules/antd/es/input/Group.js
  var import_classnames86 = __toESM(require_classnames());
  var React216 = __toESM(require_react());
  var import_react61 = __toESM(require_react());
  var Group = function Group2(props) {
    var _classNames;
    var _useContext = (0, import_react61.useContext)(ConfigContext), getPrefixCls = _useContext.getPrefixCls, direction = _useContext.direction;
    var customizePrefixCls = props.prefixCls, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className;
    var prefixCls = getPrefixCls("input-group", customizePrefixCls);
    var cls = (0, import_classnames86.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-lg"), props.size === "large"), _defineProperty(_classNames, "".concat(prefixCls, "-sm"), props.size === "small"), _defineProperty(_classNames, "".concat(prefixCls, "-compact"), props.compact), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    var formItemContext = (0, import_react61.useContext)(FormItemInputContext);
    var groupFormItemContext = (0, import_react61.useMemo)(function() {
      return _extends(_extends({}, formItemContext), {
        isFormItemInput: false
      });
    }, [formItemContext]);
    return /* @__PURE__ */ React216.createElement("span", {
      className: cls,
      style: props.style,
      onMouseEnter: props.onMouseEnter,
      onMouseLeave: props.onMouseLeave,
      onFocus: props.onFocus,
      onBlur: props.onBlur
    }, /* @__PURE__ */ React216.createElement(FormItemInputContext.Provider, {
      value: groupFormItemContext
    }, props.children));
  };
  var Group_default = Group;

  // node_modules/antd/es/input/Input.js
  var import_classnames89 = __toESM(require_classnames());

  // node_modules/rc-input/es/BaseInput.js
  var import_react62 = __toESM(require_react());
  var import_classnames87 = __toESM(require_classnames());

  // node_modules/rc-input/es/utils/commonUtils.js
  function hasAddon(props) {
    return !!(props.addonBefore || props.addonAfter);
  }
  function hasPrefixSuffix(props) {
    return !!(props.prefix || props.suffix || props.allowClear);
  }
  function resolveOnChange(target, e3, onChange3, targetValue) {
    if (!onChange3) {
      return;
    }
    var event = e3;
    if (e3.type === "click") {
      var currentTarget = target.cloneNode(true);
      event = Object.create(e3, {
        target: {
          value: currentTarget
        },
        currentTarget: {
          value: currentTarget
        }
      });
      currentTarget.value = "";
      onChange3(event);
      return;
    }
    if (targetValue !== void 0) {
      event = Object.create(e3, {
        target: {
          value: target
        },
        currentTarget: {
          value: target
        }
      });
      target.value = targetValue;
      onChange3(event);
      return;
    }
    onChange3(event);
  }
  function triggerFocus(element, option) {
    if (!element)
      return;
    element.focus(option);
    var _ref = option || {}, cursor = _ref.cursor;
    if (cursor) {
      var len = element.value.length;
      switch (cursor) {
        case "start":
          element.setSelectionRange(0, 0);
          break;
        case "end":
          element.setSelectionRange(len, len);
          break;
        default:
          element.setSelectionRange(0, len);
      }
    }
  }
  function fixControlledValue(value) {
    if (typeof value === "undefined" || value === null) {
      return "";
    }
    return String(value);
  }

  // node_modules/rc-input/es/BaseInput.js
  var BaseInput = function BaseInput2(props) {
    var inputElement = props.inputElement, prefixCls = props.prefixCls, prefix = props.prefix, suffix = props.suffix, addonBefore = props.addonBefore, addonAfter = props.addonAfter, className = props.className, style2 = props.style, affixWrapperClassName = props.affixWrapperClassName, groupClassName = props.groupClassName, wrapperClassName = props.wrapperClassName, disabled = props.disabled, readOnly = props.readOnly, focused = props.focused, triggerFocus3 = props.triggerFocus, allowClear = props.allowClear, value = props.value, handleReset = props.handleReset, hidden2 = props.hidden;
    var containerRef = (0, import_react62.useRef)(null);
    var onInputClick = function onInputClick2(e3) {
      var _containerRef$current;
      if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(e3.target)) {
        triggerFocus3 === null || triggerFocus3 === void 0 ? void 0 : triggerFocus3();
      }
    };
    var getClearIcon = function getClearIcon2() {
      var _classNames;
      if (!allowClear) {
        return null;
      }
      var needClear = !disabled && !readOnly && value;
      var clearIconCls = "".concat(prefixCls, "-clear-icon");
      var iconNode = _typeof(allowClear) === "object" && allowClear !== null && allowClear !== void 0 && allowClear.clearIcon ? allowClear.clearIcon : "\u2716";
      return /* @__PURE__ */ import_react62.default.createElement("span", {
        onClick: handleReset,
        onMouseDown: function onMouseDown(e3) {
          return e3.preventDefault();
        },
        className: (0, import_classnames87.default)(clearIconCls, (_classNames = {}, _defineProperty(_classNames, "".concat(clearIconCls, "-hidden"), !needClear), _defineProperty(_classNames, "".concat(clearIconCls, "-has-suffix"), !!suffix), _classNames)),
        role: "button",
        tabIndex: -1
      }, iconNode);
    };
    var element = /* @__PURE__ */ (0, import_react62.cloneElement)(inputElement, {
      value,
      hidden: hidden2
    });
    if (hasPrefixSuffix(props)) {
      var _classNames2;
      var affixWrapperPrefixCls = "".concat(prefixCls, "-affix-wrapper");
      var affixWrapperCls = (0, import_classnames87.default)(affixWrapperPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-disabled"), disabled), _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-focused"), focused), _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-readonly"), readOnly), _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-input-with-clear-btn"), suffix && allowClear && value), _classNames2), !hasAddon(props) && className, affixWrapperClassName);
      var suffixNode = (suffix || allowClear) && /* @__PURE__ */ import_react62.default.createElement("span", {
        className: "".concat(prefixCls, "-suffix")
      }, getClearIcon(), suffix);
      element = /* @__PURE__ */ import_react62.default.createElement("span", {
        className: affixWrapperCls,
        style: style2,
        hidden: !hasAddon(props) && hidden2,
        onClick: onInputClick,
        ref: containerRef
      }, prefix && /* @__PURE__ */ import_react62.default.createElement("span", {
        className: "".concat(prefixCls, "-prefix")
      }, prefix), /* @__PURE__ */ (0, import_react62.cloneElement)(inputElement, {
        style: null,
        value,
        hidden: null
      }), suffixNode);
    }
    if (hasAddon(props)) {
      var wrapperCls = "".concat(prefixCls, "-group");
      var addonCls = "".concat(wrapperCls, "-addon");
      var mergedWrapperClassName = (0, import_classnames87.default)("".concat(prefixCls, "-wrapper"), wrapperCls, wrapperClassName);
      var mergedGroupClassName = (0, import_classnames87.default)("".concat(prefixCls, "-group-wrapper"), className, groupClassName);
      return /* @__PURE__ */ import_react62.default.createElement("span", {
        className: mergedGroupClassName,
        style: style2,
        hidden: hidden2
      }, /* @__PURE__ */ import_react62.default.createElement("span", {
        className: mergedWrapperClassName
      }, addonBefore && /* @__PURE__ */ import_react62.default.createElement("span", {
        className: addonCls
      }, addonBefore), /* @__PURE__ */ (0, import_react62.cloneElement)(element, {
        style: null,
        hidden: null
      }), addonAfter && /* @__PURE__ */ import_react62.default.createElement("span", {
        className: addonCls
      }, addonAfter)));
    }
    return element;
  };
  var BaseInput_default = BaseInput;

  // node_modules/rc-input/es/Input.js
  var import_react63 = __toESM(require_react());
  var import_classnames88 = __toESM(require_classnames());
  var _excluded37 = ["autoComplete", "onChange", "onFocus", "onBlur", "onPressEnter", "onKeyDown", "prefixCls", "disabled", "htmlSize", "className", "maxLength", "suffix", "showCount", "type", "inputClassName"];
  var Input3 = /* @__PURE__ */ (0, import_react63.forwardRef)(function(props, ref) {
    var autoComplete = props.autoComplete, onChange3 = props.onChange, onFocus2 = props.onFocus, onBlur2 = props.onBlur, onPressEnter = props.onPressEnter, onKeyDown2 = props.onKeyDown, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-input" : _props$prefixCls, disabled = props.disabled, htmlSize = props.htmlSize, className = props.className, maxLength = props.maxLength, suffix = props.suffix, showCount = props.showCount, _props$type = props.type, type4 = _props$type === void 0 ? "text" : _props$type, inputClassName = props.inputClassName, rest = _objectWithoutProperties(props, _excluded37);
    var _useMergedState = useMergedState(props.defaultValue, {
      value: props.value
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), value = _useMergedState2[0], setValue2 = _useMergedState2[1];
    var _useState = (0, import_react63.useState)(false), _useState2 = _slicedToArray(_useState, 2), focused = _useState2[0], setFocused = _useState2[1];
    var inputRef = (0, import_react63.useRef)(null);
    var focus = function focus2(option) {
      if (inputRef.current) {
        triggerFocus(inputRef.current, option);
      }
    };
    (0, import_react63.useImperativeHandle)(ref, function() {
      return {
        focus,
        blur: function blur() {
          var _inputRef$current;
          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.blur();
        },
        setSelectionRange: function setSelectionRange(start, end, direction) {
          var _inputRef$current2;
          (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.setSelectionRange(start, end, direction);
        },
        select: function select() {
          var _inputRef$current3;
          (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 ? void 0 : _inputRef$current3.select();
        },
        input: inputRef.current
      };
    });
    (0, import_react63.useEffect)(function() {
      setFocused(function(prev) {
        return prev && disabled ? false : prev;
      });
    }, [disabled]);
    var handleChange = function handleChange2(e3) {
      if (props.value === void 0) {
        setValue2(e3.target.value);
      }
      if (inputRef.current) {
        resolveOnChange(inputRef.current, e3, onChange3);
      }
    };
    var handleKeyDown = function handleKeyDown2(e3) {
      if (onPressEnter && e3.key === "Enter") {
        onPressEnter(e3);
      }
      onKeyDown2 === null || onKeyDown2 === void 0 ? void 0 : onKeyDown2(e3);
    };
    var handleFocus = function handleFocus2(e3) {
      setFocused(true);
      onFocus2 === null || onFocus2 === void 0 ? void 0 : onFocus2(e3);
    };
    var handleBlur = function handleBlur2(e3) {
      setFocused(false);
      onBlur2 === null || onBlur2 === void 0 ? void 0 : onBlur2(e3);
    };
    var handleReset = function handleReset2(e3) {
      setValue2("");
      focus();
      if (inputRef.current) {
        resolveOnChange(inputRef.current, e3, onChange3);
      }
    };
    var getInputElement = function getInputElement2() {
      var otherProps = omit(props, [
        "prefixCls",
        "onPressEnter",
        "addonBefore",
        "addonAfter",
        "prefix",
        "suffix",
        "allowClear",
        // Input elements must be either controlled or uncontrolled,
        // specify either the value prop, or the defaultValue prop, but not both.
        "defaultValue",
        "showCount",
        "affixWrapperClassName",
        "groupClassName",
        "inputClassName",
        "wrapperClassName",
        "htmlSize"
      ]);
      return /* @__PURE__ */ import_react63.default.createElement("input", _extends({
        autoComplete
      }, otherProps, {
        onChange: handleChange,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onKeyDown: handleKeyDown,
        className: (0, import_classnames88.default)(prefixCls, _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled), inputClassName, !hasAddon(props) && !hasPrefixSuffix(props) && className),
        ref: inputRef,
        size: htmlSize,
        type: type4
      }));
    };
    var getSuffix = function getSuffix2() {
      var hasMaxLength = Number(maxLength) > 0;
      if (suffix || showCount) {
        var val = fixControlledValue(value);
        var valueLength = _toConsumableArray(val).length;
        var dataCount = _typeof(showCount) === "object" ? showCount.formatter({
          value: val,
          count: valueLength,
          maxLength
        }) : "".concat(valueLength).concat(hasMaxLength ? " / ".concat(maxLength) : "");
        return /* @__PURE__ */ import_react63.default.createElement(import_react63.default.Fragment, null, !!showCount && /* @__PURE__ */ import_react63.default.createElement("span", {
          className: (0, import_classnames88.default)("".concat(prefixCls, "-show-count-suffix"), _defineProperty({}, "".concat(prefixCls, "-show-count-has-suffix"), !!suffix))
        }, dataCount), suffix);
      }
      return null;
    };
    return /* @__PURE__ */ import_react63.default.createElement(BaseInput_default, _extends({}, rest, {
      prefixCls,
      className,
      inputElement: getInputElement(),
      handleReset,
      value: fixControlledValue(value),
      focused,
      triggerFocus: focus,
      suffix: getSuffix(),
      disabled
    }));
  });
  var Input_default3 = Input3;

  // node_modules/rc-input/es/index.js
  var es_default18 = Input_default3;

  // node_modules/antd/es/input/Input.js
  var import_react64 = __toESM(require_react());

  // node_modules/antd/es/input/utils.js
  function hasPrefixSuffix2(props) {
    return !!(props.prefix || props.suffix || props.allowClear);
  }

  // node_modules/antd/es/input/Input.js
  var __rest29 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  function fixControlledValue2(value) {
    if (typeof value === "undefined" || value === null) {
      return "";
    }
    return String(value);
  }
  function resolveOnChange2(target, e3, onChange3, targetValue) {
    if (!onChange3) {
      return;
    }
    var event = e3;
    if (e3.type === "click") {
      var currentTarget = target.cloneNode(true);
      event = Object.create(e3, {
        target: {
          value: currentTarget
        },
        currentTarget: {
          value: currentTarget
        }
      });
      currentTarget.value = "";
      onChange3(event);
      return;
    }
    if (targetValue !== void 0) {
      event = Object.create(e3, {
        target: {
          value: target
        },
        currentTarget: {
          value: target
        }
      });
      target.value = targetValue;
      onChange3(event);
      return;
    }
    onChange3(event);
  }
  function triggerFocus2(element, option) {
    if (!element) {
      return;
    }
    element.focus(option);
    var _ref = option || {}, cursor = _ref.cursor;
    if (cursor) {
      var len = element.value.length;
      switch (cursor) {
        case "start":
          element.setSelectionRange(0, 0);
          break;
        case "end":
          element.setSelectionRange(len, len);
          break;
        default:
          element.setSelectionRange(0, len);
          break;
      }
    }
  }
  var Input4 = /* @__PURE__ */ (0, import_react64.forwardRef)(function(props, ref) {
    var _classNames, _classNames2, _classNames4;
    var customizePrefixCls = props.prefixCls, _props$bordered = props.bordered, bordered = _props$bordered === void 0 ? true : _props$bordered, customStatus = props.status, customSize = props.size, customDisabled = props.disabled, onBlur2 = props.onBlur, onFocus2 = props.onFocus, suffix = props.suffix, allowClear = props.allowClear, addonAfter = props.addonAfter, addonBefore = props.addonBefore, onChange3 = props.onChange, rest = __rest29(props, ["prefixCls", "bordered", "status", "size", "disabled", "onBlur", "onFocus", "suffix", "allowClear", "addonAfter", "addonBefore", "onChange"]);
    var _React$useContext = import_react64.default.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction, input = _React$useContext.input;
    var prefixCls = getPrefixCls("input", customizePrefixCls);
    var inputRef = (0, import_react64.useRef)(null);
    var size = import_react64.default.useContext(SizeContext_default);
    var mergedSize = customSize || size;
    var disabled = import_react64.default.useContext(DisabledContext_default);
    var mergedDisabled = customDisabled || disabled;
    var _useContext = (0, import_react64.useContext)(FormItemInputContext), contextStatus = _useContext.status, hasFeedback = _useContext.hasFeedback, feedbackIcon = _useContext.feedbackIcon;
    var mergedStatus = getMergedStatus(contextStatus, customStatus);
    var inputHasPrefixSuffix = hasPrefixSuffix2(props) || !!hasFeedback;
    var prevHasPrefixSuffix = (0, import_react64.useRef)(inputHasPrefixSuffix);
    (0, import_react64.useEffect)(function() {
      var _a;
      if (inputHasPrefixSuffix && !prevHasPrefixSuffix.current) {
        true ? warning_default2(document.activeElement === ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input), "Input", "When Input is focused, dynamic add or remove prefix / suffix will make it lose focus caused by dom structure change. Read more: https://ant.design/components/input/#FAQ") : void 0;
      }
      prevHasPrefixSuffix.current = inputHasPrefixSuffix;
    }, [inputHasPrefixSuffix]);
    var removePasswordTimeoutRef = (0, import_react64.useRef)([]);
    var removePasswordTimeout = function removePasswordTimeout2() {
      removePasswordTimeoutRef.current.push(window.setTimeout(function() {
        var _a, _b, _c, _d;
        if (((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input) && ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.input.getAttribute("type")) === "password" && ((_c = inputRef.current) === null || _c === void 0 ? void 0 : _c.input.hasAttribute("value"))) {
          (_d = inputRef.current) === null || _d === void 0 ? void 0 : _d.input.removeAttribute("value");
        }
      }));
    };
    (0, import_react64.useEffect)(function() {
      removePasswordTimeout();
      return function() {
        return removePasswordTimeoutRef.current.forEach(function(item) {
          return window.clearTimeout(item);
        });
      };
    }, []);
    var handleBlur = function handleBlur2(e3) {
      removePasswordTimeout();
      onBlur2 === null || onBlur2 === void 0 ? void 0 : onBlur2(e3);
    };
    var handleFocus = function handleFocus2(e3) {
      removePasswordTimeout();
      onFocus2 === null || onFocus2 === void 0 ? void 0 : onFocus2(e3);
    };
    var handleChange = function handleChange2(e3) {
      removePasswordTimeout();
      onChange3 === null || onChange3 === void 0 ? void 0 : onChange3(e3);
    };
    var suffixNode = (hasFeedback || suffix) && /* @__PURE__ */ import_react64.default.createElement(import_react64.default.Fragment, null, suffix, hasFeedback && feedbackIcon);
    var mergedAllowClear;
    if (_typeof(allowClear) === "object" && (allowClear === null || allowClear === void 0 ? void 0 : allowClear.clearIcon)) {
      mergedAllowClear = allowClear;
    } else if (allowClear) {
      mergedAllowClear = {
        clearIcon: /* @__PURE__ */ import_react64.default.createElement(CloseCircleFilled_default2, null)
      };
    }
    return /* @__PURE__ */ import_react64.default.createElement(es_default18, _extends({
      ref: composeRef(ref, inputRef),
      prefixCls,
      autoComplete: input === null || input === void 0 ? void 0 : input.autoComplete
    }, rest, {
      disabled: mergedDisabled || void 0,
      onBlur: handleBlur,
      onFocus: handleFocus,
      suffix: suffixNode,
      allowClear: mergedAllowClear,
      onChange: handleChange,
      addonAfter: addonAfter && /* @__PURE__ */ import_react64.default.createElement(NoFormStyle, {
        override: true,
        status: true
      }, addonAfter),
      addonBefore: addonBefore && /* @__PURE__ */ import_react64.default.createElement(NoFormStyle, {
        override: true,
        status: true
      }, addonBefore),
      inputClassName: (0, import_classnames89.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-sm"), mergedSize === "small"), _defineProperty(_classNames, "".concat(prefixCls, "-lg"), mergedSize === "large"), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _classNames), !inputHasPrefixSuffix && getStatusClassNames(prefixCls, mergedStatus)),
      affixWrapperClassName: (0, import_classnames89.default)((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-affix-wrapper-sm"), mergedSize === "small"), _defineProperty(_classNames2, "".concat(prefixCls, "-affix-wrapper-lg"), mergedSize === "large"), _defineProperty(_classNames2, "".concat(prefixCls, "-affix-wrapper-rtl"), direction === "rtl"), _defineProperty(_classNames2, "".concat(prefixCls, "-affix-wrapper-borderless"), !bordered), _classNames2), getStatusClassNames("".concat(prefixCls, "-affix-wrapper"), mergedStatus, hasFeedback)),
      wrapperClassName: (0, import_classnames89.default)(_defineProperty({}, "".concat(prefixCls, "-group-rtl"), direction === "rtl")),
      groupClassName: (0, import_classnames89.default)((_classNames4 = {}, _defineProperty(_classNames4, "".concat(prefixCls, "-group-wrapper-sm"), mergedSize === "small"), _defineProperty(_classNames4, "".concat(prefixCls, "-group-wrapper-lg"), mergedSize === "large"), _defineProperty(_classNames4, "".concat(prefixCls, "-group-wrapper-rtl"), direction === "rtl"), _classNames4), getStatusClassNames("".concat(prefixCls, "-group-wrapper"), mergedStatus, hasFeedback))
    }));
  });
  var Input_default4 = Input4;

  // node_modules/@ant-design/icons/es/icons/EyeInvisibleOutlined.js
  var React220 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EyeInvisibleOutlined.js
  var EyeInvisibleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z" } }, { "tag": "path", "attrs": { "d": "M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z" } }] }, "name": "eye-invisible", "theme": "outlined" };
  var EyeInvisibleOutlined_default = EyeInvisibleOutlined;

  // node_modules/@ant-design/icons/es/icons/EyeInvisibleOutlined.js
  var EyeInvisibleOutlined2 = function EyeInvisibleOutlined3(props, ref) {
    return /* @__PURE__ */ React220.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: EyeInvisibleOutlined_default
    }));
  };
  EyeInvisibleOutlined2.displayName = "EyeInvisibleOutlined";
  var EyeInvisibleOutlined_default2 = /* @__PURE__ */ React220.forwardRef(EyeInvisibleOutlined2);

  // node_modules/antd/es/input/Password.js
  var import_classnames90 = __toESM(require_classnames());
  var React221 = __toESM(require_react());
  var import_react65 = __toESM(require_react());
  var __rest30 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var defaultIconRender = function defaultIconRender2(visible) {
    return visible ? /* @__PURE__ */ React221.createElement(EyeOutlined_default2, null) : /* @__PURE__ */ React221.createElement(EyeInvisibleOutlined_default2, null);
  };
  var ActionMap = {
    click: "onClick",
    hover: "onMouseOver"
  };
  var Password = /* @__PURE__ */ React221.forwardRef(function(props, ref) {
    var _useState = (0, import_react65.useState)(false), _useState2 = _slicedToArray(_useState, 2), visible = _useState2[0], setVisible = _useState2[1];
    var onVisibleChange = function onVisibleChange2() {
      var disabled = props.disabled;
      if (disabled) {
        return;
      }
      setVisible(function(prevState) {
        return !prevState;
      });
    };
    var getIcon = function getIcon2(prefixCls) {
      var _iconProps;
      var _props$action = props.action, action = _props$action === void 0 ? "click" : _props$action, _props$iconRender = props.iconRender, iconRender = _props$iconRender === void 0 ? defaultIconRender : _props$iconRender;
      var iconTrigger = ActionMap[action] || "";
      var icon = iconRender(visible);
      var iconProps = (_iconProps = {}, _defineProperty(_iconProps, iconTrigger, onVisibleChange), _defineProperty(_iconProps, "className", "".concat(prefixCls, "-icon")), _defineProperty(_iconProps, "key", "passwordIcon"), _defineProperty(_iconProps, "onMouseDown", function onMouseDown(e3) {
        e3.preventDefault();
      }), _defineProperty(_iconProps, "onMouseUp", function onMouseUp(e3) {
        e3.preventDefault();
      }), _iconProps);
      return /* @__PURE__ */ React221.cloneElement(/* @__PURE__ */ React221.isValidElement(icon) ? icon : /* @__PURE__ */ React221.createElement("span", null, icon), iconProps);
    };
    var renderPassword = function renderPassword2(_ref) {
      var getPrefixCls = _ref.getPrefixCls;
      var className = props.className, customizePrefixCls = props.prefixCls, customizeInputPrefixCls = props.inputPrefixCls, size = props.size, _props$visibilityTogg = props.visibilityToggle, visibilityToggle = _props$visibilityTogg === void 0 ? true : _props$visibilityTogg, restProps = __rest30(props, ["className", "prefixCls", "inputPrefixCls", "size", "visibilityToggle"]);
      var inputPrefixCls = getPrefixCls("input", customizeInputPrefixCls);
      var prefixCls = getPrefixCls("input-password", customizePrefixCls);
      var suffixIcon = visibilityToggle && getIcon(prefixCls);
      var inputClassName = (0, import_classnames90.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "-").concat(size), !!size));
      var omittedProps = _extends(_extends({}, omit(restProps, ["suffix", "iconRender"])), {
        type: visible ? "text" : "password",
        className: inputClassName,
        prefixCls: inputPrefixCls,
        suffix: suffixIcon
      });
      if (size) {
        omittedProps.size = size;
      }
      return /* @__PURE__ */ React221.createElement(Input_default4, _extends({
        ref
      }, omittedProps));
    };
    return /* @__PURE__ */ React221.createElement(ConfigConsumer, null, renderPassword);
  });
  if (true) {
    Password.displayName = "Password";
  }
  var Password_default = Password;

  // node_modules/antd/es/input/Search.js
  var import_classnames91 = __toESM(require_classnames());
  var React222 = __toESM(require_react());
  var __rest31 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var Search = /* @__PURE__ */ React222.forwardRef(function(props, ref) {
    var _classNames;
    var customizePrefixCls = props.prefixCls, customizeInputPrefixCls = props.inputPrefixCls, className = props.className, customizeSize = props.size, suffix = props.suffix, _props$enterButton = props.enterButton, enterButton = _props$enterButton === void 0 ? false : _props$enterButton, addonAfter = props.addonAfter, loading = props.loading, disabled = props.disabled, customOnSearch = props.onSearch, customOnChange = props.onChange, onCompositionStart = props.onCompositionStart, onCompositionEnd = props.onCompositionEnd, restProps = __rest31(props, ["prefixCls", "inputPrefixCls", "className", "size", "suffix", "enterButton", "addonAfter", "loading", "disabled", "onSearch", "onChange", "onCompositionStart", "onCompositionEnd"]);
    var _React$useContext = React222.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var contextSize = React222.useContext(SizeContext_default);
    var composedRef = React222.useRef(false);
    var size = customizeSize || contextSize;
    var inputRef = React222.useRef(null);
    var onChange3 = function onChange4(e3) {
      if (e3 && e3.target && e3.type === "click" && customOnSearch) {
        customOnSearch(e3.target.value, e3);
      }
      if (customOnChange) {
        customOnChange(e3);
      }
    };
    var onMouseDown = function onMouseDown2(e3) {
      var _a;
      if (document.activeElement === ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input)) {
        e3.preventDefault();
      }
    };
    var onSearch = function onSearch2(e3) {
      var _a, _b;
      if (customOnSearch) {
        customOnSearch((_b = (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input) === null || _b === void 0 ? void 0 : _b.value, e3);
      }
    };
    var onPressEnter = function onPressEnter2(e3) {
      if (composedRef.current) {
        return;
      }
      onSearch(e3);
    };
    var prefixCls = getPrefixCls("input-search", customizePrefixCls);
    var inputPrefixCls = getPrefixCls("input", customizeInputPrefixCls);
    var searchIcon = typeof enterButton === "boolean" ? /* @__PURE__ */ React222.createElement(SearchOutlined_default2, null) : null;
    var btnClassName = "".concat(prefixCls, "-button");
    var button;
    var enterButtonAsElement = enterButton || {};
    var isAntdButton = enterButtonAsElement.type && enterButtonAsElement.type.__ANT_BUTTON === true;
    if (isAntdButton || enterButtonAsElement.type === "button") {
      button = cloneElement6(enterButtonAsElement, _extends({
        onMouseDown,
        onClick: function onClick(e3) {
          var _a, _b;
          (_b = (_a = enterButtonAsElement === null || enterButtonAsElement === void 0 ? void 0 : enterButtonAsElement.props) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e3);
          onSearch(e3);
        },
        key: "enterButton"
      }, isAntdButton ? {
        className: btnClassName,
        size
      } : {}));
    } else {
      button = /* @__PURE__ */ React222.createElement(button_default2, {
        className: btnClassName,
        type: enterButton ? "primary" : void 0,
        size,
        disabled,
        key: "enterButton",
        onMouseDown,
        onClick: onSearch,
        loading,
        icon: searchIcon
      }, enterButton);
    }
    if (addonAfter) {
      button = [button, cloneElement6(addonAfter, {
        key: "addonAfter"
      })];
    }
    var cls = (0, import_classnames91.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(size), !!size), _defineProperty(_classNames, "".concat(prefixCls, "-with-button"), !!enterButton), _classNames), className);
    var handleOnCompositionStart = function handleOnCompositionStart2(e3) {
      composedRef.current = true;
      onCompositionStart === null || onCompositionStart === void 0 ? void 0 : onCompositionStart(e3);
    };
    var handleOnCompositionEnd = function handleOnCompositionEnd2(e3) {
      composedRef.current = false;
      onCompositionEnd === null || onCompositionEnd === void 0 ? void 0 : onCompositionEnd(e3);
    };
    return /* @__PURE__ */ React222.createElement(Input_default4, _extends({
      ref: composeRef(inputRef, ref),
      onPressEnter
    }, restProps, {
      size,
      onCompositionStart: handleOnCompositionStart,
      onCompositionEnd: handleOnCompositionEnd,
      prefixCls: inputPrefixCls,
      addonAfter: button,
      suffix,
      onChange: onChange3,
      className: cls,
      disabled
    }));
  });
  if (true) {
    Search.displayName = "Search";
  }
  var Search_default = Search;

  // node_modules/antd/es/input/TextArea.js
  var import_classnames94 = __toESM(require_classnames());

  // node_modules/rc-textarea/es/index.js
  var React224 = __toESM(require_react());

  // node_modules/rc-textarea/es/ResizableTextArea.js
  var React223 = __toESM(require_react());
  var import_classnames92 = __toESM(require_classnames());

  // node_modules/rc-textarea/es/calculateNodeHeight.js
  var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
  var SIZING_STYLE = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing", "word-break"];
  var computedStyleCache = {};
  var hiddenTextarea;
  function calculateNodeStyling(node) {
    var useCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var nodeRef = node.getAttribute("id") || node.getAttribute("data-reactid") || node.getAttribute("name");
    if (useCache && computedStyleCache[nodeRef]) {
      return computedStyleCache[nodeRef];
    }
    var style2 = window.getComputedStyle(node);
    var boxSizing = style2.getPropertyValue("box-sizing") || style2.getPropertyValue("-moz-box-sizing") || style2.getPropertyValue("-webkit-box-sizing");
    var paddingSize = parseFloat(style2.getPropertyValue("padding-bottom")) + parseFloat(style2.getPropertyValue("padding-top"));
    var borderSize = parseFloat(style2.getPropertyValue("border-bottom-width")) + parseFloat(style2.getPropertyValue("border-top-width"));
    var sizingStyle = SIZING_STYLE.map(function(name5) {
      return "".concat(name5, ":").concat(style2.getPropertyValue(name5));
    }).join(";");
    var nodeInfo = {
      sizingStyle,
      paddingSize,
      borderSize,
      boxSizing
    };
    if (useCache && nodeRef) {
      computedStyleCache[nodeRef] = nodeInfo;
    }
    return nodeInfo;
  }
  function calculateNodeHeight(uiTextNode) {
    var useCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var minRows = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    var maxRows = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement("textarea");
      hiddenTextarea.setAttribute("tab-index", "-1");
      hiddenTextarea.setAttribute("aria-hidden", "true");
      document.body.appendChild(hiddenTextarea);
    }
    if (uiTextNode.getAttribute("wrap")) {
      hiddenTextarea.setAttribute("wrap", uiTextNode.getAttribute("wrap"));
    } else {
      hiddenTextarea.removeAttribute("wrap");
    }
    var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache), paddingSize = _calculateNodeStyling.paddingSize, borderSize = _calculateNodeStyling.borderSize, boxSizing = _calculateNodeStyling.boxSizing, sizingStyle = _calculateNodeStyling.sizingStyle;
    hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(HIDDEN_TEXTAREA_STYLE));
    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || "";
    var minHeight = Number.MIN_SAFE_INTEGER;
    var maxHeight = Number.MAX_SAFE_INTEGER;
    var height = hiddenTextarea.scrollHeight;
    var overflowY;
    if (boxSizing === "border-box") {
      height += borderSize;
    } else if (boxSizing === "content-box") {
      height -= paddingSize;
    }
    if (minRows !== null || maxRows !== null) {
      hiddenTextarea.value = " ";
      var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
      if (minRows !== null) {
        minHeight = singleRowHeight * minRows;
        if (boxSizing === "border-box") {
          minHeight = minHeight + paddingSize + borderSize;
        }
        height = Math.max(minHeight, height);
      }
      if (maxRows !== null) {
        maxHeight = singleRowHeight * maxRows;
        if (boxSizing === "border-box") {
          maxHeight = maxHeight + paddingSize + borderSize;
        }
        overflowY = height > maxHeight ? "" : "hidden";
        height = Math.min(maxHeight, height);
      }
    }
    return {
      height,
      minHeight,
      maxHeight,
      overflowY,
      resize: "none"
    };
  }

  // node_modules/rc-textarea/es/ResizableTextArea.js
  var import_shallowequal5 = __toESM(require_shallowequal());
  var RESIZE_STATUS;
  (function(RESIZE_STATUS2) {
    RESIZE_STATUS2[RESIZE_STATUS2["NONE"] = 0] = "NONE";
    RESIZE_STATUS2[RESIZE_STATUS2["RESIZING"] = 1] = "RESIZING";
    RESIZE_STATUS2[RESIZE_STATUS2["RESIZED"] = 2] = "RESIZED";
  })(RESIZE_STATUS || (RESIZE_STATUS = {}));
  var ResizableTextArea = /* @__PURE__ */ function(_React$Component) {
    _inherits(ResizableTextArea2, _React$Component);
    var _super = _createSuper(ResizableTextArea2);
    function ResizableTextArea2(props) {
      var _this;
      _classCallCheck(this, ResizableTextArea2);
      _this = _super.call(this, props);
      _this.nextFrameActionId = void 0;
      _this.resizeFrameId = void 0;
      _this.textArea = void 0;
      _this.saveTextArea = function(textArea) {
        _this.textArea = textArea;
      };
      _this.handleResize = function(size) {
        var resizeStatus = _this.state.resizeStatus;
        var _this$props = _this.props, autoSize = _this$props.autoSize, onResize2 = _this$props.onResize;
        if (resizeStatus !== RESIZE_STATUS.NONE) {
          return;
        }
        if (typeof onResize2 === "function") {
          onResize2(size);
        }
        if (autoSize) {
          _this.resizeOnNextFrame();
        }
      };
      _this.resizeOnNextFrame = function() {
        cancelAnimationFrame(_this.nextFrameActionId);
        _this.nextFrameActionId = requestAnimationFrame(_this.resizeTextarea);
      };
      _this.resizeTextarea = function() {
        var autoSize = _this.props.autoSize;
        if (!autoSize || !_this.textArea) {
          return;
        }
        var minRows = autoSize.minRows, maxRows = autoSize.maxRows;
        var textareaStyles = calculateNodeHeight(_this.textArea, false, minRows, maxRows);
        _this.setState({
          textareaStyles,
          resizeStatus: RESIZE_STATUS.RESIZING
        }, function() {
          cancelAnimationFrame(_this.resizeFrameId);
          _this.resizeFrameId = requestAnimationFrame(function() {
            _this.setState({
              resizeStatus: RESIZE_STATUS.RESIZED
            }, function() {
              _this.resizeFrameId = requestAnimationFrame(function() {
                _this.setState({
                  resizeStatus: RESIZE_STATUS.NONE
                });
                _this.fixFirefoxAutoScroll();
              });
            });
          });
        });
      };
      _this.renderTextArea = function() {
        var _this$props2 = _this.props, _this$props2$prefixCl = _this$props2.prefixCls, prefixCls = _this$props2$prefixCl === void 0 ? "rc-textarea" : _this$props2$prefixCl, autoSize = _this$props2.autoSize, onResize2 = _this$props2.onResize, className = _this$props2.className, disabled = _this$props2.disabled;
        var _this$state = _this.state, textareaStyles = _this$state.textareaStyles, resizeStatus = _this$state.resizeStatus;
        var otherProps = omit(_this.props, ["prefixCls", "onPressEnter", "autoSize", "defaultValue", "onResize"]);
        var cls = (0, import_classnames92.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled));
        if ("value" in otherProps) {
          otherProps.value = otherProps.value || "";
        }
        var style2 = _objectSpread2(_objectSpread2(_objectSpread2({}, _this.props.style), textareaStyles), resizeStatus === RESIZE_STATUS.RESIZING ? (
          // React will warning when mix `overflow` & `overflowY`.
          // We need to define this separately.
          {
            overflowX: "hidden",
            overflowY: "hidden"
          }
        ) : null);
        return /* @__PURE__ */ React223.createElement(es_default, {
          onResize: _this.handleResize,
          disabled: !(autoSize || onResize2)
        }, /* @__PURE__ */ React223.createElement("textarea", _extends({}, otherProps, {
          className: cls,
          style: style2,
          ref: _this.saveTextArea
        })));
      };
      _this.state = {
        textareaStyles: {},
        resizeStatus: RESIZE_STATUS.NONE
      };
      return _this;
    }
    _createClass(ResizableTextArea2, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.value !== this.props.value || !(0, import_shallowequal5.default)(prevProps.autoSize, this.props.autoSize)) {
          this.resizeTextarea();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        cancelAnimationFrame(this.nextFrameActionId);
        cancelAnimationFrame(this.resizeFrameId);
      }
      // https://github.com/ant-design/ant-design/issues/21870
    }, {
      key: "fixFirefoxAutoScroll",
      value: function fixFirefoxAutoScroll() {
        try {
          if (document.activeElement === this.textArea) {
            var currentStart = this.textArea.selectionStart;
            var currentEnd = this.textArea.selectionEnd;
            this.textArea.setSelectionRange(currentStart, currentEnd);
          }
        } catch (e3) {
        }
      }
    }, {
      key: "render",
      value: function render4() {
        return this.renderTextArea();
      }
    }]);
    return ResizableTextArea2;
  }(React223.Component);
  var ResizableTextArea_default = ResizableTextArea;

  // node_modules/rc-textarea/es/index.js
  var TextArea = /* @__PURE__ */ function(_React$Component) {
    _inherits(TextArea3, _React$Component);
    var _super = _createSuper(TextArea3);
    function TextArea3(props) {
      var _this;
      _classCallCheck(this, TextArea3);
      _this = _super.call(this, props);
      _this.resizableTextArea = void 0;
      _this.focus = function() {
        _this.resizableTextArea.textArea.focus();
      };
      _this.saveTextArea = function(resizableTextArea) {
        _this.resizableTextArea = resizableTextArea;
      };
      _this.handleChange = function(e3) {
        var onChange3 = _this.props.onChange;
        _this.setValue(e3.target.value, function() {
          _this.resizableTextArea.resizeTextarea();
        });
        if (onChange3) {
          onChange3(e3);
        }
      };
      _this.handleKeyDown = function(e3) {
        var _this$props = _this.props, onPressEnter = _this$props.onPressEnter, onKeyDown2 = _this$props.onKeyDown;
        if (e3.keyCode === 13 && onPressEnter) {
          onPressEnter(e3);
        }
        if (onKeyDown2) {
          onKeyDown2(e3);
        }
      };
      var value = typeof props.value === "undefined" || props.value === null ? props.defaultValue : props.value;
      _this.state = {
        value
      };
      return _this;
    }
    _createClass(TextArea3, [{
      key: "setValue",
      value: function setValue2(value, callback) {
        if (!("value" in this.props)) {
          this.setState({
            value
          }, callback);
        }
      }
    }, {
      key: "blur",
      value: function blur() {
        this.resizableTextArea.textArea.blur();
      }
    }, {
      key: "render",
      value: function render4() {
        return /* @__PURE__ */ React224.createElement(ResizableTextArea_default, _extends({}, this.props, {
          value: this.state.value,
          onKeyDown: this.handleKeyDown,
          onChange: this.handleChange,
          ref: this.saveTextArea
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps) {
        if ("value" in nextProps) {
          return {
            value: nextProps.value
          };
        }
        return null;
      }
    }]);
    return TextArea3;
  }(React224.Component);
  var es_default19 = TextArea;

  // node_modules/antd/es/input/TextArea.js
  var React226 = __toESM(require_react());

  // node_modules/antd/es/input/ClearableLabeledInput.js
  var import_classnames93 = __toESM(require_classnames());
  var React225 = __toESM(require_react());
  var ClearableInputType = tuple("text", "input");
  function hasAddon2(props) {
    return !!(props.addonBefore || props.addonAfter);
  }
  var ClearableLabeledInput = /* @__PURE__ */ function(_React$Component) {
    _inherits(ClearableLabeledInput2, _React$Component);
    var _super = _createSuper(ClearableLabeledInput2);
    function ClearableLabeledInput2() {
      _classCallCheck(this, ClearableLabeledInput2);
      return _super.apply(this, arguments);
    }
    _createClass(ClearableLabeledInput2, [{
      key: "renderClearIcon",
      value: function renderClearIcon(prefixCls) {
        var _classNames;
        var _this$props = this.props, value = _this$props.value, disabled = _this$props.disabled, readOnly = _this$props.readOnly, handleReset = _this$props.handleReset, suffix = _this$props.suffix;
        var needClear = !disabled && !readOnly && value;
        var className = "".concat(prefixCls, "-clear-icon");
        return /* @__PURE__ */ React225.createElement(CloseCircleFilled_default2, {
          onClick: handleReset,
          // Do not trigger onBlur when clear input
          // https://github.com/ant-design/ant-design/issues/31200
          onMouseDown: function onMouseDown(e3) {
            return e3.preventDefault();
          },
          className: (0, import_classnames93.default)((_classNames = {}, _defineProperty(_classNames, "".concat(className, "-hidden"), !needClear), _defineProperty(_classNames, "".concat(className, "-has-suffix"), !!suffix), _classNames), className),
          role: "button"
        });
      }
    }, {
      key: "renderTextAreaWithClearIcon",
      value: function renderTextAreaWithClearIcon(prefixCls, element, statusContext) {
        var _classNames2;
        var _this$props2 = this.props, value = _this$props2.value, allowClear = _this$props2.allowClear, className = _this$props2.className, style2 = _this$props2.style, direction = _this$props2.direction, bordered = _this$props2.bordered, hidden2 = _this$props2.hidden, customStatus = _this$props2.status;
        var contextStatus = statusContext.status, hasFeedback = statusContext.hasFeedback;
        if (!allowClear) {
          return cloneElement6(element, {
            value
          });
        }
        var affixWrapperCls = (0, import_classnames93.default)("".concat(prefixCls, "-affix-wrapper"), "".concat(prefixCls, "-affix-wrapper-textarea-with-clear-btn"), getStatusClassNames("".concat(prefixCls, "-affix-wrapper"), getMergedStatus(contextStatus, customStatus), hasFeedback), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-affix-wrapper-rtl"), direction === "rtl"), _defineProperty(_classNames2, "".concat(prefixCls, "-affix-wrapper-borderless"), !bordered), _defineProperty(_classNames2, "".concat(className), !hasAddon2(this.props) && className), _classNames2));
        return /* @__PURE__ */ React225.createElement("span", {
          className: affixWrapperCls,
          style: style2,
          hidden: hidden2
        }, cloneElement6(element, {
          style: null,
          value
        }), this.renderClearIcon(prefixCls));
      }
    }, {
      key: "render",
      value: function render4() {
        var _this = this;
        return /* @__PURE__ */ React225.createElement(FormItemInputContext.Consumer, null, function(statusContext) {
          var _this$props3 = _this.props, prefixCls = _this$props3.prefixCls, inputType = _this$props3.inputType, element = _this$props3.element;
          if (inputType === ClearableInputType[0]) {
            return _this.renderTextAreaWithClearIcon(prefixCls, element, statusContext);
          }
        });
      }
    }]);
    return ClearableLabeledInput2;
  }(React225.Component);
  var ClearableLabeledInput_default = ClearableLabeledInput;

  // node_modules/antd/es/input/TextArea.js
  var __rest32 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  function fixEmojiLength(value, maxLength) {
    return _toConsumableArray(value || "").slice(0, maxLength).join("");
  }
  function setTriggerValue(isCursorInEnd, preValue, triggerValue, maxLength) {
    var newTriggerValue = triggerValue;
    if (isCursorInEnd) {
      newTriggerValue = fixEmojiLength(triggerValue, maxLength);
    } else if (_toConsumableArray(preValue || "").length < triggerValue.length && _toConsumableArray(triggerValue || "").length > maxLength) {
      newTriggerValue = preValue;
    }
    return newTriggerValue;
  }
  var TextArea2 = /* @__PURE__ */ React226.forwardRef(function(_a, ref) {
    var _classNames;
    var customizePrefixCls = _a.prefixCls, _a$bordered = _a.bordered, bordered = _a$bordered === void 0 ? true : _a$bordered, _a$showCount = _a.showCount, showCount = _a$showCount === void 0 ? false : _a$showCount, maxLength = _a.maxLength, className = _a.className, style2 = _a.style, customizeSize = _a.size, customDisabled = _a.disabled, onCompositionStart = _a.onCompositionStart, onCompositionEnd = _a.onCompositionEnd, onChange3 = _a.onChange, customStatus = _a.status, props = __rest32(_a, ["prefixCls", "bordered", "showCount", "maxLength", "className", "style", "size", "disabled", "onCompositionStart", "onCompositionEnd", "onChange", "status"]);
    var _React$useContext = React226.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var size = React226.useContext(SizeContext_default);
    var disabled = React226.useContext(DisabledContext_default);
    var mergedDisabled = customDisabled || disabled;
    var _React$useContext2 = React226.useContext(FormItemInputContext), contextStatus = _React$useContext2.status, hasFeedback = _React$useContext2.hasFeedback, isFormItemInput = _React$useContext2.isFormItemInput, feedbackIcon = _React$useContext2.feedbackIcon;
    var mergedStatus = getMergedStatus(contextStatus, customStatus);
    var innerRef = React226.useRef(null);
    var clearableInputRef = React226.useRef(null);
    var _React$useState = React226.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), compositing = _React$useState2[0], setCompositing = _React$useState2[1];
    var oldCompositionValueRef = React226.useRef();
    var oldSelectionStartRef = React226.useRef(0);
    var _useMergedState = useMergedState(props.defaultValue, {
      value: props.value
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), value = _useMergedState2[0], setValue2 = _useMergedState2[1];
    var hidden2 = props.hidden;
    var handleSetValue = function handleSetValue2(val2, callback) {
      if (props.value === void 0) {
        setValue2(val2);
        callback === null || callback === void 0 ? void 0 : callback();
      }
    };
    var hasMaxLength = Number(maxLength) > 0;
    var onInternalCompositionStart = function onInternalCompositionStart2(e3) {
      setCompositing(true);
      oldCompositionValueRef.current = value;
      oldSelectionStartRef.current = e3.currentTarget.selectionStart;
      onCompositionStart === null || onCompositionStart === void 0 ? void 0 : onCompositionStart(e3);
    };
    var onInternalCompositionEnd = function onInternalCompositionEnd2(e3) {
      var _a2;
      setCompositing(false);
      var triggerValue = e3.currentTarget.value;
      if (hasMaxLength) {
        var isCursorInEnd = oldSelectionStartRef.current >= maxLength + 1 || oldSelectionStartRef.current === ((_a2 = oldCompositionValueRef.current) === null || _a2 === void 0 ? void 0 : _a2.length);
        triggerValue = setTriggerValue(isCursorInEnd, oldCompositionValueRef.current, triggerValue, maxLength);
      }
      if (triggerValue !== value) {
        handleSetValue(triggerValue);
        resolveOnChange2(e3.currentTarget, e3, onChange3, triggerValue);
      }
      onCompositionEnd === null || onCompositionEnd === void 0 ? void 0 : onCompositionEnd(e3);
    };
    var handleChange = function handleChange2(e3) {
      var triggerValue = e3.target.value;
      if (!compositing && hasMaxLength) {
        var isCursorInEnd = e3.target.selectionStart >= maxLength + 1 || e3.target.selectionStart === triggerValue.length || !e3.target.selectionStart;
        triggerValue = setTriggerValue(isCursorInEnd, value, triggerValue, maxLength);
      }
      handleSetValue(triggerValue);
      resolveOnChange2(e3.currentTarget, e3, onChange3, triggerValue);
    };
    var handleReset = function handleReset2(e3) {
      var _a2, _b, _c;
      handleSetValue("");
      (_a2 = innerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      resolveOnChange2((_c = (_b = innerRef.current) === null || _b === void 0 ? void 0 : _b.resizableTextArea) === null || _c === void 0 ? void 0 : _c.textArea, e3, onChange3);
    };
    var prefixCls = getPrefixCls("input", customizePrefixCls);
    React226.useImperativeHandle(ref, function() {
      var _a2;
      return {
        resizableTextArea: (_a2 = innerRef.current) === null || _a2 === void 0 ? void 0 : _a2.resizableTextArea,
        focus: function focus(option) {
          var _a3, _b;
          triggerFocus2((_b = (_a3 = innerRef.current) === null || _a3 === void 0 ? void 0 : _a3.resizableTextArea) === null || _b === void 0 ? void 0 : _b.textArea, option);
        },
        blur: function blur() {
          var _a3;
          return (_a3 = innerRef.current) === null || _a3 === void 0 ? void 0 : _a3.blur();
        }
      };
    });
    var textArea = /* @__PURE__ */ React226.createElement(es_default19, _extends({}, omit(props, ["allowClear"]), {
      disabled: mergedDisabled,
      className: (0, import_classnames94.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _defineProperty(_classNames, className, className && !showCount), _defineProperty(_classNames, "".concat(prefixCls, "-sm"), size === "small" || customizeSize === "small"), _defineProperty(_classNames, "".concat(prefixCls, "-lg"), size === "large" || customizeSize === "large"), _classNames), getStatusClassNames(prefixCls, mergedStatus)),
      style: showCount ? void 0 : style2,
      prefixCls,
      onCompositionStart: onInternalCompositionStart,
      onChange: handleChange,
      onCompositionEnd: onInternalCompositionEnd,
      ref: innerRef
    }));
    var val = fixControlledValue2(value);
    if (!compositing && hasMaxLength && (props.value === null || props.value === void 0)) {
      val = fixEmojiLength(val, maxLength);
    }
    var textareaNode = /* @__PURE__ */ React226.createElement(ClearableLabeledInput_default, _extends({
      disabled: mergedDisabled
    }, props, {
      prefixCls,
      direction,
      inputType: "text",
      value: val,
      element: textArea,
      handleReset,
      ref: clearableInputRef,
      bordered,
      status: customStatus,
      style: showCount ? void 0 : style2
    }));
    if (showCount || hasFeedback) {
      var _classNames2;
      var valueLength = _toConsumableArray(val).length;
      var dataCount = "";
      if (_typeof(showCount) === "object") {
        dataCount = showCount.formatter({
          value: val,
          count: valueLength,
          maxLength
        });
      } else {
        dataCount = "".concat(valueLength).concat(hasMaxLength ? " / ".concat(maxLength) : "");
      }
      return /* @__PURE__ */ React226.createElement("div", {
        hidden: hidden2,
        className: (0, import_classnames94.default)("".concat(prefixCls, "-textarea"), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-textarea-rtl"), direction === "rtl"), _defineProperty(_classNames2, "".concat(prefixCls, "-textarea-show-count"), showCount), _defineProperty(_classNames2, "".concat(prefixCls, "-textarea-in-form-item"), isFormItemInput), _classNames2), getStatusClassNames("".concat(prefixCls, "-textarea"), mergedStatus, hasFeedback), className),
        style: style2,
        "data-count": dataCount
      }, textareaNode, hasFeedback && /* @__PURE__ */ React226.createElement("span", {
        className: "".concat(prefixCls, "-textarea-suffix")
      }, feedbackIcon));
    }
    return textareaNode;
  });
  var TextArea_default = TextArea2;

  // node_modules/antd/es/input/index.js
  var Input5 = Input_default4;
  Input5.Group = Group_default;
  Input5.Search = Search_default;
  Input5.TextArea = TextArea_default;
  Input5.Password = Password_default;
  var input_default = Input5;

  // node_modules/antd/es/list/index.js
  var import_classnames100 = __toESM(require_classnames());
  var React236 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/DoubleLeftOutlined.js
  var React227 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DoubleLeftOutlined.js
  var DoubleLeftOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M272.9 512l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L186.8 492.3a31.99 31.99 0 000 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H532c6.7 0 10.4-7.7 6.3-12.9L272.9 512zm304 0l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L490.8 492.3a31.99 31.99 0 000 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H836c6.7 0 10.4-7.7 6.3-12.9L576.9 512z" } }] }, "name": "double-left", "theme": "outlined" };
  var DoubleLeftOutlined_default = DoubleLeftOutlined;

  // node_modules/@ant-design/icons/es/icons/DoubleLeftOutlined.js
  var DoubleLeftOutlined2 = function DoubleLeftOutlined3(props, ref) {
    return /* @__PURE__ */ React227.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: DoubleLeftOutlined_default
    }));
  };
  DoubleLeftOutlined2.displayName = "DoubleLeftOutlined";
  var DoubleLeftOutlined_default2 = /* @__PURE__ */ React227.forwardRef(DoubleLeftOutlined2);

  // node_modules/@ant-design/icons/es/icons/DoubleRightOutlined.js
  var React228 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DoubleRightOutlined.js
  var DoubleRightOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M533.2 492.3L277.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H188c-6.7 0-10.4 7.7-6.3 12.9L447.1 512 181.7 851.1A7.98 7.98 0 00188 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5zm304 0L581.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H492c-6.7 0-10.4 7.7-6.3 12.9L751.1 512 485.7 851.1A7.98 7.98 0 00492 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5z" } }] }, "name": "double-right", "theme": "outlined" };
  var DoubleRightOutlined_default = DoubleRightOutlined;

  // node_modules/@ant-design/icons/es/icons/DoubleRightOutlined.js
  var DoubleRightOutlined2 = function DoubleRightOutlined3(props, ref) {
    return /* @__PURE__ */ React228.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: DoubleRightOutlined_default
    }));
  };
  DoubleRightOutlined2.displayName = "DoubleRightOutlined";
  var DoubleRightOutlined_default2 = /* @__PURE__ */ React228.forwardRef(DoubleRightOutlined2);

  // node_modules/antd/es/pagination/Pagination.js
  var import_classnames97 = __toESM(require_classnames());

  // node_modules/rc-pagination/es/Pagination.js
  var import_react68 = __toESM(require_react());
  var import_classnames96 = __toESM(require_classnames());

  // node_modules/rc-pagination/es/Pager.js
  var import_react66 = __toESM(require_react());
  var import_classnames95 = __toESM(require_classnames());
  var Pager = function Pager2(props) {
    var _classNames;
    var prefixCls = "".concat(props.rootPrefixCls, "-item");
    var cls = (0, import_classnames95.default)(prefixCls, "".concat(prefixCls, "-").concat(props.page), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-active"), props.active), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), !props.page), _defineProperty(_classNames, props.className, !!props.className), _classNames));
    var handleClick = function handleClick2() {
      props.onClick(props.page);
    };
    var handleKeyPress = function handleKeyPress2(e3) {
      props.onKeyPress(e3, props.onClick, props.page);
    };
    return /* @__PURE__ */ import_react66.default.createElement("li", {
      title: props.showTitle ? props.page : null,
      className: cls,
      onClick: handleClick,
      onKeyPress: handleKeyPress,
      tabIndex: "0"
    }, props.itemRender(props.page, "page", /* @__PURE__ */ import_react66.default.createElement("a", {
      rel: "nofollow"
    }, props.page)));
  };
  var Pager_default = Pager;

  // node_modules/rc-pagination/es/Options.js
  var import_react67 = __toESM(require_react());

  // node_modules/rc-pagination/es/KeyCode.js
  var KeyCode_default2 = {
    ZERO: 48,
    NINE: 57,
    NUMPAD_ZERO: 96,
    NUMPAD_NINE: 105,
    BACKSPACE: 8,
    DELETE: 46,
    ENTER: 13,
    ARROW_UP: 38,
    ARROW_DOWN: 40
  };

  // node_modules/rc-pagination/es/Options.js
  var Options = /* @__PURE__ */ function(_React$Component) {
    _inherits(Options2, _React$Component);
    var _super = _createSuper(Options2);
    function Options2() {
      var _this;
      _classCallCheck(this, Options2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        goInputText: ""
      };
      _this.buildOptionText = function(value) {
        return "".concat(value, " ").concat(_this.props.locale.items_per_page);
      };
      _this.changeSize = function(value) {
        _this.props.changeSize(Number(value));
      };
      _this.handleChange = function(e3) {
        _this.setState({
          goInputText: e3.target.value
        });
      };
      _this.handleBlur = function(e3) {
        var _this$props = _this.props, goButton = _this$props.goButton, quickGo = _this$props.quickGo, rootPrefixCls = _this$props.rootPrefixCls;
        var goInputText = _this.state.goInputText;
        if (goButton || goInputText === "") {
          return;
        }
        _this.setState({
          goInputText: ""
        });
        if (e3.relatedTarget && (e3.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-item-link")) >= 0 || e3.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-item")) >= 0)) {
          return;
        }
        quickGo(_this.getValidValue());
      };
      _this.go = function(e3) {
        var goInputText = _this.state.goInputText;
        if (goInputText === "") {
          return;
        }
        if (e3.keyCode === KeyCode_default2.ENTER || e3.type === "click") {
          _this.setState({
            goInputText: ""
          });
          _this.props.quickGo(_this.getValidValue());
        }
      };
      return _this;
    }
    _createClass(Options2, [{
      key: "getValidValue",
      value: function getValidValue() {
        var goInputText = this.state.goInputText;
        return !goInputText || isNaN(goInputText) ? void 0 : Number(goInputText);
      }
    }, {
      key: "getPageSizeOptions",
      value: function getPageSizeOptions() {
        var _this$props2 = this.props, pageSize = _this$props2.pageSize, pageSizeOptions = _this$props2.pageSizeOptions;
        if (pageSizeOptions.some(function(option) {
          return option.toString() === pageSize.toString();
        })) {
          return pageSizeOptions;
        }
        return pageSizeOptions.concat([pageSize.toString()]).sort(function(a2, b2) {
          var numberA = isNaN(Number(a2)) ? 0 : Number(a2);
          var numberB = isNaN(Number(b2)) ? 0 : Number(b2);
          return numberA - numberB;
        });
      }
    }, {
      key: "render",
      value: function render4() {
        var _this2 = this;
        var _this$props3 = this.props, pageSize = _this$props3.pageSize, locale4 = _this$props3.locale, rootPrefixCls = _this$props3.rootPrefixCls, changeSize = _this$props3.changeSize, quickGo = _this$props3.quickGo, goButton = _this$props3.goButton, selectComponentClass = _this$props3.selectComponentClass, buildOptionText = _this$props3.buildOptionText, selectPrefixCls = _this$props3.selectPrefixCls, disabled = _this$props3.disabled;
        var goInputText = this.state.goInputText;
        var prefixCls = "".concat(rootPrefixCls, "-options");
        var Select3 = selectComponentClass;
        var changeSelect = null;
        var goInput = null;
        var gotoButton = null;
        if (!changeSize && !quickGo) {
          return null;
        }
        var pageSizeOptions = this.getPageSizeOptions();
        if (changeSize && Select3) {
          var options = pageSizeOptions.map(function(opt, i3) {
            return /* @__PURE__ */ import_react67.default.createElement(Select3.Option, {
              key: i3,
              value: opt.toString()
            }, (buildOptionText || _this2.buildOptionText)(opt));
          });
          changeSelect = /* @__PURE__ */ import_react67.default.createElement(Select3, {
            disabled,
            prefixCls: selectPrefixCls,
            showSearch: false,
            className: "".concat(prefixCls, "-size-changer"),
            optionLabelProp: "children",
            dropdownMatchSelectWidth: false,
            value: (pageSize || pageSizeOptions[0]).toString(),
            onChange: this.changeSize,
            getPopupContainer: function getPopupContainer(triggerNode) {
              return triggerNode.parentNode;
            },
            "aria-label": locale4.page_size,
            defaultOpen: false
          }, options);
        }
        if (quickGo) {
          if (goButton) {
            gotoButton = typeof goButton === "boolean" ? /* @__PURE__ */ import_react67.default.createElement("button", {
              type: "button",
              onClick: this.go,
              onKeyUp: this.go,
              disabled,
              className: "".concat(prefixCls, "-quick-jumper-button")
            }, locale4.jump_to_confirm) : /* @__PURE__ */ import_react67.default.createElement("span", {
              onClick: this.go,
              onKeyUp: this.go
            }, goButton);
          }
          goInput = /* @__PURE__ */ import_react67.default.createElement("div", {
            className: "".concat(prefixCls, "-quick-jumper")
          }, locale4.jump_to, /* @__PURE__ */ import_react67.default.createElement("input", {
            disabled,
            type: "text",
            value: goInputText,
            onChange: this.handleChange,
            onKeyUp: this.go,
            onBlur: this.handleBlur,
            "aria-label": locale4.page
          }), locale4.page, gotoButton);
        }
        return /* @__PURE__ */ import_react67.default.createElement("li", {
          className: "".concat(prefixCls)
        }, changeSelect, goInput);
      }
    }]);
    return Options2;
  }(import_react67.default.Component);
  Options.defaultProps = {
    pageSizeOptions: ["10", "20", "50", "100"]
  };
  var Options_default = Options;

  // node_modules/rc-pagination/es/locale/zh_CN.js
  var zh_CN_default = {
    // Options.jsx
    items_per_page: "\u6761/\u9875",
    jump_to: "\u8DF3\u81F3",
    jump_to_confirm: "\u786E\u5B9A",
    page: "\u9875",
    // Pagination.jsx
    prev_page: "\u4E0A\u4E00\u9875",
    next_page: "\u4E0B\u4E00\u9875",
    prev_5: "\u5411\u524D 5 \u9875",
    next_5: "\u5411\u540E 5 \u9875",
    prev_3: "\u5411\u524D 3 \u9875",
    next_3: "\u5411\u540E 3 \u9875",
    page_size: "\u9875\u7801"
  };

  // node_modules/rc-pagination/es/Pagination.js
  function noop3() {
  }
  function isInteger(v2) {
    var value = Number(v2);
    return (
      // eslint-disable-next-line no-restricted-globals
      typeof value === "number" && !isNaN(value) && isFinite(value) && Math.floor(value) === value
    );
  }
  function defaultItemRender(page, type4, element) {
    return element;
  }
  function calculatePage(p2, state, props) {
    var pageSize = typeof p2 === "undefined" ? state.pageSize : p2;
    return Math.floor((props.total - 1) / pageSize) + 1;
  }
  var Pagination = /* @__PURE__ */ function(_React$Component) {
    _inherits(Pagination4, _React$Component);
    var _super = _createSuper(Pagination4);
    function Pagination4(props) {
      var _this;
      _classCallCheck(this, Pagination4);
      _this = _super.call(this, props);
      _this.getJumpPrevPage = function() {
        return Math.max(1, _this.state.current - (_this.props.showLessItems ? 3 : 5));
      };
      _this.getJumpNextPage = function() {
        return Math.min(calculatePage(void 0, _this.state, _this.props), _this.state.current + (_this.props.showLessItems ? 3 : 5));
      };
      _this.getItemIcon = function(icon, label) {
        var prefixCls = _this.props.prefixCls;
        var iconNode = icon || /* @__PURE__ */ import_react68.default.createElement("button", {
          type: "button",
          "aria-label": label,
          className: "".concat(prefixCls, "-item-link")
        });
        if (typeof icon === "function") {
          iconNode = /* @__PURE__ */ import_react68.default.createElement(icon, _objectSpread2({}, _this.props));
        }
        return iconNode;
      };
      _this.savePaginationNode = function(node) {
        _this.paginationNode = node;
      };
      _this.isValid = function(page) {
        var total = _this.props.total;
        return isInteger(page) && page !== _this.state.current && isInteger(total) && total > 0;
      };
      _this.shouldDisplayQuickJumper = function() {
        var _this$props = _this.props, showQuickJumper = _this$props.showQuickJumper, total = _this$props.total;
        var pageSize = _this.state.pageSize;
        if (total <= pageSize) {
          return false;
        }
        return showQuickJumper;
      };
      _this.handleKeyDown = function(e3) {
        if (e3.keyCode === KeyCode_default2.ARROW_UP || e3.keyCode === KeyCode_default2.ARROW_DOWN) {
          e3.preventDefault();
        }
      };
      _this.handleKeyUp = function(e3) {
        var value = _this.getValidValue(e3);
        var currentInputValue = _this.state.currentInputValue;
        if (value !== currentInputValue) {
          _this.setState({
            currentInputValue: value
          });
        }
        if (e3.keyCode === KeyCode_default2.ENTER) {
          _this.handleChange(value);
        } else if (e3.keyCode === KeyCode_default2.ARROW_UP) {
          _this.handleChange(value - 1);
        } else if (e3.keyCode === KeyCode_default2.ARROW_DOWN) {
          _this.handleChange(value + 1);
        }
      };
      _this.handleBlur = function(e3) {
        var value = _this.getValidValue(e3);
        _this.handleChange(value);
      };
      _this.changePageSize = function(size) {
        var current = _this.state.current;
        var newCurrent = calculatePage(size, _this.state, _this.props);
        current = current > newCurrent ? newCurrent : current;
        if (newCurrent === 0) {
          current = _this.state.current;
        }
        if (typeof size === "number") {
          if (!("pageSize" in _this.props)) {
            _this.setState({
              pageSize: size
            });
          }
          if (!("current" in _this.props)) {
            _this.setState({
              current,
              currentInputValue: current
            });
          }
        }
        _this.props.onShowSizeChange(current, size);
        if ("onChange" in _this.props && _this.props.onChange) {
          _this.props.onChange(current, size);
        }
      };
      _this.handleChange = function(page) {
        var _this$props2 = _this.props, disabled = _this$props2.disabled, onChange3 = _this$props2.onChange;
        var _this$state = _this.state, pageSize = _this$state.pageSize, current = _this$state.current, currentInputValue = _this$state.currentInputValue;
        if (_this.isValid(page) && !disabled) {
          var currentPage = calculatePage(void 0, _this.state, _this.props);
          var newPage = page;
          if (page > currentPage) {
            newPage = currentPage;
          } else if (page < 1) {
            newPage = 1;
          }
          if (!("current" in _this.props)) {
            _this.setState({
              current: newPage
            });
          }
          if (newPage !== currentInputValue) {
            _this.setState({
              currentInputValue: newPage
            });
          }
          onChange3(newPage, pageSize);
          return newPage;
        }
        return current;
      };
      _this.prev = function() {
        if (_this.hasPrev()) {
          _this.handleChange(_this.state.current - 1);
        }
      };
      _this.next = function() {
        if (_this.hasNext()) {
          _this.handleChange(_this.state.current + 1);
        }
      };
      _this.jumpPrev = function() {
        _this.handleChange(_this.getJumpPrevPage());
      };
      _this.jumpNext = function() {
        _this.handleChange(_this.getJumpNextPage());
      };
      _this.hasPrev = function() {
        return _this.state.current > 1;
      };
      _this.hasNext = function() {
        return _this.state.current < calculatePage(void 0, _this.state, _this.props);
      };
      _this.runIfEnter = function(event, callback) {
        if (event.key === "Enter" || event.charCode === 13) {
          for (var _len = arguments.length, restParams = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            restParams[_key - 2] = arguments[_key];
          }
          callback.apply(void 0, restParams);
        }
      };
      _this.runIfEnterPrev = function(e3) {
        _this.runIfEnter(e3, _this.prev);
      };
      _this.runIfEnterNext = function(e3) {
        _this.runIfEnter(e3, _this.next);
      };
      _this.runIfEnterJumpPrev = function(e3) {
        _this.runIfEnter(e3, _this.jumpPrev);
      };
      _this.runIfEnterJumpNext = function(e3) {
        _this.runIfEnter(e3, _this.jumpNext);
      };
      _this.handleGoTO = function(e3) {
        if (e3.keyCode === KeyCode_default2.ENTER || e3.type === "click") {
          _this.handleChange(_this.state.currentInputValue);
        }
      };
      var hasOnChange = props.onChange !== noop3;
      var hasCurrent = "current" in props;
      if (hasCurrent && !hasOnChange) {
        console.warn("Warning: You provided a `current` prop to a Pagination component without an `onChange` handler. This will render a read-only component.");
      }
      var _current = props.defaultCurrent;
      if ("current" in props) {
        _current = props.current;
      }
      var _pageSize = props.defaultPageSize;
      if ("pageSize" in props) {
        _pageSize = props.pageSize;
      }
      _current = Math.min(_current, calculatePage(_pageSize, void 0, props));
      _this.state = {
        current: _current,
        currentInputValue: _current,
        pageSize: _pageSize
      };
      return _this;
    }
    _createClass(Pagination4, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        var prefixCls = this.props.prefixCls;
        if (prevState.current !== this.state.current && this.paginationNode) {
          var lastCurrentNode = this.paginationNode.querySelector(".".concat(prefixCls, "-item-").concat(prevState.current));
          if (lastCurrentNode && document.activeElement === lastCurrentNode) {
            lastCurrentNode.blur();
          }
        }
      }
    }, {
      key: "getValidValue",
      value: function getValidValue(e3) {
        var inputValue = e3.target.value;
        var allPages = calculatePage(void 0, this.state, this.props);
        var currentInputValue = this.state.currentInputValue;
        var value;
        if (inputValue === "") {
          value = inputValue;
        } else if (isNaN(Number(inputValue))) {
          value = currentInputValue;
        } else if (inputValue >= allPages) {
          value = allPages;
        } else {
          value = Number(inputValue);
        }
        return value;
      }
    }, {
      key: "getShowSizeChanger",
      value: function getShowSizeChanger() {
        var _this$props3 = this.props, showSizeChanger = _this$props3.showSizeChanger, total = _this$props3.total, totalBoundaryShowSizeChanger = _this$props3.totalBoundaryShowSizeChanger;
        if (typeof showSizeChanger !== "undefined") {
          return showSizeChanger;
        }
        return total > totalBoundaryShowSizeChanger;
      }
    }, {
      key: "renderPrev",
      value: function renderPrev(prevPage) {
        var _this$props4 = this.props, prevIcon = _this$props4.prevIcon, itemRender = _this$props4.itemRender;
        var prevButton = itemRender(prevPage, "prev", this.getItemIcon(prevIcon, "prev page"));
        var disabled = !this.hasPrev();
        return /* @__PURE__ */ (0, import_react68.isValidElement)(prevButton) ? /* @__PURE__ */ (0, import_react68.cloneElement)(prevButton, {
          disabled
        }) : prevButton;
      }
    }, {
      key: "renderNext",
      value: function renderNext(nextPage) {
        var _this$props5 = this.props, nextIcon = _this$props5.nextIcon, itemRender = _this$props5.itemRender;
        var nextButton = itemRender(nextPage, "next", this.getItemIcon(nextIcon, "next page"));
        var disabled = !this.hasNext();
        return /* @__PURE__ */ (0, import_react68.isValidElement)(nextButton) ? /* @__PURE__ */ (0, import_react68.cloneElement)(nextButton, {
          disabled
        }) : nextButton;
      }
    }, {
      key: "render",
      value: function render4() {
        var _this2 = this;
        var _this$props6 = this.props, prefixCls = _this$props6.prefixCls, className = _this$props6.className, style2 = _this$props6.style, disabled = _this$props6.disabled, hideOnSinglePage = _this$props6.hideOnSinglePage, total = _this$props6.total, locale4 = _this$props6.locale, showQuickJumper = _this$props6.showQuickJumper, showLessItems = _this$props6.showLessItems, showTitle = _this$props6.showTitle, showTotal = _this$props6.showTotal, simple = _this$props6.simple, itemRender = _this$props6.itemRender, showPrevNextJumpers = _this$props6.showPrevNextJumpers, jumpPrevIcon = _this$props6.jumpPrevIcon, jumpNextIcon = _this$props6.jumpNextIcon, selectComponentClass = _this$props6.selectComponentClass, selectPrefixCls = _this$props6.selectPrefixCls, pageSizeOptions = _this$props6.pageSizeOptions;
        var _this$state2 = this.state, current = _this$state2.current, pageSize = _this$state2.pageSize, currentInputValue = _this$state2.currentInputValue;
        if (hideOnSinglePage === true && total <= pageSize) {
          return null;
        }
        var allPages = calculatePage(void 0, this.state, this.props);
        var pagerList = [];
        var jumpPrev = null;
        var jumpNext = null;
        var firstPager = null;
        var lastPager = null;
        var gotoButton = null;
        var goButton = showQuickJumper && showQuickJumper.goButton;
        var pageBufferSize = showLessItems ? 1 : 2;
        var prevPage = current - 1 > 0 ? current - 1 : 0;
        var nextPage = current + 1 < allPages ? current + 1 : allPages;
        var dataOrAriaAttributeProps = Object.keys(this.props).reduce(function(prev, key2) {
          if (key2.substr(0, 5) === "data-" || key2.substr(0, 5) === "aria-" || key2 === "role") {
            prev[key2] = _this2.props[key2];
          }
          return prev;
        }, {});
        if (simple) {
          if (goButton) {
            if (typeof goButton === "boolean") {
              gotoButton = /* @__PURE__ */ import_react68.default.createElement("button", {
                type: "button",
                onClick: this.handleGoTO,
                onKeyUp: this.handleGoTO
              }, locale4.jump_to_confirm);
            } else {
              gotoButton = /* @__PURE__ */ import_react68.default.createElement("span", {
                onClick: this.handleGoTO,
                onKeyUp: this.handleGoTO
              }, goButton);
            }
            gotoButton = /* @__PURE__ */ import_react68.default.createElement("li", {
              title: showTitle ? "".concat(locale4.jump_to).concat(current, "/").concat(allPages) : null,
              className: "".concat(prefixCls, "-simple-pager")
            }, gotoButton);
          }
          return /* @__PURE__ */ import_react68.default.createElement("ul", _extends({
            className: (0, import_classnames96.default)(prefixCls, "".concat(prefixCls, "-simple"), _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled), className),
            style: style2,
            ref: this.savePaginationNode
          }, dataOrAriaAttributeProps), /* @__PURE__ */ import_react68.default.createElement("li", {
            title: showTitle ? locale4.prev_page : null,
            onClick: this.prev,
            tabIndex: this.hasPrev() ? 0 : null,
            onKeyPress: this.runIfEnterPrev,
            className: (0, import_classnames96.default)("".concat(prefixCls, "-prev"), _defineProperty({}, "".concat(prefixCls, "-disabled"), !this.hasPrev())),
            "aria-disabled": !this.hasPrev()
          }, this.renderPrev(prevPage)), /* @__PURE__ */ import_react68.default.createElement("li", {
            title: showTitle ? "".concat(current, "/").concat(allPages) : null,
            className: "".concat(prefixCls, "-simple-pager")
          }, /* @__PURE__ */ import_react68.default.createElement("input", {
            type: "text",
            value: currentInputValue,
            disabled,
            onKeyDown: this.handleKeyDown,
            onKeyUp: this.handleKeyUp,
            onChange: this.handleKeyUp,
            onBlur: this.handleBlur,
            size: "3"
          }), /* @__PURE__ */ import_react68.default.createElement("span", {
            className: "".concat(prefixCls, "-slash")
          }, "/"), allPages), /* @__PURE__ */ import_react68.default.createElement("li", {
            title: showTitle ? locale4.next_page : null,
            onClick: this.next,
            tabIndex: this.hasPrev() ? 0 : null,
            onKeyPress: this.runIfEnterNext,
            className: (0, import_classnames96.default)("".concat(prefixCls, "-next"), _defineProperty({}, "".concat(prefixCls, "-disabled"), !this.hasNext())),
            "aria-disabled": !this.hasNext()
          }, this.renderNext(nextPage)), gotoButton);
        }
        if (allPages <= 3 + pageBufferSize * 2) {
          var pagerProps = {
            locale: locale4,
            rootPrefixCls: prefixCls,
            onClick: this.handleChange,
            onKeyPress: this.runIfEnter,
            showTitle,
            itemRender
          };
          if (!allPages) {
            pagerList.push(/* @__PURE__ */ import_react68.default.createElement(Pager_default, _extends({}, pagerProps, {
              key: "noPager",
              page: 1,
              className: "".concat(prefixCls, "-item-disabled")
            })));
          }
          for (var i3 = 1; i3 <= allPages; i3 += 1) {
            var active = current === i3;
            pagerList.push(/* @__PURE__ */ import_react68.default.createElement(Pager_default, _extends({}, pagerProps, {
              key: i3,
              page: i3,
              active
            })));
          }
        } else {
          var prevItemTitle = showLessItems ? locale4.prev_3 : locale4.prev_5;
          var nextItemTitle = showLessItems ? locale4.next_3 : locale4.next_5;
          if (showPrevNextJumpers) {
            jumpPrev = /* @__PURE__ */ import_react68.default.createElement("li", {
              title: showTitle ? prevItemTitle : null,
              key: "prev",
              onClick: this.jumpPrev,
              tabIndex: "0",
              onKeyPress: this.runIfEnterJumpPrev,
              className: (0, import_classnames96.default)("".concat(prefixCls, "-jump-prev"), _defineProperty({}, "".concat(prefixCls, "-jump-prev-custom-icon"), !!jumpPrevIcon))
            }, itemRender(this.getJumpPrevPage(), "jump-prev", this.getItemIcon(jumpPrevIcon, "prev page")));
            jumpNext = /* @__PURE__ */ import_react68.default.createElement("li", {
              title: showTitle ? nextItemTitle : null,
              key: "next",
              tabIndex: "0",
              onClick: this.jumpNext,
              onKeyPress: this.runIfEnterJumpNext,
              className: (0, import_classnames96.default)("".concat(prefixCls, "-jump-next"), _defineProperty({}, "".concat(prefixCls, "-jump-next-custom-icon"), !!jumpNextIcon))
            }, itemRender(this.getJumpNextPage(), "jump-next", this.getItemIcon(jumpNextIcon, "next page")));
          }
          lastPager = /* @__PURE__ */ import_react68.default.createElement(Pager_default, {
            locale: locale4,
            last: true,
            rootPrefixCls: prefixCls,
            onClick: this.handleChange,
            onKeyPress: this.runIfEnter,
            key: allPages,
            page: allPages,
            active: false,
            showTitle,
            itemRender
          });
          firstPager = /* @__PURE__ */ import_react68.default.createElement(Pager_default, {
            locale: locale4,
            rootPrefixCls: prefixCls,
            onClick: this.handleChange,
            onKeyPress: this.runIfEnter,
            key: 1,
            page: 1,
            active: false,
            showTitle,
            itemRender
          });
          var left = Math.max(1, current - pageBufferSize);
          var right = Math.min(current + pageBufferSize, allPages);
          if (current - 1 <= pageBufferSize) {
            right = 1 + pageBufferSize * 2;
          }
          if (allPages - current <= pageBufferSize) {
            left = allPages - pageBufferSize * 2;
          }
          for (var _i = left; _i <= right; _i += 1) {
            var _active = current === _i;
            pagerList.push(/* @__PURE__ */ import_react68.default.createElement(Pager_default, {
              locale: locale4,
              rootPrefixCls: prefixCls,
              onClick: this.handleChange,
              onKeyPress: this.runIfEnter,
              key: _i,
              page: _i,
              active: _active,
              showTitle,
              itemRender
            }));
          }
          if (current - 1 >= pageBufferSize * 2 && current !== 1 + 2) {
            pagerList[0] = /* @__PURE__ */ (0, import_react68.cloneElement)(pagerList[0], {
              className: "".concat(prefixCls, "-item-after-jump-prev")
            });
            pagerList.unshift(jumpPrev);
          }
          if (allPages - current >= pageBufferSize * 2 && current !== allPages - 2) {
            pagerList[pagerList.length - 1] = /* @__PURE__ */ (0, import_react68.cloneElement)(pagerList[pagerList.length - 1], {
              className: "".concat(prefixCls, "-item-before-jump-next")
            });
            pagerList.push(jumpNext);
          }
          if (left !== 1) {
            pagerList.unshift(firstPager);
          }
          if (right !== allPages) {
            pagerList.push(lastPager);
          }
        }
        var totalText = null;
        if (showTotal) {
          totalText = /* @__PURE__ */ import_react68.default.createElement("li", {
            className: "".concat(prefixCls, "-total-text")
          }, showTotal(total, [total === 0 ? 0 : (current - 1) * pageSize + 1, current * pageSize > total ? total : current * pageSize]));
        }
        var prevDisabled = !this.hasPrev() || !allPages;
        var nextDisabled = !this.hasNext() || !allPages;
        return /* @__PURE__ */ import_react68.default.createElement("ul", _extends({
          className: (0, import_classnames96.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled)),
          style: style2,
          unselectable: "unselectable",
          ref: this.savePaginationNode
        }, dataOrAriaAttributeProps), totalText, /* @__PURE__ */ import_react68.default.createElement("li", {
          title: showTitle ? locale4.prev_page : null,
          onClick: this.prev,
          tabIndex: prevDisabled ? null : 0,
          onKeyPress: this.runIfEnterPrev,
          className: (0, import_classnames96.default)("".concat(prefixCls, "-prev"), _defineProperty({}, "".concat(prefixCls, "-disabled"), prevDisabled)),
          "aria-disabled": prevDisabled
        }, this.renderPrev(prevPage)), pagerList, /* @__PURE__ */ import_react68.default.createElement("li", {
          title: showTitle ? locale4.next_page : null,
          onClick: this.next,
          tabIndex: nextDisabled ? null : 0,
          onKeyPress: this.runIfEnterNext,
          className: (0, import_classnames96.default)("".concat(prefixCls, "-next"), _defineProperty({}, "".concat(prefixCls, "-disabled"), nextDisabled)),
          "aria-disabled": nextDisabled
        }, this.renderNext(nextPage)), /* @__PURE__ */ import_react68.default.createElement(Options_default, {
          disabled,
          locale: locale4,
          rootPrefixCls: prefixCls,
          selectComponentClass,
          selectPrefixCls,
          changeSize: this.getShowSizeChanger() ? this.changePageSize : null,
          current,
          pageSize,
          pageSizeOptions,
          quickGo: this.shouldDisplayQuickJumper() ? this.handleChange : null,
          goButton
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, prevState) {
        var newState = {};
        if ("current" in props) {
          newState.current = props.current;
          if (props.current !== prevState.current) {
            newState.currentInputValue = newState.current;
          }
        }
        if ("pageSize" in props && props.pageSize !== prevState.pageSize) {
          var current = prevState.current;
          var newCurrent = calculatePage(props.pageSize, prevState, props);
          current = current > newCurrent ? newCurrent : current;
          if (!("current" in props)) {
            newState.current = current;
            newState.currentInputValue = current;
          }
          newState.pageSize = props.pageSize;
        }
        return newState;
      }
    }]);
    return Pagination4;
  }(import_react68.default.Component);
  Pagination.defaultProps = {
    defaultCurrent: 1,
    total: 0,
    defaultPageSize: 10,
    onChange: noop3,
    className: "",
    selectPrefixCls: "rc-select",
    prefixCls: "rc-pagination",
    selectComponentClass: null,
    hideOnSinglePage: false,
    showPrevNextJumpers: true,
    showQuickJumper: false,
    showLessItems: false,
    showTitle: true,
    onShowSizeChange: noop3,
    locale: zh_CN_default,
    style: {},
    itemRender: defaultItemRender,
    totalBoundaryShowSizeChanger: 50
  };
  var Pagination_default = Pagination;

  // node_modules/antd/es/pagination/Pagination.js
  var React233 = __toESM(require_react());

  // node_modules/antd/es/pagination/Select.js
  var React232 = __toESM(require_react());
  var MiniSelect = function MiniSelect2(props) {
    return /* @__PURE__ */ React232.createElement(select_default, _extends({}, props, {
      size: "small"
    }));
  };
  var MiddleSelect = function MiddleSelect2(props) {
    return /* @__PURE__ */ React232.createElement(select_default, _extends({}, props, {
      size: "middle"
    }));
  };
  MiniSelect.Option = select_default.Option;
  MiddleSelect.Option = select_default.Option;

  // node_modules/antd/es/pagination/Pagination.js
  var __rest33 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var Pagination2 = function Pagination3(_a) {
    var customizePrefixCls = _a.prefixCls, customizeSelectPrefixCls = _a.selectPrefixCls, className = _a.className, size = _a.size, customLocale = _a.locale, selectComponentClass = _a.selectComponentClass, responsive = _a.responsive, showSizeChanger = _a.showSizeChanger, restProps = __rest33(_a, ["prefixCls", "selectPrefixCls", "className", "size", "locale", "selectComponentClass", "responsive", "showSizeChanger"]);
    var _useBreakpoint = useBreakpoint_default(responsive), xs = _useBreakpoint.xs;
    var _React$useContext = React233.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction, _React$useContext$pag = _React$useContext.pagination, pagination = _React$useContext$pag === void 0 ? {} : _React$useContext$pag;
    var prefixCls = getPrefixCls("pagination", customizePrefixCls);
    var mergedShowSizeChanger = showSizeChanger !== null && showSizeChanger !== void 0 ? showSizeChanger : pagination.showSizeChanger;
    var getIconsProps = function getIconsProps2() {
      var ellipsis = /* @__PURE__ */ React233.createElement("span", {
        className: "".concat(prefixCls, "-item-ellipsis")
      }, "\u2022\u2022\u2022");
      var prevIcon = /* @__PURE__ */ React233.createElement("button", {
        className: "".concat(prefixCls, "-item-link"),
        type: "button",
        tabIndex: -1
      }, /* @__PURE__ */ React233.createElement(LeftOutlined_default2, null));
      var nextIcon = /* @__PURE__ */ React233.createElement("button", {
        className: "".concat(prefixCls, "-item-link"),
        type: "button",
        tabIndex: -1
      }, /* @__PURE__ */ React233.createElement(RightOutlined_default2, null));
      var jumpPrevIcon = /* @__PURE__ */ React233.createElement("a", {
        className: "".concat(prefixCls, "-item-link")
      }, /* @__PURE__ */ React233.createElement("div", {
        className: "".concat(prefixCls, "-item-container")
      }, /* @__PURE__ */ React233.createElement(DoubleLeftOutlined_default2, {
        className: "".concat(prefixCls, "-item-link-icon")
      }), ellipsis));
      var jumpNextIcon = /* @__PURE__ */ React233.createElement("a", {
        className: "".concat(prefixCls, "-item-link")
      }, /* @__PURE__ */ React233.createElement("div", {
        className: "".concat(prefixCls, "-item-container")
      }, /* @__PURE__ */ React233.createElement(DoubleRightOutlined_default2, {
        className: "".concat(prefixCls, "-item-link-icon")
      }), ellipsis));
      if (direction === "rtl") {
        var _ref = [nextIcon, prevIcon];
        prevIcon = _ref[0];
        nextIcon = _ref[1];
        var _ref2 = [jumpNextIcon, jumpPrevIcon];
        jumpPrevIcon = _ref2[0];
        jumpNextIcon = _ref2[1];
      }
      return {
        prevIcon,
        nextIcon,
        jumpPrevIcon,
        jumpNextIcon
      };
    };
    return /* @__PURE__ */ React233.createElement(LocaleReceiver, {
      componentName: "Pagination",
      defaultLocale: en_US_default
    }, function(contextLocale) {
      var _classNames;
      var locale4 = _extends(_extends({}, contextLocale), customLocale);
      var isSmall = size === "small" || !!(xs && !size && responsive);
      var selectPrefixCls = getPrefixCls("select", customizeSelectPrefixCls);
      var extendedClassName = (0, import_classnames97.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-mini"), isSmall), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
      return /* @__PURE__ */ React233.createElement(Pagination_default, _extends({}, getIconsProps(), restProps, {
        prefixCls,
        selectPrefixCls,
        className: extendedClassName,
        selectComponentClass: selectComponentClass || (isSmall ? MiniSelect : MiddleSelect),
        locale: locale4,
        showSizeChanger: mergedShowSizeChanger
      }));
    });
  };
  var Pagination_default2 = Pagination2;

  // node_modules/antd/es/pagination/index.js
  var pagination_default = Pagination_default2;

  // node_modules/antd/es/spin/index.js
  var import_classnames98 = __toESM(require_classnames());
  var import_debounce = __toESM(require_debounce());
  var React234 = __toESM(require_react());
  var __rest34 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var SpinSizes = tuple("small", "default", "large");
  var defaultIndicator = null;
  function renderIndicator(prefixCls, props) {
    var indicator = props.indicator;
    var dotClassName = "".concat(prefixCls, "-dot");
    if (indicator === null) {
      return null;
    }
    if (isValidElement6(indicator)) {
      return cloneElement6(indicator, {
        className: (0, import_classnames98.default)(indicator.props.className, dotClassName)
      });
    }
    if (isValidElement6(defaultIndicator)) {
      return cloneElement6(defaultIndicator, {
        className: (0, import_classnames98.default)(defaultIndicator.props.className, dotClassName)
      });
    }
    return /* @__PURE__ */ React234.createElement("span", {
      className: (0, import_classnames98.default)(dotClassName, "".concat(prefixCls, "-dot-spin"))
    }, /* @__PURE__ */ React234.createElement("i", {
      className: "".concat(prefixCls, "-dot-item")
    }), /* @__PURE__ */ React234.createElement("i", {
      className: "".concat(prefixCls, "-dot-item")
    }), /* @__PURE__ */ React234.createElement("i", {
      className: "".concat(prefixCls, "-dot-item")
    }), /* @__PURE__ */ React234.createElement("i", {
      className: "".concat(prefixCls, "-dot-item")
    }));
  }
  function shouldDelay(spinning, delay) {
    return !!spinning && !!delay && !isNaN(Number(delay));
  }
  var Spin = /* @__PURE__ */ function(_React$Component) {
    _inherits(Spin2, _React$Component);
    var _super = _createSuper(Spin2);
    function Spin2(props) {
      var _this;
      _classCallCheck(this, Spin2);
      _this = _super.call(this, props);
      _this.debouncifyUpdateSpinning = function(props2) {
        var _ref = props2 || _this.props, delay2 = _ref.delay;
        if (delay2) {
          _this.cancelExistingSpin();
          _this.updateSpinning = (0, import_debounce.default)(_this.originalUpdateSpinning, delay2);
        }
      };
      _this.updateSpinning = function() {
        var spinning2 = _this.props.spinning;
        var currentSpinning = _this.state.spinning;
        if (currentSpinning !== spinning2) {
          _this.setState({
            spinning: spinning2
          });
        }
      };
      _this.renderSpin = function(_ref2) {
        var _classNames;
        var direction = _ref2.direction;
        var _a = _this.props, prefixCls = _a.spinPrefixCls, className = _a.className, size = _a.size, tip = _a.tip, wrapperClassName = _a.wrapperClassName, style2 = _a.style, restProps = __rest34(_a, ["spinPrefixCls", "className", "size", "tip", "wrapperClassName", "style"]);
        var spinning2 = _this.state.spinning;
        var spinClassName = (0, import_classnames98.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-sm"), size === "small"), _defineProperty(_classNames, "".concat(prefixCls, "-lg"), size === "large"), _defineProperty(_classNames, "".concat(prefixCls, "-spinning"), spinning2), _defineProperty(_classNames, "".concat(prefixCls, "-show-text"), !!tip), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
        var divProps = omit(restProps, ["spinning", "delay", "indicator", "prefixCls"]);
        var spinElement = /* @__PURE__ */ React234.createElement("div", _extends({}, divProps, {
          style: style2,
          className: spinClassName,
          "aria-live": "polite",
          "aria-busy": spinning2
        }), renderIndicator(prefixCls, _this.props), tip ? /* @__PURE__ */ React234.createElement("div", {
          className: "".concat(prefixCls, "-text")
        }, tip) : null);
        if (_this.isNestedPattern()) {
          var containerClassName = (0, import_classnames98.default)("".concat(prefixCls, "-container"), _defineProperty({}, "".concat(prefixCls, "-blur"), spinning2));
          return /* @__PURE__ */ React234.createElement("div", _extends({}, divProps, {
            className: (0, import_classnames98.default)("".concat(prefixCls, "-nested-loading"), wrapperClassName)
          }), spinning2 && /* @__PURE__ */ React234.createElement("div", {
            key: "loading"
          }, spinElement), /* @__PURE__ */ React234.createElement("div", {
            className: containerClassName,
            key: "container"
          }, _this.props.children));
        }
        return spinElement;
      };
      var spinning = props.spinning, delay = props.delay;
      var shouldBeDelayed = shouldDelay(spinning, delay);
      _this.state = {
        spinning: spinning && !shouldBeDelayed
      };
      _this.originalUpdateSpinning = _this.updateSpinning;
      _this.debouncifyUpdateSpinning(props);
      return _this;
    }
    _createClass(Spin2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.updateSpinning();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.debouncifyUpdateSpinning();
        this.updateSpinning();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.cancelExistingSpin();
      }
    }, {
      key: "cancelExistingSpin",
      value: function cancelExistingSpin() {
        var updateSpinning = this.updateSpinning;
        if (updateSpinning && updateSpinning.cancel) {
          updateSpinning.cancel();
        }
      }
    }, {
      key: "isNestedPattern",
      value: function isNestedPattern() {
        return !!(this.props && typeof this.props.children !== "undefined");
      }
    }, {
      key: "render",
      value: function render4() {
        return /* @__PURE__ */ React234.createElement(ConfigConsumer, null, this.renderSpin);
      }
    }]);
    return Spin2;
  }(React234.Component);
  Spin.defaultProps = {
    spinning: true,
    size: "default",
    wrapperClassName: ""
  };
  var SpinFC = function SpinFC2(props) {
    var customizePrefixCls = props.prefixCls;
    var _React$useContext = React234.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var spinPrefixCls = getPrefixCls("spin", customizePrefixCls);
    var spinClassProps = _extends(_extends({}, props), {
      spinPrefixCls
    });
    return /* @__PURE__ */ React234.createElement(Spin, _extends({}, spinClassProps));
  };
  SpinFC.setDefaultIndicator = function(indicator) {
    defaultIndicator = indicator;
  };
  if (true) {
    SpinFC.displayName = "Spin";
  }
  var spin_default = SpinFC;

  // node_modules/antd/es/list/Item.js
  var import_classnames99 = __toESM(require_classnames());
  var import_react69 = __toESM(require_react());
  var __rest35 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var Meta3 = function Meta4(_a) {
    var customizePrefixCls = _a.prefixCls, className = _a.className, avatar = _a.avatar, title = _a.title, description = _a.description, others = __rest35(_a, ["prefixCls", "className", "avatar", "title", "description"]);
    var _useContext = (0, import_react69.useContext)(ConfigContext), getPrefixCls = _useContext.getPrefixCls;
    var prefixCls = getPrefixCls("list", customizePrefixCls);
    var classString = (0, import_classnames99.default)("".concat(prefixCls, "-item-meta"), className);
    var content = /* @__PURE__ */ import_react69.default.createElement("div", {
      className: "".concat(prefixCls, "-item-meta-content")
    }, title && /* @__PURE__ */ import_react69.default.createElement("h4", {
      className: "".concat(prefixCls, "-item-meta-title")
    }, title), description && /* @__PURE__ */ import_react69.default.createElement("div", {
      className: "".concat(prefixCls, "-item-meta-description")
    }, description));
    return /* @__PURE__ */ import_react69.default.createElement("div", _extends({}, others, {
      className: classString
    }), avatar && /* @__PURE__ */ import_react69.default.createElement("div", {
      className: "".concat(prefixCls, "-item-meta-avatar")
    }, avatar), (title || description) && content);
  };
  var InternalItem2 = function InternalItem3(_a, ref) {
    var customizePrefixCls = _a.prefixCls, children = _a.children, actions = _a.actions, extra = _a.extra, className = _a.className, colStyle = _a.colStyle, others = __rest35(_a, ["prefixCls", "children", "actions", "extra", "className", "colStyle"]);
    var _useContext2 = (0, import_react69.useContext)(ListContext2), grid = _useContext2.grid, itemLayout = _useContext2.itemLayout;
    var _useContext3 = (0, import_react69.useContext)(ConfigContext), getPrefixCls = _useContext3.getPrefixCls;
    var isItemContainsTextNodeAndNotSingular = function isItemContainsTextNodeAndNotSingular2() {
      var result;
      import_react69.Children.forEach(children, function(element) {
        if (typeof element === "string") {
          result = true;
        }
      });
      return result && import_react69.Children.count(children) > 1;
    };
    var isFlexMode = function isFlexMode2() {
      if (itemLayout === "vertical") {
        return !!extra;
      }
      return !isItemContainsTextNodeAndNotSingular();
    };
    var prefixCls = getPrefixCls("list", customizePrefixCls);
    var actionsContent = actions && actions.length > 0 && /* @__PURE__ */ import_react69.default.createElement("ul", {
      className: "".concat(prefixCls, "-item-action"),
      key: "actions"
    }, actions.map(function(action, i3) {
      return (
        // eslint-disable-next-line react/no-array-index-key
        /* @__PURE__ */ import_react69.default.createElement("li", {
          key: "".concat(prefixCls, "-item-action-").concat(i3)
        }, action, i3 !== actions.length - 1 && /* @__PURE__ */ import_react69.default.createElement("em", {
          className: "".concat(prefixCls, "-item-action-split")
        }))
      );
    }));
    var Element4 = grid ? "div" : "li";
    var itemChildren = /* @__PURE__ */ import_react69.default.createElement(Element4, _extends({}, others, !grid ? {
      ref
    } : {}, {
      className: (0, import_classnames99.default)("".concat(prefixCls, "-item"), _defineProperty({}, "".concat(prefixCls, "-item-no-flex"), !isFlexMode()), className)
    }), itemLayout === "vertical" && extra ? [/* @__PURE__ */ import_react69.default.createElement("div", {
      className: "".concat(prefixCls, "-item-main"),
      key: "content"
    }, children, actionsContent), /* @__PURE__ */ import_react69.default.createElement("div", {
      className: "".concat(prefixCls, "-item-extra"),
      key: "extra"
    }, extra)] : [children, actionsContent, cloneElement6(extra, {
      key: "extra"
    })]);
    return grid ? /* @__PURE__ */ import_react69.default.createElement(col_default, {
      ref,
      flex: 1,
      style: colStyle
    }, itemChildren) : itemChildren;
  };
  var Item3 = /* @__PURE__ */ (0, import_react69.forwardRef)(InternalItem2);
  Item3.Meta = Meta3;
  var Item_default2 = Item3;

  // node_modules/antd/es/list/index.js
  var __rest36 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var ListContext2 = /* @__PURE__ */ React236.createContext({});
  var ListConsumer = ListContext2.Consumer;
  function List4(_a) {
    var _classNames;
    var _a$pagination = _a.pagination, pagination = _a$pagination === void 0 ? false : _a$pagination, customizePrefixCls = _a.prefixCls, _a$bordered = _a.bordered, bordered = _a$bordered === void 0 ? false : _a$bordered, _a$split = _a.split, split = _a$split === void 0 ? true : _a$split, className = _a.className, children = _a.children, itemLayout = _a.itemLayout, loadMore = _a.loadMore, grid = _a.grid, _a$dataSource = _a.dataSource, dataSource = _a$dataSource === void 0 ? [] : _a$dataSource, size = _a.size, header = _a.header, footer = _a.footer, _a$loading = _a.loading, loading = _a$loading === void 0 ? false : _a$loading, rowKey = _a.rowKey, renderItem = _a.renderItem, locale4 = _a.locale, rest = __rest36(_a, ["pagination", "prefixCls", "bordered", "split", "className", "children", "itemLayout", "loadMore", "grid", "dataSource", "size", "header", "footer", "loading", "rowKey", "renderItem", "locale"]);
    var paginationObj = pagination && _typeof(pagination) === "object" ? pagination : {};
    var _React$useState = React236.useState(paginationObj.defaultCurrent || 1), _React$useState2 = _slicedToArray(_React$useState, 2), paginationCurrent = _React$useState2[0], setPaginationCurrent = _React$useState2[1];
    var _React$useState3 = React236.useState(paginationObj.defaultPageSize || 10), _React$useState4 = _slicedToArray(_React$useState3, 2), paginationSize = _React$useState4[0], setPaginationSize = _React$useState4[1];
    var _React$useContext = React236.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, renderEmpty = _React$useContext.renderEmpty, direction = _React$useContext.direction;
    var defaultPaginationProps = {
      current: 1,
      total: 0
    };
    var listItemsKeys = {};
    var triggerPaginationEvent = function triggerPaginationEvent2(eventName) {
      return function(page, pageSize) {
        setPaginationCurrent(page);
        setPaginationSize(pageSize);
        if (pagination && pagination[eventName]) {
          pagination[eventName](page, pageSize);
        }
      };
    };
    var onPaginationChange = triggerPaginationEvent("onChange");
    var onPaginationShowSizeChange = triggerPaginationEvent("onShowSizeChange");
    var renderInnerItem = function renderInnerItem2(item, index3) {
      if (!renderItem)
        return null;
      var key2;
      if (typeof rowKey === "function") {
        key2 = rowKey(item);
      } else if (rowKey) {
        key2 = item[rowKey];
      } else {
        key2 = item.key;
      }
      if (!key2) {
        key2 = "list-item-".concat(index3);
      }
      listItemsKeys[index3] = key2;
      return renderItem(item, index3);
    };
    var isSomethingAfterLastItem = function isSomethingAfterLastItem2() {
      return !!(loadMore || pagination || footer);
    };
    var renderEmptyFunc = function renderEmptyFunc2(prefixCls2, renderEmptyHandler) {
      return /* @__PURE__ */ React236.createElement("div", {
        className: "".concat(prefixCls2, "-empty-text")
      }, locale4 && locale4.emptyText || renderEmptyHandler("List"));
    };
    var prefixCls = getPrefixCls("list", customizePrefixCls);
    var loadingProp = loading;
    if (typeof loadingProp === "boolean") {
      loadingProp = {
        spinning: loadingProp
      };
    }
    var isLoading = loadingProp && loadingProp.spinning;
    var sizeCls = "";
    switch (size) {
      case "large":
        sizeCls = "lg";
        break;
      case "small":
        sizeCls = "sm";
        break;
      default:
        break;
    }
    var classString = (0, import_classnames100.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-vertical"), itemLayout === "vertical"), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), _defineProperty(_classNames, "".concat(prefixCls, "-split"), split), _defineProperty(_classNames, "".concat(prefixCls, "-bordered"), bordered), _defineProperty(_classNames, "".concat(prefixCls, "-loading"), isLoading), _defineProperty(_classNames, "".concat(prefixCls, "-grid"), !!grid), _defineProperty(_classNames, "".concat(prefixCls, "-something-after-last-item"), isSomethingAfterLastItem()), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    var paginationProps = _extends(_extends(_extends({}, defaultPaginationProps), {
      total: dataSource.length,
      current: paginationCurrent,
      pageSize: paginationSize
    }), pagination || {});
    var largestPage = Math.ceil(paginationProps.total / paginationProps.pageSize);
    if (paginationProps.current > largestPage) {
      paginationProps.current = largestPage;
    }
    var paginationContent = pagination ? /* @__PURE__ */ React236.createElement("div", {
      className: "".concat(prefixCls, "-pagination")
    }, /* @__PURE__ */ React236.createElement(pagination_default, _extends({}, paginationProps, {
      onChange: onPaginationChange,
      onShowSizeChange: onPaginationShowSizeChange
    }))) : null;
    var splitDataSource = _toConsumableArray(dataSource);
    if (pagination) {
      if (dataSource.length > (paginationProps.current - 1) * paginationProps.pageSize) {
        splitDataSource = _toConsumableArray(dataSource).splice((paginationProps.current - 1) * paginationProps.pageSize, paginationProps.pageSize);
      }
    }
    var needResponsive = Object.keys(grid || {}).some(function(key2) {
      return ["xs", "sm", "md", "lg", "xl", "xxl"].includes(key2);
    });
    var screens2 = useBreakpoint_default(needResponsive);
    var currentBreakpoint = React236.useMemo(function() {
      for (var i3 = 0; i3 < responsiveArray.length; i3 += 1) {
        var breakpoint = responsiveArray[i3];
        if (screens2[breakpoint]) {
          return breakpoint;
        }
      }
      return void 0;
    }, [screens2]);
    var colStyle = React236.useMemo(function() {
      if (!grid) {
        return void 0;
      }
      var columnCount = currentBreakpoint && grid[currentBreakpoint] ? grid[currentBreakpoint] : grid.column;
      if (columnCount) {
        return {
          width: "".concat(100 / columnCount, "%"),
          maxWidth: "".concat(100 / columnCount, "%")
        };
      }
    }, [grid === null || grid === void 0 ? void 0 : grid.column, currentBreakpoint]);
    var childrenContent = isLoading && /* @__PURE__ */ React236.createElement("div", {
      style: {
        minHeight: 53
      }
    });
    if (splitDataSource.length > 0) {
      var items = splitDataSource.map(function(item, index3) {
        return renderInnerItem(item, index3);
      });
      var childrenList = React236.Children.map(items, function(child, index3) {
        return /* @__PURE__ */ React236.createElement("div", {
          key: listItemsKeys[index3],
          style: colStyle
        }, child);
      });
      childrenContent = grid ? /* @__PURE__ */ React236.createElement(row_default, {
        gutter: grid.gutter
      }, childrenList) : /* @__PURE__ */ React236.createElement("ul", {
        className: "".concat(prefixCls, "-items")
      }, items);
    } else if (!children && !isLoading) {
      childrenContent = renderEmptyFunc(prefixCls, renderEmpty || defaultRenderEmpty_default);
    }
    var paginationPosition = paginationProps.position || "bottom";
    var contextValue = React236.useMemo(function() {
      return {
        grid,
        itemLayout
      };
    }, [JSON.stringify(grid), itemLayout]);
    return /* @__PURE__ */ React236.createElement(ListContext2.Provider, {
      value: contextValue
    }, /* @__PURE__ */ React236.createElement("div", _extends({
      className: classString
    }, rest), (paginationPosition === "top" || paginationPosition === "both") && paginationContent, header && /* @__PURE__ */ React236.createElement("div", {
      className: "".concat(prefixCls, "-header")
    }, header), /* @__PURE__ */ React236.createElement(spin_default, _extends({}, loadingProp), childrenContent, children), footer && /* @__PURE__ */ React236.createElement("div", {
      className: "".concat(prefixCls, "-footer")
    }, footer), loadMore || (paginationPosition === "bottom" || paginationPosition === "both") && paginationContent));
  }
  List4.Item = Item_default2;
  var list_default = List4;

  // node_modules/antd/es/modal/confirm.js
  var React240 = __toESM(require_react());

  // node_modules/antd/es/modal/ConfirmDialog.js
  var import_classnames102 = __toESM(require_classnames());
  var React239 = __toESM(require_react());

  // node_modules/antd/es/_util/ActionButton.js
  var React237 = __toESM(require_react());
  function isThenable(thing) {
    return !!(thing && !!thing.then);
  }
  var ActionButton = function ActionButton2(props) {
    var clickedRef = React237.useRef(false);
    var ref = React237.useRef();
    var _useState = useSafeState(false), _useState2 = _slicedToArray(_useState, 2), loading = _useState2[0], setLoading = _useState2[1];
    var close2 = props.close;
    var onInternalClose = function onInternalClose2() {
      close2 === null || close2 === void 0 ? void 0 : close2.apply(void 0, arguments);
    };
    React237.useEffect(function() {
      var timeoutId;
      if (props.autoFocus) {
        var $this = ref.current;
        timeoutId = setTimeout(function() {
          return $this.focus();
        });
      }
      return function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
      };
    }, []);
    var handlePromiseOnOk = function handlePromiseOnOk2(returnValueOfOnOk) {
      if (!isThenable(returnValueOfOnOk)) {
        return;
      }
      setLoading(true);
      returnValueOfOnOk.then(function() {
        setLoading(false, true);
        onInternalClose.apply(void 0, arguments);
        clickedRef.current = false;
      }, function(e3) {
        console.error(e3);
        setLoading(false, true);
        clickedRef.current = false;
      });
    };
    var onClick = function onClick2(e3) {
      var actionFn = props.actionFn;
      if (clickedRef.current) {
        return;
      }
      clickedRef.current = true;
      if (!actionFn) {
        onInternalClose();
        return;
      }
      var returnValueOfOnOk;
      if (props.emitEvent) {
        returnValueOfOnOk = actionFn(e3);
        if (props.quitOnNullishReturnValue && !isThenable(returnValueOfOnOk)) {
          clickedRef.current = false;
          onInternalClose(e3);
          return;
        }
      } else if (actionFn.length) {
        returnValueOfOnOk = actionFn(close2);
        clickedRef.current = false;
      } else {
        returnValueOfOnOk = actionFn();
        if (!returnValueOfOnOk) {
          onInternalClose();
          return;
        }
      }
      handlePromiseOnOk(returnValueOfOnOk);
    };
    var type4 = props.type, children = props.children, prefixCls = props.prefixCls, buttonProps = props.buttonProps;
    return /* @__PURE__ */ React237.createElement(button_default2, _extends({}, convertLegacyProps(type4), {
      onClick,
      loading,
      prefixCls
    }, buttonProps, {
      ref
    }), children);
  };
  var ActionButton_default = ActionButton;

  // node_modules/antd/es/modal/Modal.js
  var import_classnames101 = __toESM(require_classnames());
  var React238 = __toESM(require_react());
  var __rest37 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var mousePosition;
  var getClickPosition = function getClickPosition2(e3) {
    mousePosition = {
      x: e3.pageX,
      y: e3.pageY
    };
    setTimeout(function() {
      mousePosition = null;
    }, 100);
  };
  if (canUseDocElement()) {
    document.documentElement.addEventListener("click", getClickPosition, true);
  }
  var Modal = function Modal2(props) {
    var _classNames;
    var _React$useContext = React238.useContext(ConfigContext), getContextPopupContainer = _React$useContext.getPopupContainer, getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var handleCancel = function handleCancel2(e3) {
      var onCancel = props.onCancel;
      onCancel === null || onCancel === void 0 ? void 0 : onCancel(e3);
    };
    var handleOk = function handleOk2(e3) {
      var onOk = props.onOk;
      onOk === null || onOk === void 0 ? void 0 : onOk(e3);
    };
    true ? warning_default2(!("visible" in props), "Modal", "`visible` will be removed in next major version, please use `open` instead.") : void 0;
    var customizePrefixCls = props.prefixCls, footer = props.footer, visible = props.visible, open = props.open, wrapClassName = props.wrapClassName, centered = props.centered, getContainer3 = props.getContainer, closeIcon = props.closeIcon, _props$focusTriggerAf = props.focusTriggerAfterClose, focusTriggerAfterClose = _props$focusTriggerAf === void 0 ? true : _props$focusTriggerAf, restProps = __rest37(props, ["prefixCls", "footer", "visible", "open", "wrapClassName", "centered", "getContainer", "closeIcon", "focusTriggerAfterClose"]);
    var prefixCls = getPrefixCls("modal", customizePrefixCls);
    var rootPrefixCls = getPrefixCls();
    var defaultFooter = /* @__PURE__ */ React238.createElement(LocaleReceiver, {
      componentName: "Modal",
      defaultLocale: getConfirmLocale()
    }, function(contextLocale) {
      var okText = props.okText, okType = props.okType, cancelText = props.cancelText, confirmLoading = props.confirmLoading;
      return /* @__PURE__ */ React238.createElement(React238.Fragment, null, /* @__PURE__ */ React238.createElement(button_default2, _extends({
        onClick: handleCancel
      }, props.cancelButtonProps), cancelText || contextLocale.cancelText), /* @__PURE__ */ React238.createElement(button_default2, _extends({}, convertLegacyProps(okType), {
        loading: confirmLoading,
        onClick: handleOk
      }, props.okButtonProps), okText !== null && okText !== void 0 ? okText : contextLocale.okText));
    });
    var closeIconToRender = /* @__PURE__ */ React238.createElement("span", {
      className: "".concat(prefixCls, "-close-x")
    }, closeIcon || /* @__PURE__ */ React238.createElement(CloseOutlined_default2, {
      className: "".concat(prefixCls, "-close-icon")
    }));
    var wrapClassNameExtended = (0, import_classnames101.default)(wrapClassName, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-centered"), !!centered), _defineProperty(_classNames, "".concat(prefixCls, "-wrap-rtl"), direction === "rtl"), _classNames));
    return /* @__PURE__ */ React238.createElement(NoFormStyle, {
      status: true,
      override: true
    }, /* @__PURE__ */ React238.createElement(es_default17, _extends({}, restProps, {
      getContainer: getContainer3 === void 0 ? getContextPopupContainer : getContainer3,
      prefixCls,
      wrapClassName: wrapClassNameExtended,
      footer: footer === void 0 ? defaultFooter : footer,
      visible: open || visible,
      mousePosition,
      onClose: handleCancel,
      closeIcon: closeIconToRender,
      focusTriggerAfterClose,
      transitionName: getTransitionName3(rootPrefixCls, "zoom", props.transitionName),
      maskTransitionName: getTransitionName3(rootPrefixCls, "fade", props.maskTransitionName)
    })));
  };
  Modal.defaultProps = {
    width: 520,
    confirmLoading: false,
    open: false,
    okType: "primary"
  };
  var Modal_default = Modal;

  // node_modules/antd/es/modal/ConfirmDialog.js
  var ConfirmDialog = function ConfirmDialog2(props) {
    var icon = props.icon, onCancel = props.onCancel, onOk = props.onOk, close2 = props.close, zIndex = props.zIndex, afterClose = props.afterClose, visible = props.visible, open = props.open, keyboard = props.keyboard, centered = props.centered, getContainer3 = props.getContainer, maskStyle = props.maskStyle, okText = props.okText, okButtonProps = props.okButtonProps, cancelText = props.cancelText, cancelButtonProps = props.cancelButtonProps, direction = props.direction, prefixCls = props.prefixCls, wrapClassName = props.wrapClassName, rootPrefixCls = props.rootPrefixCls, iconPrefixCls = props.iconPrefixCls, bodyStyle = props.bodyStyle, _props$closable = props.closable, closable = _props$closable === void 0 ? false : _props$closable, closeIcon = props.closeIcon, modalRender = props.modalRender, focusTriggerAfterClose = props.focusTriggerAfterClose;
    if (true) {
      true ? warning_default2(!(typeof icon === "string" && icon.length > 2), "Modal", "`icon` is using ReactNode instead of string naming in v4. Please check `".concat(icon, "` at https://ant.design/components/icon")) : void 0;
      true ? warning_default2(visible === void 0, "Modal", "`visible` is deprecated, please use `open` instead.") : void 0;
    }
    var okType = props.okType || "primary";
    var contentPrefixCls = "".concat(prefixCls, "-confirm");
    var okCancel = "okCancel" in props ? props.okCancel : true;
    var width = props.width || 416;
    var style2 = props.style || {};
    var mask = props.mask === void 0 ? true : props.mask;
    var maskClosable = props.maskClosable === void 0 ? false : props.maskClosable;
    var autoFocusButton = props.autoFocusButton === null ? false : props.autoFocusButton || "ok";
    var classString = (0, import_classnames102.default)(contentPrefixCls, "".concat(contentPrefixCls, "-").concat(props.type), _defineProperty({}, "".concat(contentPrefixCls, "-rtl"), direction === "rtl"), props.className);
    var cancelButton = okCancel && /* @__PURE__ */ React239.createElement(ActionButton_default, {
      actionFn: onCancel,
      close: close2,
      autoFocus: autoFocusButton === "cancel",
      buttonProps: cancelButtonProps,
      prefixCls: "".concat(rootPrefixCls, "-btn")
    }, cancelText);
    return /* @__PURE__ */ React239.createElement(config_provider_default, {
      prefixCls: rootPrefixCls,
      iconPrefixCls,
      direction
    }, /* @__PURE__ */ React239.createElement(Modal_default, {
      prefixCls,
      className: classString,
      wrapClassName: (0, import_classnames102.default)(_defineProperty({}, "".concat(contentPrefixCls, "-centered"), !!props.centered), wrapClassName),
      onCancel: function onCancel2() {
        return close2 === null || close2 === void 0 ? void 0 : close2({
          triggerCancel: true
        });
      },
      open: open || visible,
      title: "",
      footer: "",
      transitionName: getTransitionName3(rootPrefixCls, "zoom", props.transitionName),
      maskTransitionName: getTransitionName3(rootPrefixCls, "fade", props.maskTransitionName),
      mask,
      maskClosable,
      maskStyle,
      style: style2,
      bodyStyle,
      width,
      zIndex,
      afterClose,
      keyboard,
      centered,
      getContainer: getContainer3,
      closable,
      closeIcon,
      modalRender,
      focusTriggerAfterClose
    }, /* @__PURE__ */ React239.createElement("div", {
      className: "".concat(contentPrefixCls, "-body-wrapper")
    }, /* @__PURE__ */ React239.createElement("div", {
      className: "".concat(contentPrefixCls, "-body")
    }, icon, props.title === void 0 ? null : /* @__PURE__ */ React239.createElement("span", {
      className: "".concat(contentPrefixCls, "-title")
    }, props.title), /* @__PURE__ */ React239.createElement("div", {
      className: "".concat(contentPrefixCls, "-content")
    }, props.content)), /* @__PURE__ */ React239.createElement("div", {
      className: "".concat(contentPrefixCls, "-btns")
    }, cancelButton, /* @__PURE__ */ React239.createElement(ActionButton_default, {
      type: okType,
      actionFn: onOk,
      close: close2,
      autoFocus: autoFocusButton === "ok",
      buttonProps: okButtonProps,
      prefixCls: "".concat(rootPrefixCls, "-btn")
    }, okText)))));
  };
  var ConfirmDialog_default = ConfirmDialog;

  // node_modules/antd/es/modal/destroyFns.js
  var destroyFns = [];
  var destroyFns_default = destroyFns;

  // node_modules/antd/es/modal/confirm.js
  var __rest38 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var defaultRootPrefixCls = "";
  function getRootPrefixCls() {
    return defaultRootPrefixCls;
  }
  function confirm(config) {
    var container = document.createDocumentFragment();
    var currentConfig = _extends(_extends({}, config), {
      close: close2,
      open: true
    });
    function destroy3() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var triggerCancel = args.some(function(param) {
        return param && param.triggerCancel;
      });
      if (config.onCancel && triggerCancel) {
        config.onCancel.apply(config, [function() {
        }].concat(_toConsumableArray(args.slice(1))));
      }
      for (var i3 = 0; i3 < destroyFns_default.length; i3++) {
        var fn = destroyFns_default[i3];
        if (fn === close2) {
          destroyFns_default.splice(i3, 1);
          break;
        }
      }
      unmount(container);
    }
    function render4(_a) {
      var okText = _a.okText, cancelText = _a.cancelText, customizePrefixCls = _a.prefixCls, props = __rest38(_a, ["okText", "cancelText", "prefixCls"]);
      setTimeout(function() {
        var runtimeLocale2 = getConfirmLocale();
        var _globalConfig = globalConfig(), getPrefixCls = _globalConfig.getPrefixCls, getIconPrefixCls = _globalConfig.getIconPrefixCls;
        var rootPrefixCls = getPrefixCls(void 0, getRootPrefixCls());
        var prefixCls = customizePrefixCls || "".concat(rootPrefixCls, "-modal");
        var iconPrefixCls = getIconPrefixCls();
        render(/* @__PURE__ */ React240.createElement(ConfirmDialog_default, _extends({}, props, {
          prefixCls,
          rootPrefixCls,
          iconPrefixCls,
          okText: okText || (props.okCancel ? runtimeLocale2.okText : runtimeLocale2.justOkText),
          cancelText: cancelText || runtimeLocale2.cancelText
        })), container);
      });
    }
    function close2() {
      var _this = this;
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      currentConfig = _extends(_extends({}, currentConfig), {
        open: false,
        afterClose: function afterClose() {
          if (typeof config.afterClose === "function") {
            config.afterClose();
          }
          destroy3.apply(_this, args);
        }
      });
      if (currentConfig.visible) {
        delete currentConfig.visible;
      }
      render4(currentConfig);
    }
    function update(configUpdate) {
      if (typeof configUpdate === "function") {
        currentConfig = configUpdate(currentConfig);
      } else {
        currentConfig = _extends(_extends({}, currentConfig), configUpdate);
      }
      render4(currentConfig);
    }
    render4(currentConfig);
    destroyFns_default.push(close2);
    return {
      destroy: close2,
      update
    };
  }
  function withWarn(props) {
    return _extends(_extends({
      icon: /* @__PURE__ */ React240.createElement(ExclamationCircleOutlined_default2, null),
      okCancel: false
    }, props), {
      type: "warning"
    });
  }
  function withInfo(props) {
    return _extends(_extends({
      icon: /* @__PURE__ */ React240.createElement(InfoCircleOutlined_default2, null),
      okCancel: false
    }, props), {
      type: "info"
    });
  }
  function withSuccess(props) {
    return _extends(_extends({
      icon: /* @__PURE__ */ React240.createElement(CheckCircleOutlined_default2, null),
      okCancel: false
    }, props), {
      type: "success"
    });
  }
  function withError(props) {
    return _extends(_extends({
      icon: /* @__PURE__ */ React240.createElement(CloseCircleOutlined_default2, null),
      okCancel: false
    }, props), {
      type: "error"
    });
  }
  function withConfirm(props) {
    return _extends(_extends({
      icon: /* @__PURE__ */ React240.createElement(ExclamationCircleOutlined_default2, null),
      okCancel: true
    }, props), {
      type: "confirm"
    });
  }
  function modalGlobalConfig(_ref) {
    var rootPrefixCls = _ref.rootPrefixCls;
    true ? warning_default2(false, "Modal", "Modal.config is deprecated. Please use ConfigProvider.config instead.") : void 0;
    defaultRootPrefixCls = rootPrefixCls;
  }

  // node_modules/antd/es/modal/useModal/index.js
  var React243 = __toESM(require_react());

  // node_modules/antd/es/_util/hooks/usePatchElement.js
  var React241 = __toESM(require_react());
  function usePatchElement() {
    var _React$useState = React241.useState([]), _React$useState2 = _slicedToArray(_React$useState, 2), elements = _React$useState2[0], setElements = _React$useState2[1];
    var patchElement = React241.useCallback(function(element) {
      setElements(function(originElements) {
        return [].concat(_toConsumableArray(originElements), [element]);
      });
      return function() {
        setElements(function(originElements) {
          return originElements.filter(function(ele) {
            return ele !== element;
          });
        });
      };
    }, []);
    return [elements, patchElement];
  }

  // node_modules/antd/es/modal/useModal/HookModal.js
  var React242 = __toESM(require_react());
  var HookModal = function HookModal2(_ref, ref) {
    var afterClose = _ref.afterClose, config = _ref.config;
    var _React$useState = React242.useState(true), _React$useState2 = _slicedToArray(_React$useState, 2), open = _React$useState2[0], setOpen = _React$useState2[1];
    var _React$useState3 = React242.useState(config), _React$useState4 = _slicedToArray(_React$useState3, 2), innerConfig = _React$useState4[0], setInnerConfig = _React$useState4[1];
    var _React$useContext = React242.useContext(ConfigContext), direction = _React$useContext.direction, getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("modal");
    var rootPrefixCls = getPrefixCls();
    var close2 = function close3() {
      setOpen(false);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var triggerCancel = args.some(function(param) {
        return param && param.triggerCancel;
      });
      if (innerConfig.onCancel && triggerCancel) {
        innerConfig.onCancel.apply(innerConfig, [function() {
        }].concat(_toConsumableArray(args.slice(1))));
      }
    };
    React242.useImperativeHandle(ref, function() {
      return {
        destroy: close2,
        update: function update(newConfig) {
          setInnerConfig(function(originConfig) {
            return _extends(_extends({}, originConfig), newConfig);
          });
        }
      };
    });
    return /* @__PURE__ */ React242.createElement(LocaleReceiver, {
      componentName: "Modal",
      defaultLocale: default_default.Modal
    }, function(contextLocale) {
      return /* @__PURE__ */ React242.createElement(ConfirmDialog_default, _extends({
        prefixCls,
        rootPrefixCls
      }, innerConfig, {
        close: close2,
        open,
        afterClose,
        okText: innerConfig.okText || (innerConfig.okCancel ? contextLocale.okText : contextLocale.justOkText),
        direction,
        cancelText: innerConfig.cancelText || contextLocale.cancelText
      }));
    });
  };
  var HookModal_default = /* @__PURE__ */ React242.forwardRef(HookModal);

  // node_modules/antd/es/modal/useModal/index.js
  var uuid5 = 0;
  var ElementsHolder = /* @__PURE__ */ React243.memo(/* @__PURE__ */ React243.forwardRef(function(_props, ref) {
    var _usePatchElement = usePatchElement(), _usePatchElement2 = _slicedToArray(_usePatchElement, 2), elements = _usePatchElement2[0], patchElement = _usePatchElement2[1];
    React243.useImperativeHandle(ref, function() {
      return {
        patchElement
      };
    }, []);
    return /* @__PURE__ */ React243.createElement(React243.Fragment, null, elements);
  }));
  function useModal() {
    var holderRef = React243.useRef(null);
    var _React$useState = React243.useState([]), _React$useState2 = _slicedToArray(_React$useState, 2), actionQueue = _React$useState2[0], setActionQueue = _React$useState2[1];
    React243.useEffect(function() {
      if (actionQueue.length) {
        var cloneQueue = _toConsumableArray(actionQueue);
        cloneQueue.forEach(function(action) {
          action();
        });
        setActionQueue([]);
      }
    }, [actionQueue]);
    var getConfirmFunc = React243.useCallback(function(withFunc) {
      return function hookConfirm(config) {
        var _a;
        uuid5 += 1;
        var modalRef = /* @__PURE__ */ React243.createRef();
        var closeFunc;
        var modal = /* @__PURE__ */ React243.createElement(HookModal_default, {
          key: "modal-".concat(uuid5),
          config: withFunc(config),
          ref: modalRef,
          afterClose: function afterClose() {
            closeFunc();
          }
        });
        closeFunc = (_a = holderRef.current) === null || _a === void 0 ? void 0 : _a.patchElement(modal);
        return {
          destroy: function destroy3() {
            function destroyAction() {
              var _a2;
              (_a2 = modalRef.current) === null || _a2 === void 0 ? void 0 : _a2.destroy();
            }
            if (modalRef.current) {
              destroyAction();
            } else {
              setActionQueue(function(prev) {
                return [].concat(_toConsumableArray(prev), [destroyAction]);
              });
            }
          },
          update: function update(newConfig) {
            function updateAction() {
              var _a2;
              (_a2 = modalRef.current) === null || _a2 === void 0 ? void 0 : _a2.update(newConfig);
            }
            if (modalRef.current) {
              updateAction();
            } else {
              setActionQueue(function(prev) {
                return [].concat(_toConsumableArray(prev), [updateAction]);
              });
            }
          }
        };
      };
    }, []);
    var fns = React243.useMemo(function() {
      return {
        info: getConfirmFunc(withInfo),
        success: getConfirmFunc(withSuccess),
        error: getConfirmFunc(withError),
        warning: getConfirmFunc(withWarn),
        confirm: getConfirmFunc(withConfirm)
      };
    }, []);
    return [fns, /* @__PURE__ */ React243.createElement(ElementsHolder, {
      ref: holderRef
    })];
  }

  // node_modules/antd/es/modal/index.js
  function modalWarn(props) {
    return confirm(withWarn(props));
  }
  var Modal3 = Modal_default;
  Modal3.useModal = useModal;
  Modal3.info = function infoFn(props) {
    return confirm(withInfo(props));
  };
  Modal3.success = function successFn(props) {
    return confirm(withSuccess(props));
  };
  Modal3.error = function errorFn(props) {
    return confirm(withError(props));
  };
  Modal3.warning = modalWarn;
  Modal3.warn = modalWarn;
  Modal3.confirm = function confirmFn(props) {
    return confirm(withConfirm(props));
  };
  Modal3.destroyAll = function destroyAllFn() {
    while (destroyFns_default.length) {
      var close2 = destroyFns_default.pop();
      if (close2) {
        close2();
      }
    }
  };
  Modal3.config = modalGlobalConfig;
  var modal_default = Modal3;

  // node_modules/antd/es/space/index.js
  var import_classnames103 = __toESM(require_classnames());
  var React245 = __toESM(require_react());

  // node_modules/antd/es/space/Item.js
  var React244 = __toESM(require_react());
  function Item4(_ref) {
    var className = _ref.className, direction = _ref.direction, index3 = _ref.index, marginDirection = _ref.marginDirection, children = _ref.children, split = _ref.split, wrap = _ref.wrap;
    var _React$useContext = React244.useContext(SpaceContext), horizontalSize = _React$useContext.horizontalSize, verticalSize = _React$useContext.verticalSize, latestIndex = _React$useContext.latestIndex, supportFlexGap = _React$useContext.supportFlexGap;
    var style2 = {};
    if (!supportFlexGap) {
      if (direction === "vertical") {
        if (index3 < latestIndex) {
          style2 = {
            marginBottom: horizontalSize / (split ? 2 : 1)
          };
        }
      } else {
        style2 = _extends(_extends({}, index3 < latestIndex && _defineProperty({}, marginDirection, horizontalSize / (split ? 2 : 1))), wrap && {
          paddingBottom: verticalSize
        });
      }
    }
    if (children === null || children === void 0) {
      return null;
    }
    return /* @__PURE__ */ React244.createElement(React244.Fragment, null, /* @__PURE__ */ React244.createElement("div", {
      className,
      style: style2
    }, children), index3 < latestIndex && split && /* @__PURE__ */ React244.createElement("span", {
      className: "".concat(className, "-split"),
      style: style2
    }, split));
  }

  // node_modules/antd/es/space/index.js
  var __rest39 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var SpaceContext = /* @__PURE__ */ React245.createContext({
    latestIndex: 0,
    horizontalSize: 0,
    verticalSize: 0,
    supportFlexGap: false
  });
  var spaceSize = {
    small: 8,
    middle: 16,
    large: 24
  };
  function getNumberSize(size) {
    return typeof size === "string" ? spaceSize[size] : size || 0;
  }
  var Space = function Space2(props) {
    var _classNames;
    var _React$useContext = React245.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, space = _React$useContext.space, directionConfig = _React$useContext.direction;
    var _props$size = props.size, size = _props$size === void 0 ? (space === null || space === void 0 ? void 0 : space.size) || "small" : _props$size, align = props.align, className = props.className, children = props.children, _props$direction = props.direction, direction = _props$direction === void 0 ? "horizontal" : _props$direction, customizePrefixCls = props.prefixCls, split = props.split, style2 = props.style, _props$wrap = props.wrap, wrap = _props$wrap === void 0 ? false : _props$wrap, otherProps = __rest39(props, ["size", "align", "className", "children", "direction", "prefixCls", "split", "style", "wrap"]);
    var supportFlexGap = useFlexGapSupport_default();
    var _React$useMemo = React245.useMemo(function() {
      return (Array.isArray(size) ? size : [size, size]).map(function(item) {
        return getNumberSize(item);
      });
    }, [size]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), horizontalSize = _React$useMemo2[0], verticalSize = _React$useMemo2[1];
    var childNodes = toArray(children, {
      keepEmpty: true
    });
    var mergedAlign = align === void 0 && direction === "horizontal" ? "center" : align;
    var prefixCls = getPrefixCls("space", customizePrefixCls);
    var cn = (0, import_classnames103.default)(prefixCls, "".concat(prefixCls, "-").concat(direction), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), directionConfig === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-align-").concat(mergedAlign), mergedAlign), _classNames), className);
    var itemClassName = "".concat(prefixCls, "-item");
    var marginDirection = directionConfig === "rtl" ? "marginLeft" : "marginRight";
    var latestIndex = 0;
    var nodes = childNodes.map(function(child, i3) {
      if (child !== null && child !== void 0) {
        latestIndex = i3;
      }
      var key2 = child && child.key || "".concat(itemClassName, "-").concat(i3);
      return /* @__PURE__ */ React245.createElement(Item4, {
        className: itemClassName,
        key: key2,
        direction,
        index: i3,
        marginDirection,
        split,
        wrap
      }, child);
    });
    var spaceContext = React245.useMemo(function() {
      return {
        horizontalSize,
        verticalSize,
        latestIndex,
        supportFlexGap
      };
    }, [horizontalSize, verticalSize, latestIndex, supportFlexGap]);
    if (childNodes.length === 0) {
      return null;
    }
    var gapStyle = {};
    if (wrap) {
      gapStyle.flexWrap = "wrap";
      if (!supportFlexGap) {
        gapStyle.marginBottom = -verticalSize;
      }
    }
    if (supportFlexGap) {
      gapStyle.columnGap = horizontalSize;
      gapStyle.rowGap = verticalSize;
    }
    return /* @__PURE__ */ React245.createElement("div", _extends({
      className: cn,
      style: _extends(_extends({}, gapStyle), style2)
    }, otherProps), /* @__PURE__ */ React245.createElement(SpaceContext.Provider, {
      value: spaceContext
    }, nodes));
  };
  var space_default = Space;

  // node_modules/antd/es/_util/transButton.js
  var React246 = __toESM(require_react());
  var __rest40 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var inlineStyle = {
    border: 0,
    background: "transparent",
    padding: 0,
    lineHeight: "inherit",
    display: "inline-block"
  };
  var TransButton = /* @__PURE__ */ React246.forwardRef(function(props, ref) {
    var onKeyDown2 = function onKeyDown3(event) {
      var keyCode = event.keyCode;
      if (keyCode === KeyCode_default.ENTER) {
        event.preventDefault();
      }
    };
    var onKeyUp2 = function onKeyUp3(event) {
      var keyCode = event.keyCode;
      var onClick = props.onClick;
      if (keyCode === KeyCode_default.ENTER && onClick) {
        onClick();
      }
    };
    var style2 = props.style, noStyle = props.noStyle, disabled = props.disabled, restProps = __rest40(props, ["style", "noStyle", "disabled"]);
    var mergedStyle = {};
    if (!noStyle) {
      mergedStyle = _extends({}, inlineStyle);
    }
    if (disabled) {
      mergedStyle.pointerEvents = "none";
    }
    mergedStyle = _extends(_extends({}, mergedStyle), style2);
    return /* @__PURE__ */ React246.createElement("div", _extends({
      role: "button",
      tabIndex: 0,
      ref
    }, restProps, {
      onKeyDown: onKeyDown2,
      onKeyUp: onKeyUp2,
      style: mergedStyle
    }));
  });
  var transButton_default = TransButton;

  // node_modules/antd/es/progress/progress.js
  var import_classnames108 = __toESM(require_classnames());
  var React253 = __toESM(require_react());

  // node_modules/antd/es/progress/Circle.js
  var import_classnames106 = __toESM(require_classnames());

  // node_modules/rc-progress/es/Line.js
  var React247 = __toESM(require_react());
  var import_classnames104 = __toESM(require_classnames());

  // node_modules/rc-progress/es/common.js
  var import_react70 = __toESM(require_react());
  var defaultProps = {
    className: "",
    percent: 0,
    prefixCls: "rc-progress",
    strokeColor: "#2db7f5",
    strokeLinecap: "round",
    strokeWidth: 1,
    style: {},
    trailColor: "#D9D9D9",
    trailWidth: 1,
    gapPosition: "bottom"
  };
  var useTransitionDuration = function useTransitionDuration2() {
    var pathsRef = (0, import_react70.useRef)([]);
    var prevTimeStamp = (0, import_react70.useRef)(null);
    (0, import_react70.useEffect)(function() {
      var now3 = Date.now();
      var updated = false;
      pathsRef.current.forEach(function(path2) {
        if (!path2) {
          return;
        }
        updated = true;
        var pathStyle = path2.style;
        pathStyle.transitionDuration = ".3s, .3s, .3s, .06s";
        if (prevTimeStamp.current && now3 - prevTimeStamp.current < 100) {
          pathStyle.transitionDuration = "0s, 0s";
        }
      });
      if (updated) {
        prevTimeStamp.current = Date.now();
      }
    });
    return pathsRef.current;
  };

  // node_modules/rc-progress/es/Line.js
  var _excluded38 = ["className", "percent", "prefixCls", "strokeColor", "strokeLinecap", "strokeWidth", "style", "trailColor", "trailWidth", "transition"];
  var Line = function Line2(_ref) {
    var className = _ref.className, percent = _ref.percent, prefixCls = _ref.prefixCls, strokeColor = _ref.strokeColor, strokeLinecap = _ref.strokeLinecap, strokeWidth = _ref.strokeWidth, style2 = _ref.style, trailColor = _ref.trailColor, trailWidth = _ref.trailWidth, transition = _ref.transition, restProps = _objectWithoutProperties(_ref, _excluded38);
    delete restProps.gapPosition;
    var percentList = Array.isArray(percent) ? percent : [percent];
    var strokeColorList = Array.isArray(strokeColor) ? strokeColor : [strokeColor];
    var paths = useTransitionDuration();
    var center = strokeWidth / 2;
    var right = 100 - strokeWidth / 2;
    var pathString = "M ".concat(strokeLinecap === "round" ? center : 0, ",").concat(center, "\n         L ").concat(strokeLinecap === "round" ? right : 100, ",").concat(center);
    var viewBoxString = "0 0 100 ".concat(strokeWidth);
    var stackPtg = 0;
    return /* @__PURE__ */ React247.createElement("svg", _extends({
      className: (0, import_classnames104.default)("".concat(prefixCls, "-line"), className),
      viewBox: viewBoxString,
      preserveAspectRatio: "none",
      style: style2
    }, restProps), /* @__PURE__ */ React247.createElement("path", {
      className: "".concat(prefixCls, "-line-trail"),
      d: pathString,
      strokeLinecap,
      stroke: trailColor,
      strokeWidth: trailWidth || strokeWidth,
      fillOpacity: "0"
    }), percentList.map(function(ptg, index3) {
      var dashPercent = 1;
      switch (strokeLinecap) {
        case "round":
          dashPercent = 1 - strokeWidth / 100;
          break;
        case "square":
          dashPercent = 1 - strokeWidth / 2 / 100;
          break;
        default:
          dashPercent = 1;
          break;
      }
      var pathStyle = {
        strokeDasharray: "".concat(ptg * dashPercent, "px, 100px"),
        strokeDashoffset: "-".concat(stackPtg, "px"),
        transition: transition || "stroke-dashoffset 0.3s ease 0s, stroke-dasharray .3s ease 0s, stroke 0.3s linear"
      };
      var color = strokeColorList[index3] || strokeColorList[strokeColorList.length - 1];
      stackPtg += ptg;
      return /* @__PURE__ */ React247.createElement("path", {
        key: index3,
        className: "".concat(prefixCls, "-line-path"),
        d: pathString,
        strokeLinecap,
        stroke: color,
        strokeWidth,
        fillOpacity: "0",
        ref: function ref(elem) {
          paths[index3] = elem;
        },
        style: pathStyle
      });
    }));
  };
  Line.defaultProps = defaultProps;
  Line.displayName = "Line";

  // node_modules/rc-progress/es/Circle.js
  var React249 = __toESM(require_react());
  var import_classnames105 = __toESM(require_classnames());

  // node_modules/rc-progress/es/hooks/useId.js
  var React248 = __toESM(require_react());
  var uuid6 = 0;
  var isBrowserClient3 = canUseDom();
  function getUUID2() {
    var retId;
    if (isBrowserClient3) {
      retId = uuid6;
      uuid6 += 1;
    } else {
      retId = "TEST_OR_SSR";
    }
    return retId;
  }
  var useId_default = function(id2) {
    var _React$useState = React248.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), innerId = _React$useState2[0], setInnerId = _React$useState2[1];
    React248.useEffect(function() {
      setInnerId("rc_progress_".concat(getUUID2()));
    }, []);
    return id2 || innerId;
  };

  // node_modules/rc-progress/es/Circle.js
  var _excluded39 = ["id", "prefixCls", "strokeWidth", "trailWidth", "gapDegree", "gapPosition", "trailColor", "strokeLinecap", "style", "className", "strokeColor", "percent"];
  function stripPercentToNumber(percent) {
    return +percent.replace("%", "");
  }
  function toArray5(value) {
    var mergedValue = value !== null && value !== void 0 ? value : [];
    return Array.isArray(mergedValue) ? mergedValue : [mergedValue];
  }
  var VIEW_BOX_SIZE = 100;
  var getCircleStyle = function getCircleStyle2(radius, offset3, percent, strokeColor) {
    var gapDegree = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
    var gapPosition = arguments.length > 5 ? arguments[5] : void 0;
    var strokeLinecap = arguments.length > 6 ? arguments[6] : void 0;
    var strokeWidth = arguments.length > 7 ? arguments[7] : void 0;
    var rotateDeg = gapDegree > 0 ? 90 + gapDegree / 2 : -90;
    var perimeter = Math.PI * 2 * radius;
    var perimeterWithoutGap = perimeter * ((360 - gapDegree) / 360);
    var offsetDeg = offset3 / 100 * 360 * ((360 - gapDegree) / 360);
    var positionDeg = gapDegree === 0 ? 0 : {
      bottom: 0,
      top: 180,
      left: 90,
      right: -90
    }[gapPosition];
    var strokeDashoffset = (100 - percent) / 100 * perimeterWithoutGap;
    if (strokeLinecap === "round" && percent !== 100) {
      strokeDashoffset += strokeWidth / 2;
      if (strokeDashoffset >= perimeterWithoutGap) {
        strokeDashoffset = perimeterWithoutGap - 0.01;
      }
    }
    return {
      stroke: typeof strokeColor === "string" ? strokeColor : void 0,
      strokeDasharray: "".concat(perimeterWithoutGap, "px ").concat(perimeter),
      strokeDashoffset,
      transform: "rotate(".concat(rotateDeg + offsetDeg + positionDeg, "deg)"),
      transformOrigin: "50% 50%",
      transition: "stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s, opacity .3s ease 0s",
      fillOpacity: 0
    };
  };
  var Circle = function Circle2(_ref) {
    var id2 = _ref.id, prefixCls = _ref.prefixCls, strokeWidth = _ref.strokeWidth, trailWidth = _ref.trailWidth, gapDegree = _ref.gapDegree, gapPosition = _ref.gapPosition, trailColor = _ref.trailColor, strokeLinecap = _ref.strokeLinecap, style2 = _ref.style, className = _ref.className, strokeColor = _ref.strokeColor, percent = _ref.percent, restProps = _objectWithoutProperties(_ref, _excluded39);
    var mergedId = useId_default(id2);
    var gradientId = "".concat(mergedId, "-gradient");
    var radius = VIEW_BOX_SIZE / 2 - strokeWidth / 2;
    var circleStyle = getCircleStyle(radius, 0, 100, trailColor, gapDegree, gapPosition, strokeLinecap, strokeWidth);
    var percentList = toArray5(percent);
    var strokeColorList = toArray5(strokeColor);
    var gradient = strokeColorList.find(function(color) {
      return color && _typeof(color) === "object";
    });
    var paths = useTransitionDuration();
    var getStokeList = function getStokeList2() {
      var stackPtg = 0;
      return percentList.map(function(ptg, index3) {
        var color = strokeColorList[index3] || strokeColorList[strokeColorList.length - 1];
        var stroke = color && _typeof(color) === "object" ? "url(#".concat(gradientId, ")") : void 0;
        var circleStyleForStack = getCircleStyle(radius, stackPtg, ptg, color, gapDegree, gapPosition, strokeLinecap, strokeWidth);
        stackPtg += ptg;
        return /* @__PURE__ */ React249.createElement("circle", {
          key: index3,
          className: "".concat(prefixCls, "-circle-path"),
          r: radius,
          cx: VIEW_BOX_SIZE / 2,
          cy: VIEW_BOX_SIZE / 2,
          stroke,
          strokeLinecap,
          strokeWidth,
          opacity: ptg === 0 ? 0 : 1,
          style: circleStyleForStack,
          ref: function ref(elem) {
            paths[index3] = elem;
          }
        });
      }).reverse();
    };
    return /* @__PURE__ */ React249.createElement("svg", _extends({
      className: (0, import_classnames105.default)("".concat(prefixCls, "-circle"), className),
      viewBox: "0 0 ".concat(VIEW_BOX_SIZE, " ").concat(VIEW_BOX_SIZE),
      style: style2,
      id: id2
    }, restProps), gradient && /* @__PURE__ */ React249.createElement("defs", null, /* @__PURE__ */ React249.createElement("linearGradient", {
      id: gradientId,
      x1: "100%",
      y1: "0%",
      x2: "0%",
      y2: "0%"
    }, Object.keys(gradient).sort(function(a2, b2) {
      return stripPercentToNumber(a2) - stripPercentToNumber(b2);
    }).map(function(key2, index3) {
      return /* @__PURE__ */ React249.createElement("stop", {
        key: index3,
        offset: key2,
        stopColor: gradient[key2]
      });
    }))), /* @__PURE__ */ React249.createElement("circle", {
      className: "".concat(prefixCls, "-circle-trail"),
      r: radius,
      cx: VIEW_BOX_SIZE / 2,
      cy: VIEW_BOX_SIZE / 2,
      stroke: trailColor,
      strokeLinecap,
      strokeWidth: trailWidth || strokeWidth,
      style: circleStyle
    }), getStokeList());
  };
  Circle.defaultProps = defaultProps;
  Circle.displayName = "Circle";
  var Circle_default = Circle;

  // node_modules/antd/es/progress/Circle.js
  var React250 = __toESM(require_react());

  // node_modules/antd/es/progress/utils.js
  function validProgress(progress) {
    if (!progress || progress < 0) {
      return 0;
    }
    if (progress > 100) {
      return 100;
    }
    return progress;
  }
  function getSuccessPercent(_ref) {
    var success = _ref.success, successPercent = _ref.successPercent;
    var percent = successPercent;
    if (success && "progress" in success) {
      true ? warning_default2(false, "Progress", "`success.progress` is deprecated. Please use `success.percent` instead.") : void 0;
      percent = success.progress;
    }
    if (success && "percent" in success) {
      percent = success.percent;
    }
    return percent;
  }

  // node_modules/antd/es/progress/Circle.js
  function getPercentage(_ref) {
    var percent = _ref.percent, success = _ref.success, successPercent = _ref.successPercent;
    var realSuccessPercent = validProgress(getSuccessPercent({
      success,
      successPercent
    }));
    return [realSuccessPercent, validProgress(validProgress(percent) - realSuccessPercent)];
  }
  function getStrokeColor(_ref2) {
    var _ref2$success = _ref2.success, success = _ref2$success === void 0 ? {} : _ref2$success, strokeColor = _ref2.strokeColor;
    var successColor = success.strokeColor;
    return [successColor || presetPrimaryColors.green, strokeColor || null];
  }
  var Circle3 = function Circle4(props) {
    var prefixCls = props.prefixCls, width = props.width, strokeWidth = props.strokeWidth, _props$trailColor = props.trailColor, trailColor = _props$trailColor === void 0 ? null : _props$trailColor, _props$strokeLinecap = props.strokeLinecap, strokeLinecap = _props$strokeLinecap === void 0 ? "round" : _props$strokeLinecap, gapPosition = props.gapPosition, gapDegree = props.gapDegree, type4 = props.type, children = props.children, success = props.success;
    var circleSize = width || 120;
    var circleStyle = {
      width: circleSize,
      height: circleSize,
      fontSize: circleSize * 0.15 + 6
    };
    var circleWidth = strokeWidth || 6;
    var gapPos = gapPosition || type4 === "dashboard" && "bottom" || void 0;
    var getGapDegree = function getGapDegree2() {
      if (gapDegree || gapDegree === 0) {
        return gapDegree;
      }
      if (type4 === "dashboard") {
        return 75;
      }
      return void 0;
    };
    var isGradient = Object.prototype.toString.call(props.strokeColor) === "[object Object]";
    var strokeColor = getStrokeColor({
      success,
      strokeColor: props.strokeColor
    });
    var wrapperClassName = (0, import_classnames106.default)("".concat(prefixCls, "-inner"), _defineProperty({}, "".concat(prefixCls, "-circle-gradient"), isGradient));
    return /* @__PURE__ */ React250.createElement("div", {
      className: wrapperClassName,
      style: circleStyle
    }, /* @__PURE__ */ React250.createElement(Circle_default, {
      percent: getPercentage(props),
      strokeWidth: circleWidth,
      trailWidth: circleWidth,
      strokeColor,
      strokeLinecap,
      trailColor,
      prefixCls,
      gapDegree: getGapDegree(),
      gapPosition: gapPos
    }), children);
  };
  var Circle_default2 = Circle3;

  // node_modules/antd/es/progress/Line.js
  var React251 = __toESM(require_react());
  var __rest41 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var sortGradient = function sortGradient2(gradients) {
    var tempArr = [];
    Object.keys(gradients).forEach(function(key2) {
      var formattedKey = parseFloat(key2.replace(/%/g, ""));
      if (!isNaN(formattedKey)) {
        tempArr.push({
          key: formattedKey,
          value: gradients[key2]
        });
      }
    });
    tempArr = tempArr.sort(function(a2, b2) {
      return a2.key - b2.key;
    });
    return tempArr.map(function(_ref) {
      var key2 = _ref.key, value = _ref.value;
      return "".concat(value, " ").concat(key2, "%");
    }).join(", ");
  };
  var handleGradient = function handleGradient2(strokeColor, directionConfig) {
    var _strokeColor$from = strokeColor.from, from3 = _strokeColor$from === void 0 ? presetPrimaryColors.blue : _strokeColor$from, _strokeColor$to = strokeColor.to, to = _strokeColor$to === void 0 ? presetPrimaryColors.blue : _strokeColor$to, _strokeColor$directio = strokeColor.direction, direction = _strokeColor$directio === void 0 ? directionConfig === "rtl" ? "to left" : "to right" : _strokeColor$directio, rest = __rest41(strokeColor, ["from", "to", "direction"]);
    if (Object.keys(rest).length !== 0) {
      var sortedGradients = sortGradient(rest);
      return {
        backgroundImage: "linear-gradient(".concat(direction, ", ").concat(sortedGradients, ")")
      };
    }
    return {
      backgroundImage: "linear-gradient(".concat(direction, ", ").concat(from3, ", ").concat(to, ")")
    };
  };
  var Line3 = function Line4(props) {
    var prefixCls = props.prefixCls, directionConfig = props.direction, percent = props.percent, strokeWidth = props.strokeWidth, size = props.size, strokeColor = props.strokeColor, _props$strokeLinecap = props.strokeLinecap, strokeLinecap = _props$strokeLinecap === void 0 ? "round" : _props$strokeLinecap, children = props.children, _props$trailColor = props.trailColor, trailColor = _props$trailColor === void 0 ? null : _props$trailColor, success = props.success;
    var backgroundProps = strokeColor && typeof strokeColor !== "string" ? handleGradient(strokeColor, directionConfig) : {
      background: strokeColor
    };
    var borderRadius = strokeLinecap === "square" || strokeLinecap === "butt" ? 0 : void 0;
    var trailStyle = {
      backgroundColor: trailColor || void 0,
      borderRadius
    };
    var percentStyle = _extends({
      width: "".concat(validProgress(percent), "%"),
      height: strokeWidth || (size === "small" ? 6 : 8),
      borderRadius
    }, backgroundProps);
    var successPercent = getSuccessPercent(props);
    var successPercentStyle = {
      width: "".concat(validProgress(successPercent), "%"),
      height: strokeWidth || (size === "small" ? 6 : 8),
      borderRadius,
      backgroundColor: success === null || success === void 0 ? void 0 : success.strokeColor
    };
    var successSegment = successPercent !== void 0 ? /* @__PURE__ */ React251.createElement("div", {
      className: "".concat(prefixCls, "-success-bg"),
      style: successPercentStyle
    }) : null;
    return /* @__PURE__ */ React251.createElement(React251.Fragment, null, /* @__PURE__ */ React251.createElement("div", {
      className: "".concat(prefixCls, "-outer")
    }, /* @__PURE__ */ React251.createElement("div", {
      className: "".concat(prefixCls, "-inner"),
      style: trailStyle
    }, /* @__PURE__ */ React251.createElement("div", {
      className: "".concat(prefixCls, "-bg"),
      style: percentStyle
    }), successSegment)), children);
  };
  var Line_default2 = Line3;

  // node_modules/antd/es/progress/Steps.js
  var import_classnames107 = __toESM(require_classnames());
  var React252 = __toESM(require_react());
  var Steps = function Steps2(props) {
    var size = props.size, steps = props.steps, _props$percent = props.percent, percent = _props$percent === void 0 ? 0 : _props$percent, _props$strokeWidth = props.strokeWidth, strokeWidth = _props$strokeWidth === void 0 ? 8 : _props$strokeWidth, strokeColor = props.strokeColor, _props$trailColor = props.trailColor, trailColor = _props$trailColor === void 0 ? null : _props$trailColor, prefixCls = props.prefixCls, children = props.children;
    var current = Math.round(steps * (percent / 100));
    var stepWidth = size === "small" ? 2 : 14;
    var styledSteps = new Array(steps);
    for (var i3 = 0; i3 < steps; i3++) {
      var color = Array.isArray(strokeColor) ? strokeColor[i3] : strokeColor;
      styledSteps[i3] = /* @__PURE__ */ React252.createElement("div", {
        key: i3,
        className: (0, import_classnames107.default)("".concat(prefixCls, "-steps-item"), _defineProperty({}, "".concat(prefixCls, "-steps-item-active"), i3 <= current - 1)),
        style: {
          backgroundColor: i3 <= current - 1 ? color : trailColor,
          width: stepWidth,
          height: strokeWidth
        }
      });
    }
    return /* @__PURE__ */ React252.createElement("div", {
      className: "".concat(prefixCls, "-steps-outer")
    }, styledSteps, children);
  };
  var Steps_default = Steps;

  // node_modules/antd/es/progress/progress.js
  var __rest42 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var ProgressTypes = tuple("line", "circle", "dashboard");
  var ProgressStatuses = tuple("normal", "exception", "active", "success");
  var Progress = function Progress2(props) {
    var _classNames;
    var customizePrefixCls = props.prefixCls, className = props.className, steps = props.steps, strokeColor = props.strokeColor, _props$percent = props.percent, percent = _props$percent === void 0 ? 0 : _props$percent, _props$size = props.size, size = _props$size === void 0 ? "default" : _props$size, _props$showInfo = props.showInfo, showInfo = _props$showInfo === void 0 ? true : _props$showInfo, _props$type = props.type, type4 = _props$type === void 0 ? "line" : _props$type, restProps = __rest42(props, ["prefixCls", "className", "steps", "strokeColor", "percent", "size", "showInfo", "type"]);
    function getPercentNumber() {
      var successPercent = getSuccessPercent(props);
      return parseInt(successPercent !== void 0 ? successPercent.toString() : percent.toString(), 10);
    }
    function getProgressStatus() {
      var status = props.status;
      if (ProgressStatuses.indexOf(status) < 0 && getPercentNumber() >= 100) {
        return "success";
      }
      return status || "normal";
    }
    function renderProcessInfo(prefixCls2, progressStatus2) {
      var format2 = props.format;
      var successPercent = getSuccessPercent(props);
      if (!showInfo) {
        return null;
      }
      var text;
      var textFormatter = format2 || function(percentNumber) {
        return "".concat(percentNumber, "%");
      };
      var isLineType = type4 === "line";
      if (format2 || progressStatus2 !== "exception" && progressStatus2 !== "success") {
        text = textFormatter(validProgress(percent), validProgress(successPercent));
      } else if (progressStatus2 === "exception") {
        text = isLineType ? /* @__PURE__ */ React253.createElement(CloseCircleFilled_default2, null) : /* @__PURE__ */ React253.createElement(CloseOutlined_default2, null);
      } else if (progressStatus2 === "success") {
        text = isLineType ? /* @__PURE__ */ React253.createElement(CheckCircleFilled_default2, null) : /* @__PURE__ */ React253.createElement(CheckOutlined_default2, null);
      }
      return /* @__PURE__ */ React253.createElement("span", {
        className: "".concat(prefixCls2, "-text"),
        title: typeof text === "string" ? text : void 0
      }, text);
    }
    var _React$useContext = React253.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var prefixCls = getPrefixCls("progress", customizePrefixCls);
    var progressStatus = getProgressStatus();
    var progressInfo = renderProcessInfo(prefixCls, progressStatus);
    true ? warning_default2(!("successPercent" in props), "Progress", "`successPercent` is deprecated. Please use `success.percent` instead.") : void 0;
    var strokeColorNotArray = Array.isArray(strokeColor) ? strokeColor[0] : strokeColor;
    var strokeColorNotGradient = typeof strokeColor === "string" || Array.isArray(strokeColor) ? strokeColor : void 0;
    var progress;
    if (type4 === "line") {
      progress = steps ? /* @__PURE__ */ React253.createElement(Steps_default, _extends({}, props, {
        strokeColor: strokeColorNotGradient,
        prefixCls,
        steps
      }), progressInfo) : /* @__PURE__ */ React253.createElement(Line_default2, _extends({}, props, {
        strokeColor: strokeColorNotArray,
        prefixCls,
        direction
      }), progressInfo);
    } else if (type4 === "circle" || type4 === "dashboard") {
      progress = /* @__PURE__ */ React253.createElement(Circle_default2, _extends({}, props, {
        strokeColor: strokeColorNotArray,
        prefixCls,
        progressStatus
      }), progressInfo);
    }
    var classString = (0, import_classnames108.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(type4 === "dashboard" && "circle" || steps && "steps" || type4), true), _defineProperty(_classNames, "".concat(prefixCls, "-status-").concat(progressStatus), true), _defineProperty(_classNames, "".concat(prefixCls, "-show-info"), showInfo), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(size), size), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    return /* @__PURE__ */ React253.createElement("div", _extends({}, omit(restProps, ["status", "format", "trailColor", "strokeWidth", "width", "gapDegree", "gapPosition", "strokeLinecap", "success", "successPercent"]), {
      className: classString
    }), progress);
  };
  var progress_default = Progress;

  // node_modules/antd/es/progress/index.js
  var progress_default2 = progress_default;

  // node_modules/antd/es/steps/index.js
  var import_classnames111 = __toESM(require_classnames());

  // node_modules/rc-steps/es/Steps.js
  var import_react71 = __toESM(require_react());
  var import_classnames110 = __toESM(require_classnames());

  // node_modules/rc-steps/es/Step.js
  var React254 = __toESM(require_react());
  var import_classnames109 = __toESM(require_classnames());
  var _excluded40 = ["className", "prefixCls", "style", "active", "status", "iconPrefix", "icon", "wrapperStyle", "stepNumber", "disabled", "description", "title", "subTitle", "progressDot", "stepIcon", "tailContent", "icons", "stepIndex", "onStepClick", "onClick"];
  function isString2(str) {
    return typeof str === "string";
  }
  var Step = /* @__PURE__ */ function(_React$Component) {
    _inherits(Step2, _React$Component);
    var _super = _createSuper(Step2);
    function Step2() {
      var _this;
      _classCallCheck(this, Step2);
      _this = _super.apply(this, arguments);
      _this.onClick = function() {
        var _this$props = _this.props, onClick = _this$props.onClick, onStepClick = _this$props.onStepClick, stepIndex = _this$props.stepIndex;
        if (onClick) {
          onClick.apply(void 0, arguments);
        }
        onStepClick(stepIndex);
      };
      return _this;
    }
    _createClass(Step2, [{
      key: "renderIconNode",
      value: function renderIconNode() {
        var _classNames;
        var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, progressDot = _this$props2.progressDot, stepIcon = _this$props2.stepIcon, stepNumber = _this$props2.stepNumber, status = _this$props2.status, title = _this$props2.title, description = _this$props2.description, icon = _this$props2.icon, iconPrefix = _this$props2.iconPrefix, icons = _this$props2.icons;
        var iconNode;
        var iconClassName = (0, import_classnames109.default)("".concat(prefixCls, "-icon"), "".concat(iconPrefix, "icon"), (_classNames = {}, _defineProperty(_classNames, "".concat(iconPrefix, "icon-").concat(icon), icon && isString2(icon)), _defineProperty(_classNames, "".concat(iconPrefix, "icon-check"), !icon && status === "finish" && (icons && !icons.finish || !icons)), _defineProperty(_classNames, "".concat(iconPrefix, "icon-cross"), !icon && status === "error" && (icons && !icons.error || !icons)), _classNames));
        var iconDot = /* @__PURE__ */ React254.createElement("span", {
          className: "".concat(prefixCls, "-icon-dot")
        });
        if (progressDot) {
          if (typeof progressDot === "function") {
            iconNode = /* @__PURE__ */ React254.createElement("span", {
              className: "".concat(prefixCls, "-icon")
            }, progressDot(iconDot, {
              index: stepNumber - 1,
              status,
              title,
              description
            }));
          } else {
            iconNode = /* @__PURE__ */ React254.createElement("span", {
              className: "".concat(prefixCls, "-icon")
            }, iconDot);
          }
        } else if (icon && !isString2(icon)) {
          iconNode = /* @__PURE__ */ React254.createElement("span", {
            className: "".concat(prefixCls, "-icon")
          }, icon);
        } else if (icons && icons.finish && status === "finish") {
          iconNode = /* @__PURE__ */ React254.createElement("span", {
            className: "".concat(prefixCls, "-icon")
          }, icons.finish);
        } else if (icons && icons.error && status === "error") {
          iconNode = /* @__PURE__ */ React254.createElement("span", {
            className: "".concat(prefixCls, "-icon")
          }, icons.error);
        } else if (icon || status === "finish" || status === "error") {
          iconNode = /* @__PURE__ */ React254.createElement("span", {
            className: iconClassName
          });
        } else {
          iconNode = /* @__PURE__ */ React254.createElement("span", {
            className: "".concat(prefixCls, "-icon")
          }, stepNumber);
        }
        if (stepIcon) {
          iconNode = stepIcon({
            index: stepNumber - 1,
            status,
            title,
            description,
            node: iconNode
          });
        }
        return iconNode;
      }
    }, {
      key: "render",
      value: function render4() {
        var _classNames2;
        var _this$props3 = this.props, className = _this$props3.className, prefixCls = _this$props3.prefixCls, style2 = _this$props3.style, active = _this$props3.active, _this$props3$status = _this$props3.status, status = _this$props3$status === void 0 ? "wait" : _this$props3$status, iconPrefix = _this$props3.iconPrefix, icon = _this$props3.icon, wrapperStyle = _this$props3.wrapperStyle, stepNumber = _this$props3.stepNumber, disabled = _this$props3.disabled, description = _this$props3.description, title = _this$props3.title, subTitle = _this$props3.subTitle, progressDot = _this$props3.progressDot, stepIcon = _this$props3.stepIcon, tailContent = _this$props3.tailContent, icons = _this$props3.icons, stepIndex = _this$props3.stepIndex, onStepClick = _this$props3.onStepClick, onClick = _this$props3.onClick, restProps = _objectWithoutProperties(_this$props3, _excluded40);
        var classString = (0, import_classnames109.default)("".concat(prefixCls, "-item"), "".concat(prefixCls, "-item-").concat(status), className, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-item-custom"), icon), _defineProperty(_classNames2, "".concat(prefixCls, "-item-active"), active), _defineProperty(_classNames2, "".concat(prefixCls, "-item-disabled"), disabled === true), _classNames2));
        var stepItemStyle = _objectSpread2({}, style2);
        var accessibilityProps = {};
        if (onStepClick && !disabled) {
          accessibilityProps.role = "button";
          accessibilityProps.tabIndex = 0;
          accessibilityProps.onClick = this.onClick;
        }
        return /* @__PURE__ */ React254.createElement("div", Object.assign({}, restProps, {
          className: classString,
          style: stepItemStyle
        }), /* @__PURE__ */ React254.createElement("div", Object.assign({
          onClick
        }, accessibilityProps, {
          className: "".concat(prefixCls, "-item-container")
        }), /* @__PURE__ */ React254.createElement("div", {
          className: "".concat(prefixCls, "-item-tail")
        }, tailContent), /* @__PURE__ */ React254.createElement("div", {
          className: "".concat(prefixCls, "-item-icon")
        }, this.renderIconNode()), /* @__PURE__ */ React254.createElement("div", {
          className: "".concat(prefixCls, "-item-content")
        }, /* @__PURE__ */ React254.createElement("div", {
          className: "".concat(prefixCls, "-item-title")
        }, title, subTitle && /* @__PURE__ */ React254.createElement("div", {
          title: typeof subTitle === "string" ? subTitle : void 0,
          className: "".concat(prefixCls, "-item-subtitle")
        }, subTitle)), description && /* @__PURE__ */ React254.createElement("div", {
          className: "".concat(prefixCls, "-item-description")
        }, description))));
      }
    }]);
    return Step2;
  }(React254.Component);

  // node_modules/rc-steps/es/Steps.js
  var _excluded41 = ["prefixCls", "style", "className", "children", "direction", "type", "labelPlacement", "iconPrefix", "status", "size", "current", "progressDot", "stepIcon", "initial", "icons", "onChange"];
  var Steps3 = /* @__PURE__ */ function(_React$Component) {
    _inherits(Steps6, _React$Component);
    var _super = _createSuper(Steps6);
    function Steps6() {
      var _this;
      _classCallCheck(this, Steps6);
      _this = _super.apply(this, arguments);
      _this.onStepClick = function(next) {
        var _this$props = _this.props, onChange3 = _this$props.onChange, current = _this$props.current;
        if (onChange3 && current !== next) {
          onChange3(next);
        }
      };
      return _this;
    }
    _createClass(Steps6, [{
      key: "render",
      value: function render4() {
        var _classNames, _this2 = this;
        var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, _this$props2$style = _this$props2.style, style2 = _this$props2$style === void 0 ? {} : _this$props2$style, className = _this$props2.className, children = _this$props2.children, direction = _this$props2.direction, type4 = _this$props2.type, labelPlacement = _this$props2.labelPlacement, iconPrefix = _this$props2.iconPrefix, status = _this$props2.status, size = _this$props2.size, current = _this$props2.current, progressDot = _this$props2.progressDot, stepIcon = _this$props2.stepIcon, initial = _this$props2.initial, icons = _this$props2.icons, onChange3 = _this$props2.onChange, restProps = _objectWithoutProperties(_this$props2, _excluded41);
        var isNav = type4 === "navigation";
        var adjustedLabelPlacement = progressDot ? "vertical" : labelPlacement;
        var classString = (0, import_classnames110.default)(prefixCls, "".concat(prefixCls, "-").concat(direction), className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(size), size), _defineProperty(_classNames, "".concat(prefixCls, "-label-").concat(adjustedLabelPlacement), direction === "horizontal"), _defineProperty(_classNames, "".concat(prefixCls, "-dot"), !!progressDot), _defineProperty(_classNames, "".concat(prefixCls, "-navigation"), isNav), _classNames));
        return /* @__PURE__ */ import_react71.default.createElement("div", Object.assign({
          className: classString,
          style: style2
        }, restProps), toArray(children).map(function(child, index3) {
          var stepNumber = initial + index3;
          var childProps = _objectSpread2({
            stepNumber: "".concat(stepNumber + 1),
            stepIndex: stepNumber,
            key: stepNumber,
            prefixCls,
            iconPrefix,
            wrapperStyle: style2,
            progressDot,
            stepIcon,
            icons,
            onStepClick: onChange3 && _this2.onStepClick
          }, child.props);
          if (status === "error" && index3 === current - 1) {
            childProps.className = "".concat(prefixCls, "-next-error");
          }
          if (!child.props.status) {
            if (stepNumber === current) {
              childProps.status = status;
            } else if (stepNumber < current) {
              childProps.status = "finish";
            } else {
              childProps.status = "wait";
            }
          }
          childProps.active = stepNumber === current;
          return /* @__PURE__ */ (0, import_react71.cloneElement)(child, childProps);
        }));
      }
    }]);
    return Steps6;
  }(import_react71.default.Component);
  Steps3.Step = Step;
  Steps3.defaultProps = {
    type: "default",
    prefixCls: "rc-steps",
    iconPrefix: "rc",
    direction: "horizontal",
    labelPlacement: "horizontal",
    initial: 0,
    current: 0,
    status: "process",
    size: "",
    progressDot: false
  };

  // node_modules/rc-steps/es/index.js
  var es_default20 = Steps3;

  // node_modules/antd/es/steps/index.js
  var React256 = __toESM(require_react());
  var __rest43 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var Steps4 = function Steps5(props) {
    var _classNames;
    var percent = props.percent, size = props.size, className = props.className, direction = props.direction, _props$responsive = props.responsive, responsive = _props$responsive === void 0 ? true : _props$responsive, _props$current = props.current, current = _props$current === void 0 ? 0 : _props$current, restProps = __rest43(props, ["percent", "size", "className", "direction", "responsive", "current"]);
    var _useBreakpoint = useBreakpoint_default(responsive), xs = _useBreakpoint.xs;
    var _React$useContext = React256.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, rtlDirection = _React$useContext.direction;
    var getDirection = React256.useCallback(function() {
      return responsive && xs ? "vertical" : direction;
    }, [xs, direction]);
    var prefixCls = getPrefixCls("steps", props.prefixCls);
    var iconPrefix = getPrefixCls("", props.iconPrefix);
    var stepsClassName = (0, import_classnames111.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), rtlDirection === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-with-progress"), percent !== void 0), _classNames), className);
    var icons = {
      finish: /* @__PURE__ */ React256.createElement(CheckOutlined_default2, {
        className: "".concat(prefixCls, "-finish-icon")
      }),
      error: /* @__PURE__ */ React256.createElement(CloseOutlined_default2, {
        className: "".concat(prefixCls, "-error-icon")
      })
    };
    var stepIconRender = function stepIconRender2(_ref) {
      var node = _ref.node, status = _ref.status;
      if (status === "process" && percent !== void 0) {
        var progressWidth = size === "small" ? 32 : 40;
        var iconWithProgress = /* @__PURE__ */ React256.createElement("div", {
          className: "".concat(prefixCls, "-progress-icon")
        }, /* @__PURE__ */ React256.createElement(progress_default2, {
          type: "circle",
          percent,
          width: progressWidth,
          strokeWidth: 4,
          format: function format2() {
            return null;
          }
        }), node);
        return iconWithProgress;
      }
      return node;
    };
    return /* @__PURE__ */ React256.createElement(es_default20, _extends({
      icons
    }, restProps, {
      current,
      size,
      direction: getDirection(),
      stepIcon: stepIconRender,
      prefixCls,
      iconPrefix,
      className: stepsClassName
    }));
  };
  Steps4.Step = es_default20.Step;
  var steps_default = Steps4;

  // node_modules/@ant-design/icons/es/icons/DeleteOutlined.js
  var React257 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DeleteOutlined.js
  var DeleteOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z" } }] }, "name": "delete", "theme": "outlined" };
  var DeleteOutlined_default = DeleteOutlined;

  // node_modules/@ant-design/icons/es/icons/DeleteOutlined.js
  var DeleteOutlined2 = function DeleteOutlined3(props, ref) {
    return /* @__PURE__ */ React257.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: DeleteOutlined_default
    }));
  };
  DeleteOutlined2.displayName = "DeleteOutlined";
  var DeleteOutlined_default2 = /* @__PURE__ */ React257.forwardRef(DeleteOutlined2);

  // node_modules/antd/es/typography/Link.js
  var React268 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/CopyOutlined.js
  var React258 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CopyOutlined.js
  var CopyOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z" } }] }, "name": "copy", "theme": "outlined" };
  var CopyOutlined_default = CopyOutlined;

  // node_modules/@ant-design/icons/es/icons/CopyOutlined.js
  var CopyOutlined2 = function CopyOutlined3(props, ref) {
    return /* @__PURE__ */ React258.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CopyOutlined_default
    }));
  };
  CopyOutlined2.displayName = "CopyOutlined";
  var CopyOutlined_default2 = /* @__PURE__ */ React258.forwardRef(CopyOutlined2);

  // node_modules/@ant-design/icons/es/icons/EditOutlined.js
  var React259 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EditOutlined.js
  var EditOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z" } }] }, "name": "edit", "theme": "outlined" };
  var EditOutlined_default = EditOutlined;

  // node_modules/@ant-design/icons/es/icons/EditOutlined.js
  var EditOutlined2 = function EditOutlined3(props, ref) {
    return /* @__PURE__ */ React259.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: EditOutlined_default
    }));
  };
  EditOutlined2.displayName = "EditOutlined";
  var EditOutlined_default2 = /* @__PURE__ */ React259.forwardRef(EditOutlined2);

  // node_modules/antd/es/typography/Base/index.js
  var import_classnames114 = __toESM(require_classnames());
  var import_copy_to_clipboard = __toESM(require_copy_to_clipboard());
  var React267 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/EnterOutlined.js
  var React260 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EnterOutlined.js
  var EnterOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M864 170h-60c-4.4 0-8 3.6-8 8v518H310v-73c0-6.7-7.8-10.5-13-6.3l-141.9 112a8 8 0 000 12.6l141.9 112c5.3 4.2 13 .4 13-6.3v-75h498c35.3 0 64-28.7 64-64V178c0-4.4-3.6-8-8-8z" } }] }, "name": "enter", "theme": "outlined" };
  var EnterOutlined_default = EnterOutlined;

  // node_modules/@ant-design/icons/es/icons/EnterOutlined.js
  var EnterOutlined2 = function EnterOutlined3(props, ref) {
    return /* @__PURE__ */ React260.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: EnterOutlined_default
    }));
  };
  EnterOutlined2.displayName = "EnterOutlined";
  var EnterOutlined_default2 = /* @__PURE__ */ React260.forwardRef(EnterOutlined2);

  // node_modules/antd/es/typography/Editable.js
  var import_classnames112 = __toESM(require_classnames());
  var React261 = __toESM(require_react());
  var Editable = function Editable2(_ref) {
    var prefixCls = _ref.prefixCls, ariaLabel = _ref["aria-label"], className = _ref.className, style2 = _ref.style, direction = _ref.direction, maxLength = _ref.maxLength, _ref$autoSize = _ref.autoSize, autoSize = _ref$autoSize === void 0 ? true : _ref$autoSize, value = _ref.value, onSave = _ref.onSave, onCancel = _ref.onCancel, onEnd = _ref.onEnd, component = _ref.component, _ref$enterIcon = _ref.enterIcon, enterIcon = _ref$enterIcon === void 0 ? /* @__PURE__ */ React261.createElement(EnterOutlined_default2, null) : _ref$enterIcon;
    var ref = React261.useRef();
    var inComposition = React261.useRef(false);
    var lastKeyCode = React261.useRef();
    var _React$useState = React261.useState(value), _React$useState2 = _slicedToArray(_React$useState, 2), current = _React$useState2[0], setCurrent = _React$useState2[1];
    React261.useEffect(function() {
      setCurrent(value);
    }, [value]);
    React261.useEffect(function() {
      if (ref.current && ref.current.resizableTextArea) {
        var textArea = ref.current.resizableTextArea.textArea;
        textArea.focus();
        var length2 = textArea.value.length;
        textArea.setSelectionRange(length2, length2);
      }
    }, []);
    var onChange3 = function onChange4(_ref2) {
      var target = _ref2.target;
      setCurrent(target.value.replace(/[\n\r]/g, ""));
    };
    var onCompositionStart = function onCompositionStart2() {
      inComposition.current = true;
    };
    var onCompositionEnd = function onCompositionEnd2() {
      inComposition.current = false;
    };
    var onKeyDown2 = function onKeyDown3(_ref3) {
      var keyCode = _ref3.keyCode;
      if (inComposition.current)
        return;
      lastKeyCode.current = keyCode;
    };
    var confirmChange = function confirmChange2() {
      onSave(current.trim());
    };
    var onKeyUp2 = function onKeyUp3(_ref4) {
      var keyCode = _ref4.keyCode, ctrlKey = _ref4.ctrlKey, altKey = _ref4.altKey, metaKey = _ref4.metaKey, shiftKey = _ref4.shiftKey;
      if (lastKeyCode.current === keyCode && !inComposition.current && !ctrlKey && !altKey && !metaKey && !shiftKey) {
        if (keyCode === KeyCode_default.ENTER) {
          confirmChange();
          onEnd === null || onEnd === void 0 ? void 0 : onEnd();
        } else if (keyCode === KeyCode_default.ESC) {
          onCancel();
        }
      }
    };
    var onBlur2 = function onBlur3() {
      confirmChange();
    };
    var textClassName = component ? "".concat(prefixCls, "-").concat(component) : "";
    var textAreaClassName = (0, import_classnames112.default)(prefixCls, "".concat(prefixCls, "-edit-content"), _defineProperty({}, "".concat(prefixCls, "-rtl"), direction === "rtl"), className, textClassName);
    return /* @__PURE__ */ React261.createElement("div", {
      className: textAreaClassName,
      style: style2
    }, /* @__PURE__ */ React261.createElement(TextArea_default, {
      ref,
      maxLength,
      value: current,
      onChange: onChange3,
      onKeyDown: onKeyDown2,
      onKeyUp: onKeyUp2,
      onCompositionStart,
      onCompositionEnd,
      onBlur: onBlur2,
      "aria-label": ariaLabel,
      rows: 1,
      autoSize
    }), enterIcon !== null ? cloneElement6(enterIcon, {
      className: "".concat(prefixCls, "-edit-content-confirm")
    }) : null);
  };
  var Editable_default = Editable;

  // node_modules/antd/es/typography/hooks/useMergedConfig.js
  var React262 = __toESM(require_react());
  function useMergedConfig(propConfig, templateConfig) {
    return React262.useMemo(function() {
      var support = !!propConfig;
      return [support, _extends(_extends({}, templateConfig), support && _typeof(propConfig) === "object" ? propConfig : null)];
    }, [propConfig]);
  }

  // node_modules/antd/es/typography/hooks/useUpdatedEffect.js
  var React263 = __toESM(require_react());
  var useUpdatedEffect_default = function(callback, conditions) {
    var mountRef = React263.useRef(false);
    React263.useEffect(function() {
      if (mountRef.current) {
        callback();
      } else {
        mountRef.current = true;
      }
    }, conditions);
  };

  // node_modules/antd/es/typography/Typography.js
  var import_classnames113 = __toESM(require_classnames());
  var React264 = __toESM(require_react());
  var __rest44 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var Typography = function Typography2(_a, ref) {
    var customizePrefixCls = _a.prefixCls, _a$component = _a.component, component = _a$component === void 0 ? "article" : _a$component, className = _a.className, ariaLabel = _a["aria-label"], setContentRef = _a.setContentRef, children = _a.children, restProps = __rest44(_a, ["prefixCls", "component", "className", "aria-label", "setContentRef", "children"]);
    var _React$useContext = React264.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var mergedRef = ref;
    if (setContentRef) {
      true ? warning_default2(false, "Typography", "`setContentRef` is deprecated. Please use `ref` instead.") : void 0;
      mergedRef = composeRef(ref, setContentRef);
    }
    var Component27 = component;
    var prefixCls = getPrefixCls("typography", customizePrefixCls);
    var componentClassName = (0, import_classnames113.default)(prefixCls, _defineProperty({}, "".concat(prefixCls, "-rtl"), direction === "rtl"), className);
    return /* @__PURE__ */ React264.createElement(Component27, _extends({
      className: componentClassName,
      "aria-label": ariaLabel,
      ref: mergedRef
    }, restProps), children);
  };
  var RefTypography = /* @__PURE__ */ React264.forwardRef(Typography);
  if (true) {
    RefTypography.displayName = "Typography";
  }
  var ExportTypography = RefTypography;
  var Typography_default = ExportTypography;

  // node_modules/antd/es/typography/Base/Ellipsis.js
  var React265 = __toESM(require_react());
  function cuttable(node) {
    var type4 = _typeof(node);
    return type4 === "string" || type4 === "number";
  }
  function getNodesLen(nodeList) {
    var totalLen = 0;
    nodeList.forEach(function(node) {
      if (cuttable(node)) {
        totalLen += String(node).length;
      } else {
        totalLen += 1;
      }
    });
    return totalLen;
  }
  function sliceNodes(nodeList, len) {
    var currLen = 0;
    var currentNodeList = [];
    for (var i3 = 0; i3 < nodeList.length; i3 += 1) {
      if (currLen === len) {
        return currentNodeList;
      }
      var node = nodeList[i3];
      var canCut = cuttable(node);
      var nodeLen = canCut ? String(node).length : 1;
      var nextLen = currLen + nodeLen;
      if (nextLen > len) {
        var restLen = len - currLen;
        currentNodeList.push(String(node).slice(0, restLen));
        return currentNodeList;
      }
      currentNodeList.push(node);
      currLen = nextLen;
    }
    return nodeList;
  }
  var NONE = 0;
  var PREPARE = 1;
  var WALKING = 2;
  var DONE_WITH_ELLIPSIS = 3;
  var DONE_WITHOUT_ELLIPSIS = 4;
  var Ellipsis = function Ellipsis2(_ref) {
    var enabledMeasure = _ref.enabledMeasure, children = _ref.children, text = _ref.text, width = _ref.width, fontSize = _ref.fontSize, rows = _ref.rows, onEllipsis = _ref.onEllipsis;
    var _React$useState = React265.useState([0, 0, 0]), _React$useState2 = _slicedToArray(_React$useState, 2), cutLength = _React$useState2[0], setCutLength = _React$useState2[1];
    var _React$useState3 = React265.useState(NONE), _React$useState4 = _slicedToArray(_React$useState3, 2), walkingState = _React$useState4[0], setWalkingState = _React$useState4[1];
    var _cutLength = _slicedToArray(cutLength, 3), startLen = _cutLength[0], midLen = _cutLength[1], endLen = _cutLength[2];
    var _React$useState5 = React265.useState(0), _React$useState6 = _slicedToArray(_React$useState5, 2), singleRowHeight = _React$useState6[0], setSingleRowHeight = _React$useState6[1];
    var singleRowRef = React265.useRef(null);
    var midRowRef = React265.useRef(null);
    var nodeList = React265.useMemo(function() {
      return toArray(text);
    }, [text]);
    var totalLen = React265.useMemo(function() {
      return getNodesLen(nodeList);
    }, [nodeList]);
    var mergedChildren = React265.useMemo(function() {
      if (!enabledMeasure || walkingState !== DONE_WITH_ELLIPSIS) {
        return children(nodeList, false);
      }
      return children(sliceNodes(nodeList, midLen), midLen < totalLen);
    }, [enabledMeasure, walkingState, children, nodeList, midLen, totalLen]);
    useLayoutEffect_default(function() {
      if (enabledMeasure && width && fontSize && totalLen) {
        setWalkingState(PREPARE);
        setCutLength([0, Math.ceil(totalLen / 2), totalLen]);
      }
    }, [enabledMeasure, width, fontSize, text, totalLen, rows]);
    useLayoutEffect_default(function() {
      var _a;
      if (walkingState === PREPARE) {
        setSingleRowHeight(((_a = singleRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0);
      }
    }, [walkingState]);
    useLayoutEffect_default(function() {
      var _a, _b;
      if (singleRowHeight) {
        if (walkingState === PREPARE) {
          var midHeight = ((_a = midRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0;
          var maxHeight = rows * singleRowHeight;
          if (midHeight <= maxHeight) {
            setWalkingState(DONE_WITHOUT_ELLIPSIS);
            onEllipsis(false);
          } else {
            setWalkingState(WALKING);
          }
        } else if (walkingState === WALKING) {
          if (startLen !== endLen) {
            var _midHeight = ((_b = midRowRef.current) === null || _b === void 0 ? void 0 : _b.offsetHeight) || 0;
            var _maxHeight = rows * singleRowHeight;
            var nextStartLen = startLen;
            var nextEndLen = endLen;
            if (startLen === endLen - 1) {
              nextEndLen = startLen;
            } else if (_midHeight <= _maxHeight) {
              nextStartLen = midLen;
            } else {
              nextEndLen = midLen;
            }
            var nextMidLen = Math.ceil((nextStartLen + nextEndLen) / 2);
            setCutLength([nextStartLen, nextMidLen, nextEndLen]);
          } else {
            setWalkingState(DONE_WITH_ELLIPSIS);
            onEllipsis(true);
          }
        }
      }
    }, [walkingState, startLen, endLen, rows, singleRowHeight]);
    var measureStyle = {
      width,
      whiteSpace: "normal",
      margin: 0,
      padding: 0
    };
    var renderMeasure = function renderMeasure2(content, ref, style2) {
      return /* @__PURE__ */ React265.createElement("span", {
        "aria-hidden": true,
        ref,
        style: _extends({
          position: "fixed",
          display: "block",
          left: 0,
          top: 0,
          zIndex: -9999,
          visibility: "hidden",
          pointerEvents: "none",
          fontSize: Math.floor(fontSize / 2) * 2
        }, style2)
      }, content);
    };
    var renderMeasureSlice = function renderMeasureSlice2(len, ref) {
      var sliceNodeList = sliceNodes(nodeList, len);
      return renderMeasure(children(sliceNodeList, true), ref, measureStyle);
    };
    return /* @__PURE__ */ React265.createElement(React265.Fragment, null, mergedChildren, enabledMeasure && walkingState !== DONE_WITH_ELLIPSIS && walkingState !== DONE_WITHOUT_ELLIPSIS && /* @__PURE__ */ React265.createElement(React265.Fragment, null, renderMeasure("lg", singleRowRef, {
      wordBreak: "keep-all",
      whiteSpace: "nowrap"
    }), walkingState === PREPARE ? renderMeasure(children(nodeList, false), midRowRef, measureStyle) : renderMeasureSlice(midLen, midRowRef)));
  };
  if (true) {
    Ellipsis.displayName = "Ellipsis";
  }
  var Ellipsis_default = Ellipsis;

  // node_modules/antd/es/typography/Base/EllipsisTooltip.js
  var React266 = __toESM(require_react());
  var EllipsisTooltip = function EllipsisTooltip2(_ref) {
    var enabledEllipsis = _ref.enabledEllipsis, isEllipsis = _ref.isEllipsis, children = _ref.children, tooltipProps = _ref.tooltipProps;
    if (!(tooltipProps === null || tooltipProps === void 0 ? void 0 : tooltipProps.title) || !enabledEllipsis) {
      return children;
    }
    return /* @__PURE__ */ React266.createElement(tooltip_default, _extends({
      open: isEllipsis ? void 0 : false
    }, tooltipProps), children);
  };
  if (true) {
    EllipsisTooltip.displayName = "EllipsisTooltip";
  }
  var EllipsisTooltip_default = EllipsisTooltip;

  // node_modules/antd/es/typography/Base/index.js
  var __rest45 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  function wrapperDecorations(_ref, content) {
    var mark = _ref.mark, code6 = _ref.code, underline = _ref.underline, del = _ref["delete"], strong = _ref.strong, keyboard = _ref.keyboard, italic = _ref.italic;
    var currentContent = content;
    function wrap(needed, tag) {
      if (!needed)
        return;
      currentContent = /* @__PURE__ */ React267.createElement(tag, {}, currentContent);
    }
    wrap(strong, "strong");
    wrap(underline, "u");
    wrap(del, "del");
    wrap(code6, "code");
    wrap(mark, "mark");
    wrap(keyboard, "kbd");
    wrap(italic, "i");
    return currentContent;
  }
  function getNode(dom, defaultNode, needDom) {
    if (dom === true || dom === void 0) {
      return defaultNode;
    }
    return dom || needDom && defaultNode;
  }
  function toList(val) {
    if (val === false) {
      return [false, false];
    }
    return Array.isArray(val) ? val : [val];
  }
  var ELLIPSIS_STR = "...";
  var Base = /* @__PURE__ */ React267.forwardRef(function(props, ref) {
    var customizePrefixCls = props.prefixCls, className = props.className, style2 = props.style, type4 = props.type, disabled = props.disabled, children = props.children, ellipsis = props.ellipsis, editable = props.editable, copyable = props.copyable, component = props.component, title = props.title, restProps = __rest45(props, ["prefixCls", "className", "style", "type", "disabled", "children", "ellipsis", "editable", "copyable", "component", "title"]);
    var _React$useContext = React267.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var textLocale = useLocaleReceiver("Text")[0];
    var typographyRef = React267.useRef(null);
    var editIconRef = React267.useRef(null);
    var prefixCls = getPrefixCls("typography", customizePrefixCls);
    var textProps = omit(restProps, ["mark", "code", "delete", "underline", "strong", "keyboard", "italic"]);
    var _useMergedConfig = useMergedConfig(editable), _useMergedConfig2 = _slicedToArray(_useMergedConfig, 2), enableEdit = _useMergedConfig2[0], editConfig = _useMergedConfig2[1];
    var _useMergedState = useMergedState(false, {
      value: editConfig.editing
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), editing = _useMergedState2[0], setEditing = _useMergedState2[1];
    var _editConfig$triggerTy = editConfig.triggerType, triggerType = _editConfig$triggerTy === void 0 ? ["icon"] : _editConfig$triggerTy;
    var triggerEdit = function triggerEdit2(edit) {
      var _a;
      if (edit) {
        (_a = editConfig.onStart) === null || _a === void 0 ? void 0 : _a.call(editConfig);
      }
      setEditing(edit);
    };
    useUpdatedEffect_default(function() {
      var _a;
      if (!editing) {
        (_a = editIconRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      }
    }, [editing]);
    var onEditClick = function onEditClick2(e3) {
      e3 === null || e3 === void 0 ? void 0 : e3.preventDefault();
      triggerEdit(true);
    };
    var onEditChange = function onEditChange2(value) {
      var _a;
      (_a = editConfig.onChange) === null || _a === void 0 ? void 0 : _a.call(editConfig, value);
      triggerEdit(false);
    };
    var onEditCancel = function onEditCancel2() {
      var _a;
      (_a = editConfig.onCancel) === null || _a === void 0 ? void 0 : _a.call(editConfig);
      triggerEdit(false);
    };
    var _useMergedConfig3 = useMergedConfig(copyable), _useMergedConfig4 = _slicedToArray(_useMergedConfig3, 2), enableCopy = _useMergedConfig4[0], copyConfig = _useMergedConfig4[1];
    var _React$useState = React267.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), copied = _React$useState2[0], setCopied = _React$useState2[1];
    var copyIdRef = React267.useRef();
    var copyOptions = {};
    if (copyConfig.format) {
      copyOptions.format = copyConfig.format;
    }
    var cleanCopyId = function cleanCopyId2() {
      clearTimeout(copyIdRef.current);
    };
    var onCopyClick = function onCopyClick2(e3) {
      var _a;
      e3 === null || e3 === void 0 ? void 0 : e3.preventDefault();
      e3 === null || e3 === void 0 ? void 0 : e3.stopPropagation();
      (0, import_copy_to_clipboard.default)(copyConfig.text || String(children) || "", copyOptions);
      setCopied(true);
      cleanCopyId();
      copyIdRef.current = setTimeout(function() {
        setCopied(false);
      }, 3e3);
      (_a = copyConfig.onCopy) === null || _a === void 0 ? void 0 : _a.call(copyConfig, e3);
    };
    React267.useEffect(function() {
      return cleanCopyId;
    }, []);
    var _React$useState3 = React267.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), isLineClampSupport = _React$useState4[0], setIsLineClampSupport = _React$useState4[1];
    var _React$useState5 = React267.useState(false), _React$useState6 = _slicedToArray(_React$useState5, 2), isTextOverflowSupport = _React$useState6[0], setIsTextOverflowSupport = _React$useState6[1];
    var _React$useState7 = React267.useState(false), _React$useState8 = _slicedToArray(_React$useState7, 2), expanded = _React$useState8[0], setExpanded = _React$useState8[1];
    var _React$useState9 = React267.useState(false), _React$useState10 = _slicedToArray(_React$useState9, 2), isJsEllipsis = _React$useState10[0], setIsJsEllipsis = _React$useState10[1];
    var _React$useState11 = React267.useState(false), _React$useState12 = _slicedToArray(_React$useState11, 2), isNativeEllipsis = _React$useState12[0], setIsNativeEllipsis = _React$useState12[1];
    var _React$useState13 = React267.useState(true), _React$useState14 = _slicedToArray(_React$useState13, 2), isNativeVisible = _React$useState14[0], setIsNativeVisible = _React$useState14[1];
    var _useMergedConfig5 = useMergedConfig(ellipsis, {
      expandable: false
    }), _useMergedConfig6 = _slicedToArray(_useMergedConfig5, 2), enableEllipsis = _useMergedConfig6[0], ellipsisConfig = _useMergedConfig6[1];
    var mergedEnableEllipsis = enableEllipsis && !expanded;
    var _ellipsisConfig$rows = ellipsisConfig.rows, rows = _ellipsisConfig$rows === void 0 ? 1 : _ellipsisConfig$rows;
    var needMeasureEllipsis = React267.useMemo(function() {
      return (
        // Disable ellipsis
        !mergedEnableEllipsis || // Provide suffix
        ellipsisConfig.suffix !== void 0 || ellipsisConfig.onEllipsis || // Can't use css ellipsis since we need to provide the place for button
        ellipsisConfig.expandable || enableEdit || enableCopy
      );
    }, [mergedEnableEllipsis, ellipsisConfig, enableEdit, enableCopy]);
    useLayoutEffect_default(function() {
      if (enableEllipsis && !needMeasureEllipsis) {
        setIsLineClampSupport(isStyleSupport("webkitLineClamp"));
        setIsTextOverflowSupport(isStyleSupport("textOverflow"));
      }
    }, [needMeasureEllipsis, enableEllipsis]);
    var cssEllipsis = React267.useMemo(function() {
      if (needMeasureEllipsis) {
        return false;
      }
      if (rows === 1) {
        return isTextOverflowSupport;
      }
      return isLineClampSupport;
    }, [needMeasureEllipsis, isTextOverflowSupport, isLineClampSupport]);
    var isMergedEllipsis = mergedEnableEllipsis && (cssEllipsis ? isNativeEllipsis : isJsEllipsis);
    var cssTextOverflow = mergedEnableEllipsis && rows === 1 && cssEllipsis;
    var cssLineClamp = mergedEnableEllipsis && rows > 1 && cssEllipsis;
    var onExpandClick = function onExpandClick2(e3) {
      var _a;
      setExpanded(true);
      (_a = ellipsisConfig.onExpand) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, e3);
    };
    var _React$useState15 = React267.useState(0), _React$useState16 = _slicedToArray(_React$useState15, 2), ellipsisWidth = _React$useState16[0], setEllipsisWidth = _React$useState16[1];
    var _React$useState17 = React267.useState(0), _React$useState18 = _slicedToArray(_React$useState17, 2), ellipsisFontSize = _React$useState18[0], setEllipsisFontSize = _React$useState18[1];
    var onResize2 = function onResize3(_ref2, element) {
      var offsetWidth = _ref2.offsetWidth;
      var _a;
      setEllipsisWidth(offsetWidth);
      setEllipsisFontSize(parseInt((_a = window.getComputedStyle) === null || _a === void 0 ? void 0 : _a.call(window, element).fontSize, 10));
    };
    var onJsEllipsis = function onJsEllipsis2(jsEllipsis) {
      var _a;
      setIsJsEllipsis(jsEllipsis);
      if (isJsEllipsis !== jsEllipsis) {
        (_a = ellipsisConfig.onEllipsis) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, jsEllipsis);
      }
    };
    React267.useEffect(function() {
      var textEle = typographyRef.current;
      if (enableEllipsis && cssEllipsis && textEle) {
        var currentEllipsis = cssLineClamp ? textEle.offsetHeight < textEle.scrollHeight : textEle.offsetWidth < textEle.scrollWidth;
        if (isNativeEllipsis !== currentEllipsis) {
          setIsNativeEllipsis(currentEllipsis);
        }
      }
    }, [enableEllipsis, cssEllipsis, children, cssLineClamp, isNativeVisible]);
    React267.useEffect(function() {
      var textEle = typographyRef.current;
      if (typeof IntersectionObserver === "undefined" || !textEle || !cssEllipsis || !mergedEnableEllipsis) {
        return;
      }
      var observer = new IntersectionObserver(function() {
        setIsNativeVisible(!!textEle.offsetParent);
      });
      observer.observe(textEle);
      return function() {
        observer.disconnect();
      };
    }, [cssEllipsis, mergedEnableEllipsis]);
    var tooltipProps = {};
    if (ellipsisConfig.tooltip === true) {
      tooltipProps = {
        title: children
      };
    } else if (/* @__PURE__ */ React267.isValidElement(ellipsisConfig.tooltip)) {
      tooltipProps = {
        title: ellipsisConfig.tooltip
      };
    } else if (_typeof(ellipsisConfig.tooltip) === "object") {
      tooltipProps = _extends({
        title: children
      }, ellipsisConfig.tooltip);
    } else {
      tooltipProps = {
        title: ellipsisConfig.tooltip
      };
    }
    var topAriaLabel = React267.useMemo(function() {
      var isValid2 = function isValid3(val) {
        return ["string", "number"].includes(_typeof(val));
      };
      if (!enableEllipsis || cssEllipsis) {
        return void 0;
      }
      if (isValid2(children)) {
        return children;
      }
      if (isValid2(title)) {
        return title;
      }
      if (isValid2(tooltipProps.title)) {
        return tooltipProps.title;
      }
      return void 0;
    }, [enableEllipsis, cssEllipsis, title, tooltipProps.title, isMergedEllipsis]);
    if (editing) {
      return /* @__PURE__ */ React267.createElement(Editable_default, {
        value: typeof children === "string" ? children : "",
        onSave: onEditChange,
        onCancel: onEditCancel,
        onEnd: editConfig.onEnd,
        prefixCls,
        className,
        style: style2,
        direction,
        component,
        maxLength: editConfig.maxLength,
        autoSize: editConfig.autoSize,
        enterIcon: editConfig.enterIcon
      });
    }
    var renderExpand = function renderExpand2() {
      var expandable = ellipsisConfig.expandable, symbol = ellipsisConfig.symbol;
      if (!expandable)
        return null;
      var expandContent;
      if (symbol) {
        expandContent = symbol;
      } else {
        expandContent = textLocale.expand;
      }
      return /* @__PURE__ */ React267.createElement("a", {
        key: "expand",
        className: "".concat(prefixCls, "-expand"),
        onClick: onExpandClick,
        "aria-label": textLocale.expand
      }, expandContent);
    };
    var renderEdit = function renderEdit2() {
      if (!enableEdit)
        return;
      var icon = editConfig.icon, tooltip = editConfig.tooltip;
      var editTitle = toArray(tooltip)[0] || textLocale.edit;
      var ariaLabel = typeof editTitle === "string" ? editTitle : "";
      return triggerType.includes("icon") ? /* @__PURE__ */ React267.createElement(tooltip_default, {
        key: "edit",
        title: tooltip === false ? "" : editTitle
      }, /* @__PURE__ */ React267.createElement(transButton_default, {
        ref: editIconRef,
        className: "".concat(prefixCls, "-edit"),
        onClick: onEditClick,
        "aria-label": ariaLabel
      }, icon || /* @__PURE__ */ React267.createElement(EditOutlined_default2, {
        role: "button"
      }))) : null;
    };
    var renderCopy = function renderCopy2() {
      if (!enableCopy)
        return;
      var tooltips = copyConfig.tooltips, icon = copyConfig.icon;
      var tooltipNodes = toList(tooltips);
      var iconNodes = toList(icon);
      var copyTitle = copied ? getNode(tooltipNodes[1], textLocale.copied) : getNode(tooltipNodes[0], textLocale.copy);
      var systemStr = copied ? textLocale.copied : textLocale.copy;
      var ariaLabel = typeof copyTitle === "string" ? copyTitle : systemStr;
      return /* @__PURE__ */ React267.createElement(tooltip_default, {
        key: "copy",
        title: copyTitle
      }, /* @__PURE__ */ React267.createElement(transButton_default, {
        className: (0, import_classnames114.default)("".concat(prefixCls, "-copy"), copied && "".concat(prefixCls, "-copy-success")),
        onClick: onCopyClick,
        "aria-label": ariaLabel
      }, copied ? getNode(iconNodes[1], /* @__PURE__ */ React267.createElement(CheckOutlined_default2, null), true) : getNode(iconNodes[0], /* @__PURE__ */ React267.createElement(CopyOutlined_default2, null), true)));
    };
    var renderOperations = function renderOperations2(renderExpanded) {
      return [renderExpanded && renderExpand(), renderEdit(), renderCopy()];
    };
    var renderEllipsis = function renderEllipsis2(needEllipsis) {
      return [needEllipsis && /* @__PURE__ */ React267.createElement("span", {
        "aria-hidden": true,
        key: "ellipsis"
      }, ELLIPSIS_STR), ellipsisConfig.suffix, renderOperations(needEllipsis)];
    };
    return /* @__PURE__ */ React267.createElement(es_default, {
      onResize: onResize2,
      disabled: !mergedEnableEllipsis || cssEllipsis
    }, function(resizeRef) {
      var _classNames;
      return /* @__PURE__ */ React267.createElement(EllipsisTooltip_default, {
        tooltipProps,
        enabledEllipsis: mergedEnableEllipsis,
        isEllipsis: isMergedEllipsis
      }, /* @__PURE__ */ React267.createElement(Typography_default, _extends({
        className: (0, import_classnames114.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(type4), type4), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), disabled), _defineProperty(_classNames, "".concat(prefixCls, "-ellipsis"), enableEllipsis), _defineProperty(_classNames, "".concat(prefixCls, "-single-line"), mergedEnableEllipsis && rows === 1), _defineProperty(_classNames, "".concat(prefixCls, "-ellipsis-single-line"), cssTextOverflow), _defineProperty(_classNames, "".concat(prefixCls, "-ellipsis-multiple-line"), cssLineClamp), _classNames), className),
        style: _extends(_extends({}, style2), {
          WebkitLineClamp: cssLineClamp ? rows : void 0
        }),
        component,
        ref: composeRef(resizeRef, typographyRef, ref),
        direction,
        onClick: triggerType.includes("text") ? onEditClick : null,
        "aria-label": topAriaLabel,
        title
      }, textProps), /* @__PURE__ */ React267.createElement(Ellipsis_default, {
        enabledMeasure: mergedEnableEllipsis && !cssEllipsis,
        text: children,
        rows,
        width: ellipsisWidth,
        fontSize: ellipsisFontSize,
        onEllipsis: onJsEllipsis
      }, function(node, needEllipsis) {
        var renderNode = node;
        if (node.length && needEllipsis && topAriaLabel) {
          renderNode = /* @__PURE__ */ React267.createElement("span", {
            key: "show-content",
            "aria-hidden": true
          }, renderNode);
        }
        var wrappedContext = wrapperDecorations(props, /* @__PURE__ */ React267.createElement(React267.Fragment, null, renderNode, renderEllipsis(needEllipsis)));
        return wrappedContext;
      })));
    });
  });
  var Base_default = Base;

  // node_modules/antd/es/typography/Link.js
  var __rest46 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var Link = function Link2(_a, ref) {
    var ellipsis = _a.ellipsis, rel = _a.rel, restProps = __rest46(_a, ["ellipsis", "rel"]);
    true ? warning_default2(_typeof(ellipsis) !== "object", "Typography.Link", "`ellipsis` only supports boolean value.") : void 0;
    var baseRef = React268.useRef(null);
    React268.useImperativeHandle(ref, function() {
      return baseRef.current;
    });
    var mergedProps = _extends(_extends({}, restProps), {
      rel: rel === void 0 && restProps.target === "_blank" ? "noopener noreferrer" : rel
    });
    delete mergedProps.navigate;
    return /* @__PURE__ */ React268.createElement(Base_default, _extends({}, mergedProps, {
      ref: baseRef,
      ellipsis: !!ellipsis,
      component: "a"
    }));
  };
  var Link_default = /* @__PURE__ */ React268.forwardRef(Link);

  // node_modules/antd/es/typography/Paragraph.js
  var React269 = __toESM(require_react());
  var Paragraph3 = function Paragraph4(props, ref) {
    return /* @__PURE__ */ React269.createElement(Base_default, _extends({
      ref
    }, props, {
      component: "div"
    }));
  };
  var Paragraph_default2 = /* @__PURE__ */ React269.forwardRef(Paragraph3);

  // node_modules/antd/es/typography/Text.js
  var React270 = __toESM(require_react());
  var __rest47 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var Text = function Text2(_a, ref) {
    var ellipsis = _a.ellipsis, restProps = __rest47(_a, ["ellipsis"]);
    var mergedEllipsis = React270.useMemo(function() {
      if (ellipsis && _typeof(ellipsis) === "object") {
        return omit(ellipsis, ["expandable", "rows"]);
      }
      return ellipsis;
    }, [ellipsis]);
    true ? warning_default2(_typeof(ellipsis) !== "object" || !ellipsis || !("expandable" in ellipsis) && !("rows" in ellipsis), "Typography.Text", "`ellipsis` do not support `expandable` or `rows` props.") : void 0;
    return /* @__PURE__ */ React270.createElement(Base_default, _extends({
      ref
    }, restProps, {
      ellipsis: mergedEllipsis,
      component: "span"
    }));
  };
  var Text_default = /* @__PURE__ */ React270.forwardRef(Text);

  // node_modules/antd/es/typography/Title.js
  var React271 = __toESM(require_react());
  var __rest48 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var TITLE_ELE_LIST = tupleNum(1, 2, 3, 4, 5);
  var Title3 = function Title4(props, ref) {
    var _props$level = props.level, level = _props$level === void 0 ? 1 : _props$level, restProps = __rest48(props, ["level"]);
    var component;
    if (TITLE_ELE_LIST.indexOf(level) !== -1) {
      component = "h".concat(level);
    } else {
      true ? warning_default2(false, "Typography.Title", "Title only accept `1 | 2 | 3 | 4 | 5` as `level` value. And `5` need 4.6.0+ version.") : void 0;
      component = "h1";
    }
    return /* @__PURE__ */ React271.createElement(Base_default, _extends({
      ref
    }, restProps, {
      component
    }));
  };
  var Title_default2 = /* @__PURE__ */ React271.forwardRef(Title3);

  // node_modules/antd/es/typography/index.js
  var Typography3 = Typography_default;
  Typography3.Text = Text_default;
  Typography3.Link = Link_default;
  Typography3.Title = Title_default2;
  Typography3.Paragraph = Paragraph_default2;
  var typography_default = Typography3;

  // node_modules/antd/es/upload/Dragger.js
  var React281 = __toESM(require_react());

  // node_modules/antd/es/upload/Upload.js
  var import_classnames118 = __toESM(require_classnames());

  // node_modules/rc-upload/es/Upload.js
  var import_react73 = __toESM(require_react());

  // node_modules/rc-upload/es/AjaxUploader.js
  var import_react72 = __toESM(require_react());
  var import_classnames115 = __toESM(require_classnames());

  // node_modules/rc-upload/es/request.js
  function getError(option, xhr) {
    var msg = "cannot ".concat(option.method, " ").concat(option.action, " ").concat(xhr.status, "'");
    var err = new Error(msg);
    err.status = xhr.status;
    err.method = option.method;
    err.url = option.action;
    return err;
  }
  function getBody(xhr) {
    var text = xhr.responseText || xhr.response;
    if (!text) {
      return text;
    }
    try {
      return JSON.parse(text);
    } catch (e3) {
      return text;
    }
  }
  function upload(option) {
    var xhr = new XMLHttpRequest();
    if (option.onProgress && xhr.upload) {
      xhr.upload.onprogress = function progress(e3) {
        if (e3.total > 0) {
          e3.percent = e3.loaded / e3.total * 100;
        }
        option.onProgress(e3);
      };
    }
    var formData = new FormData();
    if (option.data) {
      Object.keys(option.data).forEach(function(key2) {
        var value = option.data[key2];
        if (Array.isArray(value)) {
          value.forEach(function(item) {
            formData.append("".concat(key2, "[]"), item);
          });
          return;
        }
        formData.append(key2, value);
      });
    }
    if (option.file instanceof Blob) {
      formData.append(option.filename, option.file, option.file.name);
    } else {
      formData.append(option.filename, option.file);
    }
    xhr.onerror = function error(e3) {
      option.onError(e3);
    };
    xhr.onload = function onload() {
      if (xhr.status < 200 || xhr.status >= 300) {
        return option.onError(getError(option, xhr), getBody(xhr));
      }
      return option.onSuccess(getBody(xhr), xhr);
    };
    xhr.open(option.method, option.action, true);
    if (option.withCredentials && "withCredentials" in xhr) {
      xhr.withCredentials = true;
    }
    var headers = option.headers || {};
    if (headers["X-Requested-With"] !== null) {
      xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    }
    Object.keys(headers).forEach(function(h2) {
      if (headers[h2] !== null) {
        xhr.setRequestHeader(h2, headers[h2]);
      }
    });
    xhr.send(formData);
    return {
      abort: function abort() {
        xhr.abort();
      }
    };
  }

  // node_modules/rc-upload/es/uid.js
  var now2 = +/* @__PURE__ */ new Date();
  var index2 = 0;
  function uid() {
    return "rc-upload-".concat(now2, "-").concat(++index2);
  }

  // node_modules/rc-upload/es/attr-accept.js
  var attr_accept_default = function(file, acceptedFiles) {
    if (file && acceptedFiles) {
      var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
      var fileName = file.name || "";
      var mimeType = file.type || "";
      var baseMimeType = mimeType.replace(/\/.*$/, "");
      return acceptedFilesArray.some(function(type4) {
        var validType = type4.trim();
        if (/^\*(\/\*)?$/.test(type4)) {
          return true;
        }
        if (validType.charAt(0) === ".") {
          var lowerFileName = fileName.toLowerCase();
          var lowerType = validType.toLowerCase();
          var affixList = [lowerType];
          if (lowerType === ".jpg" || lowerType === ".jpeg") {
            affixList = [".jpg", ".jpeg"];
          }
          return affixList.some(function(affix) {
            return lowerFileName.endsWith(affix);
          });
        }
        if (/\/\*$/.test(validType)) {
          return baseMimeType === validType.replace(/\/.*$/, "");
        }
        if (mimeType === validType) {
          return true;
        }
        if (/^\w+$/.test(validType)) {
          warning_default(false, "Upload takes an invalidate 'accept' type '".concat(validType, "'.Skip for check."));
          return true;
        }
        return false;
      });
    }
    return true;
  };

  // node_modules/rc-upload/es/traverseFileTree.js
  function loopFiles(item, callback) {
    var dirReader = item.createReader();
    var fileList = [];
    function sequence() {
      dirReader.readEntries(function(entries) {
        var entryList = Array.prototype.slice.apply(entries);
        fileList = fileList.concat(entryList);
        var isFinished = !entryList.length;
        if (isFinished) {
          callback(fileList);
        } else {
          sequence();
        }
      });
    }
    sequence();
  }
  var traverseFileTree = function traverseFileTree2(files, callback, isAccepted) {
    var _traverseFileTree = function _traverseFileTree2(item, path2) {
      item.path = path2 || "";
      if (item.isFile) {
        item.file(function(file) {
          if (isAccepted(file)) {
            if (item.fullPath && !file.webkitRelativePath) {
              Object.defineProperties(file, {
                webkitRelativePath: {
                  writable: true
                }
              });
              file.webkitRelativePath = item.fullPath.replace(/^\//, "");
              Object.defineProperties(file, {
                webkitRelativePath: {
                  writable: false
                }
              });
            }
            callback([file]);
          }
        });
      } else if (item.isDirectory) {
        loopFiles(item, function(entries) {
          entries.forEach(function(entryItem) {
            _traverseFileTree2(entryItem, "".concat(path2).concat(item.name, "/"));
          });
        });
      }
    };
    files.forEach(function(file) {
      _traverseFileTree(file.webkitGetAsEntry());
    });
  };
  var traverseFileTree_default = traverseFileTree;

  // node_modules/rc-upload/es/AjaxUploader.js
  var _excluded42 = ["component", "prefixCls", "className", "disabled", "id", "style", "multiple", "accept", "capture", "children", "directory", "openFileDialogOnClick", "onMouseEnter", "onMouseLeave"];
  var AjaxUploader = /* @__PURE__ */ function(_Component) {
    _inherits(AjaxUploader2, _Component);
    var _super = _createSuper(AjaxUploader2);
    function AjaxUploader2() {
      var _this;
      _classCallCheck(this, AjaxUploader2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        uid: uid()
      };
      _this.reqs = {};
      _this.fileInput = void 0;
      _this._isMounted = void 0;
      _this.onChange = function(e3) {
        var _this$props = _this.props, accept = _this$props.accept, directory = _this$props.directory;
        var files = e3.target.files;
        var acceptedFiles = _toConsumableArray(files).filter(function(file) {
          return !directory || attr_accept_default(file, accept);
        });
        _this.uploadFiles(acceptedFiles);
        _this.reset();
      };
      _this.onClick = function(e3) {
        var el = _this.fileInput;
        if (!el) {
          return;
        }
        var _this$props2 = _this.props, children = _this$props2.children, onClick = _this$props2.onClick;
        if (children && children.type === "button") {
          var parent = el.parentNode;
          parent.focus();
          parent.querySelector("button").blur();
        }
        el.click();
        if (onClick) {
          onClick(e3);
        }
      };
      _this.onKeyDown = function(e3) {
        if (e3.key === "Enter") {
          _this.onClick(e3);
        }
      };
      _this.onFileDrop = function(e3) {
        var multiple = _this.props.multiple;
        e3.preventDefault();
        if (e3.type === "dragover") {
          return;
        }
        if (_this.props.directory) {
          traverseFileTree_default(Array.prototype.slice.call(e3.dataTransfer.items), _this.uploadFiles, function(_file) {
            return attr_accept_default(_file, _this.props.accept);
          });
        } else {
          var files = _toConsumableArray(e3.dataTransfer.files).filter(function(file) {
            return attr_accept_default(file, _this.props.accept);
          });
          if (multiple === false) {
            files = files.slice(0, 1);
          }
          _this.uploadFiles(files);
        }
      };
      _this.uploadFiles = function(files) {
        var originFiles = _toConsumableArray(files);
        var postFiles = originFiles.map(function(file) {
          file.uid = uid();
          return _this.processFile(file, originFiles);
        });
        Promise.all(postFiles).then(function(fileList) {
          var onBatchStart = _this.props.onBatchStart;
          onBatchStart === null || onBatchStart === void 0 ? void 0 : onBatchStart(fileList.map(function(_ref) {
            var origin = _ref.origin, parsedFile = _ref.parsedFile;
            return {
              file: origin,
              parsedFile
            };
          }));
          fileList.filter(function(file) {
            return file.parsedFile !== null;
          }).forEach(function(file) {
            _this.post(file);
          });
        });
      };
      _this.processFile = /* @__PURE__ */ function() {
        var _ref2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(file, fileList) {
          var beforeUpload, transformedFile, action, mergedAction, data, mergedData, parsedData, parsedFile, mergedParsedFile;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  beforeUpload = _this.props.beforeUpload;
                  transformedFile = file;
                  if (!beforeUpload) {
                    _context.next = 14;
                    break;
                  }
                  _context.prev = 3;
                  _context.next = 6;
                  return beforeUpload(file, fileList);
                case 6:
                  transformedFile = _context.sent;
                  _context.next = 12;
                  break;
                case 9:
                  _context.prev = 9;
                  _context.t0 = _context["catch"](3);
                  transformedFile = false;
                case 12:
                  if (!(transformedFile === false)) {
                    _context.next = 14;
                    break;
                  }
                  return _context.abrupt("return", {
                    origin: file,
                    parsedFile: null,
                    action: null,
                    data: null
                  });
                case 14:
                  action = _this.props.action;
                  if (!(typeof action === "function")) {
                    _context.next = 21;
                    break;
                  }
                  _context.next = 18;
                  return action(file);
                case 18:
                  mergedAction = _context.sent;
                  _context.next = 22;
                  break;
                case 21:
                  mergedAction = action;
                case 22:
                  data = _this.props.data;
                  if (!(typeof data === "function")) {
                    _context.next = 29;
                    break;
                  }
                  _context.next = 26;
                  return data(file);
                case 26:
                  mergedData = _context.sent;
                  _context.next = 30;
                  break;
                case 29:
                  mergedData = data;
                case 30:
                  parsedData = // string type is from legacy `transformFile`.
                  // Not sure if this will work since no related test case works with it
                  (_typeof(transformedFile) === "object" || typeof transformedFile === "string") && transformedFile ? transformedFile : file;
                  if (parsedData instanceof File) {
                    parsedFile = parsedData;
                  } else {
                    parsedFile = new File([parsedData], file.name, {
                      type: file.type
                    });
                  }
                  mergedParsedFile = parsedFile;
                  mergedParsedFile.uid = file.uid;
                  return _context.abrupt("return", {
                    origin: file,
                    data: mergedData,
                    parsedFile: mergedParsedFile,
                    action: mergedAction
                  });
                case 35:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[3, 9]]);
        }));
        return function(_x, _x2) {
          return _ref2.apply(this, arguments);
        };
      }();
      _this.saveFileInput = function(node) {
        _this.fileInput = node;
      };
      return _this;
    }
    _createClass(AjaxUploader2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._isMounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
        this.abort();
      }
    }, {
      key: "post",
      value: function post(_ref3) {
        var _this2 = this;
        var data = _ref3.data, origin = _ref3.origin, action = _ref3.action, parsedFile = _ref3.parsedFile;
        if (!this._isMounted) {
          return;
        }
        var _this$props3 = this.props, onStart = _this$props3.onStart, customRequest = _this$props3.customRequest, name5 = _this$props3.name, headers = _this$props3.headers, withCredentials = _this$props3.withCredentials, method4 = _this$props3.method;
        var uid2 = origin.uid;
        var request = customRequest || upload;
        var requestOption = {
          action,
          filename: name5,
          data,
          file: parsedFile,
          headers,
          withCredentials,
          method: method4 || "post",
          onProgress: function onProgress(e3) {
            var onProgress2 = _this2.props.onProgress;
            onProgress2 === null || onProgress2 === void 0 ? void 0 : onProgress2(e3, parsedFile);
          },
          onSuccess: function onSuccess(ret, xhr) {
            var onSuccess2 = _this2.props.onSuccess;
            onSuccess2 === null || onSuccess2 === void 0 ? void 0 : onSuccess2(ret, parsedFile, xhr);
            delete _this2.reqs[uid2];
          },
          onError: function onError(err, ret) {
            var onError2 = _this2.props.onError;
            onError2 === null || onError2 === void 0 ? void 0 : onError2(err, ret, parsedFile);
            delete _this2.reqs[uid2];
          }
        };
        onStart(origin);
        this.reqs[uid2] = request(requestOption);
      }
    }, {
      key: "reset",
      value: function reset() {
        this.setState({
          uid: uid()
        });
      }
    }, {
      key: "abort",
      value: function abort(file) {
        var reqs = this.reqs;
        if (file) {
          var uid2 = file.uid ? file.uid : file;
          if (reqs[uid2] && reqs[uid2].abort) {
            reqs[uid2].abort();
          }
          delete reqs[uid2];
        } else {
          Object.keys(reqs).forEach(function(uid3) {
            if (reqs[uid3] && reqs[uid3].abort) {
              reqs[uid3].abort();
            }
            delete reqs[uid3];
          });
        }
      }
    }, {
      key: "render",
      value: function render4() {
        var _classNames;
        var _this$props4 = this.props, Tag = _this$props4.component, prefixCls = _this$props4.prefixCls, className = _this$props4.className, disabled = _this$props4.disabled, id2 = _this$props4.id, style2 = _this$props4.style, multiple = _this$props4.multiple, accept = _this$props4.accept, capture = _this$props4.capture, children = _this$props4.children, directory = _this$props4.directory, openFileDialogOnClick = _this$props4.openFileDialogOnClick, onMouseEnter = _this$props4.onMouseEnter, onMouseLeave = _this$props4.onMouseLeave, otherProps = _objectWithoutProperties(_this$props4, _excluded42);
        var cls = (0, import_classnames115.default)((_classNames = {}, _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), disabled), _defineProperty(_classNames, className, className), _classNames));
        var dirProps = directory ? {
          directory: "directory",
          webkitdirectory: "webkitdirectory"
        } : {};
        var events = disabled ? {} : {
          onClick: openFileDialogOnClick ? this.onClick : function() {
          },
          onKeyDown: openFileDialogOnClick ? this.onKeyDown : function() {
          },
          onMouseEnter,
          onMouseLeave,
          onDrop: this.onFileDrop,
          onDragOver: this.onFileDrop,
          tabIndex: "0"
        };
        return /* @__PURE__ */ import_react72.default.createElement(Tag, _extends({}, events, {
          className: cls,
          role: "button",
          style: style2
        }), /* @__PURE__ */ import_react72.default.createElement("input", _extends({}, pickAttrs(otherProps, {
          aria: true,
          data: true
        }), {
          id: id2,
          type: "file",
          ref: this.saveFileInput,
          onClick: function onClick(e3) {
            return e3.stopPropagation();
          },
          key: this.state.uid,
          style: {
            display: "none"
          },
          accept
        }, dirProps, {
          multiple,
          onChange: this.onChange
        }, capture != null ? {
          capture
        } : {})), children);
      }
    }]);
    return AjaxUploader2;
  }(import_react72.Component);
  var AjaxUploader_default = AjaxUploader;

  // node_modules/rc-upload/es/Upload.js
  function empty() {
  }
  var Upload = /* @__PURE__ */ function(_Component) {
    _inherits(Upload4, _Component);
    var _super = _createSuper(Upload4);
    function Upload4() {
      var _this;
      _classCallCheck(this, Upload4);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.uploader = void 0;
      _this.saveUploader = function(node) {
        _this.uploader = node;
      };
      return _this;
    }
    _createClass(Upload4, [{
      key: "abort",
      value: function abort(file) {
        this.uploader.abort(file);
      }
    }, {
      key: "render",
      value: function render4() {
        return /* @__PURE__ */ import_react73.default.createElement(AjaxUploader_default, _extends({}, this.props, {
          ref: this.saveUploader
        }));
      }
    }]);
    return Upload4;
  }(import_react73.Component);
  Upload.defaultProps = {
    component: "span",
    prefixCls: "rc-upload",
    data: {},
    headers: {},
    name: "file",
    multipart: false,
    onStart: empty,
    onError: empty,
    onSuccess: empty,
    multiple: false,
    beforeUpload: null,
    customRequest: null,
    withCredentials: false,
    openFileDialogOnClick: true
  };
  var Upload_default = Upload;

  // node_modules/rc-upload/es/index.js
  var es_default21 = Upload_default;

  // node_modules/antd/es/upload/Upload.js
  var React280 = __toESM(require_react());
  var import_react_dom7 = __toESM(require_react_dom());

  // node_modules/@ant-design/icons/es/icons/FileTwoTone.js
  var React274 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/FileTwoTone.js
  var FileTwoTone = { "icon": function render2(primaryColor, secondaryColor) {
    return { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M534 352V136H232v752h560V394H576a42 42 0 01-42-42z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0042 42h216v494z", "fill": primaryColor } }] };
  }, "name": "file", "theme": "twotone" };
  var FileTwoTone_default = FileTwoTone;

  // node_modules/@ant-design/icons/es/icons/FileTwoTone.js
  var FileTwoTone2 = function FileTwoTone3(props, ref) {
    return /* @__PURE__ */ React274.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: FileTwoTone_default
    }));
  };
  FileTwoTone2.displayName = "FileTwoTone";
  var FileTwoTone_default2 = /* @__PURE__ */ React274.forwardRef(FileTwoTone2);

  // node_modules/@ant-design/icons/es/icons/PaperClipOutlined.js
  var React275 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/PaperClipOutlined.js
  var PaperClipOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M779.3 196.6c-94.2-94.2-247.6-94.2-341.7 0l-261 260.8c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0012.7 0l261-260.8c32.4-32.4 75.5-50.2 121.3-50.2s88.9 17.8 121.2 50.2c32.4 32.4 50.2 75.5 50.2 121.2 0 45.8-17.8 88.8-50.2 121.2l-266 265.9-43.1 43.1c-40.3 40.3-105.8 40.3-146.1 0-19.5-19.5-30.2-45.4-30.2-73s10.7-53.5 30.2-73l263.9-263.8c6.7-6.6 15.5-10.3 24.9-10.3h.1c9.4 0 18.1 3.7 24.7 10.3 6.7 6.7 10.3 15.5 10.3 24.9 0 9.3-3.7 18.1-10.3 24.7L372.4 653c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0012.7 0l215.6-215.6c19.9-19.9 30.8-46.3 30.8-74.4s-11-54.6-30.8-74.4c-41.1-41.1-107.9-41-149 0L463 364 224.8 602.1A172.22 172.22 0 00174 724.8c0 46.3 18.1 89.8 50.8 122.5 33.9 33.8 78.3 50.7 122.7 50.7 44.4 0 88.8-16.9 122.6-50.7l309.2-309C824.8 492.7 850 432 850 367.5c.1-64.6-25.1-125.3-70.7-170.9z" } }] }, "name": "paper-clip", "theme": "outlined" };
  var PaperClipOutlined_default = PaperClipOutlined;

  // node_modules/@ant-design/icons/es/icons/PaperClipOutlined.js
  var PaperClipOutlined2 = function PaperClipOutlined3(props, ref) {
    return /* @__PURE__ */ React275.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: PaperClipOutlined_default
    }));
  };
  PaperClipOutlined2.displayName = "PaperClipOutlined";
  var PaperClipOutlined_default2 = /* @__PURE__ */ React275.forwardRef(PaperClipOutlined2);

  // node_modules/@ant-design/icons/es/icons/PictureTwoTone.js
  var React276 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/PictureTwoTone.js
  var PictureTwoTone = { "icon": function render3(primaryColor, secondaryColor) {
    return { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136v-39.9l138.5-164.3 150.1 178L658.1 489 888 761.6V792zm0-129.8L664.2 396.8c-3.2-3.8-9-3.8-12.2 0L424.6 666.4l-144-170.7c-3.2-3.8-9-3.8-12.2 0L136 652.7V232h752v430.2z", "fill": primaryColor } }, { "tag": "path", "attrs": { "d": "M424.6 765.8l-150.1-178L136 752.1V792h752v-30.4L658.1 489z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M136 652.7l132.4-157c3.2-3.8 9-3.8 12.2 0l144 170.7L652 396.8c3.2-3.8 9-3.8 12.2 0L888 662.2V232H136v420.7zM304 280a88 88 0 110 176 88 88 0 010-176z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M276 368a28 28 0 1056 0 28 28 0 10-56 0z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M304 456a88 88 0 100-176 88 88 0 000 176zm0-116c15.5 0 28 12.5 28 28s-12.5 28-28 28-28-12.5-28-28 12.5-28 28-28z", "fill": primaryColor } }] };
  }, "name": "picture", "theme": "twotone" };
  var PictureTwoTone_default = PictureTwoTone;

  // node_modules/@ant-design/icons/es/icons/PictureTwoTone.js
  var PictureTwoTone2 = function PictureTwoTone3(props, ref) {
    return /* @__PURE__ */ React276.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: PictureTwoTone_default
    }));
  };
  PictureTwoTone2.displayName = "PictureTwoTone";
  var PictureTwoTone_default2 = /* @__PURE__ */ React276.forwardRef(PictureTwoTone2);

  // node_modules/antd/es/upload/UploadList/index.js
  var import_classnames117 = __toESM(require_classnames());
  var React279 = __toESM(require_react());

  // node_modules/antd/es/upload/utils.js
  function file2Obj(file) {
    return _extends(_extends({}, file), {
      lastModified: file.lastModified,
      lastModifiedDate: file.lastModifiedDate,
      name: file.name,
      size: file.size,
      type: file.type,
      uid: file.uid,
      percent: 0,
      originFileObj: file
    });
  }
  function updateFileList(file, fileList) {
    var nextFileList = _toConsumableArray(fileList);
    var fileIndex = nextFileList.findIndex(function(_ref) {
      var uid2 = _ref.uid;
      return uid2 === file.uid;
    });
    if (fileIndex === -1) {
      nextFileList.push(file);
    } else {
      nextFileList[fileIndex] = file;
    }
    return nextFileList;
  }
  function getFileItem(file, fileList) {
    var matchKey = file.uid !== void 0 ? "uid" : "name";
    return fileList.filter(function(item) {
      return item[matchKey] === file[matchKey];
    })[0];
  }
  function removeFileItem(file, fileList) {
    var matchKey = file.uid !== void 0 ? "uid" : "name";
    var removed = fileList.filter(function(item) {
      return item[matchKey] !== file[matchKey];
    });
    if (removed.length === fileList.length) {
      return null;
    }
    return removed;
  }
  var extname = function extname2() {
    var url2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    var temp = url2.split("/");
    var filename = temp[temp.length - 1];
    var filenameWithoutSuffix = filename.split(/#|\?/)[0];
    return (/\.[^./\\]*$/.exec(filenameWithoutSuffix) || [""])[0];
  };
  var isImageFileType = function isImageFileType2(type4) {
    return type4.indexOf("image/") === 0;
  };
  var isImageUrl = function isImageUrl2(file) {
    if (file.type && !file.thumbUrl) {
      return isImageFileType(file.type);
    }
    var url2 = file.thumbUrl || file.url || "";
    var extension = extname(url2);
    if (/^data:image\//.test(url2) || /(webp|svg|png|gif|jpg|jpeg|jfif|bmp|dpg|ico|heic|heif)$/i.test(extension)) {
      return true;
    }
    if (/^data:/.test(url2)) {
      return false;
    }
    if (extension) {
      return false;
    }
    return true;
  };
  var MEASURE_SIZE = 200;
  function previewImage(file) {
    return new Promise(function(resolve5) {
      if (!file.type || !isImageFileType(file.type)) {
        resolve5("");
        return;
      }
      var canvas = document.createElement("canvas");
      canvas.width = MEASURE_SIZE;
      canvas.height = MEASURE_SIZE;
      canvas.style.cssText = "position: fixed; left: 0; top: 0; width: ".concat(MEASURE_SIZE, "px; height: ").concat(MEASURE_SIZE, "px; z-index: 9999; display: none;");
      document.body.appendChild(canvas);
      var ctx = canvas.getContext("2d");
      var img = new Image();
      img.onload = function() {
        var width = img.width, height = img.height;
        var drawWidth = MEASURE_SIZE;
        var drawHeight = MEASURE_SIZE;
        var offsetX = 0;
        var offsetY = 0;
        if (width > height) {
          drawHeight = height * (MEASURE_SIZE / width);
          offsetY = -(drawHeight - drawWidth) / 2;
        } else {
          drawWidth = width * (MEASURE_SIZE / height);
          offsetX = -(drawWidth - drawHeight) / 2;
        }
        ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
        var dataURL = canvas.toDataURL();
        document.body.removeChild(canvas);
        resolve5(dataURL);
      };
      img.crossOrigin = "anonymous";
      if (file.type.startsWith("image/svg+xml")) {
        var reader = new FileReader();
        reader.addEventListener("load", function() {
          if (reader.result)
            img.src = reader.result;
        });
        reader.readAsDataURL(file);
      } else {
        img.src = window.URL.createObjectURL(file);
      }
    });
  }

  // node_modules/@ant-design/icons/es/icons/DownloadOutlined.js
  var React277 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DownloadOutlined.js
  var DownloadOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M505.7 661a8 8 0 0012.6 0l112-141.7c4.1-5.2.4-12.9-6.3-12.9h-74.1V168c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v338.3H400c-6.7 0-10.4 7.7-6.3 12.9l112 141.8zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z" } }] }, "name": "download", "theme": "outlined" };
  var DownloadOutlined_default = DownloadOutlined;

  // node_modules/@ant-design/icons/es/icons/DownloadOutlined.js
  var DownloadOutlined2 = function DownloadOutlined3(props, ref) {
    return /* @__PURE__ */ React277.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: DownloadOutlined_default
    }));
  };
  DownloadOutlined2.displayName = "DownloadOutlined";
  var DownloadOutlined_default2 = /* @__PURE__ */ React277.forwardRef(DownloadOutlined2);

  // node_modules/antd/es/upload/UploadList/ListItem.js
  var import_classnames116 = __toESM(require_classnames());
  var React278 = __toESM(require_react());
  var ListItem = /* @__PURE__ */ React278.forwardRef(function(_ref, ref) {
    var _classNames3;
    var prefixCls = _ref.prefixCls, className = _ref.className, style2 = _ref.style, locale4 = _ref.locale, listType = _ref.listType, file = _ref.file, items = _ref.items, progressProps = _ref.progress, iconRender = _ref.iconRender, actionIconRender = _ref.actionIconRender, itemRender = _ref.itemRender, isImgUrl = _ref.isImgUrl, showPreviewIcon = _ref.showPreviewIcon, showRemoveIcon = _ref.showRemoveIcon, showDownloadIcon = _ref.showDownloadIcon, customPreviewIcon = _ref.previewIcon, customRemoveIcon = _ref.removeIcon, customDownloadIcon = _ref.downloadIcon, onPreview = _ref.onPreview, onDownload = _ref.onDownload, onClose2 = _ref.onClose;
    var _a, _b;
    var status = file.status;
    var _React$useState = React278.useState(status), _React$useState2 = _slicedToArray(_React$useState, 2), mergedStatus = _React$useState2[0], setMergedStatus = _React$useState2[1];
    React278.useEffect(function() {
      if (status !== "removed") {
        setMergedStatus(status);
      }
    }, [status]);
    var _React$useState3 = React278.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), showProgress = _React$useState4[0], setShowProgress = _React$useState4[1];
    var progressRafRef = React278.useRef();
    React278.useEffect(function() {
      progressRafRef.current = setTimeout(function() {
        setShowProgress(true);
      }, 300);
      return function() {
        window.clearTimeout(progressRafRef.current);
      };
    }, []);
    var spanClassName = "".concat(prefixCls, "-span");
    var iconNode = iconRender(file);
    var icon = /* @__PURE__ */ React278.createElement("div", {
      className: "".concat(prefixCls, "-text-icon")
    }, iconNode);
    if (listType === "picture" || listType === "picture-card") {
      if (mergedStatus === "uploading" || !file.thumbUrl && !file.url) {
        var _classNames;
        var uploadingClassName = (0, import_classnames116.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-list-item-thumbnail"), true), _defineProperty(_classNames, "".concat(prefixCls, "-list-item-file"), mergedStatus !== "uploading"), _classNames));
        icon = /* @__PURE__ */ React278.createElement("div", {
          className: uploadingClassName
        }, iconNode);
      } else {
        var _classNames2;
        var thumbnail = (isImgUrl === null || isImgUrl === void 0 ? void 0 : isImgUrl(file)) ? /* @__PURE__ */ React278.createElement("img", {
          src: file.thumbUrl || file.url,
          alt: file.name,
          className: "".concat(prefixCls, "-list-item-image"),
          crossOrigin: file.crossOrigin
        }) : iconNode;
        var aClassName = (0, import_classnames116.default)((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-list-item-thumbnail"), true), _defineProperty(_classNames2, "".concat(prefixCls, "-list-item-file"), isImgUrl && !isImgUrl(file)), _classNames2));
        icon = /* @__PURE__ */ React278.createElement("a", {
          className: aClassName,
          onClick: function onClick(e3) {
            return onPreview(file, e3);
          },
          href: file.url || file.thumbUrl,
          target: "_blank",
          rel: "noopener noreferrer"
        }, thumbnail);
      }
    }
    var infoUploadingClass = (0, import_classnames116.default)((_classNames3 = {}, _defineProperty(_classNames3, "".concat(prefixCls, "-list-item"), true), _defineProperty(_classNames3, "".concat(prefixCls, "-list-item-").concat(mergedStatus), true), _defineProperty(_classNames3, "".concat(prefixCls, "-list-item-list-type-").concat(listType), true), _classNames3));
    var linkProps = typeof file.linkProps === "string" ? JSON.parse(file.linkProps) : file.linkProps;
    var removeIcon = showRemoveIcon ? actionIconRender((typeof customRemoveIcon === "function" ? customRemoveIcon(file) : customRemoveIcon) || /* @__PURE__ */ React278.createElement(DeleteOutlined_default2, null), function() {
      return onClose2(file);
    }, prefixCls, locale4.removeFile) : null;
    var downloadIcon = showDownloadIcon && mergedStatus === "done" ? actionIconRender((typeof customDownloadIcon === "function" ? customDownloadIcon(file) : customDownloadIcon) || /* @__PURE__ */ React278.createElement(DownloadOutlined_default2, null), function() {
      return onDownload(file);
    }, prefixCls, locale4.downloadFile) : null;
    var downloadOrDelete = listType !== "picture-card" && /* @__PURE__ */ React278.createElement("span", {
      key: "download-delete",
      className: (0, import_classnames116.default)("".concat(prefixCls, "-list-item-card-actions"), {
        picture: listType === "picture"
      })
    }, downloadIcon, removeIcon);
    var listItemNameClass = (0, import_classnames116.default)("".concat(prefixCls, "-list-item-name"));
    var preview = file.url ? [/* @__PURE__ */ React278.createElement("a", _extends({
      key: "view",
      target: "_blank",
      rel: "noopener noreferrer",
      className: listItemNameClass,
      title: file.name
    }, linkProps, {
      href: file.url,
      onClick: function onClick(e3) {
        return onPreview(file, e3);
      }
    }), file.name), downloadOrDelete] : [/* @__PURE__ */ React278.createElement("span", {
      key: "view",
      className: listItemNameClass,
      onClick: function onClick(e3) {
        return onPreview(file, e3);
      },
      title: file.name
    }, file.name), downloadOrDelete];
    var previewStyle = {
      pointerEvents: "none",
      opacity: 0.5
    };
    var previewIcon = showPreviewIcon ? /* @__PURE__ */ React278.createElement("a", {
      href: file.url || file.thumbUrl,
      target: "_blank",
      rel: "noopener noreferrer",
      style: file.url || file.thumbUrl ? void 0 : previewStyle,
      onClick: function onClick(e3) {
        return onPreview(file, e3);
      },
      title: locale4.previewFile
    }, typeof customPreviewIcon === "function" ? customPreviewIcon(file) : customPreviewIcon || /* @__PURE__ */ React278.createElement(EyeOutlined_default2, null)) : null;
    var actions = listType === "picture-card" && mergedStatus !== "uploading" && /* @__PURE__ */ React278.createElement("span", {
      className: "".concat(prefixCls, "-list-item-actions")
    }, previewIcon, mergedStatus === "done" && downloadIcon, removeIcon);
    var message;
    if (file.response && typeof file.response === "string") {
      message = file.response;
    } else {
      message = ((_a = file.error) === null || _a === void 0 ? void 0 : _a.statusText) || ((_b = file.error) === null || _b === void 0 ? void 0 : _b.message) || locale4.uploadError;
    }
    var iconAndPreview = /* @__PURE__ */ React278.createElement("span", {
      className: spanClassName
    }, icon, preview);
    var _React$useContext = React278.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var rootPrefixCls = getPrefixCls();
    var dom = /* @__PURE__ */ React278.createElement("div", {
      className: infoUploadingClass
    }, /* @__PURE__ */ React278.createElement("div", {
      className: "".concat(prefixCls, "-list-item-info")
    }, iconAndPreview), actions, showProgress && /* @__PURE__ */ React278.createElement(es_default3, {
      motionName: "".concat(rootPrefixCls, "-fade"),
      visible: mergedStatus === "uploading",
      motionDeadline: 2e3
    }, function(_ref2) {
      var motionClassName = _ref2.className;
      var loadingProgress = "percent" in file ? /* @__PURE__ */ React278.createElement(progress_default2, _extends({}, progressProps, {
        type: "line",
        percent: file.percent
      })) : null;
      return /* @__PURE__ */ React278.createElement("div", {
        className: (0, import_classnames116.default)("".concat(prefixCls, "-list-item-progress"), motionClassName)
      }, loadingProgress);
    }));
    var listContainerNameClass = (0, import_classnames116.default)("".concat(prefixCls, "-list-").concat(listType, "-container"), className);
    var item = mergedStatus === "error" ? /* @__PURE__ */ React278.createElement(tooltip_default, {
      title: message,
      getPopupContainer: function getPopupContainer(node) {
        return node.parentNode;
      }
    }, dom) : dom;
    return /* @__PURE__ */ React278.createElement("div", {
      className: listContainerNameClass,
      style: style2,
      ref
    }, itemRender ? itemRender(item, file, items, {
      download: onDownload.bind(null, file),
      preview: onPreview.bind(null, file),
      remove: onClose2.bind(null, file)
    }) : item);
  });
  var ListItem_default = ListItem;

  // node_modules/antd/es/upload/UploadList/index.js
  var listItemMotion = _extends({}, motion_default);
  delete listItemMotion.onAppearEnd;
  delete listItemMotion.onEnterEnd;
  delete listItemMotion.onLeaveEnd;
  var InternalUploadList = function InternalUploadList2(_ref, ref) {
    var _classNames;
    var listType = _ref.listType, previewFile = _ref.previewFile, onPreview = _ref.onPreview, onDownload = _ref.onDownload, onRemove = _ref.onRemove, locale4 = _ref.locale, iconRender = _ref.iconRender, isImgUrl = _ref.isImageUrl, customizePrefixCls = _ref.prefixCls, _ref$items = _ref.items, items = _ref$items === void 0 ? [] : _ref$items, showPreviewIcon = _ref.showPreviewIcon, showRemoveIcon = _ref.showRemoveIcon, showDownloadIcon = _ref.showDownloadIcon, removeIcon = _ref.removeIcon, previewIcon = _ref.previewIcon, downloadIcon = _ref.downloadIcon, progress = _ref.progress, appendAction = _ref.appendAction, appendActionVisible = _ref.appendActionVisible, itemRender = _ref.itemRender;
    var forceUpdate = useForceUpdate();
    var _React$useState = React279.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), motionAppear = _React$useState2[0], setMotionAppear = _React$useState2[1];
    React279.useEffect(function() {
      if (listType !== "picture" && listType !== "picture-card") {
        return;
      }
      (items || []).forEach(function(file) {
        if (typeof document === "undefined" || typeof window === "undefined" || !window.FileReader || !window.File || !(file.originFileObj instanceof File || file.originFileObj instanceof Blob) || file.thumbUrl !== void 0) {
          return;
        }
        file.thumbUrl = "";
        if (previewFile) {
          previewFile(file.originFileObj).then(function(previewDataUrl) {
            file.thumbUrl = previewDataUrl || "";
            forceUpdate();
          });
        }
      });
    }, [listType, items, previewFile]);
    React279.useEffect(function() {
      setMotionAppear(true);
    }, []);
    var onInternalPreview = function onInternalPreview2(file, e3) {
      if (!onPreview) {
        return;
      }
      e3 === null || e3 === void 0 ? void 0 : e3.preventDefault();
      return onPreview(file);
    };
    var onInternalDownload = function onInternalDownload2(file) {
      if (typeof onDownload === "function") {
        onDownload(file);
      } else if (file.url) {
        window.open(file.url);
      }
    };
    var onInternalClose = function onInternalClose2(file) {
      onRemove === null || onRemove === void 0 ? void 0 : onRemove(file);
    };
    var internalIconRender = function internalIconRender2(file) {
      if (iconRender) {
        return iconRender(file, listType);
      }
      var isLoading = file.status === "uploading";
      var fileIcon = isImgUrl && isImgUrl(file) ? /* @__PURE__ */ React279.createElement(PictureTwoTone_default2, null) : /* @__PURE__ */ React279.createElement(FileTwoTone_default2, null);
      var icon = isLoading ? /* @__PURE__ */ React279.createElement(LoadingOutlined_default2, null) : /* @__PURE__ */ React279.createElement(PaperClipOutlined_default2, null);
      if (listType === "picture") {
        icon = isLoading ? /* @__PURE__ */ React279.createElement(LoadingOutlined_default2, null) : fileIcon;
      } else if (listType === "picture-card") {
        icon = isLoading ? locale4.uploading : fileIcon;
      }
      return icon;
    };
    var actionIconRender = function actionIconRender2(customIcon, callback, prefixCls2, title) {
      var btnProps = {
        type: "text",
        size: "small",
        title,
        onClick: function onClick(e3) {
          callback();
          if (isValidElement6(customIcon) && customIcon.props.onClick) {
            customIcon.props.onClick(e3);
          }
        },
        className: "".concat(prefixCls2, "-list-item-card-actions-btn")
      };
      if (isValidElement6(customIcon)) {
        var btnIcon = cloneElement6(customIcon, _extends(_extends({}, customIcon.props), {
          onClick: function onClick() {
          }
        }));
        return /* @__PURE__ */ React279.createElement(button_default2, _extends({}, btnProps, {
          icon: btnIcon
        }));
      }
      return /* @__PURE__ */ React279.createElement(button_default2, _extends({}, btnProps), /* @__PURE__ */ React279.createElement("span", null, customIcon));
    };
    React279.useImperativeHandle(ref, function() {
      return {
        handlePreview: onInternalPreview,
        handleDownload: onInternalDownload
      };
    });
    var _React$useContext = React279.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var prefixCls = getPrefixCls("upload", customizePrefixCls);
    var listClassNames = (0, import_classnames117.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-list"), true), _defineProperty(_classNames, "".concat(prefixCls, "-list-").concat(listType), true), _defineProperty(_classNames, "".concat(prefixCls, "-list-rtl"), direction === "rtl"), _classNames));
    var motionKeyList = _toConsumableArray(items.map(function(file) {
      return {
        key: file.uid,
        file
      };
    }));
    var animationDirection = listType === "picture-card" ? "animate-inline" : "animate";
    var motionConfig = {
      motionDeadline: 2e3,
      motionName: "".concat(prefixCls, "-").concat(animationDirection),
      keys: motionKeyList,
      motionAppear
    };
    if (listType !== "picture-card") {
      motionConfig = _extends(_extends({}, listItemMotion), motionConfig);
    }
    return /* @__PURE__ */ React279.createElement("div", {
      className: listClassNames
    }, /* @__PURE__ */ React279.createElement(CSSMotionList_default, _extends({}, motionConfig, {
      component: false
    }), function(_ref2) {
      var key2 = _ref2.key, file = _ref2.file, motionClassName = _ref2.className, motionStyle = _ref2.style;
      return /* @__PURE__ */ React279.createElement(ListItem_default, {
        key: key2,
        locale: locale4,
        prefixCls,
        className: motionClassName,
        style: motionStyle,
        file,
        items,
        progress,
        listType,
        isImgUrl,
        showPreviewIcon,
        showRemoveIcon,
        showDownloadIcon,
        removeIcon,
        previewIcon,
        downloadIcon,
        iconRender: internalIconRender,
        actionIconRender,
        itemRender,
        onPreview: onInternalPreview,
        onDownload: onInternalDownload,
        onClose: onInternalClose
      });
    }), appendAction && /* @__PURE__ */ React279.createElement(es_default3, _extends({}, motionConfig, {
      visible: appendActionVisible,
      forceRender: true
    }), function(_ref3) {
      var motionClassName = _ref3.className, motionStyle = _ref3.style;
      return cloneElement6(appendAction, function(oriProps) {
        return {
          className: (0, import_classnames117.default)(oriProps.className, motionClassName),
          style: _extends(_extends(_extends({}, motionStyle), {
            // prevent the element has hover css pseudo-class that may cause animation to end prematurely.
            pointerEvents: motionClassName ? "none" : void 0
          }), oriProps.style)
        };
      });
    }));
  };
  var UploadList = /* @__PURE__ */ React279.forwardRef(InternalUploadList);
  if (true) {
    UploadList.displayName = "UploadList";
  }
  UploadList.defaultProps = {
    listType: "text",
    progress: {
      strokeWidth: 2,
      showInfo: false
    },
    showRemoveIcon: true,
    showDownloadIcon: false,
    showPreviewIcon: true,
    appendActionVisible: true,
    previewFile: previewImage,
    isImageUrl
  };
  var UploadList_default = UploadList;

  // node_modules/antd/es/upload/Upload.js
  var __awaiter = function(thisArg, _arguments, P2, generator2) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve5) {
        resolve5(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve5, reject) {
      function fulfilled(value) {
        try {
          step(generator2.next(value));
        } catch (e3) {
          reject(e3);
        }
      }
      function rejected(value) {
        try {
          step(generator2["throw"](value));
        } catch (e3) {
          reject(e3);
        }
      }
      function step(result) {
        result.done ? resolve5(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
    });
  };
  var LIST_IGNORE = "__LIST_IGNORE_".concat(Date.now(), "__");
  var InternalUpload = function InternalUpload2(props, ref) {
    var _classNames2;
    var fileList = props.fileList, defaultFileList = props.defaultFileList, onRemove = props.onRemove, showUploadList = props.showUploadList, listType = props.listType, onPreview = props.onPreview, onDownload = props.onDownload, onChange3 = props.onChange, onDrop = props.onDrop, previewFile = props.previewFile, customDisabled = props.disabled, propLocale = props.locale, iconRender = props.iconRender, isImageUrl3 = props.isImageUrl, progress = props.progress, customizePrefixCls = props.prefixCls, className = props.className, type4 = props.type, children = props.children, style2 = props.style, itemRender = props.itemRender, maxCount3 = props.maxCount;
    var disabled = React280.useContext(DisabledContext_default);
    var mergedDisabled = customDisabled || disabled;
    var _useMergedState = useMergedState(defaultFileList || [], {
      value: fileList,
      postState: function postState(list) {
        return list !== null && list !== void 0 ? list : [];
      }
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedFileList = _useMergedState2[0], setMergedFileList = _useMergedState2[1];
    var _React$useState = React280.useState("drop"), _React$useState2 = _slicedToArray(_React$useState, 2), dragState = _React$useState2[0], setDragState = _React$useState2[1];
    var upload2 = React280.useRef();
    true ? warning_default2("fileList" in props || !("value" in props), "Upload", "`value` is not a valid prop, do you mean `fileList`?") : void 0;
    true ? warning_default2(!("transformFile" in props), "Upload", "`transformFile` is deprecated. Please use `beforeUpload` directly.") : void 0;
    React280.useMemo(function() {
      var timestamp = Date.now();
      (fileList || []).forEach(function(file, index3) {
        if (!file.uid && !Object.isFrozen(file)) {
          file.uid = "__AUTO__".concat(timestamp, "_").concat(index3, "__");
        }
      });
    }, [fileList]);
    var onInternalChange = function onInternalChange2(file, changedFileList, event) {
      var cloneList = _toConsumableArray(changedFileList);
      if (maxCount3 === 1) {
        cloneList = cloneList.slice(-1);
      } else if (maxCount3) {
        cloneList = cloneList.slice(0, maxCount3);
      }
      (0, import_react_dom7.flushSync)(function() {
        setMergedFileList(cloneList);
      });
      var changeInfo = {
        file,
        fileList: cloneList
      };
      if (event) {
        changeInfo.event = event;
      }
      onChange3 === null || onChange3 === void 0 ? void 0 : onChange3(changeInfo);
    };
    var mergedBeforeUpload = function mergedBeforeUpload2(file, fileListArgs) {
      return __awaiter(void 0, void 0, void 0, /* @__PURE__ */ _regeneratorRuntime().mark(function _callee() {
        var beforeUpload, transformFile, parsedFile, result;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                beforeUpload = props.beforeUpload, transformFile = props.transformFile;
                parsedFile = file;
                if (!beforeUpload) {
                  _context.next = 13;
                  break;
                }
                _context.next = 5;
                return beforeUpload(file, fileListArgs);
              case 5:
                result = _context.sent;
                if (!(result === false)) {
                  _context.next = 8;
                  break;
                }
                return _context.abrupt("return", false);
              case 8:
                delete file[LIST_IGNORE];
                if (!(result === LIST_IGNORE)) {
                  _context.next = 12;
                  break;
                }
                Object.defineProperty(file, LIST_IGNORE, {
                  value: true,
                  configurable: true
                });
                return _context.abrupt("return", false);
              case 12:
                if (_typeof(result) === "object" && result) {
                  parsedFile = result;
                }
              case 13:
                if (!transformFile) {
                  _context.next = 17;
                  break;
                }
                _context.next = 16;
                return transformFile(parsedFile);
              case 16:
                parsedFile = _context.sent;
              case 17:
                return _context.abrupt("return", parsedFile);
              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
    };
    var onBatchStart = function onBatchStart2(batchFileInfoList) {
      var filteredFileInfoList = batchFileInfoList.filter(function(info) {
        return !info.file[LIST_IGNORE];
      });
      if (!filteredFileInfoList.length) {
        return;
      }
      var objectFileList = filteredFileInfoList.map(function(info) {
        return file2Obj(info.file);
      });
      var newFileList = _toConsumableArray(mergedFileList);
      objectFileList.forEach(function(fileObj) {
        newFileList = updateFileList(fileObj, newFileList);
      });
      objectFileList.forEach(function(fileObj, index3) {
        var triggerFileObj = fileObj;
        if (!filteredFileInfoList[index3].parsedFile) {
          var originFileObj = fileObj.originFileObj;
          var clone2;
          try {
            clone2 = new File([originFileObj], originFileObj.name, {
              type: originFileObj.type
            });
          } catch (e3) {
            clone2 = new Blob([originFileObj], {
              type: originFileObj.type
            });
            clone2.name = originFileObj.name;
            clone2.lastModifiedDate = /* @__PURE__ */ new Date();
            clone2.lastModified = (/* @__PURE__ */ new Date()).getTime();
          }
          clone2.uid = fileObj.uid;
          triggerFileObj = clone2;
        } else {
          fileObj.status = "uploading";
        }
        onInternalChange(triggerFileObj, newFileList);
      });
    };
    var onSuccess = function onSuccess2(response, file, xhr) {
      try {
        if (typeof response === "string") {
          response = JSON.parse(response);
        }
      } catch (e3) {
      }
      if (!getFileItem(file, mergedFileList)) {
        return;
      }
      var targetItem = file2Obj(file);
      targetItem.status = "done";
      targetItem.percent = 100;
      targetItem.response = response;
      targetItem.xhr = xhr;
      var nextFileList = updateFileList(targetItem, mergedFileList);
      onInternalChange(targetItem, nextFileList);
    };
    var onProgress = function onProgress2(e3, file) {
      if (!getFileItem(file, mergedFileList)) {
        return;
      }
      var targetItem = file2Obj(file);
      targetItem.status = "uploading";
      targetItem.percent = e3.percent;
      var nextFileList = updateFileList(targetItem, mergedFileList);
      onInternalChange(targetItem, nextFileList, e3);
    };
    var onError = function onError2(error, response, file) {
      if (!getFileItem(file, mergedFileList)) {
        return;
      }
      var targetItem = file2Obj(file);
      targetItem.error = error;
      targetItem.response = response;
      targetItem.status = "error";
      var nextFileList = updateFileList(targetItem, mergedFileList);
      onInternalChange(targetItem, nextFileList);
    };
    var handleRemove = function handleRemove2(file) {
      var currentFile;
      Promise.resolve(typeof onRemove === "function" ? onRemove(file) : onRemove).then(function(ret) {
        var _a;
        if (ret === false) {
          return;
        }
        var removedFileList = removeFileItem(file, mergedFileList);
        if (removedFileList) {
          currentFile = _extends(_extends({}, file), {
            status: "removed"
          });
          mergedFileList === null || mergedFileList === void 0 ? void 0 : mergedFileList.forEach(function(item) {
            var matchKey = currentFile.uid !== void 0 ? "uid" : "name";
            if (item[matchKey] === currentFile[matchKey] && !Object.isFrozen(item)) {
              item.status = "removed";
            }
          });
          (_a = upload2.current) === null || _a === void 0 ? void 0 : _a.abort(currentFile);
          onInternalChange(currentFile, removedFileList);
        }
      });
    };
    var onFileDrop = function onFileDrop2(e3) {
      setDragState(e3.type);
      if (e3.type === "drop") {
        onDrop === null || onDrop === void 0 ? void 0 : onDrop(e3);
      }
    };
    React280.useImperativeHandle(ref, function() {
      return {
        onBatchStart,
        onSuccess,
        onProgress,
        onError,
        fileList: mergedFileList,
        upload: upload2.current
      };
    });
    var _React$useContext = React280.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var prefixCls = getPrefixCls("upload", customizePrefixCls);
    var rcUploadProps = _extends(_extends({
      onBatchStart,
      onError,
      onProgress,
      onSuccess
    }, props), {
      prefixCls,
      disabled: mergedDisabled,
      beforeUpload: mergedBeforeUpload,
      onChange: void 0
    });
    delete rcUploadProps.className;
    delete rcUploadProps.style;
    if (!children || mergedDisabled) {
      delete rcUploadProps.id;
    }
    var renderUploadList = function renderUploadList2(button, buttonVisible) {
      return showUploadList ? /* @__PURE__ */ React280.createElement(LocaleReceiver, {
        componentName: "Upload",
        defaultLocale: default_default.Upload
      }, function(contextLocale) {
        var _ref = typeof showUploadList === "boolean" ? {} : showUploadList, showRemoveIcon = _ref.showRemoveIcon, showPreviewIcon = _ref.showPreviewIcon, showDownloadIcon = _ref.showDownloadIcon, removeIcon = _ref.removeIcon, previewIcon = _ref.previewIcon, downloadIcon = _ref.downloadIcon;
        return /* @__PURE__ */ React280.createElement(UploadList_default, {
          prefixCls,
          listType,
          items: mergedFileList,
          previewFile,
          onPreview,
          onDownload,
          onRemove: handleRemove,
          showRemoveIcon: !mergedDisabled && showRemoveIcon,
          showPreviewIcon,
          showDownloadIcon,
          removeIcon,
          previewIcon,
          downloadIcon,
          iconRender,
          locale: _extends(_extends({}, contextLocale), propLocale),
          isImageUrl: isImageUrl3,
          progress,
          appendAction: button,
          appendActionVisible: buttonVisible,
          itemRender
        });
      }) : button;
    };
    if (type4 === "drag") {
      var _classNames;
      var dragCls = (0, import_classnames118.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-drag"), true), _defineProperty(_classNames, "".concat(prefixCls, "-drag-uploading"), mergedFileList.some(function(file) {
        return file.status === "uploading";
      })), _defineProperty(_classNames, "".concat(prefixCls, "-drag-hover"), dragState === "dragover"), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), mergedDisabled), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
      return /* @__PURE__ */ React280.createElement("span", null, /* @__PURE__ */ React280.createElement("div", {
        className: dragCls,
        onDrop: onFileDrop,
        onDragOver: onFileDrop,
        onDragLeave: onFileDrop,
        style: style2
      }, /* @__PURE__ */ React280.createElement(es_default21, _extends({}, rcUploadProps, {
        ref: upload2,
        className: "".concat(prefixCls, "-btn")
      }), /* @__PURE__ */ React280.createElement("div", {
        className: "".concat(prefixCls, "-drag-container")
      }, children))), renderUploadList());
    }
    var uploadButtonCls = (0, import_classnames118.default)(prefixCls, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-select"), true), _defineProperty(_classNames2, "".concat(prefixCls, "-select-").concat(listType), true), _defineProperty(_classNames2, "".concat(prefixCls, "-disabled"), mergedDisabled), _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames2));
    var renderUploadButton = function renderUploadButton2(uploadButtonStyle) {
      return /* @__PURE__ */ React280.createElement("div", {
        className: uploadButtonCls,
        style: uploadButtonStyle
      }, /* @__PURE__ */ React280.createElement(es_default21, _extends({}, rcUploadProps, {
        ref: upload2
      })));
    };
    var uploadButton = renderUploadButton(children ? void 0 : {
      display: "none"
    });
    if (listType === "picture-card") {
      return /* @__PURE__ */ React280.createElement("span", {
        className: (0, import_classnames118.default)("".concat(prefixCls, "-picture-card-wrapper"), className)
      }, renderUploadList(uploadButton, !!children));
    }
    return /* @__PURE__ */ React280.createElement("span", {
      className
    }, uploadButton, renderUploadList());
  };
  var Upload2 = /* @__PURE__ */ React280.forwardRef(InternalUpload);
  if (true) {
    Upload2.displayName = "Upload";
  }
  Upload2.defaultProps = {
    type: "select",
    multiple: false,
    action: "",
    data: {},
    accept: "",
    showUploadList: true,
    listType: "text",
    className: "",
    disabled: false,
    supportServerRender: true
  };
  var Upload_default2 = Upload2;

  // node_modules/antd/es/upload/Dragger.js
  var __rest49 = function(s2, e3) {
    var t3 = {};
    for (var p2 in s2) {
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t3[p2] = s2[p2];
    }
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t3[p2[i3]] = s2[p2[i3]];
      }
    return t3;
  };
  var InternalDragger = function InternalDragger2(_a, ref) {
    var style2 = _a.style, height = _a.height, restProps = __rest49(_a, ["style", "height"]);
    return /* @__PURE__ */ React281.createElement(Upload_default2, _extends({
      ref
    }, restProps, {
      type: "drag",
      style: _extends(_extends({}, style2), {
        height
      })
    }));
  };
  var Dragger = /* @__PURE__ */ React281.forwardRef(InternalDragger);
  if (true) {
    Dragger.displayName = "Dragger";
  }
  var Dragger_default = Dragger;

  // node_modules/antd/es/upload/index.js
  var Upload3 = Upload_default2;
  Upload3.Dragger = Dragger_default;
  Upload3.LIST_IGNORE = LIST_IGNORE;
  var upload_default = Upload3;

  // node_modules/axios/lib/helpers/bind.js
  function bind(fn, thisArg) {
    return function wrap() {
      return fn.apply(thisArg, arguments);
    };
  }

  // node_modules/axios/lib/utils.js
  var { toString } = Object.prototype;
  var { getPrototypeOf } = Object;
  var kindOf = ((cache) => (thing) => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  })(/* @__PURE__ */ Object.create(null));
  var kindOfTest = (type4) => {
    type4 = type4.toLowerCase();
    return (thing) => kindOf(thing) === type4;
  };
  var typeOfTest = (type4) => (thing) => typeof thing === type4;
  var { isArray } = Array;
  var isUndefined = typeOfTest("undefined");
  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
  }
  var isArrayBuffer = kindOfTest("ArrayBuffer");
  function isArrayBufferView(val) {
    let result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && isArrayBuffer(val.buffer);
    }
    return result;
  }
  var isString3 = typeOfTest("string");
  var isFunction = typeOfTest("function");
  var isNumber = typeOfTest("number");
  var isObject2 = (thing) => thing !== null && typeof thing === "object";
  var isBoolean = (thing) => thing === true || thing === false;
  var isPlainObject = (val) => {
    if (kindOf(val) !== "object") {
      return false;
    }
    const prototype3 = getPrototypeOf(val);
    return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
  };
  var isDate = kindOfTest("Date");
  var isFile = kindOfTest("File");
  var isBlob = kindOfTest("Blob");
  var isFileList = kindOfTest("FileList");
  var isStream = (val) => isObject2(val) && isFunction(val.pipe);
  var isFormData = (thing) => {
    const pattern4 = "[object FormData]";
    return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern4 || isFunction(thing.toString) && thing.toString() === pattern4);
  };
  var isURLSearchParams = kindOfTest("URLSearchParams");
  var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  function forEach(obj, fn, { allOwnKeys = false } = {}) {
    if (obj === null || typeof obj === "undefined") {
      return;
    }
    let i3;
    let l2;
    if (typeof obj !== "object") {
      obj = [obj];
    }
    if (isArray(obj)) {
      for (i3 = 0, l2 = obj.length; i3 < l2; i3++) {
        fn.call(null, obj[i3], i3, obj);
      }
    } else {
      const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
      const len = keys.length;
      let key2;
      for (i3 = 0; i3 < len; i3++) {
        key2 = keys[i3];
        fn.call(null, obj[key2], key2, obj);
      }
    }
  }
  function merge2() {
    const result = {};
    const assignValue = (val, key2) => {
      if (isPlainObject(result[key2]) && isPlainObject(val)) {
        result[key2] = merge2(result[key2], val);
      } else if (isPlainObject(val)) {
        result[key2] = merge2({}, val);
      } else if (isArray(val)) {
        result[key2] = val.slice();
      } else {
        result[key2] = val;
      }
    };
    for (let i3 = 0, l2 = arguments.length; i3 < l2; i3++) {
      arguments[i3] && forEach(arguments[i3], assignValue);
    }
    return result;
  }
  var extend = (a2, b2, thisArg, { allOwnKeys } = {}) => {
    forEach(b2, (val, key2) => {
      if (thisArg && isFunction(val)) {
        a2[key2] = bind(val, thisArg);
      } else {
        a2[key2] = val;
      }
    }, { allOwnKeys });
    return a2;
  };
  var stripBOM = (content) => {
    if (content.charCodeAt(0) === 65279) {
      content = content.slice(1);
    }
    return content;
  };
  var inherits = (constructor, superConstructor, props, descriptors2) => {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, "super", {
      value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
  };
  var toFlatObject = (sourceObj, destObj, filter4, propFilter) => {
    let props;
    let i3;
    let prop;
    const merged = {};
    destObj = destObj || {};
    if (sourceObj == null)
      return destObj;
    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i3 = props.length;
      while (i3-- > 0) {
        prop = props[i3];
        if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = filter4 !== false && getPrototypeOf(sourceObj);
    } while (sourceObj && (!filter4 || filter4(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
  };
  var endsWith = (str, searchString, position) => {
    str = String(str);
    if (position === void 0 || position > str.length) {
      position = str.length;
    }
    position -= searchString.length;
    const lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };
  var toArray6 = (thing) => {
    if (!thing)
      return null;
    if (isArray(thing))
      return thing;
    let i3 = thing.length;
    if (!isNumber(i3))
      return null;
    const arr = new Array(i3);
    while (i3-- > 0) {
      arr[i3] = thing[i3];
    }
    return arr;
  };
  var isTypedArray = ((TypedArray) => {
    return (thing) => {
      return TypedArray && thing instanceof TypedArray;
    };
  })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
  var forEachEntry = (obj, fn) => {
    const generator2 = obj && obj[Symbol.iterator];
    const iterator = generator2.call(obj);
    let result;
    while ((result = iterator.next()) && !result.done) {
      const pair = result.value;
      fn.call(obj, pair[0], pair[1]);
    }
  };
  var matchAll = (regExp, str) => {
    let matches;
    const arr = [];
    while ((matches = regExp.exec(str)) !== null) {
      arr.push(matches);
    }
    return arr;
  };
  var isHTMLForm = kindOfTest("HTMLFormElement");
  var toCamelCase = (str) => {
    return str.toLowerCase().replace(
      /[_-\s]([a-z\d])(\w*)/g,
      function replacer(m2, p1, p2) {
        return p1.toUpperCase() + p2;
      }
    );
  };
  var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
  var isRegExp = kindOfTest("RegExp");
  var reduceDescriptors = (obj, reducer) => {
    const descriptors2 = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};
    forEach(descriptors2, (descriptor, name5) => {
      if (reducer(descriptor, name5, obj) !== false) {
        reducedDescriptors[name5] = descriptor;
      }
    });
    Object.defineProperties(obj, reducedDescriptors);
  };
  var freezeMethods = (obj) => {
    reduceDescriptors(obj, (descriptor, name5) => {
      const value = obj[name5];
      if (!isFunction(value))
        return;
      descriptor.enumerable = false;
      if ("writable" in descriptor) {
        descriptor.writable = false;
        return;
      }
      if (!descriptor.set) {
        descriptor.set = () => {
          throw Error("Can not read-only method '" + name5 + "'");
        };
      }
    });
  };
  var toObjectSet = (arrayOrString, delimiter) => {
    const obj = {};
    const define2 = (arr) => {
      arr.forEach((value) => {
        obj[value] = true;
      });
    };
    isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
    return obj;
  };
  var noop4 = () => {
  };
  var toFiniteNumber = (value, defaultValue) => {
    value = +value;
    return Number.isFinite(value) ? value : defaultValue;
  };
  var utils_default = {
    isArray,
    isArrayBuffer,
    isBuffer,
    isFormData,
    isArrayBufferView,
    isString: isString3,
    isNumber,
    isBoolean,
    isObject: isObject2,
    isPlainObject,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isRegExp,
    isFunction,
    isStream,
    isURLSearchParams,
    isTypedArray,
    isFileList,
    forEach,
    merge: merge2,
    extend,
    trim,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray: toArray6,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty,
    hasOwnProp: hasOwnProperty,
    // an alias to avoid ESLint no-prototype-builtins detection
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop: noop4,
    toFiniteNumber
  };

  // node_modules/axios/lib/core/AxiosError.js
  function AxiosError(message, code6, config, request, response) {
    Error.call(this);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error().stack;
    }
    this.message = message;
    this.name = "AxiosError";
    code6 && (this.code = code6);
    config && (this.config = config);
    request && (this.request = request);
    response && (this.response = response);
  }
  utils_default.inherits(AxiosError, Error, {
    toJSON: function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: this.config,
        code: this.code,
        status: this.response && this.response.status ? this.response.status : null
      };
    }
  });
  var prototype = AxiosError.prototype;
  var descriptors = {};
  [
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED",
    "ERR_NOT_SUPPORT",
    "ERR_INVALID_URL"
    // eslint-disable-next-line func-names
  ].forEach((code6) => {
    descriptors[code6] = { value: code6 };
  });
  Object.defineProperties(AxiosError, descriptors);
  Object.defineProperty(prototype, "isAxiosError", { value: true });
  AxiosError.from = (error, code6, config, request, response, customProps) => {
    const axiosError = Object.create(prototype);
    utils_default.toFlatObject(error, axiosError, function filter4(obj) {
      return obj !== Error.prototype;
    }, (prop) => {
      return prop !== "isAxiosError";
    });
    AxiosError.call(axiosError, error.message, code6, config, request, response);
    axiosError.cause = error;
    axiosError.name = error.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
  };
  var AxiosError_default = AxiosError;

  // node_modules/axios/lib/env/classes/FormData.js
  var import_form_data = __toESM(require_browser(), 1);
  var FormData_default = import_form_data.default;

  // node_modules/axios/lib/helpers/toFormData.js
  function isVisitable(thing) {
    return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
  }
  function removeBrackets(key2) {
    return utils_default.endsWith(key2, "[]") ? key2.slice(0, -2) : key2;
  }
  function renderKey(path2, key2, dots) {
    if (!path2)
      return key2;
    return path2.concat(key2).map(function each2(token, i3) {
      token = removeBrackets(token);
      return !dots && i3 ? "[" + token + "]" : token;
    }).join(dots ? "." : "");
  }
  function isFlatArray(arr) {
    return utils_default.isArray(arr) && !arr.some(isVisitable);
  }
  var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter2(prop) {
    return /^is[A-Z]/.test(prop);
  });
  function isSpecCompliant(thing) {
    return thing && utils_default.isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator];
  }
  function toFormData(obj, formData, options) {
    if (!utils_default.isObject(obj)) {
      throw new TypeError("target must be an object");
    }
    formData = formData || new (FormData_default || FormData)();
    options = utils_default.toFlatObject(options, {
      metaTokens: true,
      dots: false,
      indexes: false
    }, false, function defined(option, source) {
      return !utils_default.isUndefined(source[option]);
    });
    const metaTokens = options.metaTokens;
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
    const useBlob = _Blob && isSpecCompliant(formData);
    if (!utils_default.isFunction(visitor)) {
      throw new TypeError("visitor must be a function");
    }
    function convertValue(value) {
      if (value === null)
        return "";
      if (utils_default.isDate(value)) {
        return value.toISOString();
      }
      if (!useBlob && utils_default.isBlob(value)) {
        throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
      }
      if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
        return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
      }
      return value;
    }
    function defaultVisitor(value, key2, path2) {
      let arr = value;
      if (value && !path2 && typeof value === "object") {
        if (utils_default.endsWith(key2, "{}")) {
          key2 = metaTokens ? key2 : key2.slice(0, -2);
          value = JSON.stringify(value);
        } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key2, "[]") && (arr = utils_default.toArray(value)))) {
          key2 = removeBrackets(key2);
          arr.forEach(function each2(el, index3) {
            !utils_default.isUndefined(el) && formData.append(
              // eslint-disable-next-line no-nested-ternary
              indexes === true ? renderKey([key2], index3, dots) : indexes === null ? key2 : key2 + "[]",
              convertValue(el)
            );
          });
          return false;
        }
      }
      if (isVisitable(value)) {
        return true;
      }
      formData.append(renderKey(path2, key2, dots), convertValue(value));
      return false;
    }
    const stack = [];
    const exposedHelpers = Object.assign(predicates, {
      defaultVisitor,
      convertValue,
      isVisitable
    });
    function build(value, path2) {
      if (utils_default.isUndefined(value))
        return;
      if (stack.indexOf(value) !== -1) {
        throw Error("Circular reference detected in " + path2.join("."));
      }
      stack.push(value);
      utils_default.forEach(value, function each2(el, key2) {
        const result = !utils_default.isUndefined(el) && visitor.call(
          formData,
          el,
          utils_default.isString(key2) ? key2.trim() : key2,
          path2,
          exposedHelpers
        );
        if (result === true) {
          build(el, path2 ? path2.concat(key2) : [key2]);
        }
      });
      stack.pop();
    }
    if (!utils_default.isObject(obj)) {
      throw new TypeError("data must be an object");
    }
    build(obj);
    return formData;
  }
  var toFormData_default = toFormData;

  // node_modules/axios/lib/helpers/AxiosURLSearchParams.js
  function encode(str) {
    const charMap = {
      "!": "%21",
      "'": "%27",
      "(": "%28",
      ")": "%29",
      "~": "%7E",
      "%20": "+",
      "%00": "\0"
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match2) {
      return charMap[match2];
    });
  }
  function AxiosURLSearchParams(params, options) {
    this._pairs = [];
    params && toFormData_default(params, this, options);
  }
  var prototype2 = AxiosURLSearchParams.prototype;
  prototype2.append = function append(name5, value) {
    this._pairs.push([name5, value]);
  };
  prototype2.toString = function toString2(encoder) {
    const _encode = encoder ? function(value) {
      return encoder.call(this, value, encode);
    } : encode;
    return this._pairs.map(function each2(pair) {
      return _encode(pair[0]) + "=" + _encode(pair[1]);
    }, "").join("&");
  };
  var AxiosURLSearchParams_default = AxiosURLSearchParams;

  // node_modules/axios/lib/helpers/buildURL.js
  function encode2(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  }
  function buildURL(url2, params, options) {
    if (!params) {
      return url2;
    }
    const hashmarkIndex = url2.indexOf("#");
    if (hashmarkIndex !== -1) {
      url2 = url2.slice(0, hashmarkIndex);
    }
    const _encode = options && options.encode || encode2;
    const serializerParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
    if (serializerParams) {
      url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializerParams;
    }
    return url2;
  }

  // node_modules/axios/lib/core/InterceptorManager.js
  var InterceptorManager = class {
    constructor() {
      this.handlers = [];
    }
    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    }
    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     *
     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
     */
    eject(id2) {
      if (this.handlers[id2]) {
        this.handlers[id2] = null;
      }
    }
    /**
     * Clear all interceptors from the stack
     *
     * @returns {void}
     */
    clear() {
      if (this.handlers) {
        this.handlers = [];
      }
    }
    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     *
     * @returns {void}
     */
    forEach(fn) {
      utils_default.forEach(this.handlers, function forEachHandler(h2) {
        if (h2 !== null) {
          fn(h2);
        }
      });
    }
  };
  var InterceptorManager_default = InterceptorManager;

  // node_modules/axios/lib/defaults/transitional.js
  var transitional_default = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };

  // node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
  var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

  // node_modules/axios/lib/platform/browser/classes/FormData.js
  var FormData_default2 = FormData;

  // node_modules/axios/lib/platform/browser/index.js
  var isStandardBrowserEnv = (() => {
    let product;
    if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) {
      return false;
    }
    return typeof window !== "undefined" && typeof document !== "undefined";
  })();
  var browser_default = {
    isBrowser: true,
    classes: {
      URLSearchParams: URLSearchParams_default,
      FormData: FormData_default2,
      Blob
    },
    isStandardBrowserEnv,
    protocols: ["http", "https", "file", "blob", "url", "data"]
  };

  // node_modules/axios/lib/helpers/toURLEncodedForm.js
  function toURLEncodedForm(data, options) {
    return toFormData_default(data, new browser_default.classes.URLSearchParams(), Object.assign({
      visitor: function(value, key2, path2, helpers) {
        if (browser_default.isNode && utils_default.isBuffer(value)) {
          this.append(key2, value.toString("base64"));
          return false;
        }
        return helpers.defaultVisitor.apply(this, arguments);
      }
    }, options));
  }

  // node_modules/axios/lib/helpers/formDataToJSON.js
  function parsePropPath(name5) {
    return utils_default.matchAll(/\w+|\[(\w*)]/g, name5).map((match2) => {
      return match2[0] === "[]" ? "" : match2[1] || match2[0];
    });
  }
  function arrayToObject(arr) {
    const obj = {};
    const keys = Object.keys(arr);
    let i3;
    const len = keys.length;
    let key2;
    for (i3 = 0; i3 < len; i3++) {
      key2 = keys[i3];
      obj[key2] = arr[key2];
    }
    return obj;
  }
  function formDataToJSON(formData) {
    function buildPath(path2, value, target, index3) {
      let name5 = path2[index3++];
      const isNumericKey = Number.isFinite(+name5);
      const isLast = index3 >= path2.length;
      name5 = !name5 && utils_default.isArray(target) ? target.length : name5;
      if (isLast) {
        if (utils_default.hasOwnProp(target, name5)) {
          target[name5] = [target[name5], value];
        } else {
          target[name5] = value;
        }
        return !isNumericKey;
      }
      if (!target[name5] || !utils_default.isObject(target[name5])) {
        target[name5] = [];
      }
      const result = buildPath(path2, value, target[name5], index3);
      if (result && utils_default.isArray(target[name5])) {
        target[name5] = arrayToObject(target[name5]);
      }
      return !isNumericKey;
    }
    if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
      const obj = {};
      utils_default.forEachEntry(formData, (name5, value) => {
        buildPath(parsePropPath(name5), value, obj, 0);
      });
      return obj;
    }
    return null;
  }
  var formDataToJSON_default = formDataToJSON;

  // node_modules/axios/lib/core/settle.js
  function settle(resolve5, reject, response) {
    const validateStatus2 = response.config.validateStatus;
    if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
      resolve5(response);
    } else {
      reject(new AxiosError_default(
        "Request failed with status code " + response.status,
        [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
        response.config,
        response.request,
        response
      ));
    }
  }

  // node_modules/axios/lib/helpers/cookies.js
  var cookies_default = browser_default.isStandardBrowserEnv ? (
    // Standard browser envs support document.cookie
    function standardBrowserEnv() {
      return {
        write: function write(name5, value, expires, path2, domain, secure) {
          const cookie = [];
          cookie.push(name5 + "=" + encodeURIComponent(value));
          if (utils_default.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils_default.isString(path2)) {
            cookie.push("path=" + path2);
          }
          if (utils_default.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read2(name5) {
          const match2 = document.cookie.match(new RegExp("(^|;\\s*)(" + name5 + ")=([^;]*)"));
          return match2 ? decodeURIComponent(match2[3]) : null;
        },
        remove: function remove(name5) {
          this.write(name5, "", Date.now() - 864e5);
        }
      };
    }()
  ) : (
    // Non standard browser env (web workers, react-native) lack needed support.
    function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read2() {
          return null;
        },
        remove: function remove() {
        }
      };
    }()
  );

  // node_modules/axios/lib/helpers/isAbsoluteURL.js
  function isAbsoluteURL(url2) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
  }

  // node_modules/axios/lib/helpers/combineURLs.js
  function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  }

  // node_modules/axios/lib/core/buildFullPath.js
  function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }

  // node_modules/axios/lib/helpers/isURLSameOrigin.js
  var isURLSameOrigin_default = browser_default.isStandardBrowserEnv ? (
    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
    function standardBrowserEnv2() {
      const msie = /(msie|trident)/i.test(navigator.userAgent);
      const urlParsingNode = document.createElement("a");
      let originURL;
      function resolveURL(url2) {
        let href = url2;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }()
  ) : (
    // Non standard browser envs (web workers, react-native) lack needed support.
    function nonStandardBrowserEnv2() {
      return function isURLSameOrigin() {
        return true;
      };
    }()
  );

  // node_modules/axios/lib/cancel/CanceledError.js
  function CanceledError(message, config, request) {
    AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
    this.name = "CanceledError";
  }
  utils_default.inherits(CanceledError, AxiosError_default, {
    __CANCEL__: true
  });
  var CanceledError_default = CanceledError;

  // node_modules/axios/lib/helpers/parseProtocol.js
  function parseProtocol(url2) {
    const match2 = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
    return match2 && match2[1] || "";
  }

  // node_modules/axios/lib/helpers/parseHeaders.js
  var ignoreDuplicateOf = utils_default.toObjectSet([
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ]);
  var parseHeaders_default = (rawHeaders) => {
    const parsed = {};
    let key2;
    let val;
    let i3;
    rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
      i3 = line.indexOf(":");
      key2 = line.substring(0, i3).trim().toLowerCase();
      val = line.substring(i3 + 1).trim();
      if (!key2 || parsed[key2] && ignoreDuplicateOf[key2]) {
        return;
      }
      if (key2 === "set-cookie") {
        if (parsed[key2]) {
          parsed[key2].push(val);
        } else {
          parsed[key2] = [val];
        }
      } else {
        parsed[key2] = parsed[key2] ? parsed[key2] + ", " + val : val;
      }
    });
    return parsed;
  };

  // node_modules/axios/lib/core/AxiosHeaders.js
  var $internals = Symbol("internals");
  var $defaults = Symbol("defaults");
  function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
  }
  function normalizeValue(value) {
    if (value === false || value == null) {
      return value;
    }
    return String(value);
  }
  function parseTokens(str) {
    const tokens = /* @__PURE__ */ Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match2;
    while (match2 = tokensRE.exec(str)) {
      tokens[match2[1]] = match2[2];
    }
    return tokens;
  }
  function matchHeaderValue(context, value, header, filter4) {
    if (utils_default.isFunction(filter4)) {
      return filter4.call(this, value, header);
    }
    if (!utils_default.isString(value))
      return;
    if (utils_default.isString(filter4)) {
      return value.indexOf(filter4) !== -1;
    }
    if (utils_default.isRegExp(filter4)) {
      return filter4.test(value);
    }
  }
  function formatHeader(header) {
    return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w2, char, str) => {
      return char.toUpperCase() + str;
    });
  }
  function buildAccessors(obj, header) {
    const accessorName = utils_default.toCamelCase(" " + header);
    ["get", "set", "has"].forEach((methodName) => {
      Object.defineProperty(obj, methodName + accessorName, {
        value: function(arg1, arg2, arg3) {
          return this[methodName].call(this, header, arg1, arg2, arg3);
        },
        configurable: true
      });
    });
  }
  function findKey(obj, key2) {
    key2 = key2.toLowerCase();
    const keys = Object.keys(obj);
    let i3 = keys.length;
    let _key;
    while (i3-- > 0) {
      _key = keys[i3];
      if (key2 === _key.toLowerCase()) {
        return _key;
      }
    }
    return null;
  }
  function AxiosHeaders(headers, defaults2) {
    headers && this.set(headers);
    this[$defaults] = defaults2 || null;
  }
  Object.assign(AxiosHeaders.prototype, {
    set: function(header, valueOrRewrite, rewrite) {
      const self2 = this;
      function setHeader(_value, _header, _rewrite) {
        const lHeader = normalizeHeader(_header);
        if (!lHeader) {
          throw new Error("header name must be a non-empty string");
        }
        const key2 = findKey(self2, lHeader);
        if (key2 && _rewrite !== true && (self2[key2] === false || _rewrite === false)) {
          return;
        }
        if (utils_default.isArray(_value)) {
          _value = _value.map(normalizeValue);
        } else {
          _value = normalizeValue(_value);
        }
        self2[key2 || _header] = _value;
      }
      if (utils_default.isPlainObject(header)) {
        utils_default.forEach(header, (_value, _header) => {
          setHeader(_value, _header, valueOrRewrite);
        });
      } else {
        setHeader(valueOrRewrite, header, rewrite);
      }
      return this;
    },
    get: function(header, parser) {
      header = normalizeHeader(header);
      if (!header)
        return void 0;
      const key2 = findKey(this, header);
      if (key2) {
        const value = this[key2];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key2);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    },
    has: function(header, matcher) {
      header = normalizeHeader(header);
      if (header) {
        const key2 = findKey(this, header);
        return !!(key2 && (!matcher || matchHeaderValue(this, this[key2], key2, matcher)));
      }
      return false;
    },
    delete: function(header, matcher) {
      const self2 = this;
      let deleted = false;
      function deleteHeader(_header) {
        _header = normalizeHeader(_header);
        if (_header) {
          const key2 = findKey(self2, _header);
          if (key2 && (!matcher || matchHeaderValue(self2, self2[key2], key2, matcher))) {
            delete self2[key2];
            deleted = true;
          }
        }
      }
      if (utils_default.isArray(header)) {
        header.forEach(deleteHeader);
      } else {
        deleteHeader(header);
      }
      return deleted;
    },
    clear: function() {
      return Object.keys(this).forEach(this.delete.bind(this));
    },
    normalize: function(format2) {
      const self2 = this;
      const headers = {};
      utils_default.forEach(this, (value, header) => {
        const key2 = findKey(headers, header);
        if (key2) {
          self2[key2] = normalizeValue(value);
          delete self2[header];
          return;
        }
        const normalized = format2 ? formatHeader(header) : String(header).trim();
        if (normalized !== header) {
          delete self2[header];
        }
        self2[normalized] = normalizeValue(value);
        headers[normalized] = true;
      });
      return this;
    },
    toJSON: function() {
      const obj = /* @__PURE__ */ Object.create(null);
      utils_default.forEach(
        Object.assign({}, this[$defaults] || null, this),
        (value, header) => {
          if (value == null || value === false)
            return;
          obj[header] = utils_default.isArray(value) ? value.join(", ") : value;
        }
      );
      return obj;
    }
  });
  Object.assign(AxiosHeaders, {
    from: function(thing) {
      if (utils_default.isString(thing)) {
        return new this(parseHeaders_default(thing));
      }
      return thing instanceof this ? thing : new this(thing);
    },
    accessor: function(header) {
      const internals = this[$internals] = this[$internals] = {
        accessors: {}
      };
      const accessors = internals.accessors;
      const prototype3 = this.prototype;
      function defineAccessor(_header) {
        const lHeader = normalizeHeader(_header);
        if (!accessors[lHeader]) {
          buildAccessors(prototype3, _header);
          accessors[lHeader] = true;
        }
      }
      utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
      return this;
    }
  });
  AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent"]);
  utils_default.freezeMethods(AxiosHeaders.prototype);
  utils_default.freezeMethods(AxiosHeaders);
  var AxiosHeaders_default = AxiosHeaders;

  // node_modules/axios/lib/helpers/speedometer.js
  function speedometer(samplesCount, min) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;
    min = min !== void 0 ? min : 1e3;
    return function push(chunkLength) {
      const now3 = Date.now();
      const startedAt = timestamps[tail];
      if (!firstSampleTS) {
        firstSampleTS = now3;
      }
      bytes[head] = chunkLength;
      timestamps[head] = now3;
      let i3 = tail;
      let bytesCount = 0;
      while (i3 !== head) {
        bytesCount += bytes[i3++];
        i3 = i3 % samplesCount;
      }
      head = (head + 1) % samplesCount;
      if (head === tail) {
        tail = (tail + 1) % samplesCount;
      }
      if (now3 - firstSampleTS < min) {
        return;
      }
      const passed = startedAt && now3 - startedAt;
      return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
    };
  }
  var speedometer_default = speedometer;

  // node_modules/axios/lib/adapters/xhr.js
  function progressEventReducer(listener, isDownloadStream) {
    let bytesNotified = 0;
    const _speedometer = speedometer_default(50, 250);
    return (e3) => {
      const loaded = e3.loaded;
      const total = e3.lengthComputable ? e3.total : void 0;
      const progressBytes = loaded - bytesNotified;
      const rate = _speedometer(progressBytes);
      const inRange = loaded <= total;
      bytesNotified = loaded;
      const data = {
        loaded,
        total,
        progress: total ? loaded / total : void 0,
        bytes: progressBytes,
        rate: rate ? rate : void 0,
        estimated: rate && total && inRange ? (total - loaded) / rate : void 0
      };
      data[isDownloadStream ? "download" : "upload"] = true;
      listener(data);
    };
  }
  function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve5, reject) {
      let requestData = config.data;
      const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
      const responseType = config.responseType;
      let onCanceled;
      function done() {
        if (config.cancelToken) {
          config.cancelToken.unsubscribe(onCanceled);
        }
        if (config.signal) {
          config.signal.removeEventListener("abort", onCanceled);
        }
      }
      if (utils_default.isFormData(requestData) && browser_default.isStandardBrowserEnv) {
        requestHeaders.setContentType(false);
      }
      let request = new XMLHttpRequest();
      if (config.auth) {
        const username = config.auth.username || "";
        const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
        requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
      }
      const fullPath = buildFullPath(config.baseURL, config.url);
      request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
      request.timeout = config.timeout;
      function onloadend() {
        if (!request) {
          return;
        }
        const responseHeaders = AxiosHeaders_default.from(
          "getAllResponseHeaders" in request && request.getAllResponseHeaders()
        );
        const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
        const response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config,
          request
        };
        settle(function _resolve(value) {
          resolve5(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);
        request = null;
      }
      if ("onloadend" in request) {
        request.onloadend = onloadend;
      } else {
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
            return;
          }
          setTimeout(onloadend);
        };
      }
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }
        reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
        request = null;
      };
      request.onerror = function handleError() {
        reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
        request = null;
      };
      request.ontimeout = function handleTimeout() {
        let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
        const transitional2 = config.transitional || transitional_default;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(new AxiosError_default(
          timeoutErrorMessage,
          transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
          config,
          request
        ));
        request = null;
      };
      if (browser_default.isStandardBrowserEnv) {
        const xsrfValue = (config.withCredentials || isURLSameOrigin_default(fullPath)) && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
        if (xsrfValue) {
          requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
      }
      requestData === void 0 && requestHeaders.setContentType(null);
      if ("setRequestHeader" in request) {
        utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key2) {
          request.setRequestHeader(key2, val);
        });
      }
      if (!utils_default.isUndefined(config.withCredentials)) {
        request.withCredentials = !!config.withCredentials;
      }
      if (responseType && responseType !== "json") {
        request.responseType = config.responseType;
      }
      if (typeof config.onDownloadProgress === "function") {
        request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
      }
      if (typeof config.onUploadProgress === "function" && request.upload) {
        request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
      }
      if (config.cancelToken || config.signal) {
        onCanceled = (cancel2) => {
          if (!request) {
            return;
          }
          reject(!cancel2 || cancel2.type ? new CanceledError_default(null, config, request) : cancel2);
          request.abort();
          request = null;
        };
        config.cancelToken && config.cancelToken.subscribe(onCanceled);
        if (config.signal) {
          config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
        }
      }
      const protocol = parseProtocol(fullPath);
      if (protocol && browser_default.protocols.indexOf(protocol) === -1) {
        reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
        return;
      }
      request.send(requestData || null);
    });
  }

  // node_modules/axios/lib/adapters/index.js
  var adapters = {
    http: xhrAdapter,
    xhr: xhrAdapter
  };
  var adapters_default = {
    getAdapter: (nameOrAdapter) => {
      if (utils_default.isString(nameOrAdapter)) {
        const adapter = adapters[nameOrAdapter];
        if (!nameOrAdapter) {
          throw Error(
            utils_default.hasOwnProp(nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Can not resolve adapter '${nameOrAdapter}'`
          );
        }
        return adapter;
      }
      if (!utils_default.isFunction(nameOrAdapter)) {
        throw new TypeError("adapter is not a function");
      }
      return nameOrAdapter;
    },
    adapters
  };

  // node_modules/axios/lib/defaults/index.js
  var DEFAULT_CONTENT_TYPE = {
    "Content-Type": "application/x-www-form-urlencoded"
  };
  function getDefaultAdapter() {
    let adapter;
    if (typeof XMLHttpRequest !== "undefined") {
      adapter = adapters_default.getAdapter("xhr");
    } else if (typeof process !== "undefined" && utils_default.kindOf(process) === "process") {
      adapter = adapters_default.getAdapter("http");
    }
    return adapter;
  }
  function stringifySafely(rawValue, parser, encoder) {
    if (utils_default.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils_default.trim(rawValue);
      } catch (e3) {
        if (e3.name !== "SyntaxError") {
          throw e3;
        }
      }
    }
    return (encoder || JSON.stringify)(rawValue);
  }
  var defaults = {
    transitional: transitional_default,
    adapter: getDefaultAdapter(),
    transformRequest: [function transformRequest(data, headers) {
      const contentType = headers.getContentType() || "";
      const hasJSONContentType = contentType.indexOf("application/json") > -1;
      const isObjectPayload = utils_default.isObject(data);
      if (isObjectPayload && utils_default.isHTMLForm(data)) {
        data = new FormData(data);
      }
      const isFormData2 = utils_default.isFormData(data);
      if (isFormData2) {
        if (!hasJSONContentType) {
          return data;
        }
        return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
      }
      if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
        return data;
      }
      if (utils_default.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils_default.isURLSearchParams(data)) {
        headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
        return data.toString();
      }
      let isFileList2;
      if (isObjectPayload) {
        if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
          return toURLEncodedForm(data, this.formSerializer).toString();
        }
        if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
          const _FormData = this.env && this.env.FormData;
          return toFormData_default(
            isFileList2 ? { "files[]": data } : data,
            _FormData && new _FormData(),
            this.formSerializer
          );
        }
      }
      if (isObjectPayload || hasJSONContentType) {
        headers.setContentType("application/json", false);
        return stringifySafely(data);
      }
      return data;
    }],
    transformResponse: [function transformResponse(data) {
      const transitional2 = this.transitional || defaults.transitional;
      const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
      const JSONRequested = this.responseType === "json";
      if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
        const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
        const strictJSONParsing = !silentJSONParsing && JSONRequested;
        try {
          return JSON.parse(data);
        } catch (e3) {
          if (strictJSONParsing) {
            if (e3.name === "SyntaxError") {
              throw AxiosError_default.from(e3, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e3;
          }
        }
      }
      return data;
    }],
    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: browser_default.classes.FormData,
      Blob: browser_default.classes.Blob
    },
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
    headers: {
      common: {
        "Accept": "application/json, text/plain, */*"
      }
    }
  };
  utils_default.forEach(["delete", "get", "head"], function forEachMethodNoData(method4) {
    defaults.headers[method4] = {};
  });
  utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method4) {
    defaults.headers[method4] = utils_default.merge(DEFAULT_CONTENT_TYPE);
  });
  var defaults_default = defaults;

  // node_modules/axios/lib/core/transformData.js
  function transformData(fns, response) {
    const config = this || defaults_default;
    const context = response || config;
    const headers = AxiosHeaders_default.from(context.headers);
    let data = context.data;
    utils_default.forEach(fns, function transform2(fn) {
      data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
    });
    headers.normalize();
    return data;
  }

  // node_modules/axios/lib/cancel/isCancel.js
  function isCancel(value) {
    return !!(value && value.__CANCEL__);
  }

  // node_modules/axios/lib/core/dispatchRequest.js
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
    if (config.signal && config.signal.aborted) {
      throw new CanceledError_default();
    }
  }
  function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    config.headers = AxiosHeaders_default.from(config.headers);
    config.data = transformData.call(
      config,
      config.transformRequest
    );
    const adapter = config.adapter || defaults_default.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);
      response.data = transformData.call(
        config,
        config.transformResponse,
        response
      );
      response.headers = AxiosHeaders_default.from(response.headers);
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config,
            config.transformResponse,
            reason.response
          );
          reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
        }
      }
      return Promise.reject(reason);
    });
  }

  // node_modules/axios/lib/core/mergeConfig.js
  function mergeConfig(config1, config2) {
    config2 = config2 || {};
    const config = {};
    function getMergedValue(target, source) {
      if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
        return utils_default.merge(target, source);
      } else if (utils_default.isPlainObject(source)) {
        return utils_default.merge({}, source);
      } else if (utils_default.isArray(source)) {
        return source.slice();
      }
      return source;
    }
    function mergeDeepProperties(prop) {
      if (!utils_default.isUndefined(config2[prop])) {
        return getMergedValue(config1[prop], config2[prop]);
      } else if (!utils_default.isUndefined(config1[prop])) {
        return getMergedValue(void 0, config1[prop]);
      }
    }
    function valueFromConfig2(prop) {
      if (!utils_default.isUndefined(config2[prop])) {
        return getMergedValue(void 0, config2[prop]);
      }
    }
    function defaultToConfig2(prop) {
      if (!utils_default.isUndefined(config2[prop])) {
        return getMergedValue(void 0, config2[prop]);
      } else if (!utils_default.isUndefined(config1[prop])) {
        return getMergedValue(void 0, config1[prop]);
      }
    }
    function mergeDirectKeys(prop) {
      if (prop in config2) {
        return getMergedValue(config1[prop], config2[prop]);
      } else if (prop in config1) {
        return getMergedValue(void 0, config1[prop]);
      }
    }
    const mergeMap = {
      "url": valueFromConfig2,
      "method": valueFromConfig2,
      "data": valueFromConfig2,
      "baseURL": defaultToConfig2,
      "transformRequest": defaultToConfig2,
      "transformResponse": defaultToConfig2,
      "paramsSerializer": defaultToConfig2,
      "timeout": defaultToConfig2,
      "timeoutMessage": defaultToConfig2,
      "withCredentials": defaultToConfig2,
      "adapter": defaultToConfig2,
      "responseType": defaultToConfig2,
      "xsrfCookieName": defaultToConfig2,
      "xsrfHeaderName": defaultToConfig2,
      "onUploadProgress": defaultToConfig2,
      "onDownloadProgress": defaultToConfig2,
      "decompress": defaultToConfig2,
      "maxContentLength": defaultToConfig2,
      "maxBodyLength": defaultToConfig2,
      "beforeRedirect": defaultToConfig2,
      "transport": defaultToConfig2,
      "httpAgent": defaultToConfig2,
      "httpsAgent": defaultToConfig2,
      "cancelToken": defaultToConfig2,
      "socketPath": defaultToConfig2,
      "responseEncoding": defaultToConfig2,
      "validateStatus": mergeDirectKeys
    };
    utils_default.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
      const merge3 = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge3(prop);
      utils_default.isUndefined(configValue) && merge3 !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
  }

  // node_modules/axios/lib/env/data.js
  var VERSION = "1.1.2";

  // node_modules/axios/lib/helpers/validator.js
  var validators2 = {};
  ["object", "boolean", "number", "function", "string", "symbol"].forEach((type4, i3) => {
    validators2[type4] = function validator(thing) {
      return typeof thing === type4 || "a" + (i3 < 1 ? "n " : " ") + type4;
    };
  });
  var deprecatedWarnings = {};
  validators2.transitional = function transitional(validator, version3, message) {
    function formatMessage(opt, desc) {
      return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    return (value, opt, opts) => {
      if (validator === false) {
        throw new AxiosError_default(
          formatMessage(opt, " has been removed" + (version3 ? " in " + version3 : "")),
          AxiosError_default.ERR_DEPRECATED
        );
      }
      if (version3 && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        console.warn(
          formatMessage(
            opt,
            " has been deprecated since v" + version3 + " and will be removed in the near future"
          )
        );
      }
      return validator ? validator(value, opt, opts) : true;
    };
  };
  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") {
      throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
    }
    const keys = Object.keys(options);
    let i3 = keys.length;
    while (i3-- > 0) {
      const opt = keys[i3];
      const validator = schema[opt];
      if (validator) {
        const value = options[opt];
        const result = value === void 0 || validator(value, opt, options);
        if (result !== true) {
          throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
      }
    }
  }
  var validator_default = {
    assertOptions,
    validators: validators2
  };

  // node_modules/axios/lib/core/Axios.js
  var validators3 = validator_default.validators;
  var Axios = class {
    constructor(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_default(),
        response: new InterceptorManager_default()
      };
    }
    /**
     * Dispatch a request
     *
     * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
     * @param {?Object} config
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      const transitional2 = config.transitional;
      if (transitional2 !== void 0) {
        validator_default.assertOptions(transitional2, {
          silentJSONParsing: validators3.transitional(validators3.boolean),
          forcedJSONParsing: validators3.transitional(validators3.boolean),
          clarifyTimeoutError: validators3.transitional(validators3.boolean)
        }, false);
      }
      config.method = (config.method || this.defaults.method || "get").toLowerCase();
      const defaultHeaders = config.headers && utils_default.merge(
        config.headers.common,
        config.headers[config.method]
      );
      defaultHeaders && utils_default.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method4) {
          delete config.headers[method4];
        }
      );
      config.headers = new AxiosHeaders_default(config.headers, defaultHeaders);
      const requestInterceptorChain = [];
      let synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      const responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      let promise;
      let i3 = 0;
      let len;
      if (!synchronousRequestInterceptors) {
        const chain = [dispatchRequest.bind(this), void 0];
        chain.unshift.apply(chain, requestInterceptorChain);
        chain.push.apply(chain, responseInterceptorChain);
        len = chain.length;
        promise = Promise.resolve(config);
        while (i3 < len) {
          promise = promise.then(chain[i3++], chain[i3++]);
        }
        return promise;
      }
      len = requestInterceptorChain.length;
      let newConfig = config;
      i3 = 0;
      while (i3 < len) {
        const onFulfilled = requestInterceptorChain[i3++];
        const onRejected = requestInterceptorChain[i3++];
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected.call(this, error);
          break;
        }
      }
      try {
        promise = dispatchRequest.call(this, newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      i3 = 0;
      len = responseInterceptorChain.length;
      while (i3 < len) {
        promise = promise.then(responseInterceptorChain[i3++], responseInterceptorChain[i3++]);
      }
      return promise;
    }
    getUri(config) {
      config = mergeConfig(this.defaults, config);
      const fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    }
  };
  utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method4) {
    Axios.prototype[method4] = function(url2, config) {
      return this.request(mergeConfig(config || {}, {
        method: method4,
        url: url2,
        data: (config || {}).data
      }));
    };
  });
  utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData2(method4) {
    function generateHTTPMethod(isForm) {
      return function httpMethod(url2, data, config) {
        return this.request(mergeConfig(config || {}, {
          method: method4,
          headers: isForm ? {
            "Content-Type": "multipart/form-data"
          } : {},
          url: url2,
          data
        }));
      };
    }
    Axios.prototype[method4] = generateHTTPMethod();
    Axios.prototype[method4 + "Form"] = generateHTTPMethod(true);
  });
  var Axios_default = Axios;

  // node_modules/axios/lib/cancel/CancelToken.js
  var CancelToken = class {
    constructor(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      let resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve5) {
        resolvePromise = resolve5;
      });
      const token = this;
      this.promise.then((cancel2) => {
        if (!token._listeners)
          return;
        let i3 = token._listeners.length;
        while (i3-- > 0) {
          token._listeners[i3](cancel2);
        }
        token._listeners = null;
      });
      this.promise.then = (onfulfilled) => {
        let _resolve;
        const promise = new Promise((resolve5) => {
          token.subscribe(resolve5);
          _resolve = resolve5;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel2(message, config, request) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError_default(message, config, request);
        resolvePromise(token.reason);
      });
    }
    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }
    /**
     * Subscribe to the cancel signal
     */
    subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    }
    /**
     * Unsubscribe from the cancel signal
     */
    unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      const index3 = this._listeners.indexOf(listener);
      if (index3 !== -1) {
        this._listeners.splice(index3, 1);
      }
    }
    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    static source() {
      let cancel2;
      const token = new CancelToken(function executor(c2) {
        cancel2 = c2;
      });
      return {
        token,
        cancel: cancel2
      };
    }
  };
  var CancelToken_default = CancelToken;

  // node_modules/axios/lib/helpers/spread.js
  function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  }

  // node_modules/axios/lib/helpers/isAxiosError.js
  function isAxiosError(payload) {
    return utils_default.isObject(payload) && payload.isAxiosError === true;
  }

  // node_modules/axios/lib/axios.js
  function createInstance(defaultConfig) {
    const context = new Axios_default(defaultConfig);
    const instance = bind(Axios_default.prototype.request, context);
    utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
    utils_default.extend(instance, context, null, { allOwnKeys: true });
    instance.create = function create5(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
  }
  var axios = createInstance(defaults_default);
  axios.Axios = Axios_default;
  axios.CanceledError = CanceledError_default;
  axios.CancelToken = CancelToken_default;
  axios.isCancel = isCancel;
  axios.VERSION = VERSION;
  axios.toFormData = toFormData_default;
  axios.AxiosError = AxiosError_default;
  axios.Cancel = axios.CanceledError;
  axios.all = function all(promises) {
    return Promise.all(promises);
  };
  axios.spread = spread;
  axios.isAxiosError = isAxiosError;
  axios.formToJSON = (thing) => {
    return formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
  };
  var axios_default = axios;

  // node_modules/axios/index.js
  var axios_default2 = axios_default;

  // src/utils/index.js
  function subgraphQuery(query) {
    return __async(this, null, function* () {
      try {
        const SUBGRAPH_URL = "https://api.thegraph.com/subgraphs/name/venkatteja/vigilancedao";
        const response = yield axios_default2.post(SUBGRAPH_URL, {
          query
        });
        if (response.data.errors) {
          console.error(response.data.errors);
          throw new Error(`Error making subgraph query ${response.data.errors}`);
        }
        return response.data.data;
      } catch (error) {
        console.error(error);
        throw new Error(`Could not query the subgraph ${error.message}`);
      }
    });
  }

  // src/queries/index.js
  function FETCH_REPORTS(count2, address) {
    return `query {
        reports(first: ${count2}, where: {reporter: "${address}"}) {
            id
            isScam
            reporter
            comments
            evidences
            createdon
            domain
            rewardAmount
            stakeAmount
            status
            updatedon
            validator
            validatorComments
          }
      }`;
  }
  function FETCH_REPORTS_BY_DOMAIN(domain) {
    return `query {
        reports(
            orderBy: id
            orderDirection: desc
            where: {domain: "${domain}"}
        ){
            id
            createdon
            comments
            evidences
            domain
            isScam
            reporter
            rewardAmount
            status
            stakeAmount
            updatedon
            validator
            validatorComments
        }
    }`;
  }

  // src/App.tsx
  var import_metamask = __toESM(require_dist3());
  var import_core = __toESM(require_dist5());

  // src/services/web3.hook.ts
  var import_react75 = __toESM(require_react());
  var FOR_DEVELOPMENT = {
    domainInfo: {
      domain: "google.com",
      registeredOn: 0,
      status: {
        message: "Meant for testing",
        type: "warning",
        description: ""
      },
      loading: false
    },
    account: {
      account: "0x6426114c0C3531D90Ed8B9f7c09A0dc115F4aaee",
      loading: false
    }
  };
  function useWeb3Hook() {
    const [account, setAccount] = (0, import_react75.useState)({
      loading: false,
      account: ""
    });
    const [chainId, setChainId] = (0, import_react75.useState)({
      chainId: parseInt(process.env.REACT_APP_DEFAULT_NETWORK),
      loading: false
    });
    const [reportTxInfo, setReportTxInfo] = (0, import_react75.useState)({
      txHash: "",
      isSuccess: false,
      error: null,
      loading: false
    });
    const [stakeETH, setStakeETH] = (0, import_react75.useState)({
      stakeETH: 0,
      loading: false
    });
    const [domainInfo, setDomainInfo] = (0, import_react75.useState)({
      domain: "",
      registeredOn: 0,
      status: {
        message: "Loading...",
        type: "warning",
        description: ""
      },
      loading: true
    });
    function sendMessage(type4, data = {}) {
      if (chrome && chrome.runtime) {
        console.log("send message", type4, data);
        chrome.runtime.sendMessage({ type: type4, data });
      } else {
        console.warn("no chrome to send message");
      }
    }
    function activateListeners() {
      if (chrome && chrome.runtime) {
        chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
          console.log("react on message", msg, sender);
          if (msg && msg.type == "wallet-connected") {
            console.log("react on message2", msg, sender);
            let account2 = msg.data.account;
            setAccount({ account: account2, loading: false });
          } else if (msg && msg.type == "chainID") {
            let chainId2 = msg.data.chainId;
            setChainId({
              chainId: chainId2,
              loading: false
            });
          } else if (msg && msg.type == "transaction-update") {
            setReportTxInfo({
              txHash: msg.data.txHash,
              isSuccess: msg.data.isSuccess,
              error: msg.data.error,
              loading: false
            });
          } else if (msg && msg.type == "stake-amount") {
            setStakeETH({
              stakeETH: msg.data.stakeAmount,
              loading: false
            });
          } else if (msg && msg.type == "domain") {
            setDomainInfo({
              domain: msg.data.domain,
              registeredOn: msg.data.createdOn,
              status: {
                message: msg.data.msg,
                type: msg.data.type,
                description: msg.data.description
              },
              loading: false
            });
          }
        });
      }
    }
    (0, import_react75.useEffect)(() => {
      if (window.location.hostname == "localhost") {
        setDomainInfo(FOR_DEVELOPMENT.domainInfo);
        setAccount(FOR_DEVELOPMENT.account);
      }
    }, []);
    function connectWallet() {
      setAccount({ account: "", loading: true });
      sendMessage("connect-wallet", {
        chainID: chainId
      });
    }
    function switchNetwork(chainId2 = parseInt(process.env.REACT_APP_DEFAULT_NETWORK)) {
      setChainId({
        chainId: 0,
        loading: true
      });
      sendMessage("switch-network", {
        chainID: chainId2
      });
    }
    function submitReport(isFraud, imageUrls, comments, stakeETH2) {
      setReportTxInfo({
        txHash: "",
        isSuccess: false,
        error: null,
        loading: true
      });
      sendMessage("submit-report", {
        isFraud,
        imageUrls,
        comments,
        stakeETH: stakeETH2
      });
    }
    function getStakeAmount() {
      setStakeETH({
        stakeETH: 0,
        loading: true
      });
      sendMessage("get-stake-amount", {});
    }
    return {
      account,
      chainId,
      stakeETH,
      reportTxInfo,
      domainInfo,
      connectWallet,
      switchNetwork,
      submitReport,
      getStakeAmount,
      activateListeners
    };
  }
  var chainInfo = [
    //     {
    //     chainId: 137,
    //     fullName: 'Polygon Mainnet',
    //     shortName: 'Mainnet',
    //     explorer: 'https://polygonscan.com'
    // }, 
    {
      chainId: 80001,
      fullName: "Polygon Mumbai",
      shortName: "Mumbai",
      explorer: "https://mumbai.polygonscan.com"
    }
  ];

  // node_modules/@ant-design/icons/es/icons/CaretRightOutlined.js
  var React282 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CaretRightOutlined.js
  var CaretRightOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M715.8 493.5L335 165.1c-14.2-12.2-35-1.2-35 18.5v656.8c0 19.7 20.8 30.7 35 18.5l380.8-328.4c10.9-9.4 10.9-27.6 0-37z" } }] }, "name": "caret-right", "theme": "outlined" };
  var CaretRightOutlined_default = CaretRightOutlined;

  // node_modules/@ant-design/icons/es/icons/CaretRightOutlined.js
  var CaretRightOutlined2 = function CaretRightOutlined3(props, ref) {
    return /* @__PURE__ */ React282.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CaretRightOutlined_default
    }));
  };
  CaretRightOutlined2.displayName = "CaretRightOutlined";
  var CaretRightOutlined_default2 = /* @__PURE__ */ React282.forwardRef(CaretRightOutlined2);

  // node_modules/@ant-design/icons/es/icons/ExpandOutlined.js
  var React283 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/ExpandOutlined.js
  var ExpandOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "defs", "attrs": {}, "children": [{ "tag": "style", "attrs": {} }] }, { "tag": "path", "attrs": { "d": "M342 88H120c-17.7 0-32 14.3-32 32v224c0 8.8 7.2 16 16 16h48c8.8 0 16-7.2 16-16V168h174c8.8 0 16-7.2 16-16v-48c0-8.8-7.2-16-16-16zm578 576h-48c-8.8 0-16 7.2-16 16v176H682c-8.8 0-16 7.2-16 16v48c0 8.8 7.2 16 16 16h222c17.7 0 32-14.3 32-32V680c0-8.8-7.2-16-16-16zM342 856H168V680c0-8.8-7.2-16-16-16h-48c-8.8 0-16 7.2-16 16v224c0 17.7 14.3 32 32 32h222c8.8 0 16-7.2 16-16v-48c0-8.8-7.2-16-16-16zM904 88H682c-8.8 0-16 7.2-16 16v48c0 8.8 7.2 16 16 16h174v176c0 8.8 7.2 16 16 16h48c8.8 0 16-7.2 16-16V120c0-17.7-14.3-32-32-32z" } }] }, "name": "expand", "theme": "outlined" };
  var ExpandOutlined_default = ExpandOutlined;

  // node_modules/@ant-design/icons/es/icons/ExpandOutlined.js
  var ExpandOutlined2 = function ExpandOutlined3(props, ref) {
    return /* @__PURE__ */ React283.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: ExpandOutlined_default
    }));
  };
  ExpandOutlined2.displayName = "ExpandOutlined";
  var ExpandOutlined_default2 = /* @__PURE__ */ React283.forwardRef(ExpandOutlined2);

  // node_modules/@ant-design/icons/es/icons/UploadOutlined.js
  var React284 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/UploadOutlined.js
  var UploadOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M400 317.7h73.9V656c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V317.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 163a8 8 0 00-12.6 0l-112 141.7c-4.1 5.3-.4 13 6.3 13zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z" } }] }, "name": "upload", "theme": "outlined" };
  var UploadOutlined_default = UploadOutlined;

  // node_modules/@ant-design/icons/es/icons/UploadOutlined.js
  var UploadOutlined2 = function UploadOutlined3(props, ref) {
    return /* @__PURE__ */ React284.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: UploadOutlined_default
    }));
  };
  UploadOutlined2.displayName = "UploadOutlined";
  var UploadOutlined_default2 = /* @__PURE__ */ React284.forwardRef(UploadOutlined2);

  // src/components/DomainHistory.tsx
  var import_react76 = __toESM(require_react());
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  function DomainHistory() {
    const { web3Hooks } = (0, import_react76.useContext)(Context3);
    const { domainInfo } = web3Hooks;
    const { Step: Step2 } = steps_default;
    const [history, setHistory] = (0, import_react76.useState)([]);
    const [loading, setLoading] = (0, import_react76.useState)(true);
    const getStatus = () => __async(this, null, function* () {
      const data = yield subgraphQuery(FETCH_REPORTS_BY_DOMAIN(domainInfo.domain));
      let reports = data.reports;
      let _history = [];
      for (let i3 = 0; i3 < reports.length; ++i3) {
        let report = reports[i3];
        let status = "process";
        let title = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("b", { style: { color: "#ff9900" }, children: "Awaiting validation" });
        let description = /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("b", { children: "Report ID:" }),
          " ",
          report.id,
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("br", {}),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("b", { children: "Created on:" }),
          " ",
          new Date(report.createdon * 1e3).toLocaleDateString()
        ] });
        let icon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ExclamationCircleOutlined_default2, { style: { color: "#ff9900" } });
        if (report.status == "ACCEPTED") {
          status = "finish";
          title = report.isScam ? "Marked scam" : "Marked legit";
        } else if (report.status == "REJECTED") {
          status = "error";
          title = report.isScam ? "Scam report rejected" : "Legit report rejected";
        }
        let _his = {
          title,
          subTitle: "",
          icon,
          status,
          description
        };
        _history.push(_his);
      }
      setHistory(_history);
      setLoading(false);
    });
    (0, import_react76.useEffect)(() => {
      getStatus();
    }, []);
    function getHistoryElements() {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(steps_default, { direction: "vertical", current: 0, children: history.map(
        (_historyItem, index3) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          Step2,
          {
            title: _historyItem.title,
            icon: _historyItem.icon,
            status: _historyItem.status,
            subTitle: _historyItem.subTitle,
            description: _historyItem.description
          },
          index3
        )
      ) });
    }
    function noHistoryElement() {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(empty_default2, { description: "No history of reports" });
    }
    return loading ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(spin_default, {}) : history.length ? getHistoryElements() : noHistoryElement();
  }

  // src/components/Network.tsx
  var import_react77 = __toESM(require_react());
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  function NetworkSelector() {
    const { web3Hooks } = (0, import_react77.useContext)(Context3);
    const { account, chainId, switchNetwork } = web3Hooks;
    const [network, setNetwork] = (0, import_react77.useState)("Mumbai");
    let defaultChainId = parseInt(process.env.REACT_APP_DEFAULT_NETWORK);
    const [selectedChainId, setSelectedChainId] = (0, import_react77.useState)(chainId.chainId || defaultChainId);
    function onNetworkChange(_network) {
      let _chainInfo = chainInfo.find((item) => {
        return item.fullName == _network;
      });
      if (_chainInfo) {
        switchNetwork(_chainInfo.chainId);
        setSelectedChainId(_chainInfo.chainId);
      } else {
        alert("Chain not found");
      }
    }
    let supportedChains = process.env.REACT_APP_SUPPORTED_NETWORKS.split(",").map((i3) => parseInt(i3));
    let items = chainInfo.filter((item) => supportedChains.includes(item.chainId)).map((item) => {
      return {
        key: item.shortName,
        label: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", { onClick: () => onNetworkChange(item.fullName), children: item.fullName })
      };
    });
    const [menuItems, setMenuItems] = (0, import_react77.useState)(items);
    function disconnect() {
      if (metamaskConnector.deactivate)
        metamaskConnector.deactivate();
      else
        metamaskConnector.resetState();
    }
    (0, import_react77.useEffect)(() => {
      console.log("network selector", account, chainId);
      if (account.account) {
        let len = account.account.length;
        let network2 = chainInfo.find((item) => item.chainId == chainId.chainId);
        setNetwork(`${account.account.substring(0, 3)}...${account.account.substring(len - 3, len)} | ${network2 == null ? void 0 : network2.shortName}`);
        if (items.length == 2) {
          items.push({
            type: "divider"
          });
          items.push({
            key: "disconnect",
            label: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", { onClick: disconnect, children: "Disconnect" })
          });
          setMenuItems(items);
        }
      } else {
        if (items.length == 4) {
          items.splice(2, 2);
          setMenuItems(items);
        }
        let network2 = chainInfo.find((item) => item.chainId == selectedChainId);
        setNetwork(`${network2 == null ? void 0 : network2.shortName}`);
      }
    }, [account, chainId]);
    const menu = /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      menu_default,
      {
        items: menuItems
      }
    );
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(dropdown_default2, { overlay: menu, children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      button_default2,
      {
        type: "primary",
        value: "small",
        shape: "round",
        onClick: (e3) => e3.preventDefault(),
        children: /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(space_default, { children: [
          network,
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(DownOutlined_default2, {})
        ] })
      }
    ) });
  }
  var Network_default = NetworkSelector;

  // src/components/ReviewForm.tsx
  var import_react79 = __toESM(require_react());

  // src/components/Evidence.tsx
  var import_react78 = __toESM(require_react());

  // node_modules/streaming-iterables/dist/index.mjs
  var TIMEOUT = Symbol("TIMEOUT");
  function getIterator(iterable) {
    if (typeof iterable.next === "function") {
      return iterable;
    }
    if (typeof iterable[Symbol.iterator] === "function") {
      return iterable[Symbol.iterator]();
    }
    if (typeof iterable[Symbol.asyncIterator] === "function") {
      return iterable[Symbol.asyncIterator]();
    }
    throw new TypeError('"values" does not to conform to any of the iterator or iterable protocols');
  }
  function defer() {
    let reject;
    let resolve5;
    const promise = new Promise((resolveFunc, rejectFunc) => {
      resolve5 = resolveFunc;
      reject = rejectFunc;
    });
    return {
      promise,
      reject,
      resolve: resolve5
    };
  }
  function _transform(concurrency, func, iterable) {
    const iterator = getIterator(iterable);
    const resultQueue = [];
    const readQueue = [];
    let ended = false;
    let reading = false;
    let inflightCount = 0;
    let lastError = null;
    function fulfillReadQueue() {
      while (readQueue.length > 0 && resultQueue.length > 0) {
        const { resolve: resolve5 } = readQueue.shift();
        const value = resultQueue.shift();
        resolve5({ done: false, value });
      }
      while (readQueue.length > 0 && inflightCount === 0 && ended) {
        const { resolve: resolve5, reject } = readQueue.shift();
        if (lastError) {
          reject(lastError);
          lastError = null;
        } else {
          resolve5({ done: true, value: void 0 });
        }
      }
    }
    async function fillQueue() {
      if (ended) {
        fulfillReadQueue();
        return;
      }
      if (reading) {
        return;
      }
      if (inflightCount + resultQueue.length >= concurrency) {
        return;
      }
      reading = true;
      inflightCount++;
      try {
        const { done, value } = await iterator.next();
        if (done) {
          ended = true;
          inflightCount--;
          fulfillReadQueue();
        } else {
          mapAndQueue(value);
        }
      } catch (error) {
        ended = true;
        inflightCount--;
        lastError = error;
        fulfillReadQueue();
      }
      reading = false;
      fillQueue();
    }
    async function mapAndQueue(itrValue) {
      try {
        const value = await func(itrValue);
        resultQueue.push(value);
      } catch (error) {
        ended = true;
        lastError = error;
      }
      inflightCount--;
      fulfillReadQueue();
      fillQueue();
    }
    async function next() {
      if (resultQueue.length === 0) {
        const deferred = defer();
        readQueue.push(deferred);
        fillQueue();
        return deferred.promise;
      }
      const value = resultQueue.shift();
      fillQueue();
      return { done: false, value };
    }
    const asyncIterableIterator = {
      next,
      [Symbol.asyncIterator]: () => asyncIterableIterator
    };
    return asyncIterableIterator;
  }
  function transform(concurrency, func, iterable) {
    if (func === void 0) {
      return (curriedFunc, curriedIterable) => curriedIterable ? transform(concurrency, curriedFunc, curriedIterable) : transform(concurrency, curriedFunc);
    }
    if (iterable === void 0) {
      return (curriedIterable) => transform(concurrency, func, curriedIterable);
    }
    return _transform(concurrency, func, iterable);
  }

  // node_modules/web3.storage/src/lib.js
  var import_p_retry = __toESM(require_p_retry(), 1);

  // node_modules/ipfs-car/dist/esm/pack/index.js
  var import_it_last = __toESM(require_it_last(), 1);
  var import_it_pipe = __toESM(require_it_pipe(), 1);

  // node_modules/@ipld/car/esm/lib/decoder.js
  var import_varint2 = __toESM(require_varint(), 1);
  init_cid();
  init_digest();

  // node_modules/cborg/esm/lib/is.js
  var typeofs = [
    "string",
    "number",
    "bigint",
    "symbol"
  ];
  var objectTypeNames = [
    "Function",
    "Generator",
    "AsyncGenerator",
    "GeneratorFunction",
    "AsyncGeneratorFunction",
    "AsyncFunction",
    "Observable",
    "Array",
    "Buffer",
    "Object",
    "RegExp",
    "Date",
    "Error",
    "Map",
    "Set",
    "WeakMap",
    "WeakSet",
    "ArrayBuffer",
    "SharedArrayBuffer",
    "DataView",
    "Promise",
    "URL",
    "HTMLElement",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Uint16Array",
    "Int32Array",
    "Uint32Array",
    "Float32Array",
    "Float64Array",
    "BigInt64Array",
    "BigUint64Array"
  ];
  function is(value) {
    if (value === null) {
      return "null";
    }
    if (value === void 0) {
      return "undefined";
    }
    if (value === true || value === false) {
      return "boolean";
    }
    const typeOf = typeof value;
    if (typeofs.includes(typeOf)) {
      return typeOf;
    }
    if (typeOf === "function") {
      return "Function";
    }
    if (Array.isArray(value)) {
      return "Array";
    }
    if (isBuffer2(value)) {
      return "Buffer";
    }
    const objectType = getObjectType(value);
    if (objectType) {
      return objectType;
    }
    return "Object";
  }
  function isBuffer2(value) {
    return value && value.constructor && value.constructor.isBuffer && value.constructor.isBuffer.call(null, value);
  }
  function getObjectType(value) {
    const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);
    if (objectTypeNames.includes(objectTypeName)) {
      return objectTypeName;
    }
    return void 0;
  }

  // node_modules/cborg/esm/lib/token.js
  var Type = class {
    constructor(major, name5, terminal) {
      this.major = major;
      this.majorEncoded = major << 5;
      this.name = name5;
      this.terminal = terminal;
    }
    toString() {
      return `Type[${this.major}].${this.name}`;
    }
    compare(typ) {
      return this.major < typ.major ? -1 : this.major > typ.major ? 1 : 0;
    }
  };
  Type.uint = new Type(0, "uint", true);
  Type.negint = new Type(1, "negint", true);
  Type.bytes = new Type(2, "bytes", true);
  Type.string = new Type(3, "string", true);
  Type.array = new Type(4, "array", false);
  Type.map = new Type(5, "map", false);
  Type.tag = new Type(6, "tag", false);
  Type.float = new Type(7, "float", true);
  Type.false = new Type(7, "false", true);
  Type.true = new Type(7, "true", true);
  Type.null = new Type(7, "null", true);
  Type.undefined = new Type(7, "undefined", true);
  Type.break = new Type(7, "break", true);
  var Token = class {
    constructor(type4, value, encodedLength) {
      this.type = type4;
      this.value = value;
      this.encodedLength = encodedLength;
      this.encodedBytes = void 0;
      this.byteValue = void 0;
    }
    toString() {
      return `Token[${this.type}].${this.value}`;
    }
  };

  // node_modules/cborg/esm/lib/byte-utils.js
  var useBuffer = globalThis.process && !globalThis.process.browser && globalThis.Buffer && typeof globalThis.Buffer.isBuffer === "function";
  var textDecoder = new TextDecoder();
  var textEncoder = new TextEncoder();
  function isBuffer3(buf2) {
    return useBuffer && globalThis.Buffer.isBuffer(buf2);
  }
  function asU8A(buf2) {
    if (!(buf2 instanceof Uint8Array)) {
      return Uint8Array.from(buf2);
    }
    return isBuffer3(buf2) ? new Uint8Array(buf2.buffer, buf2.byteOffset, buf2.byteLength) : buf2;
  }
  var toString4 = useBuffer ? (bytes, start, end) => {
    return end - start > 64 ? globalThis.Buffer.from(bytes.subarray(start, end)).toString("utf8") : utf8Slice(bytes, start, end);
  } : (bytes, start, end) => {
    return end - start > 64 ? textDecoder.decode(bytes.subarray(start, end)) : utf8Slice(bytes, start, end);
  };
  var fromString2 = useBuffer ? (string4) => {
    return string4.length > 64 ? globalThis.Buffer.from(string4) : utf8ToBytes(string4);
  } : (string4) => {
    return string4.length > 64 ? textEncoder.encode(string4) : utf8ToBytes(string4);
  };
  var fromArray = (arr) => {
    return Uint8Array.from(arr);
  };
  var slice = useBuffer ? (bytes, start, end) => {
    if (isBuffer3(bytes)) {
      return new Uint8Array(bytes.subarray(start, end));
    }
    return bytes.slice(start, end);
  } : (bytes, start, end) => {
    return bytes.slice(start, end);
  };
  var concat = useBuffer ? (chunks, length2) => {
    chunks = chunks.map((c2) => c2 instanceof Uint8Array ? c2 : globalThis.Buffer.from(c2));
    return asU8A(globalThis.Buffer.concat(chunks, length2));
  } : (chunks, length2) => {
    const out = new Uint8Array(length2);
    let off = 0;
    for (let b2 of chunks) {
      if (off + b2.length > out.length) {
        b2 = b2.subarray(0, out.length - off);
      }
      out.set(b2, off);
      off += b2.length;
    }
    return out;
  };
  var alloc = useBuffer ? (size) => {
    return globalThis.Buffer.allocUnsafe(size);
  } : (size) => {
    return new Uint8Array(size);
  };
  function compare(b1, b2) {
    if (isBuffer3(b1) && isBuffer3(b2)) {
      return b1.compare(b2);
    }
    for (let i3 = 0; i3 < b1.length; i3++) {
      if (b1[i3] === b2[i3]) {
        continue;
      }
      return b1[i3] < b2[i3] ? -1 : 1;
    }
    return 0;
  }
  function utf8ToBytes(string4, units = Infinity) {
    let codePoint;
    const length2 = string4.length;
    let leadSurrogate = null;
    const bytes = [];
    for (let i3 = 0; i3 < length2; ++i3) {
      codePoint = string4.charCodeAt(i3);
      if (codePoint > 55295 && codePoint < 57344) {
        if (!leadSurrogate) {
          if (codePoint > 56319) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            continue;
          } else if (i3 + 1 === length2) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint < 56320) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1)
          bytes.push(239, 191, 189);
      }
      leadSurrogate = null;
      if (codePoint < 128) {
        if ((units -= 1) < 0)
          break;
        bytes.push(codePoint);
      } else if (codePoint < 2048) {
        if ((units -= 2) < 0)
          break;
        bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
      } else if (codePoint < 65536) {
        if ((units -= 3) < 0)
          break;
        bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      } else if (codePoint < 1114112) {
        if ((units -= 4) < 0)
          break;
        bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      } else {
        throw new Error("Invalid code point");
      }
    }
    return bytes;
  }
  function utf8Slice(buf2, offset3, end) {
    const res = [];
    while (offset3 < end) {
      const firstByte = buf2[offset3];
      let codePoint = null;
      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (offset3 + bytesPerSequence <= end) {
        let secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf2[offset3 + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf2[offset3 + 1];
            thirdByte = buf2[offset3 + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf2[offset3 + 1];
            thirdByte = buf2[offset3 + 2];
            fourthByte = buf2[offset3 + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      offset3 += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  var MAX_ARGUMENTS_LENGTH = 4096;
  function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    let res = "";
    let i3 = 0;
    while (i3 < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i3, i3 += MAX_ARGUMENTS_LENGTH));
    }
    return res;
  }

  // node_modules/cborg/esm/lib/bl.js
  var defaultChunkSize = 256;
  var Bl = class {
    constructor(chunkSize = defaultChunkSize) {
      this.chunkSize = chunkSize;
      this.cursor = 0;
      this.maxCursor = -1;
      this.chunks = [];
      this._initReuseChunk = null;
    }
    reset() {
      this.cursor = 0;
      this.maxCursor = -1;
      if (this.chunks.length) {
        this.chunks = [];
      }
      if (this._initReuseChunk !== null) {
        this.chunks.push(this._initReuseChunk);
        this.maxCursor = this._initReuseChunk.length - 1;
      }
    }
    push(bytes) {
      let topChunk = this.chunks[this.chunks.length - 1];
      const newMax = this.cursor + bytes.length;
      if (newMax <= this.maxCursor + 1) {
        const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
        topChunk.set(bytes, chunkPos);
      } else {
        if (topChunk) {
          const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
          if (chunkPos < topChunk.length) {
            this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);
            this.maxCursor = this.cursor - 1;
          }
        }
        if (bytes.length < 64 && bytes.length < this.chunkSize) {
          topChunk = alloc(this.chunkSize);
          this.chunks.push(topChunk);
          this.maxCursor += topChunk.length;
          if (this._initReuseChunk === null) {
            this._initReuseChunk = topChunk;
          }
          topChunk.set(bytes, 0);
        } else {
          this.chunks.push(bytes);
          this.maxCursor += bytes.length;
        }
      }
      this.cursor += bytes.length;
    }
    toBytes(reset = false) {
      let byts;
      if (this.chunks.length === 1) {
        const chunk = this.chunks[0];
        if (reset && this.cursor > chunk.length / 2) {
          byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);
          this._initReuseChunk = null;
          this.chunks = [];
        } else {
          byts = slice(chunk, 0, this.cursor);
        }
      } else {
        byts = concat(this.chunks, this.cursor);
      }
      if (reset) {
        this.reset();
      }
      return byts;
    }
  };

  // node_modules/cborg/esm/lib/common.js
  var decodeErrPrefix = "CBOR decode error:";
  var encodeErrPrefix = "CBOR encode error:";
  var uintMinorPrefixBytes = [];
  uintMinorPrefixBytes[23] = 1;
  uintMinorPrefixBytes[24] = 2;
  uintMinorPrefixBytes[25] = 3;
  uintMinorPrefixBytes[26] = 5;
  uintMinorPrefixBytes[27] = 9;
  function assertEnoughData(data, pos, need) {
    if (data.length - pos < need) {
      throw new Error(`${decodeErrPrefix} not enough data for type`);
    }
  }

  // node_modules/cborg/esm/lib/0uint.js
  var uintBoundaries = [
    24,
    256,
    65536,
    4294967296,
    BigInt("18446744073709551616")
  ];
  function readUint8(data, offset3, options) {
    assertEnoughData(data, offset3, 1);
    const value = data[offset3];
    if (options.strict === true && value < uintBoundaries[0]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
  }
  function readUint16(data, offset3, options) {
    assertEnoughData(data, offset3, 2);
    const value = data[offset3] << 8 | data[offset3 + 1];
    if (options.strict === true && value < uintBoundaries[1]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
  }
  function readUint32(data, offset3, options) {
    assertEnoughData(data, offset3, 4);
    const value = data[offset3] * 16777216 + (data[offset3 + 1] << 16) + (data[offset3 + 2] << 8) + data[offset3 + 3];
    if (options.strict === true && value < uintBoundaries[2]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
  }
  function readUint64(data, offset3, options) {
    assertEnoughData(data, offset3, 8);
    const hi = data[offset3] * 16777216 + (data[offset3 + 1] << 16) + (data[offset3 + 2] << 8) + data[offset3 + 3];
    const lo = data[offset3 + 4] * 16777216 + (data[offset3 + 5] << 16) + (data[offset3 + 6] << 8) + data[offset3 + 7];
    const value = (BigInt(hi) << BigInt(32)) + BigInt(lo);
    if (options.strict === true && value < uintBoundaries[3]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    if (value <= Number.MAX_SAFE_INTEGER) {
      return Number(value);
    }
    if (options.allowBigInt === true) {
      return value;
    }
    throw new Error(`${decodeErrPrefix} integers outside of the safe integer range are not supported`);
  }
  function decodeUint8(data, pos, _minor, options) {
    return new Token(Type.uint, readUint8(data, pos + 1, options), 2);
  }
  function decodeUint16(data, pos, _minor, options) {
    return new Token(Type.uint, readUint16(data, pos + 1, options), 3);
  }
  function decodeUint32(data, pos, _minor, options) {
    return new Token(Type.uint, readUint32(data, pos + 1, options), 5);
  }
  function decodeUint64(data, pos, _minor, options) {
    return new Token(Type.uint, readUint64(data, pos + 1, options), 9);
  }
  function encodeUint(buf2, token) {
    return encodeUintValue(buf2, 0, token.value);
  }
  function encodeUintValue(buf2, major, uint) {
    if (uint < uintBoundaries[0]) {
      const nuint = Number(uint);
      buf2.push([major | nuint]);
    } else if (uint < uintBoundaries[1]) {
      const nuint = Number(uint);
      buf2.push([
        major | 24,
        nuint
      ]);
    } else if (uint < uintBoundaries[2]) {
      const nuint = Number(uint);
      buf2.push([
        major | 25,
        nuint >>> 8,
        nuint & 255
      ]);
    } else if (uint < uintBoundaries[3]) {
      const nuint = Number(uint);
      buf2.push([
        major | 26,
        nuint >>> 24 & 255,
        nuint >>> 16 & 255,
        nuint >>> 8 & 255,
        nuint & 255
      ]);
    } else {
      const buint = BigInt(uint);
      if (buint < uintBoundaries[4]) {
        const set2 = [
          major | 27,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ];
        let lo = Number(buint & BigInt(4294967295));
        let hi = Number(buint >> BigInt(32) & BigInt(4294967295));
        set2[8] = lo & 255;
        lo = lo >> 8;
        set2[7] = lo & 255;
        lo = lo >> 8;
        set2[6] = lo & 255;
        lo = lo >> 8;
        set2[5] = lo & 255;
        set2[4] = hi & 255;
        hi = hi >> 8;
        set2[3] = hi & 255;
        hi = hi >> 8;
        set2[2] = hi & 255;
        hi = hi >> 8;
        set2[1] = hi & 255;
        buf2.push(set2);
      } else {
        throw new Error(`${decodeErrPrefix} encountered BigInt larger than allowable range`);
      }
    }
  }
  encodeUint.encodedSize = function encodedSize(token) {
    return encodeUintValue.encodedSize(token.value);
  };
  encodeUintValue.encodedSize = function encodedSize2(uint) {
    if (uint < uintBoundaries[0]) {
      return 1;
    }
    if (uint < uintBoundaries[1]) {
      return 2;
    }
    if (uint < uintBoundaries[2]) {
      return 3;
    }
    if (uint < uintBoundaries[3]) {
      return 5;
    }
    return 9;
  };
  encodeUint.compareTokens = function compareTokens(tok1, tok2) {
    return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : 0;
  };

  // node_modules/cborg/esm/lib/1negint.js
  function decodeNegint8(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint8(data, pos + 1, options), 2);
  }
  function decodeNegint16(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint16(data, pos + 1, options), 3);
  }
  function decodeNegint32(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint32(data, pos + 1, options), 5);
  }
  var neg1b = BigInt(-1);
  var pos1b = BigInt(1);
  function decodeNegint64(data, pos, _minor, options) {
    const int = readUint64(data, pos + 1, options);
    if (typeof int !== "bigint") {
      const value = -1 - int;
      if (value >= Number.MIN_SAFE_INTEGER) {
        return new Token(Type.negint, value, 9);
      }
    }
    if (options.allowBigInt !== true) {
      throw new Error(`${decodeErrPrefix} integers outside of the safe integer range are not supported`);
    }
    return new Token(Type.negint, neg1b - BigInt(int), 9);
  }
  function encodeNegint(buf2, token) {
    const negint = token.value;
    const unsigned = typeof negint === "bigint" ? negint * neg1b - pos1b : negint * -1 - 1;
    encodeUintValue(buf2, token.type.majorEncoded, unsigned);
  }
  encodeNegint.encodedSize = function encodedSize3(token) {
    const negint = token.value;
    const unsigned = typeof negint === "bigint" ? negint * neg1b - pos1b : negint * -1 - 1;
    if (unsigned < uintBoundaries[0]) {
      return 1;
    }
    if (unsigned < uintBoundaries[1]) {
      return 2;
    }
    if (unsigned < uintBoundaries[2]) {
      return 3;
    }
    if (unsigned < uintBoundaries[3]) {
      return 5;
    }
    return 9;
  };
  encodeNegint.compareTokens = function compareTokens2(tok1, tok2) {
    return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : 0;
  };

  // node_modules/cborg/esm/lib/2bytes.js
  function toToken(data, pos, prefix, length2) {
    assertEnoughData(data, pos, prefix + length2);
    const buf2 = slice(data, pos + prefix, pos + prefix + length2);
    return new Token(Type.bytes, buf2, prefix + length2);
  }
  function decodeBytesCompact(data, pos, minor, _options) {
    return toToken(data, pos, 1, minor);
  }
  function decodeBytes8(data, pos, _minor, options) {
    return toToken(data, pos, 2, readUint8(data, pos + 1, options));
  }
  function decodeBytes16(data, pos, _minor, options) {
    return toToken(data, pos, 3, readUint16(data, pos + 1, options));
  }
  function decodeBytes32(data, pos, _minor, options) {
    return toToken(data, pos, 5, readUint32(data, pos + 1, options));
  }
  function decodeBytes64(data, pos, _minor, options) {
    const l2 = readUint64(data, pos + 1, options);
    if (typeof l2 === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer bytes lengths not supported`);
    }
    return toToken(data, pos, 9, l2);
  }
  function tokenBytes(token) {
    if (token.encodedBytes === void 0) {
      token.encodedBytes = token.type === Type.string ? fromString2(token.value) : token.value;
    }
    return token.encodedBytes;
  }
  function encodeBytes(buf2, token) {
    const bytes = tokenBytes(token);
    encodeUintValue(buf2, token.type.majorEncoded, bytes.length);
    buf2.push(bytes);
  }
  encodeBytes.encodedSize = function encodedSize4(token) {
    const bytes = tokenBytes(token);
    return encodeUintValue.encodedSize(bytes.length) + bytes.length;
  };
  encodeBytes.compareTokens = function compareTokens3(tok1, tok2) {
    return compareBytes(tokenBytes(tok1), tokenBytes(tok2));
  };
  function compareBytes(b1, b2) {
    return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : compare(b1, b2);
  }

  // node_modules/cborg/esm/lib/3string.js
  function toToken2(data, pos, prefix, length2, options) {
    const totLength = prefix + length2;
    assertEnoughData(data, pos, totLength);
    const tok = new Token(Type.string, toString4(data, pos + prefix, pos + totLength), totLength);
    if (options.retainStringBytes === true) {
      tok.byteValue = slice(data, pos + prefix, pos + totLength);
    }
    return tok;
  }
  function decodeStringCompact(data, pos, minor, options) {
    return toToken2(data, pos, 1, minor, options);
  }
  function decodeString8(data, pos, _minor, options) {
    return toToken2(data, pos, 2, readUint8(data, pos + 1, options), options);
  }
  function decodeString16(data, pos, _minor, options) {
    return toToken2(data, pos, 3, readUint16(data, pos + 1, options), options);
  }
  function decodeString32(data, pos, _minor, options) {
    return toToken2(data, pos, 5, readUint32(data, pos + 1, options), options);
  }
  function decodeString64(data, pos, _minor, options) {
    const l2 = readUint64(data, pos + 1, options);
    if (typeof l2 === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer string lengths not supported`);
    }
    return toToken2(data, pos, 9, l2, options);
  }
  var encodeString = encodeBytes;

  // node_modules/cborg/esm/lib/4array.js
  function toToken3(_data, _pos, prefix, length2) {
    return new Token(Type.array, length2, prefix);
  }
  function decodeArrayCompact(data, pos, minor, _options) {
    return toToken3(data, pos, 1, minor);
  }
  function decodeArray8(data, pos, _minor, options) {
    return toToken3(data, pos, 2, readUint8(data, pos + 1, options));
  }
  function decodeArray16(data, pos, _minor, options) {
    return toToken3(data, pos, 3, readUint16(data, pos + 1, options));
  }
  function decodeArray32(data, pos, _minor, options) {
    return toToken3(data, pos, 5, readUint32(data, pos + 1, options));
  }
  function decodeArray64(data, pos, _minor, options) {
    const l2 = readUint64(data, pos + 1, options);
    if (typeof l2 === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer array lengths not supported`);
    }
    return toToken3(data, pos, 9, l2);
  }
  function decodeArrayIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) {
      throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return toToken3(data, pos, 1, Infinity);
  }
  function encodeArray(buf2, token) {
    encodeUintValue(buf2, Type.array.majorEncoded, token.value);
  }
  encodeArray.compareTokens = encodeUint.compareTokens;
  encodeArray.encodedSize = function encodedSize5(token) {
    return encodeUintValue.encodedSize(token.value);
  };

  // node_modules/cborg/esm/lib/5map.js
  function toToken4(_data, _pos, prefix, length2) {
    return new Token(Type.map, length2, prefix);
  }
  function decodeMapCompact(data, pos, minor, _options) {
    return toToken4(data, pos, 1, minor);
  }
  function decodeMap8(data, pos, _minor, options) {
    return toToken4(data, pos, 2, readUint8(data, pos + 1, options));
  }
  function decodeMap16(data, pos, _minor, options) {
    return toToken4(data, pos, 3, readUint16(data, pos + 1, options));
  }
  function decodeMap32(data, pos, _minor, options) {
    return toToken4(data, pos, 5, readUint32(data, pos + 1, options));
  }
  function decodeMap64(data, pos, _minor, options) {
    const l2 = readUint64(data, pos + 1, options);
    if (typeof l2 === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer map lengths not supported`);
    }
    return toToken4(data, pos, 9, l2);
  }
  function decodeMapIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) {
      throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return toToken4(data, pos, 1, Infinity);
  }
  function encodeMap(buf2, token) {
    encodeUintValue(buf2, Type.map.majorEncoded, token.value);
  }
  encodeMap.compareTokens = encodeUint.compareTokens;
  encodeMap.encodedSize = function encodedSize6(token) {
    return encodeUintValue.encodedSize(token.value);
  };

  // node_modules/cborg/esm/lib/6tag.js
  function decodeTagCompact(_data, _pos, minor, _options) {
    return new Token(Type.tag, minor, 1);
  }
  function decodeTag8(data, pos, _minor, options) {
    return new Token(Type.tag, readUint8(data, pos + 1, options), 2);
  }
  function decodeTag16(data, pos, _minor, options) {
    return new Token(Type.tag, readUint16(data, pos + 1, options), 3);
  }
  function decodeTag32(data, pos, _minor, options) {
    return new Token(Type.tag, readUint32(data, pos + 1, options), 5);
  }
  function decodeTag64(data, pos, _minor, options) {
    return new Token(Type.tag, readUint64(data, pos + 1, options), 9);
  }
  function encodeTag(buf2, token) {
    encodeUintValue(buf2, Type.tag.majorEncoded, token.value);
  }
  encodeTag.compareTokens = encodeUint.compareTokens;
  encodeTag.encodedSize = function encodedSize7(token) {
    return encodeUintValue.encodedSize(token.value);
  };

  // node_modules/cborg/esm/lib/7float.js
  var MINOR_FALSE = 20;
  var MINOR_TRUE = 21;
  var MINOR_NULL = 22;
  var MINOR_UNDEFINED = 23;
  function decodeUndefined(_data, _pos, _minor, options) {
    if (options.allowUndefined === false) {
      throw new Error(`${decodeErrPrefix} undefined values are not supported`);
    } else if (options.coerceUndefinedToNull === true) {
      return new Token(Type.null, null, 1);
    }
    return new Token(Type.undefined, void 0, 1);
  }
  function decodeBreak(_data, _pos, _minor, options) {
    if (options.allowIndefinite === false) {
      throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return new Token(Type.break, void 0, 1);
  }
  function createToken(value, bytes, options) {
    if (options) {
      if (options.allowNaN === false && Number.isNaN(value)) {
        throw new Error(`${decodeErrPrefix} NaN values are not supported`);
      }
      if (options.allowInfinity === false && (value === Infinity || value === -Infinity)) {
        throw new Error(`${decodeErrPrefix} Infinity values are not supported`);
      }
    }
    return new Token(Type.float, value, bytes);
  }
  function decodeFloat16(data, pos, _minor, options) {
    return createToken(readFloat16(data, pos + 1), 3, options);
  }
  function decodeFloat32(data, pos, _minor, options) {
    return createToken(readFloat32(data, pos + 1), 5, options);
  }
  function decodeFloat64(data, pos, _minor, options) {
    return createToken(readFloat64(data, pos + 1), 9, options);
  }
  function encodeFloat(buf2, token, options) {
    const float2 = token.value;
    if (float2 === false) {
      buf2.push([Type.float.majorEncoded | MINOR_FALSE]);
    } else if (float2 === true) {
      buf2.push([Type.float.majorEncoded | MINOR_TRUE]);
    } else if (float2 === null) {
      buf2.push([Type.float.majorEncoded | MINOR_NULL]);
    } else if (float2 === void 0) {
      buf2.push([Type.float.majorEncoded | MINOR_UNDEFINED]);
    } else {
      let decoded;
      let success = false;
      if (!options || options.float64 !== true) {
        encodeFloat16(float2);
        decoded = readFloat16(ui8a, 1);
        if (float2 === decoded || Number.isNaN(float2)) {
          ui8a[0] = 249;
          buf2.push(ui8a.slice(0, 3));
          success = true;
        } else {
          encodeFloat32(float2);
          decoded = readFloat32(ui8a, 1);
          if (float2 === decoded) {
            ui8a[0] = 250;
            buf2.push(ui8a.slice(0, 5));
            success = true;
          }
        }
      }
      if (!success) {
        encodeFloat64(float2);
        decoded = readFloat64(ui8a, 1);
        ui8a[0] = 251;
        buf2.push(ui8a.slice(0, 9));
      }
    }
  }
  encodeFloat.encodedSize = function encodedSize8(token, options) {
    const float2 = token.value;
    if (float2 === false || float2 === true || float2 === null || float2 === void 0) {
      return 1;
    }
    if (!options || options.float64 !== true) {
      encodeFloat16(float2);
      let decoded = readFloat16(ui8a, 1);
      if (float2 === decoded || Number.isNaN(float2)) {
        return 3;
      }
      encodeFloat32(float2);
      decoded = readFloat32(ui8a, 1);
      if (float2 === decoded) {
        return 5;
      }
    }
    return 9;
  };
  var buffer = new ArrayBuffer(9);
  var dataView = new DataView(buffer, 1);
  var ui8a = new Uint8Array(buffer, 0);
  function encodeFloat16(inp) {
    if (inp === Infinity) {
      dataView.setUint16(0, 31744, false);
    } else if (inp === -Infinity) {
      dataView.setUint16(0, 64512, false);
    } else if (Number.isNaN(inp)) {
      dataView.setUint16(0, 32256, false);
    } else {
      dataView.setFloat32(0, inp);
      const valu32 = dataView.getUint32(0);
      const exponent = (valu32 & 2139095040) >> 23;
      const mantissa = valu32 & 8388607;
      if (exponent === 255) {
        dataView.setUint16(0, 31744, false);
      } else if (exponent === 0) {
        dataView.setUint16(0, (inp & 2147483648) >> 16 | mantissa >> 13, false);
      } else {
        const logicalExponent = exponent - 127;
        if (logicalExponent < -24) {
          dataView.setUint16(0, 0);
        } else if (logicalExponent < -14) {
          dataView.setUint16(0, (valu32 & 2147483648) >> 16 | 1 << 24 + logicalExponent, false);
        } else {
          dataView.setUint16(0, (valu32 & 2147483648) >> 16 | logicalExponent + 15 << 10 | mantissa >> 13, false);
        }
      }
    }
  }
  function readFloat16(ui8a2, pos) {
    if (ui8a2.length - pos < 2) {
      throw new Error(`${decodeErrPrefix} not enough data for float16`);
    }
    const half = (ui8a2[pos] << 8) + ui8a2[pos + 1];
    if (half === 31744) {
      return Infinity;
    }
    if (half === 64512) {
      return -Infinity;
    }
    if (half === 32256) {
      return NaN;
    }
    const exp = half >> 10 & 31;
    const mant = half & 1023;
    let val;
    if (exp === 0) {
      val = mant * 2 ** -24;
    } else if (exp !== 31) {
      val = (mant + 1024) * 2 ** (exp - 25);
    } else {
      val = mant === 0 ? Infinity : NaN;
    }
    return half & 32768 ? -val : val;
  }
  function encodeFloat32(inp) {
    dataView.setFloat32(0, inp, false);
  }
  function readFloat32(ui8a2, pos) {
    if (ui8a2.length - pos < 4) {
      throw new Error(`${decodeErrPrefix} not enough data for float32`);
    }
    const offset3 = (ui8a2.byteOffset || 0) + pos;
    return new DataView(ui8a2.buffer, offset3, 4).getFloat32(0, false);
  }
  function encodeFloat64(inp) {
    dataView.setFloat64(0, inp, false);
  }
  function readFloat64(ui8a2, pos) {
    if (ui8a2.length - pos < 8) {
      throw new Error(`${decodeErrPrefix} not enough data for float64`);
    }
    const offset3 = (ui8a2.byteOffset || 0) + pos;
    return new DataView(ui8a2.buffer, offset3, 8).getFloat64(0, false);
  }
  encodeFloat.compareTokens = encodeUint.compareTokens;

  // node_modules/cborg/esm/lib/jump.js
  function invalidMinor(data, pos, minor) {
    throw new Error(`${decodeErrPrefix} encountered invalid minor (${minor}) for major ${data[pos] >>> 5}`);
  }
  function errorer(msg) {
    return () => {
      throw new Error(`${decodeErrPrefix} ${msg}`);
    };
  }
  var jump = [];
  for (let i3 = 0; i3 <= 23; i3++) {
    jump[i3] = invalidMinor;
  }
  jump[24] = decodeUint8;
  jump[25] = decodeUint16;
  jump[26] = decodeUint32;
  jump[27] = decodeUint64;
  jump[28] = invalidMinor;
  jump[29] = invalidMinor;
  jump[30] = invalidMinor;
  jump[31] = invalidMinor;
  for (let i3 = 32; i3 <= 55; i3++) {
    jump[i3] = invalidMinor;
  }
  jump[56] = decodeNegint8;
  jump[57] = decodeNegint16;
  jump[58] = decodeNegint32;
  jump[59] = decodeNegint64;
  jump[60] = invalidMinor;
  jump[61] = invalidMinor;
  jump[62] = invalidMinor;
  jump[63] = invalidMinor;
  for (let i3 = 64; i3 <= 87; i3++) {
    jump[i3] = decodeBytesCompact;
  }
  jump[88] = decodeBytes8;
  jump[89] = decodeBytes16;
  jump[90] = decodeBytes32;
  jump[91] = decodeBytes64;
  jump[92] = invalidMinor;
  jump[93] = invalidMinor;
  jump[94] = invalidMinor;
  jump[95] = errorer("indefinite length bytes/strings are not supported");
  for (let i3 = 96; i3 <= 119; i3++) {
    jump[i3] = decodeStringCompact;
  }
  jump[120] = decodeString8;
  jump[121] = decodeString16;
  jump[122] = decodeString32;
  jump[123] = decodeString64;
  jump[124] = invalidMinor;
  jump[125] = invalidMinor;
  jump[126] = invalidMinor;
  jump[127] = errorer("indefinite length bytes/strings are not supported");
  for (let i3 = 128; i3 <= 151; i3++) {
    jump[i3] = decodeArrayCompact;
  }
  jump[152] = decodeArray8;
  jump[153] = decodeArray16;
  jump[154] = decodeArray32;
  jump[155] = decodeArray64;
  jump[156] = invalidMinor;
  jump[157] = invalidMinor;
  jump[158] = invalidMinor;
  jump[159] = decodeArrayIndefinite;
  for (let i3 = 160; i3 <= 183; i3++) {
    jump[i3] = decodeMapCompact;
  }
  jump[184] = decodeMap8;
  jump[185] = decodeMap16;
  jump[186] = decodeMap32;
  jump[187] = decodeMap64;
  jump[188] = invalidMinor;
  jump[189] = invalidMinor;
  jump[190] = invalidMinor;
  jump[191] = decodeMapIndefinite;
  for (let i3 = 192; i3 <= 215; i3++) {
    jump[i3] = decodeTagCompact;
  }
  jump[216] = decodeTag8;
  jump[217] = decodeTag16;
  jump[218] = decodeTag32;
  jump[219] = decodeTag64;
  jump[220] = invalidMinor;
  jump[221] = invalidMinor;
  jump[222] = invalidMinor;
  jump[223] = invalidMinor;
  for (let i3 = 224; i3 <= 243; i3++) {
    jump[i3] = errorer("simple values are not supported");
  }
  jump[244] = invalidMinor;
  jump[245] = invalidMinor;
  jump[246] = invalidMinor;
  jump[247] = decodeUndefined;
  jump[248] = errorer("simple values are not supported");
  jump[249] = decodeFloat16;
  jump[250] = decodeFloat32;
  jump[251] = decodeFloat64;
  jump[252] = invalidMinor;
  jump[253] = invalidMinor;
  jump[254] = invalidMinor;
  jump[255] = decodeBreak;
  var quick = [];
  for (let i3 = 0; i3 < 24; i3++) {
    quick[i3] = new Token(Type.uint, i3, 1);
  }
  for (let i3 = -1; i3 >= -24; i3--) {
    quick[31 - i3] = new Token(Type.negint, i3, 1);
  }
  quick[64] = new Token(Type.bytes, new Uint8Array(0), 1);
  quick[96] = new Token(Type.string, "", 1);
  quick[128] = new Token(Type.array, 0, 1);
  quick[160] = new Token(Type.map, 0, 1);
  quick[244] = new Token(Type.false, false, 1);
  quick[245] = new Token(Type.true, true, 1);
  quick[246] = new Token(Type.null, null, 1);
  function quickEncodeToken(token) {
    switch (token.type) {
      case Type.false:
        return fromArray([244]);
      case Type.true:
        return fromArray([245]);
      case Type.null:
        return fromArray([246]);
      case Type.bytes:
        if (!token.value.length) {
          return fromArray([64]);
        }
        return;
      case Type.string:
        if (token.value === "") {
          return fromArray([96]);
        }
        return;
      case Type.array:
        if (token.value === 0) {
          return fromArray([128]);
        }
        return;
      case Type.map:
        if (token.value === 0) {
          return fromArray([160]);
        }
        return;
      case Type.uint:
        if (token.value < 24) {
          return fromArray([Number(token.value)]);
        }
        return;
      case Type.negint:
        if (token.value >= -24) {
          return fromArray([31 - Number(token.value)]);
        }
    }
  }

  // node_modules/cborg/esm/lib/encode.js
  var defaultEncodeOptions = {
    float64: false,
    mapSorter,
    quickEncodeToken
  };
  function makeCborEncoders() {
    const encoders = [];
    encoders[Type.uint.major] = encodeUint;
    encoders[Type.negint.major] = encodeNegint;
    encoders[Type.bytes.major] = encodeBytes;
    encoders[Type.string.major] = encodeString;
    encoders[Type.array.major] = encodeArray;
    encoders[Type.map.major] = encodeMap;
    encoders[Type.tag.major] = encodeTag;
    encoders[Type.float.major] = encodeFloat;
    return encoders;
  }
  var cborEncoders = makeCborEncoders();
  var buf = new Bl();
  var Ref = class {
    constructor(obj, parent) {
      this.obj = obj;
      this.parent = parent;
    }
    includes(obj) {
      let p2 = this;
      do {
        if (p2.obj === obj) {
          return true;
        }
      } while (p2 = p2.parent);
      return false;
    }
    static createCheck(stack, obj) {
      if (stack && stack.includes(obj)) {
        throw new Error(`${encodeErrPrefix} object contains circular references`);
      }
      return new Ref(obj, stack);
    }
  };
  var simpleTokens = {
    null: new Token(Type.null, null),
    undefined: new Token(Type.undefined, void 0),
    true: new Token(Type.true, true),
    false: new Token(Type.false, false),
    emptyArray: new Token(Type.array, 0),
    emptyMap: new Token(Type.map, 0)
  };
  var typeEncoders = {
    number(obj, _typ, _options, _refStack) {
      if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) {
        return new Token(Type.float, obj);
      } else if (obj >= 0) {
        return new Token(Type.uint, obj);
      } else {
        return new Token(Type.negint, obj);
      }
    },
    bigint(obj, _typ, _options, _refStack) {
      if (obj >= BigInt(0)) {
        return new Token(Type.uint, obj);
      } else {
        return new Token(Type.negint, obj);
      }
    },
    Uint8Array(obj, _typ, _options, _refStack) {
      return new Token(Type.bytes, obj);
    },
    string(obj, _typ, _options, _refStack) {
      return new Token(Type.string, obj);
    },
    boolean(obj, _typ, _options, _refStack) {
      return obj ? simpleTokens.true : simpleTokens.false;
    },
    null(_obj, _typ, _options, _refStack) {
      return simpleTokens.null;
    },
    undefined(_obj, _typ, _options, _refStack) {
      return simpleTokens.undefined;
    },
    ArrayBuffer(obj, _typ, _options, _refStack) {
      return new Token(Type.bytes, new Uint8Array(obj));
    },
    DataView(obj, _typ, _options, _refStack) {
      return new Token(Type.bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));
    },
    Array(obj, _typ, options, refStack) {
      if (!obj.length) {
        if (options.addBreakTokens === true) {
          return [
            simpleTokens.emptyArray,
            new Token(Type.break)
          ];
        }
        return simpleTokens.emptyArray;
      }
      refStack = Ref.createCheck(refStack, obj);
      const entries = [];
      let i3 = 0;
      for (const e3 of obj) {
        entries[i3++] = objectToTokens(e3, options, refStack);
      }
      if (options.addBreakTokens) {
        return [
          new Token(Type.array, obj.length),
          entries,
          new Token(Type.break)
        ];
      }
      return [
        new Token(Type.array, obj.length),
        entries
      ];
    },
    Object(obj, typ, options, refStack) {
      const isMap = typ !== "Object";
      const keys = isMap ? obj.keys() : Object.keys(obj);
      const length2 = isMap ? obj.size : keys.length;
      if (!length2) {
        if (options.addBreakTokens === true) {
          return [
            simpleTokens.emptyMap,
            new Token(Type.break)
          ];
        }
        return simpleTokens.emptyMap;
      }
      refStack = Ref.createCheck(refStack, obj);
      const entries = [];
      let i3 = 0;
      for (const key2 of keys) {
        entries[i3++] = [
          objectToTokens(key2, options, refStack),
          objectToTokens(isMap ? obj.get(key2) : obj[key2], options, refStack)
        ];
      }
      sortMapEntries(entries, options);
      if (options.addBreakTokens) {
        return [
          new Token(Type.map, length2),
          entries,
          new Token(Type.break)
        ];
      }
      return [
        new Token(Type.map, length2),
        entries
      ];
    }
  };
  typeEncoders.Map = typeEncoders.Object;
  typeEncoders.Buffer = typeEncoders.Uint8Array;
  for (const typ of "Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64".split(" ")) {
    typeEncoders[`${typ}Array`] = typeEncoders.DataView;
  }
  function objectToTokens(obj, options = {}, refStack) {
    const typ = is(obj);
    const customTypeEncoder = options && options.typeEncoders && options.typeEncoders[typ] || typeEncoders[typ];
    if (typeof customTypeEncoder === "function") {
      const tokens = customTypeEncoder(obj, typ, options, refStack);
      if (tokens != null) {
        return tokens;
      }
    }
    const typeEncoder = typeEncoders[typ];
    if (!typeEncoder) {
      throw new Error(`${encodeErrPrefix} unsupported type: ${typ}`);
    }
    return typeEncoder(obj, typ, options, refStack);
  }
  function sortMapEntries(entries, options) {
    if (options.mapSorter) {
      entries.sort(options.mapSorter);
    }
  }
  function mapSorter(e1, e22) {
    const keyToken1 = Array.isArray(e1[0]) ? e1[0][0] : e1[0];
    const keyToken2 = Array.isArray(e22[0]) ? e22[0][0] : e22[0];
    if (keyToken1.type !== keyToken2.type) {
      return keyToken1.type.compare(keyToken2.type);
    }
    const major = keyToken1.type.major;
    const tcmp = cborEncoders[major].compareTokens(keyToken1, keyToken2);
    if (tcmp === 0) {
      console.warn("WARNING: complex key types used, CBOR key sorting guarantees are gone");
    }
    return tcmp;
  }
  function tokensToEncoded(buf2, tokens, encoders, options) {
    if (Array.isArray(tokens)) {
      for (const token of tokens) {
        tokensToEncoded(buf2, token, encoders, options);
      }
    } else {
      encoders[tokens.type.major](buf2, tokens, options);
    }
  }
  function encodeCustom(data, encoders, options) {
    const tokens = objectToTokens(data, options);
    if (!Array.isArray(tokens) && options.quickEncodeToken) {
      const quickBytes = options.quickEncodeToken(tokens);
      if (quickBytes) {
        return quickBytes;
      }
      const encoder = encoders[tokens.type.major];
      if (encoder.encodedSize) {
        const size = encoder.encodedSize(tokens, options);
        const buf2 = new Bl(size);
        encoder(buf2, tokens, options);
        if (buf2.chunks.length !== 1) {
          throw new Error(`Unexpected error: pre-calculated length for ${tokens} was wrong`);
        }
        return asU8A(buf2.chunks[0]);
      }
    }
    buf.reset();
    tokensToEncoded(buf, tokens, encoders, options);
    return buf.toBytes(true);
  }
  function encode5(data, options) {
    options = Object.assign({}, defaultEncodeOptions, options);
    return encodeCustom(data, cborEncoders, options);
  }

  // node_modules/cborg/esm/lib/decode.js
  var defaultDecodeOptions = {
    strict: false,
    allowIndefinite: true,
    allowUndefined: true,
    allowBigInt: true
  };
  var Tokeniser = class {
    constructor(data, options = {}) {
      this.pos = 0;
      this.data = data;
      this.options = options;
    }
    done() {
      return this.pos >= this.data.length;
    }
    next() {
      const byt = this.data[this.pos];
      let token = quick[byt];
      if (token === void 0) {
        const decoder = jump[byt];
        if (!decoder) {
          throw new Error(`${decodeErrPrefix} no decoder for major type ${byt >>> 5} (byte 0x${byt.toString(16).padStart(2, "0")})`);
        }
        const minor = byt & 31;
        token = decoder(this.data, this.pos, minor, this.options);
      }
      this.pos += token.encodedLength;
      return token;
    }
  };
  var DONE = Symbol.for("DONE");
  var BREAK = Symbol.for("BREAK");
  function tokenToArray(token, tokeniser, options) {
    const arr = [];
    for (let i3 = 0; i3 < token.value; i3++) {
      const value = tokensToObject(tokeniser, options);
      if (value === BREAK) {
        if (token.value === Infinity) {
          break;
        }
        throw new Error(`${decodeErrPrefix} got unexpected break to lengthed array`);
      }
      if (value === DONE) {
        throw new Error(`${decodeErrPrefix} found array but not enough entries (got ${i3}, expected ${token.value})`);
      }
      arr[i3] = value;
    }
    return arr;
  }
  function tokenToMap(token, tokeniser, options) {
    const useMaps = options.useMaps === true;
    const obj = useMaps ? void 0 : {};
    const m2 = useMaps ? /* @__PURE__ */ new Map() : void 0;
    for (let i3 = 0; i3 < token.value; i3++) {
      const key2 = tokensToObject(tokeniser, options);
      if (key2 === BREAK) {
        if (token.value === Infinity) {
          break;
        }
        throw new Error(`${decodeErrPrefix} got unexpected break to lengthed map`);
      }
      if (key2 === DONE) {
        throw new Error(`${decodeErrPrefix} found map but not enough entries (got ${i3} [no key], expected ${token.value})`);
      }
      if (useMaps !== true && typeof key2 !== "string") {
        throw new Error(`${decodeErrPrefix} non-string keys not supported (got ${typeof key2})`);
      }
      if (options.rejectDuplicateMapKeys === true) {
        if (useMaps && m2.has(key2) || !useMaps && key2 in obj) {
          throw new Error(`${decodeErrPrefix} found repeat map key "${key2}"`);
        }
      }
      const value = tokensToObject(tokeniser, options);
      if (value === DONE) {
        throw new Error(`${decodeErrPrefix} found map but not enough entries (got ${i3} [no value], expected ${token.value})`);
      }
      if (useMaps) {
        m2.set(key2, value);
      } else {
        obj[key2] = value;
      }
    }
    return useMaps ? m2 : obj;
  }
  function tokensToObject(tokeniser, options) {
    if (tokeniser.done()) {
      return DONE;
    }
    const token = tokeniser.next();
    if (token.type === Type.break) {
      return BREAK;
    }
    if (token.type.terminal) {
      return token.value;
    }
    if (token.type === Type.array) {
      return tokenToArray(token, tokeniser, options);
    }
    if (token.type === Type.map) {
      return tokenToMap(token, tokeniser, options);
    }
    if (token.type === Type.tag) {
      if (options.tags && typeof options.tags[token.value] === "function") {
        const tagged = tokensToObject(tokeniser, options);
        return options.tags[token.value](tagged);
      }
      throw new Error(`${decodeErrPrefix} tag not supported (${token.value})`);
    }
    throw new Error("unsupported");
  }
  function decode5(data, options) {
    if (!(data instanceof Uint8Array)) {
      throw new Error(`${decodeErrPrefix} data to decode must be a Uint8Array`);
    }
    options = Object.assign({}, defaultDecodeOptions, options);
    const tokeniser = options.tokenizer || new Tokeniser(data, options);
    const decoded = tokensToObject(tokeniser, options);
    if (decoded === DONE) {
      throw new Error(`${decodeErrPrefix} did not find any content to decode`);
    }
    if (decoded === BREAK) {
      throw new Error(`${decodeErrPrefix} got unexpected break`);
    }
    if (!tokeniser.done()) {
      throw new Error(`${decodeErrPrefix} too many terminals, data makes no sense`);
    }
    return decoded;
  }

  // node_modules/@ipld/dag-cbor/esm/index.js
  init_cid();
  var CID_CBOR_TAG = 42;
  function cidEncoder(obj) {
    if (obj.asCID !== obj) {
      return null;
    }
    const cid = CID.asCID(obj);
    if (!cid) {
      return null;
    }
    const bytes = new Uint8Array(cid.bytes.byteLength + 1);
    bytes.set(cid.bytes, 1);
    return [
      new Token(Type.tag, CID_CBOR_TAG),
      new Token(Type.bytes, bytes)
    ];
  }
  function undefinedEncoder() {
    throw new Error("`undefined` is not supported by the IPLD Data Model and cannot be encoded");
  }
  function numberEncoder(num) {
    if (Number.isNaN(num)) {
      throw new Error("`NaN` is not supported by the IPLD Data Model and cannot be encoded");
    }
    if (num === Infinity || num === -Infinity) {
      throw new Error("`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded");
    }
    return null;
  }
  var encodeOptions = {
    float64: true,
    typeEncoders: {
      Object: cidEncoder,
      undefined: undefinedEncoder,
      number: numberEncoder
    }
  };
  function cidDecoder(bytes) {
    if (bytes[0] !== 0) {
      throw new Error("Invalid CID for CBOR tag 42; expected leading 0x00");
    }
    return CID.decode(bytes.subarray(1));
  }
  var decodeOptions = {
    allowIndefinite: false,
    coerceUndefinedToNull: true,
    allowNaN: false,
    allowInfinity: false,
    allowBigInt: true,
    strict: true,
    useMaps: false,
    tags: []
  };
  decodeOptions.tags[CID_CBOR_TAG] = cidDecoder;
  var code = 113;
  var encode6 = (node) => encode5(node, encodeOptions);
  var decode6 = (data) => decode5(data, decodeOptions);

  // node_modules/@ipld/car/esm/lib/decoder.js
  var CIDV0_BYTES = {
    SHA2_256: 18,
    LENGTH: 32,
    DAG_PB: 112
  };
  async function readVarint(reader) {
    const bytes = await reader.upTo(8);
    const i3 = import_varint2.default.decode(bytes);
    reader.seek(import_varint2.default.decode.bytes);
    return i3;
  }
  async function readHeader(reader) {
    const length2 = await readVarint(reader);
    if (length2 === 0) {
      throw new Error("Invalid CAR header (zero length)");
    }
    const header = await reader.exactly(length2);
    reader.seek(length2);
    const block = decode6(header);
    if (block == null || Array.isArray(block) || typeof block !== "object") {
      throw new Error("Invalid CAR header format");
    }
    if (block.version !== 1) {
      if (typeof block.version === "string") {
        throw new Error(`Invalid CAR version: "${block.version}"`);
      }
      throw new Error(`Invalid CAR version: ${block.version}`);
    }
    if (!Array.isArray(block.roots)) {
      throw new Error("Invalid CAR header format");
    }
    if (Object.keys(block).filter((p2) => p2 !== "roots" && p2 !== "version").length) {
      throw new Error("Invalid CAR header format");
    }
    return block;
  }
  async function readMultihash(reader) {
    const bytes = await reader.upTo(8);
    import_varint2.default.decode(bytes);
    const codeLength = import_varint2.default.decode.bytes;
    const length2 = import_varint2.default.decode(bytes.subarray(import_varint2.default.decode.bytes));
    const lengthLength = import_varint2.default.decode.bytes;
    const mhLength = codeLength + lengthLength + length2;
    const multihash = await reader.exactly(mhLength);
    reader.seek(mhLength);
    return multihash;
  }
  async function readCid(reader) {
    const first = await reader.exactly(2);
    if (first[0] === CIDV0_BYTES.SHA2_256 && first[1] === CIDV0_BYTES.LENGTH) {
      const bytes2 = await reader.exactly(34);
      reader.seek(34);
      const multihash2 = decode3(bytes2);
      return CID.create(0, CIDV0_BYTES.DAG_PB, multihash2);
    }
    const version3 = await readVarint(reader);
    if (version3 !== 1) {
      throw new Error(`Unexpected CID version (${version3})`);
    }
    const codec = await readVarint(reader);
    const bytes = await readMultihash(reader);
    const multihash = decode3(bytes);
    return CID.create(version3, codec, multihash);
  }
  async function readBlockHead(reader) {
    const start = reader.pos;
    let length2 = await readVarint(reader);
    if (length2 === 0) {
      throw new Error("Invalid CAR section (zero length)");
    }
    length2 += reader.pos - start;
    const cid = await readCid(reader);
    const blockLength = length2 - (reader.pos - start);
    return {
      cid,
      length: length2,
      blockLength
    };
  }
  async function readBlock(reader) {
    const { cid, blockLength } = await readBlockHead(reader);
    const bytes = await reader.exactly(blockLength);
    reader.seek(blockLength);
    return {
      bytes,
      cid
    };
  }
  async function readBlockIndex(reader) {
    const offset3 = reader.pos;
    const { cid, length: length2, blockLength } = await readBlockHead(reader);
    const index3 = {
      cid,
      length: length2,
      blockLength,
      offset: offset3,
      blockOffset: reader.pos
    };
    reader.seek(index3.blockLength);
    return index3;
  }
  function createDecoder(reader) {
    const headerPromise = readHeader(reader);
    return {
      header: () => headerPromise,
      async *blocks() {
        await headerPromise;
        while ((await reader.upTo(8)).length > 0) {
          yield await readBlock(reader);
        }
      },
      async *blocksIndex() {
        await headerPromise;
        while ((await reader.upTo(8)).length > 0) {
          yield await readBlockIndex(reader);
        }
      }
    };
  }
  function bytesReader(bytes) {
    let pos = 0;
    return {
      async upTo(length2) {
        return bytes.subarray(pos, pos + Math.min(length2, bytes.length - pos));
      },
      async exactly(length2) {
        if (length2 > bytes.length - pos) {
          throw new Error("Unexpected end of data");
        }
        return bytes.subarray(pos, pos + length2);
      },
      seek(length2) {
        pos += length2;
      },
      get pos() {
        return pos;
      }
    };
  }
  function chunkReader(readChunk) {
    let pos = 0;
    let have = 0;
    let offset3 = 0;
    let currentChunk = new Uint8Array(0);
    const read2 = async (length2) => {
      have = currentChunk.length - offset3;
      const bufa = [currentChunk.subarray(offset3)];
      while (have < length2) {
        const chunk = await readChunk();
        if (chunk == null) {
          break;
        }
        if (have < 0) {
          if (chunk.length > have) {
            bufa.push(chunk.subarray(-have));
          }
        } else {
          bufa.push(chunk);
        }
        have += chunk.length;
      }
      currentChunk = new Uint8Array(bufa.reduce((p2, c2) => p2 + c2.length, 0));
      let off = 0;
      for (const b2 of bufa) {
        currentChunk.set(b2, off);
        off += b2.length;
      }
      offset3 = 0;
    };
    return {
      async upTo(length2) {
        if (currentChunk.length - offset3 < length2) {
          await read2(length2);
        }
        return currentChunk.subarray(offset3, offset3 + Math.min(currentChunk.length - offset3, length2));
      },
      async exactly(length2) {
        if (currentChunk.length - offset3 < length2) {
          await read2(length2);
        }
        if (currentChunk.length - offset3 < length2) {
          throw new Error("Unexpected end of data");
        }
        return currentChunk.subarray(offset3, offset3 + length2);
      },
      seek(length2) {
        pos += length2;
        offset3 += length2;
      },
      get pos() {
        return pos;
      }
    };
  }
  function asyncIterableReader(asyncIterable) {
    const iterator = asyncIterable[Symbol.asyncIterator]();
    async function readChunk() {
      const next = await iterator.next();
      if (next.done) {
        return null;
      }
      return next.value;
    }
    return chunkReader(readChunk);
  }

  // node_modules/@ipld/car/esm/lib/reader-browser.js
  var CarReader = class {
    constructor(version3, roots, blocks) {
      this._version = version3;
      this._roots = roots;
      this._blocks = blocks;
      this._keys = blocks.map((b2) => b2.cid.toString());
    }
    get version() {
      return this._version;
    }
    async getRoots() {
      return this._roots;
    }
    async has(key2) {
      return this._keys.indexOf(key2.toString()) > -1;
    }
    async get(key2) {
      const index3 = this._keys.indexOf(key2.toString());
      return index3 > -1 ? this._blocks[index3] : void 0;
    }
    async *blocks() {
      for (const block of this._blocks) {
        yield block;
      }
    }
    async *cids() {
      for (const block of this._blocks) {
        yield block.cid;
      }
    }
    static async fromBytes(bytes) {
      if (!(bytes instanceof Uint8Array)) {
        throw new TypeError("fromBytes() requires a Uint8Array");
      }
      return decodeReaderComplete(bytesReader(bytes));
    }
    static async fromIterable(asyncIterable) {
      if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === "function")) {
        throw new TypeError("fromIterable() requires an async iterable");
      }
      return decodeReaderComplete(asyncIterableReader(asyncIterable));
    }
  };
  async function decodeReaderComplete(reader) {
    const decoder = createDecoder(reader);
    const { version: version3, roots } = await decoder.header();
    const blocks = [];
    for await (const block of decoder.blocks()) {
      blocks.push(block);
    }
    return new CarReader(version3, roots, blocks);
  }

  // node_modules/@ipld/car/esm/lib/indexer.js
  var CarIndexer = class {
    constructor(version3, roots, iterator) {
      this._version = version3;
      this._roots = roots;
      this._iterator = iterator;
    }
    get version() {
      return this._version;
    }
    async getRoots() {
      return this._roots;
    }
    [Symbol.asyncIterator]() {
      return this._iterator;
    }
    static async fromBytes(bytes) {
      if (!(bytes instanceof Uint8Array)) {
        throw new TypeError("fromBytes() requires a Uint8Array");
      }
      return decodeIndexerComplete(bytesReader(bytes));
    }
    static async fromIterable(asyncIterable) {
      if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === "function")) {
        throw new TypeError("fromIterable() requires an async iterable");
      }
      return decodeIndexerComplete(asyncIterableReader(asyncIterable));
    }
  };
  async function decodeIndexerComplete(reader) {
    const decoder = createDecoder(reader);
    const { version: version3, roots } = await decoder.header();
    return new CarIndexer(version3, roots, decoder.blocksIndex());
  }

  // node_modules/@ipld/car/esm/lib/iterator.js
  var CarIteratorBase = class {
    constructor(version3, roots, iterable) {
      this._version = version3;
      this._roots = roots;
      this._iterable = iterable;
      this._decoded = false;
    }
    get version() {
      return this._version;
    }
    async getRoots() {
      return this._roots;
    }
  };
  var CarBlockIterator = class extends CarIteratorBase {
    [Symbol.asyncIterator]() {
      if (this._decoded) {
        throw new Error("Cannot decode more than once");
      }
      if (!this._iterable) {
        throw new Error("Block iterable not found");
      }
      this._decoded = true;
      return this._iterable[Symbol.asyncIterator]();
    }
    static async fromBytes(bytes) {
      const { version: version3, roots, iterator } = await fromBytes(bytes);
      return new CarBlockIterator(version3, roots, iterator);
    }
    static async fromIterable(asyncIterable) {
      const { version: version3, roots, iterator } = await fromIterable(asyncIterable);
      return new CarBlockIterator(version3, roots, iterator);
    }
  };
  var CarCIDIterator = class extends CarIteratorBase {
    [Symbol.asyncIterator]() {
      if (this._decoded) {
        throw new Error("Cannot decode more than once");
      }
      if (!this._iterable) {
        throw new Error("Block iterable not found");
      }
      this._decoded = true;
      const iterable = this._iterable[Symbol.asyncIterator]();
      return {
        async next() {
          const next = await iterable.next();
          if (next.done) {
            return next;
          }
          return {
            done: false,
            value: next.value.cid
          };
        }
      };
    }
    static async fromBytes(bytes) {
      const { version: version3, roots, iterator } = await fromBytes(bytes);
      return new CarCIDIterator(version3, roots, iterator);
    }
    static async fromIterable(asyncIterable) {
      const { version: version3, roots, iterator } = await fromIterable(asyncIterable);
      return new CarCIDIterator(version3, roots, iterator);
    }
  };
  async function fromBytes(bytes) {
    if (!(bytes instanceof Uint8Array)) {
      throw new TypeError("fromBytes() requires a Uint8Array");
    }
    return decodeIterator(bytesReader(bytes));
  }
  async function fromIterable(asyncIterable) {
    if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === "function")) {
      throw new TypeError("fromIterable() requires an async iterable");
    }
    return decodeIterator(asyncIterableReader(asyncIterable));
  }
  async function decodeIterator(reader) {
    const decoder = createDecoder(reader);
    const { version: version3, roots } = await decoder.header();
    return {
      version: version3,
      roots,
      iterator: decoder.blocks()
    };
  }

  // node_modules/@ipld/car/esm/lib/writer-browser.js
  init_cid();

  // node_modules/@ipld/car/esm/lib/encoder.js
  var import_varint3 = __toESM(require_varint(), 1);
  function createHeader(roots) {
    const headerBytes = encode6({
      version: 1,
      roots
    });
    const varintBytes = import_varint3.default.encode(headerBytes.length);
    const header = new Uint8Array(varintBytes.length + headerBytes.length);
    header.set(varintBytes, 0);
    header.set(headerBytes, varintBytes.length);
    return header;
  }
  function createEncoder(writer) {
    return {
      async setRoots(roots) {
        const bytes = createHeader(roots);
        await writer.write(bytes);
      },
      async writeBlock(block) {
        const { cid, bytes } = block;
        await writer.write(new Uint8Array(import_varint3.default.encode(cid.bytes.length + bytes.length)));
        await writer.write(cid.bytes);
        if (bytes.length) {
          await writer.write(bytes);
        }
      },
      async close() {
        return writer.end();
      }
    };
  }

  // node_modules/@ipld/car/esm/lib/iterator-channel.js
  function noop5() {
  }
  function create3() {
    const chunkQueue = [];
    let drainer = null;
    let drainerResolver = noop5;
    let ended = false;
    let outWait = null;
    let outWaitResolver = noop5;
    const makeDrainer = () => {
      if (!drainer) {
        drainer = new Promise((resolve5) => {
          drainerResolver = () => {
            drainer = null;
            drainerResolver = noop5;
            resolve5();
          };
        });
      }
      return drainer;
    };
    const writer = {
      write(chunk) {
        chunkQueue.push(chunk);
        const drainer2 = makeDrainer();
        outWaitResolver();
        return drainer2;
      },
      async end() {
        ended = true;
        const drainer2 = makeDrainer();
        outWaitResolver();
        return drainer2;
      }
    };
    const iterator = {
      async next() {
        const chunk = chunkQueue.shift();
        if (chunk) {
          if (chunkQueue.length === 0) {
            drainerResolver();
          }
          return {
            done: false,
            value: chunk
          };
        }
        if (ended) {
          drainerResolver();
          return {
            done: true,
            value: void 0
          };
        }
        if (!outWait) {
          outWait = new Promise((resolve5) => {
            outWaitResolver = () => {
              outWait = null;
              outWaitResolver = noop5;
              return resolve5(iterator.next());
            };
          });
        }
        return outWait;
      }
    };
    return {
      writer,
      iterator
    };
  }

  // node_modules/@ipld/car/esm/lib/writer-browser.js
  var CarWriter = class {
    constructor(roots, encoder) {
      this._encoder = encoder;
      this._mutex = encoder.setRoots(roots);
      this._ended = false;
    }
    async put(block) {
      if (!(block.bytes instanceof Uint8Array) || !block.cid) {
        throw new TypeError("Can only write {cid, bytes} objects");
      }
      if (this._ended) {
        throw new Error("Already closed");
      }
      const cid = CID.asCID(block.cid);
      if (!cid) {
        throw new TypeError("Can only write {cid, bytes} objects");
      }
      this._mutex = this._mutex.then(() => this._encoder.writeBlock({
        cid,
        bytes: block.bytes
      }));
      return this._mutex;
    }
    async close() {
      if (this._ended) {
        throw new Error("Already closed");
      }
      await this._mutex;
      this._ended = true;
      return this._encoder.close();
    }
    static create(roots) {
      roots = toRoots(roots);
      const { encoder, iterator } = encodeWriter();
      const writer = new CarWriter(roots, encoder);
      const out = new CarWriterOut(iterator);
      return {
        writer,
        out
      };
    }
    static createAppender() {
      const { encoder, iterator } = encodeWriter();
      encoder.setRoots = () => Promise.resolve();
      const writer = new CarWriter([], encoder);
      const out = new CarWriterOut(iterator);
      return {
        writer,
        out
      };
    }
    static async updateRootsInBytes(bytes, roots) {
      const reader = bytesReader(bytes);
      await readHeader(reader);
      const newHeader = createHeader(roots);
      if (reader.pos !== newHeader.length) {
        throw new Error(`updateRoots() can only overwrite a header of the same length (old header is ${reader.pos} bytes, new header is ${newHeader.length} bytes)`);
      }
      bytes.set(newHeader, 0);
      return bytes;
    }
  };
  var CarWriterOut = class {
    constructor(iterator) {
      this._iterator = iterator;
    }
    [Symbol.asyncIterator]() {
      if (this._iterating) {
        throw new Error("Multiple iterator not supported");
      }
      this._iterating = true;
      return this._iterator;
    }
  };
  function encodeWriter() {
    const iw = create3();
    const { writer, iterator } = iw;
    const encoder = createEncoder(writer);
    return {
      encoder,
      iterator
    };
  }
  function toRoots(roots) {
    if (roots === void 0) {
      return [];
    }
    if (!Array.isArray(roots)) {
      const cid = CID.asCID(roots);
      if (!cid) {
        throw new TypeError("roots must be a single CID or an array of CIDs");
      }
      return [cid];
    }
    const _roots = [];
    for (const root2 of roots) {
      const _root = CID.asCID(root2);
      if (!_root) {
        throw new TypeError("roots must be a single CID or an array of CIDs");
      }
      _roots.push(_root);
    }
    return _roots;
  }

  // node_modules/ipfs-unixfs-importer/esm/src/index.js
  var import_it_parallel_batch2 = __toESM(require_it_parallel_batch(), 1);

  // node_modules/merge-options/index.mjs
  var import_index2 = __toESM(require_merge_options(), 1);
  var merge_options_default = import_index2.default;

  // node_modules/ipfs-unixfs-importer/esm/src/options.js
  init_sha2_browser();

  // node_modules/@multiformats/murmur3/esm/index.js
  init_hasher();
  init_src();
  var import_murmurhash3js_revisited = __toESM(require_murmurhash3js_revisited(), 1);
  function fromNumberTo32BitBuf(number4) {
    const bytes = new Array(4);
    for (let i3 = 0; i3 < 4; i3++) {
      bytes[i3] = number4 & 255;
      number4 = number4 >> 8;
    }
    return new Uint8Array(bytes);
  }
  var murmur332 = from2({
    name: "murmur3-32",
    code: 35,
    encode: (input) => fromNumberTo32BitBuf(import_murmurhash3js_revisited.default.x86.hash32(input))
  });
  var murmur3128 = from2({
    name: "murmur3-128",
    code: 34,
    encode: (input) => bytes_exports.fromHex(import_murmurhash3js_revisited.default.x64.hash128(input))
  });

  // node_modules/ipfs-unixfs-importer/esm/src/options.js
  async function hamtHashFn(buf2) {
    return (await murmur3128.encode(buf2)).slice(0, 8).reverse();
  }
  var defaultOptions = {
    chunker: "fixed",
    strategy: "balanced",
    rawLeaves: false,
    onlyHash: false,
    reduceSingleLeafToSelf: true,
    hasher: sha256,
    leafType: "file",
    cidVersion: 0,
    progress: () => () => {
    },
    shardSplitThreshold: 1e3,
    fileImportConcurrency: 50,
    blockWriteConcurrency: 10,
    minChunkSize: 262144,
    maxChunkSize: 262144,
    avgChunkSize: 262144,
    window: 16,
    polynomial: 17437180132763652,
    maxChildrenPerNode: 174,
    layerRepeat: 4,
    wrapWithDirectory: false,
    recursive: false,
    hidden: false,
    timeout: void 0,
    hamtHashFn,
    hamtHashCode: 34,
    hamtBucketBits: 8
  };
  var options_default = (options = {}) => {
    const defaults2 = merge_options_default.bind({ ignoreUndefined: true });
    return defaults2(defaultOptions, options);
  };

  // node_modules/ipfs-unixfs/esm/src/index.js
  var import_err_code = __toESM(require_err_code(), 1);

  // node_modules/ipfs-unixfs/esm/src/unixfs.js
  var import_minimal = __toESM(require_minimal2(), 1);
  var $Reader = import_minimal.default.Reader;
  var $Writer = import_minimal.default.Writer;
  var $util = import_minimal.default.util;
  var $root = import_minimal.default.roots["ipfs-unixfs"] || (import_minimal.default.roots["ipfs-unixfs"] = {});
  var Data = $root.Data = (() => {
    function Data2(p2) {
      this.blocksizes = [];
      if (p2) {
        for (var ks = Object.keys(p2), i3 = 0; i3 < ks.length; ++i3)
          if (p2[ks[i3]] != null)
            this[ks[i3]] = p2[ks[i3]];
      }
    }
    Data2.prototype.Type = 0;
    Data2.prototype.Data = $util.newBuffer([]);
    Data2.prototype.filesize = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    Data2.prototype.blocksizes = $util.emptyArray;
    Data2.prototype.hashType = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    Data2.prototype.fanout = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    Data2.prototype.mode = 0;
    Data2.prototype.mtime = null;
    Data2.encode = function encode12(m2, w2) {
      if (!w2)
        w2 = $Writer.create();
      w2.uint32(8).int32(m2.Type);
      if (m2.Data != null && Object.hasOwnProperty.call(m2, "Data"))
        w2.uint32(18).bytes(m2.Data);
      if (m2.filesize != null && Object.hasOwnProperty.call(m2, "filesize"))
        w2.uint32(24).uint64(m2.filesize);
      if (m2.blocksizes != null && m2.blocksizes.length) {
        for (var i3 = 0; i3 < m2.blocksizes.length; ++i3)
          w2.uint32(32).uint64(m2.blocksizes[i3]);
      }
      if (m2.hashType != null && Object.hasOwnProperty.call(m2, "hashType"))
        w2.uint32(40).uint64(m2.hashType);
      if (m2.fanout != null && Object.hasOwnProperty.call(m2, "fanout"))
        w2.uint32(48).uint64(m2.fanout);
      if (m2.mode != null && Object.hasOwnProperty.call(m2, "mode"))
        w2.uint32(56).uint32(m2.mode);
      if (m2.mtime != null && Object.hasOwnProperty.call(m2, "mtime"))
        $root.UnixTime.encode(m2.mtime, w2.uint32(66).fork()).ldelim();
      return w2;
    };
    Data2.decode = function decode11(r3, l2) {
      if (!(r3 instanceof $Reader))
        r3 = $Reader.create(r3);
      var c2 = l2 === void 0 ? r3.len : r3.pos + l2, m2 = new $root.Data();
      while (r3.pos < c2) {
        var t3 = r3.uint32();
        switch (t3 >>> 3) {
          case 1:
            m2.Type = r3.int32();
            break;
          case 2:
            m2.Data = r3.bytes();
            break;
          case 3:
            m2.filesize = r3.uint64();
            break;
          case 4:
            if (!(m2.blocksizes && m2.blocksizes.length))
              m2.blocksizes = [];
            if ((t3 & 7) === 2) {
              var c22 = r3.uint32() + r3.pos;
              while (r3.pos < c22)
                m2.blocksizes.push(r3.uint64());
            } else
              m2.blocksizes.push(r3.uint64());
            break;
          case 5:
            m2.hashType = r3.uint64();
            break;
          case 6:
            m2.fanout = r3.uint64();
            break;
          case 7:
            m2.mode = r3.uint32();
            break;
          case 8:
            m2.mtime = $root.UnixTime.decode(r3, r3.uint32());
            break;
          default:
            r3.skipType(t3 & 7);
            break;
        }
      }
      if (!m2.hasOwnProperty("Type"))
        throw $util.ProtocolError("missing required 'Type'", { instance: m2 });
      return m2;
    };
    Data2.fromObject = function fromObject(d2) {
      if (d2 instanceof $root.Data)
        return d2;
      var m2 = new $root.Data();
      switch (d2.Type) {
        case "Raw":
        case 0:
          m2.Type = 0;
          break;
        case "Directory":
        case 1:
          m2.Type = 1;
          break;
        case "File":
        case 2:
          m2.Type = 2;
          break;
        case "Metadata":
        case 3:
          m2.Type = 3;
          break;
        case "Symlink":
        case 4:
          m2.Type = 4;
          break;
        case "HAMTShard":
        case 5:
          m2.Type = 5;
          break;
      }
      if (d2.Data != null) {
        if (typeof d2.Data === "string")
          $util.base64.decode(d2.Data, m2.Data = $util.newBuffer($util.base64.length(d2.Data)), 0);
        else if (d2.Data.length)
          m2.Data = d2.Data;
      }
      if (d2.filesize != null) {
        if ($util.Long)
          (m2.filesize = $util.Long.fromValue(d2.filesize)).unsigned = true;
        else if (typeof d2.filesize === "string")
          m2.filesize = parseInt(d2.filesize, 10);
        else if (typeof d2.filesize === "number")
          m2.filesize = d2.filesize;
        else if (typeof d2.filesize === "object")
          m2.filesize = new $util.LongBits(d2.filesize.low >>> 0, d2.filesize.high >>> 0).toNumber(true);
      }
      if (d2.blocksizes) {
        if (!Array.isArray(d2.blocksizes))
          throw TypeError(".Data.blocksizes: array expected");
        m2.blocksizes = [];
        for (var i3 = 0; i3 < d2.blocksizes.length; ++i3) {
          if ($util.Long)
            (m2.blocksizes[i3] = $util.Long.fromValue(d2.blocksizes[i3])).unsigned = true;
          else if (typeof d2.blocksizes[i3] === "string")
            m2.blocksizes[i3] = parseInt(d2.blocksizes[i3], 10);
          else if (typeof d2.blocksizes[i3] === "number")
            m2.blocksizes[i3] = d2.blocksizes[i3];
          else if (typeof d2.blocksizes[i3] === "object")
            m2.blocksizes[i3] = new $util.LongBits(d2.blocksizes[i3].low >>> 0, d2.blocksizes[i3].high >>> 0).toNumber(true);
        }
      }
      if (d2.hashType != null) {
        if ($util.Long)
          (m2.hashType = $util.Long.fromValue(d2.hashType)).unsigned = true;
        else if (typeof d2.hashType === "string")
          m2.hashType = parseInt(d2.hashType, 10);
        else if (typeof d2.hashType === "number")
          m2.hashType = d2.hashType;
        else if (typeof d2.hashType === "object")
          m2.hashType = new $util.LongBits(d2.hashType.low >>> 0, d2.hashType.high >>> 0).toNumber(true);
      }
      if (d2.fanout != null) {
        if ($util.Long)
          (m2.fanout = $util.Long.fromValue(d2.fanout)).unsigned = true;
        else if (typeof d2.fanout === "string")
          m2.fanout = parseInt(d2.fanout, 10);
        else if (typeof d2.fanout === "number")
          m2.fanout = d2.fanout;
        else if (typeof d2.fanout === "object")
          m2.fanout = new $util.LongBits(d2.fanout.low >>> 0, d2.fanout.high >>> 0).toNumber(true);
      }
      if (d2.mode != null) {
        m2.mode = d2.mode >>> 0;
      }
      if (d2.mtime != null) {
        if (typeof d2.mtime !== "object")
          throw TypeError(".Data.mtime: object expected");
        m2.mtime = $root.UnixTime.fromObject(d2.mtime);
      }
      return m2;
    };
    Data2.toObject = function toObject(m2, o2) {
      if (!o2)
        o2 = {};
      var d2 = {};
      if (o2.arrays || o2.defaults) {
        d2.blocksizes = [];
      }
      if (o2.defaults) {
        d2.Type = o2.enums === String ? "Raw" : 0;
        if (o2.bytes === String)
          d2.Data = "";
        else {
          d2.Data = [];
          if (o2.bytes !== Array)
            d2.Data = $util.newBuffer(d2.Data);
        }
        if ($util.Long) {
          var n3 = new $util.Long(0, 0, true);
          d2.filesize = o2.longs === String ? n3.toString() : o2.longs === Number ? n3.toNumber() : n3;
        } else
          d2.filesize = o2.longs === String ? "0" : 0;
        if ($util.Long) {
          var n3 = new $util.Long(0, 0, true);
          d2.hashType = o2.longs === String ? n3.toString() : o2.longs === Number ? n3.toNumber() : n3;
        } else
          d2.hashType = o2.longs === String ? "0" : 0;
        if ($util.Long) {
          var n3 = new $util.Long(0, 0, true);
          d2.fanout = o2.longs === String ? n3.toString() : o2.longs === Number ? n3.toNumber() : n3;
        } else
          d2.fanout = o2.longs === String ? "0" : 0;
        d2.mode = 0;
        d2.mtime = null;
      }
      if (m2.Type != null && m2.hasOwnProperty("Type")) {
        d2.Type = o2.enums === String ? $root.Data.DataType[m2.Type] : m2.Type;
      }
      if (m2.Data != null && m2.hasOwnProperty("Data")) {
        d2.Data = o2.bytes === String ? $util.base64.encode(m2.Data, 0, m2.Data.length) : o2.bytes === Array ? Array.prototype.slice.call(m2.Data) : m2.Data;
      }
      if (m2.filesize != null && m2.hasOwnProperty("filesize")) {
        if (typeof m2.filesize === "number")
          d2.filesize = o2.longs === String ? String(m2.filesize) : m2.filesize;
        else
          d2.filesize = o2.longs === String ? $util.Long.prototype.toString.call(m2.filesize) : o2.longs === Number ? new $util.LongBits(m2.filesize.low >>> 0, m2.filesize.high >>> 0).toNumber(true) : m2.filesize;
      }
      if (m2.blocksizes && m2.blocksizes.length) {
        d2.blocksizes = [];
        for (var j = 0; j < m2.blocksizes.length; ++j) {
          if (typeof m2.blocksizes[j] === "number")
            d2.blocksizes[j] = o2.longs === String ? String(m2.blocksizes[j]) : m2.blocksizes[j];
          else
            d2.blocksizes[j] = o2.longs === String ? $util.Long.prototype.toString.call(m2.blocksizes[j]) : o2.longs === Number ? new $util.LongBits(m2.blocksizes[j].low >>> 0, m2.blocksizes[j].high >>> 0).toNumber(true) : m2.blocksizes[j];
        }
      }
      if (m2.hashType != null && m2.hasOwnProperty("hashType")) {
        if (typeof m2.hashType === "number")
          d2.hashType = o2.longs === String ? String(m2.hashType) : m2.hashType;
        else
          d2.hashType = o2.longs === String ? $util.Long.prototype.toString.call(m2.hashType) : o2.longs === Number ? new $util.LongBits(m2.hashType.low >>> 0, m2.hashType.high >>> 0).toNumber(true) : m2.hashType;
      }
      if (m2.fanout != null && m2.hasOwnProperty("fanout")) {
        if (typeof m2.fanout === "number")
          d2.fanout = o2.longs === String ? String(m2.fanout) : m2.fanout;
        else
          d2.fanout = o2.longs === String ? $util.Long.prototype.toString.call(m2.fanout) : o2.longs === Number ? new $util.LongBits(m2.fanout.low >>> 0, m2.fanout.high >>> 0).toNumber(true) : m2.fanout;
      }
      if (m2.mode != null && m2.hasOwnProperty("mode")) {
        d2.mode = m2.mode;
      }
      if (m2.mtime != null && m2.hasOwnProperty("mtime")) {
        d2.mtime = $root.UnixTime.toObject(m2.mtime, o2);
      }
      return d2;
    };
    Data2.prototype.toJSON = function toJSON2() {
      return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
    };
    Data2.DataType = function() {
      const valuesById = {}, values = Object.create(valuesById);
      values[valuesById[0] = "Raw"] = 0;
      values[valuesById[1] = "Directory"] = 1;
      values[valuesById[2] = "File"] = 2;
      values[valuesById[3] = "Metadata"] = 3;
      values[valuesById[4] = "Symlink"] = 4;
      values[valuesById[5] = "HAMTShard"] = 5;
      return values;
    }();
    return Data2;
  })();
  var UnixTime = $root.UnixTime = (() => {
    function UnixTime2(p2) {
      if (p2) {
        for (var ks = Object.keys(p2), i3 = 0; i3 < ks.length; ++i3)
          if (p2[ks[i3]] != null)
            this[ks[i3]] = p2[ks[i3]];
      }
    }
    UnixTime2.prototype.Seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    UnixTime2.prototype.FractionalNanoseconds = 0;
    UnixTime2.encode = function encode12(m2, w2) {
      if (!w2)
        w2 = $Writer.create();
      w2.uint32(8).int64(m2.Seconds);
      if (m2.FractionalNanoseconds != null && Object.hasOwnProperty.call(m2, "FractionalNanoseconds"))
        w2.uint32(21).fixed32(m2.FractionalNanoseconds);
      return w2;
    };
    UnixTime2.decode = function decode11(r3, l2) {
      if (!(r3 instanceof $Reader))
        r3 = $Reader.create(r3);
      var c2 = l2 === void 0 ? r3.len : r3.pos + l2, m2 = new $root.UnixTime();
      while (r3.pos < c2) {
        var t3 = r3.uint32();
        switch (t3 >>> 3) {
          case 1:
            m2.Seconds = r3.int64();
            break;
          case 2:
            m2.FractionalNanoseconds = r3.fixed32();
            break;
          default:
            r3.skipType(t3 & 7);
            break;
        }
      }
      if (!m2.hasOwnProperty("Seconds"))
        throw $util.ProtocolError("missing required 'Seconds'", { instance: m2 });
      return m2;
    };
    UnixTime2.fromObject = function fromObject(d2) {
      if (d2 instanceof $root.UnixTime)
        return d2;
      var m2 = new $root.UnixTime();
      if (d2.Seconds != null) {
        if ($util.Long)
          (m2.Seconds = $util.Long.fromValue(d2.Seconds)).unsigned = false;
        else if (typeof d2.Seconds === "string")
          m2.Seconds = parseInt(d2.Seconds, 10);
        else if (typeof d2.Seconds === "number")
          m2.Seconds = d2.Seconds;
        else if (typeof d2.Seconds === "object")
          m2.Seconds = new $util.LongBits(d2.Seconds.low >>> 0, d2.Seconds.high >>> 0).toNumber();
      }
      if (d2.FractionalNanoseconds != null) {
        m2.FractionalNanoseconds = d2.FractionalNanoseconds >>> 0;
      }
      return m2;
    };
    UnixTime2.toObject = function toObject(m2, o2) {
      if (!o2)
        o2 = {};
      var d2 = {};
      if (o2.defaults) {
        if ($util.Long) {
          var n3 = new $util.Long(0, 0, false);
          d2.Seconds = o2.longs === String ? n3.toString() : o2.longs === Number ? n3.toNumber() : n3;
        } else
          d2.Seconds = o2.longs === String ? "0" : 0;
        d2.FractionalNanoseconds = 0;
      }
      if (m2.Seconds != null && m2.hasOwnProperty("Seconds")) {
        if (typeof m2.Seconds === "number")
          d2.Seconds = o2.longs === String ? String(m2.Seconds) : m2.Seconds;
        else
          d2.Seconds = o2.longs === String ? $util.Long.prototype.toString.call(m2.Seconds) : o2.longs === Number ? new $util.LongBits(m2.Seconds.low >>> 0, m2.Seconds.high >>> 0).toNumber() : m2.Seconds;
      }
      if (m2.FractionalNanoseconds != null && m2.hasOwnProperty("FractionalNanoseconds")) {
        d2.FractionalNanoseconds = m2.FractionalNanoseconds;
      }
      return d2;
    };
    UnixTime2.prototype.toJSON = function toJSON2() {
      return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
    };
    return UnixTime2;
  })();
  var Metadata = $root.Metadata = (() => {
    function Metadata2(p2) {
      if (p2) {
        for (var ks = Object.keys(p2), i3 = 0; i3 < ks.length; ++i3)
          if (p2[ks[i3]] != null)
            this[ks[i3]] = p2[ks[i3]];
      }
    }
    Metadata2.prototype.MimeType = "";
    Metadata2.encode = function encode12(m2, w2) {
      if (!w2)
        w2 = $Writer.create();
      if (m2.MimeType != null && Object.hasOwnProperty.call(m2, "MimeType"))
        w2.uint32(10).string(m2.MimeType);
      return w2;
    };
    Metadata2.decode = function decode11(r3, l2) {
      if (!(r3 instanceof $Reader))
        r3 = $Reader.create(r3);
      var c2 = l2 === void 0 ? r3.len : r3.pos + l2, m2 = new $root.Metadata();
      while (r3.pos < c2) {
        var t3 = r3.uint32();
        switch (t3 >>> 3) {
          case 1:
            m2.MimeType = r3.string();
            break;
          default:
            r3.skipType(t3 & 7);
            break;
        }
      }
      return m2;
    };
    Metadata2.fromObject = function fromObject(d2) {
      if (d2 instanceof $root.Metadata)
        return d2;
      var m2 = new $root.Metadata();
      if (d2.MimeType != null) {
        m2.MimeType = String(d2.MimeType);
      }
      return m2;
    };
    Metadata2.toObject = function toObject(m2, o2) {
      if (!o2)
        o2 = {};
      var d2 = {};
      if (o2.defaults) {
        d2.MimeType = "";
      }
      if (m2.MimeType != null && m2.hasOwnProperty("MimeType")) {
        d2.MimeType = m2.MimeType;
      }
      return d2;
    };
    Metadata2.prototype.toJSON = function toJSON2() {
      return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
    };
    return Metadata2;
  })();

  // node_modules/ipfs-unixfs/esm/src/index.js
  var PBData = Data;
  var types2 = [
    "raw",
    "directory",
    "file",
    "metadata",
    "symlink",
    "hamt-sharded-directory"
  ];
  var dirTypes = [
    "directory",
    "hamt-sharded-directory"
  ];
  var DEFAULT_FILE_MODE = parseInt("0644", 8);
  var DEFAULT_DIRECTORY_MODE = parseInt("0755", 8);
  function parseMode(mode) {
    if (mode == null) {
      return void 0;
    }
    if (typeof mode === "number") {
      return mode & 4095;
    }
    mode = mode.toString();
    if (mode.substring(0, 1) === "0") {
      return parseInt(mode, 8) & 4095;
    }
    return parseInt(mode, 10) & 4095;
  }
  function parseMtime(input) {
    if (input == null) {
      return void 0;
    }
    let mtime;
    if (input.secs != null) {
      mtime = {
        secs: input.secs,
        nsecs: input.nsecs
      };
    }
    if (input.Seconds != null) {
      mtime = {
        secs: input.Seconds,
        nsecs: input.FractionalNanoseconds
      };
    }
    if (Array.isArray(input)) {
      mtime = {
        secs: input[0],
        nsecs: input[1]
      };
    }
    if (input instanceof Date) {
      const ms = input.getTime();
      const secs = Math.floor(ms / 1e3);
      mtime = {
        secs,
        nsecs: (ms - secs * 1e3) * 1e3
      };
    }
    if (!Object.prototype.hasOwnProperty.call(mtime, "secs")) {
      return void 0;
    }
    if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {
      throw (0, import_err_code.default)(new Error("mtime-nsecs must be within the range [0,999999999]"), "ERR_INVALID_MTIME_NSECS");
    }
    return mtime;
  }
  var UnixFS = class {
    static unmarshal(marshaled) {
      const message = PBData.decode(marshaled);
      const decoded = PBData.toObject(message, {
        defaults: false,
        arrays: true,
        longs: Number,
        objects: false
      });
      const data = new UnixFS({
        type: types2[decoded.Type],
        data: decoded.Data,
        blockSizes: decoded.blocksizes,
        mode: decoded.mode,
        mtime: decoded.mtime ? {
          secs: decoded.mtime.Seconds,
          nsecs: decoded.mtime.FractionalNanoseconds
        } : void 0
      });
      data._originalMode = decoded.mode || 0;
      return data;
    }
    constructor(options = { type: "file" }) {
      const { type: type4, data, blockSizes, hashType, fanout, mtime, mode } = options;
      if (type4 && !types2.includes(type4)) {
        throw (0, import_err_code.default)(new Error("Type: " + type4 + " is not valid"), "ERR_INVALID_TYPE");
      }
      this.type = type4 || "file";
      this.data = data;
      this.hashType = hashType;
      this.fanout = fanout;
      this.blockSizes = blockSizes || [];
      this._originalMode = 0;
      this.mode = parseMode(mode);
      if (mtime) {
        this.mtime = parseMtime(mtime);
        if (this.mtime && !this.mtime.nsecs) {
          this.mtime.nsecs = 0;
        }
      }
    }
    set mode(mode) {
      this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;
      const parsedMode = parseMode(mode);
      if (parsedMode !== void 0) {
        this._mode = parsedMode;
      }
    }
    get mode() {
      return this._mode;
    }
    isDirectory() {
      return Boolean(this.type && dirTypes.includes(this.type));
    }
    addBlockSize(size) {
      this.blockSizes.push(size);
    }
    removeBlockSize(index3) {
      this.blockSizes.splice(index3, 1);
    }
    fileSize() {
      if (this.isDirectory()) {
        return 0;
      }
      let sum = 0;
      this.blockSizes.forEach((size) => {
        sum += size;
      });
      if (this.data) {
        sum += this.data.length;
      }
      return sum;
    }
    marshal() {
      let type4;
      switch (this.type) {
        case "raw":
          type4 = PBData.DataType.Raw;
          break;
        case "directory":
          type4 = PBData.DataType.Directory;
          break;
        case "file":
          type4 = PBData.DataType.File;
          break;
        case "metadata":
          type4 = PBData.DataType.Metadata;
          break;
        case "symlink":
          type4 = PBData.DataType.Symlink;
          break;
        case "hamt-sharded-directory":
          type4 = PBData.DataType.HAMTShard;
          break;
        default:
          throw (0, import_err_code.default)(new Error("Type: " + type4 + " is not valid"), "ERR_INVALID_TYPE");
      }
      let data = this.data;
      if (!this.data || !this.data.length) {
        data = void 0;
      }
      let mode;
      if (this.mode != null) {
        mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);
        if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {
          mode = void 0;
        }
        if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {
          mode = void 0;
        }
      }
      let mtime;
      if (this.mtime != null) {
        const parsed = parseMtime(this.mtime);
        if (parsed) {
          mtime = {
            Seconds: parsed.secs,
            FractionalNanoseconds: parsed.nsecs
          };
          if (mtime.FractionalNanoseconds === 0) {
            delete mtime.FractionalNanoseconds;
          }
        }
      }
      const pbData = {
        Type: type4,
        Data: data,
        filesize: this.isDirectory() ? void 0 : this.fileSize(),
        blocksizes: this.blockSizes,
        hashType: this.hashType,
        fanout: this.fanout,
        mode,
        mtime
      };
      return PBData.encode(pbData).finish();
    }
  };

  // node_modules/ipfs-unixfs-importer/esm/src/utils/persist.js
  init_cid();

  // node_modules/@ipld/dag-pb/esm/src/index.js
  var src_exports = {};
  __export(src_exports, {
    code: () => code2,
    createLink: () => createLink,
    createNode: () => createNode,
    decode: () => decode7,
    encode: () => encode7,
    name: () => name,
    prepare: () => prepare,
    validate: () => validate
  });
  init_cid();

  // node_modules/@ipld/dag-pb/esm/src/pb-decode.js
  var textDecoder2 = new TextDecoder();
  function decodeVarint(bytes, offset3) {
    let v2 = 0;
    for (let shift = 0; ; shift += 7) {
      if (shift >= 64) {
        throw new Error("protobuf: varint overflow");
      }
      if (offset3 >= bytes.length) {
        throw new Error("protobuf: unexpected end of data");
      }
      const b2 = bytes[offset3++];
      v2 += shift < 28 ? (b2 & 127) << shift : (b2 & 127) * 2 ** shift;
      if (b2 < 128) {
        break;
      }
    }
    return [
      v2,
      offset3
    ];
  }
  function decodeBytes(bytes, offset3) {
    let byteLen;
    [byteLen, offset3] = decodeVarint(bytes, offset3);
    const postOffset = offset3 + byteLen;
    if (byteLen < 0 || postOffset < 0) {
      throw new Error("protobuf: invalid length");
    }
    if (postOffset > bytes.length) {
      throw new Error("protobuf: unexpected end of data");
    }
    return [
      bytes.subarray(offset3, postOffset),
      postOffset
    ];
  }
  function decodeKey(bytes, index3) {
    let wire;
    [wire, index3] = decodeVarint(bytes, index3);
    return [
      wire & 7,
      wire >> 3,
      index3
    ];
  }
  function decodeLink(bytes) {
    const link = {};
    const l2 = bytes.length;
    let index3 = 0;
    while (index3 < l2) {
      let wireType, fieldNum;
      [wireType, fieldNum, index3] = decodeKey(bytes, index3);
      if (fieldNum === 1) {
        if (link.Hash) {
          throw new Error("protobuf: (PBLink) duplicate Hash section");
        }
        if (wireType !== 2) {
          throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Hash`);
        }
        if (link.Name !== void 0) {
          throw new Error("protobuf: (PBLink) invalid order, found Name before Hash");
        }
        if (link.Tsize !== void 0) {
          throw new Error("protobuf: (PBLink) invalid order, found Tsize before Hash");
        }
        ;
        [link.Hash, index3] = decodeBytes(bytes, index3);
      } else if (fieldNum === 2) {
        if (link.Name !== void 0) {
          throw new Error("protobuf: (PBLink) duplicate Name section");
        }
        if (wireType !== 2) {
          throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Name`);
        }
        if (link.Tsize !== void 0) {
          throw new Error("protobuf: (PBLink) invalid order, found Tsize before Name");
        }
        let byts;
        [byts, index3] = decodeBytes(bytes, index3);
        link.Name = textDecoder2.decode(byts);
      } else if (fieldNum === 3) {
        if (link.Tsize !== void 0) {
          throw new Error("protobuf: (PBLink) duplicate Tsize section");
        }
        if (wireType !== 0) {
          throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Tsize`);
        }
        ;
        [link.Tsize, index3] = decodeVarint(bytes, index3);
      } else {
        throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${fieldNum}`);
      }
    }
    if (index3 > l2) {
      throw new Error("protobuf: (PBLink) unexpected end of data");
    }
    return link;
  }
  function decodeNode(bytes) {
    const l2 = bytes.length;
    let index3 = 0;
    let links3;
    let linksBeforeData = false;
    let data;
    while (index3 < l2) {
      let wireType, fieldNum;
      [wireType, fieldNum, index3] = decodeKey(bytes, index3);
      if (wireType !== 2) {
        throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${wireType}`);
      }
      if (fieldNum === 1) {
        if (data) {
          throw new Error("protobuf: (PBNode) duplicate Data section");
        }
        ;
        [data, index3] = decodeBytes(bytes, index3);
        if (links3) {
          linksBeforeData = true;
        }
      } else if (fieldNum === 2) {
        if (linksBeforeData) {
          throw new Error("protobuf: (PBNode) duplicate Links section");
        } else if (!links3) {
          links3 = [];
        }
        let byts;
        [byts, index3] = decodeBytes(bytes, index3);
        links3.push(decodeLink(byts));
      } else {
        throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${fieldNum}`);
      }
    }
    if (index3 > l2) {
      throw new Error("protobuf: (PBNode) unexpected end of data");
    }
    const node = {};
    if (data) {
      node.Data = data;
    }
    node.Links = links3 || [];
    return node;
  }

  // node_modules/@ipld/dag-pb/esm/src/pb-encode.js
  var textEncoder2 = new TextEncoder();
  var maxInt32 = 2 ** 32;
  var maxUInt32 = 2 ** 31;
  function encodeLink(link, bytes) {
    let i3 = bytes.length;
    if (typeof link.Tsize === "number") {
      if (link.Tsize < 0) {
        throw new Error("Tsize cannot be negative");
      }
      if (!Number.isSafeInteger(link.Tsize)) {
        throw new Error("Tsize too large for encoding");
      }
      i3 = encodeVarint(bytes, i3, link.Tsize) - 1;
      bytes[i3] = 24;
    }
    if (typeof link.Name === "string") {
      const nameBytes = textEncoder2.encode(link.Name);
      i3 -= nameBytes.length;
      bytes.set(nameBytes, i3);
      i3 = encodeVarint(bytes, i3, nameBytes.length) - 1;
      bytes[i3] = 18;
    }
    if (link.Hash) {
      i3 -= link.Hash.length;
      bytes.set(link.Hash, i3);
      i3 = encodeVarint(bytes, i3, link.Hash.length) - 1;
      bytes[i3] = 10;
    }
    return bytes.length - i3;
  }
  function encodeNode(node) {
    const size = sizeNode(node);
    const bytes = new Uint8Array(size);
    let i3 = size;
    if (node.Data) {
      i3 -= node.Data.length;
      bytes.set(node.Data, i3);
      i3 = encodeVarint(bytes, i3, node.Data.length) - 1;
      bytes[i3] = 10;
    }
    if (node.Links) {
      for (let index3 = node.Links.length - 1; index3 >= 0; index3--) {
        const size2 = encodeLink(node.Links[index3], bytes.subarray(0, i3));
        i3 -= size2;
        i3 = encodeVarint(bytes, i3, size2) - 1;
        bytes[i3] = 18;
      }
    }
    return bytes;
  }
  function sizeLink(link) {
    let n3 = 0;
    if (link.Hash) {
      const l2 = link.Hash.length;
      n3 += 1 + l2 + sov(l2);
    }
    if (typeof link.Name === "string") {
      const l2 = textEncoder2.encode(link.Name).length;
      n3 += 1 + l2 + sov(l2);
    }
    if (typeof link.Tsize === "number") {
      n3 += 1 + sov(link.Tsize);
    }
    return n3;
  }
  function sizeNode(node) {
    let n3 = 0;
    if (node.Data) {
      const l2 = node.Data.length;
      n3 += 1 + l2 + sov(l2);
    }
    if (node.Links) {
      for (const link of node.Links) {
        const l2 = sizeLink(link);
        n3 += 1 + l2 + sov(l2);
      }
    }
    return n3;
  }
  function encodeVarint(bytes, offset3, v2) {
    offset3 -= sov(v2);
    const base3 = offset3;
    while (v2 >= maxUInt32) {
      bytes[offset3++] = v2 & 127 | 128;
      v2 /= 128;
    }
    while (v2 >= 128) {
      bytes[offset3++] = v2 & 127 | 128;
      v2 >>>= 7;
    }
    bytes[offset3] = v2;
    return base3;
  }
  function sov(x) {
    if (x % 2 === 0) {
      x++;
    }
    return Math.floor((len64(x) + 6) / 7);
  }
  function len64(x) {
    let n3 = 0;
    if (x >= maxInt32) {
      x = Math.floor(x / maxInt32);
      n3 = 32;
    }
    if (x >= 1 << 16) {
      x >>>= 16;
      n3 += 16;
    }
    if (x >= 1 << 8) {
      x >>>= 8;
      n3 += 8;
    }
    return n3 + len8tab[x];
  }
  var len8tab = [
    0,
    1,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8
  ];

  // node_modules/@ipld/dag-pb/esm/src/util.js
  init_cid();
  var pbNodeProperties = [
    "Data",
    "Links"
  ];
  var pbLinkProperties = [
    "Hash",
    "Name",
    "Tsize"
  ];
  var textEncoder3 = new TextEncoder();
  function linkComparator(a2, b2) {
    if (a2 === b2) {
      return 0;
    }
    const abuf = a2.Name ? textEncoder3.encode(a2.Name) : [];
    const bbuf = b2.Name ? textEncoder3.encode(b2.Name) : [];
    let x = abuf.length;
    let y2 = bbuf.length;
    for (let i3 = 0, len = Math.min(x, y2); i3 < len; ++i3) {
      if (abuf[i3] !== bbuf[i3]) {
        x = abuf[i3];
        y2 = bbuf[i3];
        break;
      }
    }
    return x < y2 ? -1 : y2 < x ? 1 : 0;
  }
  function hasOnlyProperties(node, properties) {
    return !Object.keys(node).some((p2) => !properties.includes(p2));
  }
  function asLink(link) {
    if (typeof link.asCID === "object") {
      const Hash = CID.asCID(link);
      if (!Hash) {
        throw new TypeError("Invalid DAG-PB form");
      }
      return { Hash };
    }
    if (typeof link !== "object" || Array.isArray(link)) {
      throw new TypeError("Invalid DAG-PB form");
    }
    const pbl = {};
    if (link.Hash) {
      let cid = CID.asCID(link.Hash);
      try {
        if (!cid) {
          if (typeof link.Hash === "string") {
            cid = CID.parse(link.Hash);
          } else if (link.Hash instanceof Uint8Array) {
            cid = CID.decode(link.Hash);
          }
        }
      } catch (e3) {
        throw new TypeError(`Invalid DAG-PB form: ${e3.message}`);
      }
      if (cid) {
        pbl.Hash = cid;
      }
    }
    if (!pbl.Hash) {
      throw new TypeError("Invalid DAG-PB form");
    }
    if (typeof link.Name === "string") {
      pbl.Name = link.Name;
    }
    if (typeof link.Tsize === "number") {
      pbl.Tsize = link.Tsize;
    }
    return pbl;
  }
  function prepare(node) {
    if (node instanceof Uint8Array || typeof node === "string") {
      node = { Data: node };
    }
    if (typeof node !== "object" || Array.isArray(node)) {
      throw new TypeError("Invalid DAG-PB form");
    }
    const pbn = {};
    if (node.Data !== void 0) {
      if (typeof node.Data === "string") {
        pbn.Data = textEncoder3.encode(node.Data);
      } else if (node.Data instanceof Uint8Array) {
        pbn.Data = node.Data;
      } else {
        throw new TypeError("Invalid DAG-PB form");
      }
    }
    if (node.Links !== void 0) {
      if (Array.isArray(node.Links)) {
        pbn.Links = node.Links.map(asLink);
        pbn.Links.sort(linkComparator);
      } else {
        throw new TypeError("Invalid DAG-PB form");
      }
    } else {
      pbn.Links = [];
    }
    return pbn;
  }
  function validate(node) {
    if (!node || typeof node !== "object" || Array.isArray(node)) {
      throw new TypeError("Invalid DAG-PB form");
    }
    if (!hasOnlyProperties(node, pbNodeProperties)) {
      throw new TypeError("Invalid DAG-PB form (extraneous properties)");
    }
    if (node.Data !== void 0 && !(node.Data instanceof Uint8Array)) {
      throw new TypeError("Invalid DAG-PB form (Data must be a Uint8Array)");
    }
    if (!Array.isArray(node.Links)) {
      throw new TypeError("Invalid DAG-PB form (Links must be an array)");
    }
    for (let i3 = 0; i3 < node.Links.length; i3++) {
      const link = node.Links[i3];
      if (!link || typeof link !== "object" || Array.isArray(link)) {
        throw new TypeError("Invalid DAG-PB form (bad link object)");
      }
      if (!hasOnlyProperties(link, pbLinkProperties)) {
        throw new TypeError("Invalid DAG-PB form (extraneous properties on link object)");
      }
      if (!link.Hash) {
        throw new TypeError("Invalid DAG-PB form (link must have a Hash)");
      }
      if (link.Hash.asCID !== link.Hash) {
        throw new TypeError("Invalid DAG-PB form (link Hash must be a CID)");
      }
      if (link.Name !== void 0 && typeof link.Name !== "string") {
        throw new TypeError("Invalid DAG-PB form (link Name must be a string)");
      }
      if (link.Tsize !== void 0 && (typeof link.Tsize !== "number" || link.Tsize % 1 !== 0)) {
        throw new TypeError("Invalid DAG-PB form (link Tsize must be an integer)");
      }
      if (i3 > 0 && linkComparator(link, node.Links[i3 - 1]) === -1) {
        throw new TypeError("Invalid DAG-PB form (links must be sorted by Name bytes)");
      }
    }
  }
  function createNode(data, links3 = []) {
    return prepare({
      Data: data,
      Links: links3
    });
  }
  function createLink(name5, size, cid) {
    return asLink({
      Hash: cid,
      Name: name5,
      Tsize: size
    });
  }

  // node_modules/@ipld/dag-pb/esm/src/index.js
  var name = "dag-pb";
  var code2 = 112;
  function encode7(node) {
    validate(node);
    const pbn = {};
    if (node.Links) {
      pbn.Links = node.Links.map((l2) => {
        const link = {};
        if (l2.Hash) {
          link.Hash = l2.Hash.bytes;
        }
        if (l2.Name !== void 0) {
          link.Name = l2.Name;
        }
        if (l2.Tsize !== void 0) {
          link.Tsize = l2.Tsize;
        }
        return link;
      });
    }
    if (node.Data) {
      pbn.Data = node.Data;
    }
    return encodeNode(pbn);
  }
  function decode7(bytes) {
    const pbn = decodeNode(bytes);
    const node = {};
    if (pbn.Data) {
      node.Data = pbn.Data;
    }
    if (pbn.Links) {
      node.Links = pbn.Links.map((l2) => {
        const link = {};
        try {
          link.Hash = CID.decode(l2.Hash);
        } catch (e3) {
        }
        if (!link.Hash) {
          throw new Error("Invalid Hash field found in link, expected CID");
        }
        if (l2.Name !== void 0) {
          link.Name = l2.Name;
        }
        if (l2.Tsize !== void 0) {
          link.Tsize = l2.Tsize;
        }
        return link;
      });
    }
    return node;
  }

  // node_modules/ipfs-unixfs-importer/esm/src/utils/persist.js
  init_sha2_browser();
  var persist = async (buffer2, blockstore, options) => {
    if (!options.codec) {
      options.codec = src_exports;
    }
    if (!options.hasher) {
      options.hasher = sha256;
    }
    if (options.cidVersion === void 0) {
      options.cidVersion = 1;
    }
    if (options.codec === src_exports && options.hasher !== sha256) {
      options.cidVersion = 1;
    }
    const multihash = await options.hasher.digest(buffer2);
    const cid = CID.create(options.cidVersion, options.codec.code, multihash);
    if (!options.onlyHash) {
      await blockstore.put(cid, buffer2, { signal: options.signal });
    }
    return cid;
  };
  var persist_default = persist;

  // node_modules/ipfs-unixfs-importer/esm/src/dag-builder/dir.js
  var dirBuilder = async (item, blockstore, options) => {
    const unixfs = new UnixFS({
      type: "directory",
      mtime: item.mtime,
      mode: item.mode
    });
    const buffer2 = encode7(prepare({ Data: unixfs.marshal() }));
    const cid = await persist_default(buffer2, blockstore, options);
    const path2 = item.path;
    return {
      cid,
      path: path2,
      unixfs,
      size: buffer2.length
    };
  };
  var dir_default = dirBuilder;

  // node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/index.js
  var import_err_code2 = __toESM(require_err_code(), 1);
  var import_it_parallel_batch = __toESM(require_it_parallel_batch(), 1);
  init_raw();

  // node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/flat.js
  var import_it_all = __toESM(require_it_all(), 1);
  async function flat(source, reduce2) {
    return reduce2(await (0, import_it_all.default)(source));
  }
  var flat_default = flat;

  // node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/balanced.js
  var import_it_batch = __toESM(require_it_batch(), 1);
  function balanced(source, reduce2, options) {
    return reduceToParents(source, reduce2, options);
  }
  async function reduceToParents(source, reduce2, options) {
    const roots = [];
    for await (const chunked of (0, import_it_batch.default)(source, options.maxChildrenPerNode)) {
      roots.push(await reduce2(chunked));
    }
    if (roots.length > 1) {
      return reduceToParents(roots, reduce2, options);
    }
    return roots[0];
  }
  var balanced_default = balanced;

  // node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/trickle.js
  var import_it_batch2 = __toESM(require_it_batch(), 1);
  async function trickleStream(source, reduce2, options) {
    const root2 = new Root(options.layerRepeat);
    let iteration = 0;
    let maxDepth = 1;
    let subTree = root2;
    for await (const layer of (0, import_it_batch2.default)(source, options.maxChildrenPerNode)) {
      if (subTree.isFull()) {
        if (subTree !== root2) {
          root2.addChild(await subTree.reduce(reduce2));
        }
        if (iteration && iteration % options.layerRepeat === 0) {
          maxDepth++;
        }
        subTree = new SubTree(maxDepth, options.layerRepeat, iteration);
        iteration++;
      }
      subTree.append(layer);
    }
    if (subTree && subTree !== root2) {
      root2.addChild(await subTree.reduce(reduce2));
    }
    return root2.reduce(reduce2);
  }
  var trickle_default = trickleStream;
  var SubTree = class {
    constructor(maxDepth, layerRepeat, iteration = 0) {
      this.maxDepth = maxDepth;
      this.layerRepeat = layerRepeat;
      this.currentDepth = 1;
      this.iteration = iteration;
      this.root = this.node = this.parent = {
        children: [],
        depth: this.currentDepth,
        maxDepth,
        maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat
      };
    }
    isFull() {
      if (!this.root.data) {
        return false;
      }
      if (this.currentDepth < this.maxDepth && this.node.maxChildren) {
        this._addNextNodeToParent(this.node);
        return false;
      }
      const distantRelative = this._findParent(this.node, this.currentDepth);
      if (distantRelative) {
        this._addNextNodeToParent(distantRelative);
        return false;
      }
      return true;
    }
    _addNextNodeToParent(parent) {
      this.parent = parent;
      const nextNode = {
        children: [],
        depth: parent.depth + 1,
        parent,
        maxDepth: this.maxDepth,
        maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat
      };
      parent.children.push(nextNode);
      this.currentDepth = nextNode.depth;
      this.node = nextNode;
    }
    append(layer) {
      this.node.data = layer;
    }
    reduce(reduce2) {
      return this._reduce(this.root, reduce2);
    }
    async _reduce(node, reduce2) {
      let children = [];
      if (node.children.length) {
        children = await Promise.all(node.children.filter((child) => child.data).map((child) => this._reduce(child, reduce2)));
      }
      return reduce2((node.data || []).concat(children));
    }
    _findParent(node, depth) {
      const parent = node.parent;
      if (!parent || parent.depth === 0) {
        return;
      }
      if (parent.children.length === parent.maxChildren || !parent.maxChildren) {
        return this._findParent(parent, depth);
      }
      return parent;
    }
  };
  var Root = class extends SubTree {
    constructor(layerRepeat) {
      super(0, layerRepeat);
      this.root.depth = 0;
      this.currentDepth = 1;
    }
    addChild(child) {
      this.root.children.push(child);
    }
    reduce(reduce2) {
      return reduce2((this.root.data || []).concat(this.root.children));
    }
  };

  // node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/buffer-importer.js
  init_raw();
  async function* bufferImporter(file, block, options) {
    for await (let buffer2 of file.content) {
      yield async () => {
        options.progress(buffer2.length, file.path);
        let unixfs;
        const opts = {
          codec: src_exports,
          cidVersion: options.cidVersion,
          hasher: options.hasher,
          onlyHash: options.onlyHash
        };
        if (options.rawLeaves) {
          opts.codec = raw_exports;
          opts.cidVersion = 1;
        } else {
          unixfs = new UnixFS({
            type: options.leafType,
            data: buffer2
          });
          buffer2 = encode7({
            Data: unixfs.marshal(),
            Links: []
          });
        }
        return {
          cid: await persist_default(buffer2, block, opts),
          unixfs,
          size: buffer2.length
        };
      };
    }
  }
  var buffer_importer_default = bufferImporter;

  // node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/index.js
  var dagBuilders = {
    flat: flat_default,
    balanced: balanced_default,
    trickle: trickle_default
  };
  async function* buildFileBatch(file, blockstore, options) {
    let count2 = -1;
    let previous;
    let bufferImporter2;
    if (typeof options.bufferImporter === "function") {
      bufferImporter2 = options.bufferImporter;
    } else {
      bufferImporter2 = buffer_importer_default;
    }
    for await (const entry of (0, import_it_parallel_batch.default)(bufferImporter2(file, blockstore, options), options.blockWriteConcurrency)) {
      count2++;
      if (count2 === 0) {
        previous = entry;
        continue;
      } else if (count2 === 1 && previous) {
        yield previous;
        previous = null;
      }
      yield entry;
    }
    if (previous) {
      previous.single = true;
      yield previous;
    }
  }
  var reduce = (file, blockstore, options) => {
    async function reducer(leaves) {
      if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {
        const leaf = leaves[0];
        if (file.mtime !== void 0 || file.mode !== void 0) {
          let buffer3 = await blockstore.get(leaf.cid);
          leaf.unixfs = new UnixFS({
            type: "file",
            mtime: file.mtime,
            mode: file.mode,
            data: buffer3
          });
          buffer3 = encode7(prepare({ Data: leaf.unixfs.marshal() }));
          leaf.cid = await persist_default(buffer3, blockstore, {
            ...options,
            codec: src_exports,
            hasher: options.hasher,
            cidVersion: options.cidVersion
          });
          leaf.size = buffer3.length;
        }
        return {
          cid: leaf.cid,
          path: file.path,
          unixfs: leaf.unixfs,
          size: leaf.size
        };
      }
      const f2 = new UnixFS({
        type: "file",
        mtime: file.mtime,
        mode: file.mode
      });
      const links3 = leaves.filter((leaf) => {
        if (leaf.cid.code === code3 && leaf.size) {
          return true;
        }
        if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {
          return true;
        }
        return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);
      }).map((leaf) => {
        if (leaf.cid.code === code3) {
          f2.addBlockSize(leaf.size);
          return {
            Name: "",
            Tsize: leaf.size,
            Hash: leaf.cid
          };
        }
        if (!leaf.unixfs || !leaf.unixfs.data) {
          f2.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);
        } else {
          f2.addBlockSize(leaf.unixfs.data.length);
        }
        return {
          Name: "",
          Tsize: leaf.size,
          Hash: leaf.cid
        };
      });
      const node = {
        Data: f2.marshal(),
        Links: links3
      };
      const buffer2 = encode7(prepare(node));
      const cid = await persist_default(buffer2, blockstore, options);
      return {
        cid,
        path: file.path,
        unixfs: f2,
        size: buffer2.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)
      };
    }
    return reducer;
  };
  function fileBuilder(file, block, options) {
    const dagBuilder2 = dagBuilders[options.strategy];
    if (!dagBuilder2) {
      throw (0, import_err_code2.default)(new Error(`Unknown importer build strategy name: ${options.strategy}`), "ERR_BAD_STRATEGY");
    }
    return dagBuilder2(buildFileBatch(file, block, options), reduce(file, block, options), options);
  }
  var file_default = fileBuilder;

  // node_modules/ipfs-unixfs-importer/esm/src/dag-builder/index.js
  var import_err_code5 = __toESM(require_err_code(), 1);

  // node_modules/ipfs-unixfs-importer/esm/src/chunker/rabin.js
  var import_BufferList = __toESM(require_BufferList(), 1);
  var import_rabin_wasm = __toESM(require_src(), 1);
  var import_err_code3 = __toESM(require_err_code(), 1);
  async function* rabinChunker(source, options) {
    let min, max, avg;
    if (options.minChunkSize && options.maxChunkSize && options.avgChunkSize) {
      avg = options.avgChunkSize;
      min = options.minChunkSize;
      max = options.maxChunkSize;
    } else if (!options.avgChunkSize) {
      throw (0, import_err_code3.default)(new Error("please specify an average chunk size"), "ERR_INVALID_AVG_CHUNK_SIZE");
    } else {
      avg = options.avgChunkSize;
      min = avg / 3;
      max = avg + avg / 2;
    }
    if (min < 16) {
      throw (0, import_err_code3.default)(new Error("rabin min must be greater than 16"), "ERR_INVALID_MIN_CHUNK_SIZE");
    }
    if (max < min) {
      max = min;
    }
    if (avg < min) {
      avg = min;
    }
    const sizepow = Math.floor(Math.log2(avg));
    for await (const chunk of rabin(source, {
      min,
      max,
      bits: sizepow,
      window: options.window,
      polynomial: options.polynomial
    })) {
      yield chunk;
    }
  }
  var rabin_default = rabinChunker;
  async function* rabin(source, options) {
    const r3 = await (0, import_rabin_wasm.create)(options.bits, options.min, options.max, options.window);
    const buffers = new import_BufferList.default();
    for await (const chunk of source) {
      buffers.append(chunk);
      const sizes2 = r3.fingerprint(chunk);
      for (let i3 = 0; i3 < sizes2.length; i3++) {
        const size = sizes2[i3];
        const buf2 = buffers.slice(0, size);
        buffers.consume(size);
        yield buf2;
      }
    }
    if (buffers.length) {
      yield buffers.slice(0);
    }
  }

  // node_modules/ipfs-unixfs-importer/esm/src/chunker/fixed-size.js
  var import_BufferList2 = __toESM(require_BufferList(), 1);
  async function* fixedSizeChunker(source, options) {
    let bl = new import_BufferList2.default();
    let currentLength = 0;
    let emitted = false;
    const maxChunkSize = options.maxChunkSize;
    for await (const buffer2 of source) {
      bl.append(buffer2);
      currentLength += buffer2.length;
      while (currentLength >= maxChunkSize) {
        yield bl.slice(0, maxChunkSize);
        emitted = true;
        if (maxChunkSize === bl.length) {
          bl = new import_BufferList2.default();
          currentLength = 0;
        } else {
          const newBl = new import_BufferList2.default();
          newBl.append(bl.shallowSlice(maxChunkSize));
          bl = newBl;
          currentLength -= maxChunkSize;
        }
      }
    }
    if (!emitted || currentLength) {
      yield bl.slice(0, currentLength);
    }
  }
  var fixed_size_default = fixedSizeChunker;

  // node_modules/ipfs-unixfs-importer/esm/src/dag-builder/validate-chunks.js
  var import_err_code4 = __toESM(require_err_code(), 1);
  init_from_string();
  async function* validateChunks(source) {
    for await (const content of source) {
      if (content.length === void 0) {
        throw (0, import_err_code4.default)(new Error("Content was invalid"), "ERR_INVALID_CONTENT");
      }
      if (typeof content === "string" || content instanceof String) {
        yield fromString3(content.toString());
      } else if (Array.isArray(content)) {
        yield Uint8Array.from(content);
      } else if (content instanceof Uint8Array) {
        yield content;
      } else {
        throw (0, import_err_code4.default)(new Error("Content was invalid"), "ERR_INVALID_CONTENT");
      }
    }
  }
  var validate_chunks_default = validateChunks;

  // node_modules/ipfs-unixfs-importer/esm/src/dag-builder/index.js
  function isIterable(thing) {
    return Symbol.iterator in thing;
  }
  function isAsyncIterable(thing) {
    return Symbol.asyncIterator in thing;
  }
  function contentAsAsyncIterable(content) {
    try {
      if (content instanceof Uint8Array) {
        return async function* () {
          yield content;
        }();
      } else if (isIterable(content)) {
        return async function* () {
          yield* content;
        }();
      } else if (isAsyncIterable(content)) {
        return content;
      }
    } catch {
      throw (0, import_err_code5.default)(new Error("Content was invalid"), "ERR_INVALID_CONTENT");
    }
    throw (0, import_err_code5.default)(new Error("Content was invalid"), "ERR_INVALID_CONTENT");
  }
  async function* dagBuilder(source, blockstore, options) {
    for await (const entry of source) {
      if (entry.path) {
        if (entry.path.substring(0, 2) === "./") {
          options.wrapWithDirectory = true;
        }
        entry.path = entry.path.split("/").filter((path2) => path2 && path2 !== ".").join("/");
      }
      if (entry.content) {
        let chunker;
        if (typeof options.chunker === "function") {
          chunker = options.chunker;
        } else if (options.chunker === "rabin") {
          chunker = rabin_default;
        } else {
          chunker = fixed_size_default;
        }
        let chunkValidator;
        if (typeof options.chunkValidator === "function") {
          chunkValidator = options.chunkValidator;
        } else {
          chunkValidator = validate_chunks_default;
        }
        const file = {
          path: entry.path,
          mtime: entry.mtime,
          mode: entry.mode,
          content: chunker(chunkValidator(contentAsAsyncIterable(entry.content), options), options)
        };
        yield () => file_default(file, blockstore, options);
      } else if (entry.path) {
        const dir = {
          path: entry.path,
          mtime: entry.mtime,
          mode: entry.mode
        };
        yield () => dir_default(dir, blockstore, options);
      } else {
        throw new Error("Import candidate must have content or path or both");
      }
    }
  }
  var dag_builder_default = dagBuilder;

  // node_modules/ipfs-unixfs-importer/esm/src/dir.js
  var Dir = class {
    constructor(props, options) {
      this.options = options || {};
      this.root = props.root;
      this.dir = props.dir;
      this.path = props.path;
      this.dirty = props.dirty;
      this.flat = props.flat;
      this.parent = props.parent;
      this.parentKey = props.parentKey;
      this.unixfs = props.unixfs;
      this.mode = props.mode;
      this.mtime = props.mtime;
      this.cid = void 0;
      this.size = void 0;
    }
    async put(name5, value) {
    }
    get(name5) {
      return Promise.resolve(this);
    }
    async *eachChildSeries() {
    }
    async *flush(blockstore) {
    }
  };
  var dir_default2 = Dir;

  // node_modules/ipfs-unixfs-importer/esm/src/dir-flat.js
  var DirFlat = class extends dir_default2 {
    constructor(props, options) {
      super(props, options);
      this._children = {};
    }
    async put(name5, value) {
      this.cid = void 0;
      this.size = void 0;
      this._children[name5] = value;
    }
    get(name5) {
      return Promise.resolve(this._children[name5]);
    }
    childCount() {
      return Object.keys(this._children).length;
    }
    directChildrenCount() {
      return this.childCount();
    }
    onlyChild() {
      return this._children[Object.keys(this._children)[0]];
    }
    async *eachChildSeries() {
      const keys = Object.keys(this._children);
      for (let i3 = 0; i3 < keys.length; i3++) {
        const key2 = keys[i3];
        yield {
          key: key2,
          child: this._children[key2]
        };
      }
    }
    async *flush(block) {
      const children = Object.keys(this._children);
      const links3 = [];
      for (let i3 = 0; i3 < children.length; i3++) {
        let child = this._children[children[i3]];
        if (child instanceof dir_default2) {
          for await (const entry of child.flush(block)) {
            child = entry;
            yield child;
          }
        }
        if (child.size != null && child.cid) {
          links3.push({
            Name: children[i3],
            Tsize: child.size,
            Hash: child.cid
          });
        }
      }
      const unixfs = new UnixFS({
        type: "directory",
        mtime: this.mtime,
        mode: this.mode
      });
      const node = {
        Data: unixfs.marshal(),
        Links: links3
      };
      const buffer2 = encode7(prepare(node));
      const cid = await persist_default(buffer2, block, this.options);
      const size = buffer2.length + node.Links.reduce((acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize), 0);
      this.cid = cid;
      this.size = size;
      yield {
        cid,
        unixfs,
        path: this.path,
        size
      };
    }
  };
  var dir_flat_default = DirFlat;

  // node_modules/ipfs-unixfs-importer/esm/src/dir-sharded.js
  var import_hamt_sharding = __toESM(require_src2(), 1);
  var DirSharded = class extends dir_default2 {
    constructor(props, options) {
      super(props, options);
      this._bucket = (0, import_hamt_sharding.createHAMT)({
        hashFn: options.hamtHashFn,
        bits: options.hamtBucketBits
      });
    }
    async put(name5, value) {
      await this._bucket.put(name5, value);
    }
    get(name5) {
      return this._bucket.get(name5);
    }
    childCount() {
      return this._bucket.leafCount();
    }
    directChildrenCount() {
      return this._bucket.childrenCount();
    }
    onlyChild() {
      return this._bucket.onlyChild();
    }
    async *eachChildSeries() {
      for await (const { key: key2, value } of this._bucket.eachLeafSeries()) {
        yield {
          key: key2,
          child: value
        };
      }
    }
    async *flush(blockstore) {
      for await (const entry of flush(this._bucket, blockstore, this, this.options)) {
        yield {
          ...entry,
          path: this.path
        };
      }
    }
  };
  var dir_sharded_default = DirSharded;
  async function* flush(bucket, blockstore, shardRoot, options) {
    const children = bucket._children;
    const links3 = [];
    let childrenSize = 0;
    for (let i3 = 0; i3 < children.length; i3++) {
      const child = children.get(i3);
      if (!child) {
        continue;
      }
      const labelPrefix = i3.toString(16).toUpperCase().padStart(2, "0");
      if (child instanceof import_hamt_sharding.Bucket) {
        let shard;
        for await (const subShard of await flush(child, blockstore, null, options)) {
          shard = subShard;
        }
        if (!shard) {
          throw new Error("Could not flush sharded directory, no subshard found");
        }
        links3.push({
          Name: labelPrefix,
          Tsize: shard.size,
          Hash: shard.cid
        });
        childrenSize += shard.size;
      } else if (typeof child.value.flush === "function") {
        const dir2 = child.value;
        let flushedDir;
        for await (const entry of dir2.flush(blockstore)) {
          flushedDir = entry;
          yield flushedDir;
        }
        const label = labelPrefix + child.key;
        links3.push({
          Name: label,
          Tsize: flushedDir.size,
          Hash: flushedDir.cid
        });
        childrenSize += flushedDir.size;
      } else {
        const value = child.value;
        if (!value.cid) {
          continue;
        }
        const label = labelPrefix + child.key;
        const size2 = value.size;
        links3.push({
          Name: label,
          Tsize: size2,
          Hash: value.cid
        });
        childrenSize += size2;
      }
    }
    const data = Uint8Array.from(children.bitField().reverse());
    const dir = new UnixFS({
      type: "hamt-sharded-directory",
      data,
      fanout: bucket.tableSize(),
      hashType: options.hamtHashCode,
      mtime: shardRoot && shardRoot.mtime,
      mode: shardRoot && shardRoot.mode
    });
    const node = {
      Data: dir.marshal(),
      Links: links3
    };
    const buffer2 = encode7(prepare(node));
    const cid = await persist_default(buffer2, blockstore, options);
    const size = buffer2.length + childrenSize;
    yield {
      cid,
      unixfs: dir,
      size
    };
  }

  // node_modules/ipfs-unixfs-importer/esm/src/flat-to-shard.js
  async function flatToShard(child, dir, threshold, options) {
    let newDir = dir;
    if (dir instanceof dir_flat_default && dir.directChildrenCount() >= threshold) {
      newDir = await convertToShard(dir, options);
    }
    const parent = newDir.parent;
    if (parent) {
      if (newDir !== dir) {
        if (child) {
          child.parent = newDir;
        }
        if (!newDir.parentKey) {
          throw new Error("No parent key found");
        }
        await parent.put(newDir.parentKey, newDir);
      }
      return flatToShard(newDir, parent, threshold, options);
    }
    return newDir;
  }
  async function convertToShard(oldDir, options) {
    const newDir = new dir_sharded_default({
      root: oldDir.root,
      dir: true,
      parent: oldDir.parent,
      parentKey: oldDir.parentKey,
      path: oldDir.path,
      dirty: oldDir.dirty,
      flat: false,
      mtime: oldDir.mtime,
      mode: oldDir.mode
    }, options);
    for await (const { key: key2, child } of oldDir.eachChildSeries()) {
      await newDir.put(key2, child);
    }
    return newDir;
  }
  var flat_to_shard_default = flatToShard;

  // node_modules/ipfs-unixfs-importer/esm/src/utils/to-path-components.js
  var toPathComponents = (path2 = "") => {
    return (path2.trim().match(/([^\\/]|\\\/)+/g) || []).filter(Boolean);
  };
  var to_path_components_default = toPathComponents;

  // node_modules/ipfs-unixfs-importer/esm/src/tree-builder.js
  async function addToTree(elem, tree2, options) {
    const pathElems = to_path_components_default(elem.path || "");
    const lastIndex = pathElems.length - 1;
    let parent = tree2;
    let currentPath = "";
    for (let i3 = 0; i3 < pathElems.length; i3++) {
      const pathElem = pathElems[i3];
      currentPath += `${currentPath ? "/" : ""}${pathElem}`;
      const last3 = i3 === lastIndex;
      parent.dirty = true;
      parent.cid = void 0;
      parent.size = void 0;
      if (last3) {
        await parent.put(pathElem, elem);
        tree2 = await flat_to_shard_default(null, parent, options.shardSplitThreshold, options);
      } else {
        let dir = await parent.get(pathElem);
        if (!dir || !(dir instanceof dir_default2)) {
          dir = new dir_flat_default({
            root: false,
            dir: true,
            parent,
            parentKey: pathElem,
            path: currentPath,
            dirty: true,
            flat: true,
            mtime: dir && dir.unixfs && dir.unixfs.mtime,
            mode: dir && dir.unixfs && dir.unixfs.mode
          }, options);
        }
        await parent.put(pathElem, dir);
        parent = dir;
      }
    }
    return tree2;
  }
  async function* flushAndYield(tree2, blockstore) {
    if (!(tree2 instanceof dir_default2)) {
      if (tree2 && tree2.unixfs && tree2.unixfs.isDirectory()) {
        yield tree2;
      }
      return;
    }
    yield* tree2.flush(blockstore);
  }
  async function* treeBuilder(source, block, options) {
    let tree2 = new dir_flat_default({
      root: true,
      dir: true,
      path: "",
      dirty: true,
      flat: true
    }, options);
    for await (const entry of source) {
      if (!entry) {
        continue;
      }
      tree2 = await addToTree(entry, tree2, options);
      if (!entry.unixfs || !entry.unixfs.isDirectory()) {
        yield entry;
      }
    }
    if (options.wrapWithDirectory) {
      yield* flushAndYield(tree2, block);
    } else {
      for await (const unwrapped of tree2.eachChildSeries()) {
        if (!unwrapped) {
          continue;
        }
        yield* flushAndYield(unwrapped.child, block);
      }
    }
  }
  var tree_builder_default = treeBuilder;

  // node_modules/ipfs-unixfs-importer/esm/src/index.js
  async function* importer(source, blockstore, options = {}) {
    const opts = options_default(options);
    let dagBuilder2;
    if (typeof options.dagBuilder === "function") {
      dagBuilder2 = options.dagBuilder;
    } else {
      dagBuilder2 = dag_builder_default;
    }
    let treeBuilder2;
    if (typeof options.treeBuilder === "function") {
      treeBuilder2 = options.treeBuilder;
    } else {
      treeBuilder2 = tree_builder_default;
    }
    let candidates;
    if (Symbol.asyncIterator in source || Symbol.iterator in source) {
      candidates = source;
    } else {
      candidates = [source];
    }
    for await (const entry of treeBuilder2((0, import_it_parallel_batch2.default)(dagBuilder2(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {
      yield {
        cid: entry.cid,
        path: entry.path,
        unixfs: entry.unixfs,
        size: entry.size
      };
    }
  }

  // node_modules/ipfs-core-utils/esm/src/files/normalise-content.js
  var import_err_code6 = __toESM(require_err_code(), 1);
  init_from_string();
  var import_browser_readablestream_to_it = __toESM(require_browser_readablestream_to_it(), 1);
  var import_blob_to_it = __toESM(require_blob_to_it(), 1);
  var import_it_peekable = __toESM(require_it_peekable(), 1);
  var import_it_all2 = __toESM(require_it_all(), 1);
  var import_it_map = __toESM(require_it_map(), 1);

  // node_modules/ipfs-core-utils/esm/src/files/utils.js
  function isBytes(obj) {
    return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;
  }
  function isBlob2(obj) {
    return obj.constructor && (obj.constructor.name === "Blob" || obj.constructor.name === "File") && typeof obj.stream === "function";
  }
  function isFileObject(obj) {
    return typeof obj === "object" && (obj.path || obj.content);
  }
  var isReadableStream = (value) => value && typeof value.getReader === "function";

  // node_modules/ipfs-core-utils/esm/src/files/normalise-content.js
  async function* toAsyncIterable(thing) {
    yield thing;
  }
  async function normaliseContent(input) {
    if (isBytes(input)) {
      return toAsyncIterable(toBytes(input));
    }
    if (typeof input === "string" || input instanceof String) {
      return toAsyncIterable(toBytes(input.toString()));
    }
    if (isBlob2(input)) {
      return (0, import_blob_to_it.default)(input);
    }
    if (isReadableStream(input)) {
      input = (0, import_browser_readablestream_to_it.default)(input);
    }
    if (Symbol.iterator in input || Symbol.asyncIterator in input) {
      const peekable = (0, import_it_peekable.default)(input);
      const { value, done } = await peekable.peek();
      if (done) {
        return toAsyncIterable(new Uint8Array(0));
      }
      peekable.push(value);
      if (Number.isInteger(value)) {
        return toAsyncIterable(Uint8Array.from(await (0, import_it_all2.default)(peekable)));
      }
      if (isBytes(value) || typeof value === "string" || value instanceof String) {
        return (0, import_it_map.default)(peekable, toBytes);
      }
    }
    throw (0, import_err_code6.default)(new Error(`Unexpected input: ${input}`), "ERR_UNEXPECTED_INPUT");
  }
  function toBytes(chunk) {
    if (chunk instanceof Uint8Array) {
      return chunk;
    }
    if (ArrayBuffer.isView(chunk)) {
      return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);
    }
    if (chunk instanceof ArrayBuffer) {
      return new Uint8Array(chunk);
    }
    if (Array.isArray(chunk)) {
      return Uint8Array.from(chunk);
    }
    return fromString3(chunk.toString());
  }

  // node_modules/ipfs-core-utils/esm/src/files/normalise-candidate-single.js
  var import_err_code7 = __toESM(require_err_code(), 1);
  var import_browser_readablestream_to_it2 = __toESM(require_browser_readablestream_to_it(), 1);
  var import_it_peekable2 = __toESM(require_it_peekable(), 1);
  async function* normaliseCandidateSingle(input, normaliseContent2) {
    if (input === null || input === void 0) {
      throw (0, import_err_code7.default)(new Error(`Unexpected input: ${input}`), "ERR_UNEXPECTED_INPUT");
    }
    if (typeof input === "string" || input instanceof String) {
      yield toFileObject(input.toString(), normaliseContent2);
      return;
    }
    if (isBytes(input) || isBlob2(input)) {
      yield toFileObject(input, normaliseContent2);
      return;
    }
    if (isReadableStream(input)) {
      input = (0, import_browser_readablestream_to_it2.default)(input);
    }
    if (Symbol.iterator in input || Symbol.asyncIterator in input) {
      const peekable = (0, import_it_peekable2.default)(input);
      const { value, done } = await peekable.peek();
      if (done) {
        yield { content: [] };
        return;
      }
      peekable.push(value);
      if (Number.isInteger(value) || isBytes(value) || typeof value === "string" || value instanceof String) {
        yield toFileObject(peekable, normaliseContent2);
        return;
      }
      throw (0, import_err_code7.default)(new Error("Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead"), "ERR_UNEXPECTED_INPUT");
    }
    if (isFileObject(input)) {
      yield toFileObject(input, normaliseContent2);
      return;
    }
    throw (0, import_err_code7.default)(new Error('Unexpected input: cannot convert "' + typeof input + '" into ImportCandidate'), "ERR_UNEXPECTED_INPUT");
  }
  async function toFileObject(input, normaliseContent2) {
    const { path: path2, mode, mtime, content } = input;
    const file = {
      path: path2 || "",
      mode: parseMode(mode),
      mtime: parseMtime(mtime)
    };
    if (content) {
      file.content = await normaliseContent2(content);
    } else if (!path2) {
      file.content = await normaliseContent2(input);
    }
    return file;
  }

  // node_modules/ipfs-core-utils/esm/src/files/normalise-input-single.js
  function normaliseInput(input) {
    return normaliseCandidateSingle(input, normaliseContent);
  }

  // node_modules/ipfs-core-utils/esm/src/files/normalise-candidate-multiple.js
  var import_err_code8 = __toESM(require_err_code(), 1);
  var import_browser_readablestream_to_it3 = __toESM(require_browser_readablestream_to_it(), 1);
  var import_it_peekable3 = __toESM(require_it_peekable(), 1);
  var import_it_map2 = __toESM(require_it_map(), 1);
  async function* normaliseCandidateMultiple(input, normaliseContent2) {
    if (typeof input === "string" || input instanceof String || isBytes(input) || isBlob2(input) || input._readableState) {
      throw (0, import_err_code8.default)(new Error("Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead"), "ERR_UNEXPECTED_INPUT");
    }
    if (isReadableStream(input)) {
      input = (0, import_browser_readablestream_to_it3.default)(input);
    }
    if (Symbol.iterator in input || Symbol.asyncIterator in input) {
      const peekable = (0, import_it_peekable3.default)(input);
      const { value, done } = await peekable.peek();
      if (done) {
        yield* [];
        return;
      }
      peekable.push(value);
      if (Number.isInteger(value)) {
        throw (0, import_err_code8.default)(new Error("Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead"), "ERR_UNEXPECTED_INPUT");
      }
      if (value._readableState) {
        yield* (0, import_it_map2.default)(peekable, (value2) => toFileObject2({ content: value2 }, normaliseContent2));
        return;
      }
      if (isBytes(value)) {
        yield toFileObject2({ content: peekable }, normaliseContent2);
        return;
      }
      if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob2(value)) {
        yield* (0, import_it_map2.default)(peekable, (value2) => toFileObject2(value2, normaliseContent2));
        return;
      }
    }
    if (isFileObject(input)) {
      throw (0, import_err_code8.default)(new Error("Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead"), "ERR_UNEXPECTED_INPUT");
    }
    throw (0, import_err_code8.default)(new Error("Unexpected input: " + typeof input), "ERR_UNEXPECTED_INPUT");
  }
  async function toFileObject2(input, normaliseContent2) {
    const { path: path2, mode, mtime, content } = input;
    const file = {
      path: path2 || "",
      mode: parseMode(mode),
      mtime: parseMtime(mtime)
    };
    if (content) {
      file.content = await normaliseContent2(content);
    } else if (!path2) {
      file.content = await normaliseContent2(input);
    }
    return file;
  }

  // node_modules/ipfs-core-utils/esm/src/files/normalise-input-multiple.js
  function normaliseInput2(input) {
    return normaliseCandidateMultiple(input, normaliseContent);
  }

  // node_modules/ipfs-car/dist/esm/pack/utils/normalise-input.js
  function isBytes2(obj) {
    return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;
  }
  function isBlob3(obj) {
    return Boolean(obj.constructor) && (obj.constructor.name === "Blob" || obj.constructor.name === "File") && typeof obj.stream === "function";
  }
  function isSingle(input) {
    return typeof input === "string" || input instanceof String || isBytes2(input) || isBlob3(input) || "_readableState" in input;
  }
  function getNormaliser(input) {
    if (isSingle(input)) {
      return normaliseInput(input);
    } else {
      return normaliseInput2(input);
    }
  }

  // node_modules/ipfs-car/dist/esm/blockstore/memory.js
  init_src();

  // node_modules/blockstore-core/esm/src/errors.js
  var errors_exports = {};
  __export(errors_exports, {
    abortedError: () => abortedError,
    notFoundError: () => notFoundError
  });
  var import_err_code9 = __toESM(require_err_code(), 1);
  function notFoundError(err) {
    err = err || new Error("Not Found");
    return (0, import_err_code9.default)(err, "ERR_NOT_FOUND");
  }
  function abortedError(err) {
    err = err || new Error("Aborted");
    return (0, import_err_code9.default)(err, "ERR_ABORTED");
  }

  // node_modules/blockstore-core/esm/src/base.js
  var import_it_drain = __toESM(require_it_drain(), 1);
  var import_it_filter = __toESM(require_it_filter(), 1);
  var import_it_take = __toESM(require_it_take(), 1);
  var import_it_all3 = __toESM(require_it_all(), 1);
  var sortAll = (iterable, sorter) => {
    return async function* () {
      const values = await (0, import_it_all3.default)(iterable);
      yield* values.sort(sorter);
    }();
  };
  var BaseBlockstore = class {
    open() {
      return Promise.reject(new Error(".open is not implemented"));
    }
    close() {
      return Promise.reject(new Error(".close is not implemented"));
    }
    put(key2, val, options) {
      return Promise.reject(new Error(".put is not implemented"));
    }
    get(key2, options) {
      return Promise.reject(new Error(".get is not implemented"));
    }
    has(key2, options) {
      return Promise.reject(new Error(".has is not implemented"));
    }
    delete(key2, options) {
      return Promise.reject(new Error(".delete is not implemented"));
    }
    async *putMany(source, options = {}) {
      for await (const { key: key2, value } of source) {
        await this.put(key2, value, options);
        yield {
          key: key2,
          value
        };
      }
    }
    async *getMany(source, options = {}) {
      for await (const key2 of source) {
        yield this.get(key2, options);
      }
    }
    async *deleteMany(source, options = {}) {
      for await (const key2 of source) {
        await this.delete(key2, options);
        yield key2;
      }
    }
    batch() {
      let puts = [];
      let dels = [];
      return {
        put(key2, value) {
          puts.push({
            key: key2,
            value
          });
        },
        delete(key2) {
          dels.push(key2);
        },
        commit: async (options) => {
          await (0, import_it_drain.default)(this.putMany(puts, options));
          puts = [];
          await (0, import_it_drain.default)(this.deleteMany(dels, options));
          dels = [];
        }
      };
    }
    async *_all(q, options) {
      throw new Error("._all is not implemented");
    }
    async *_allKeys(q, options) {
      throw new Error("._allKeys is not implemented");
    }
    query(q, options) {
      let it = this._all(q, options);
      if (q.prefix != null) {
        it = (0, import_it_filter.default)(it, (e3) => e3.key.toString().startsWith(q.prefix || ""));
      }
      if (Array.isArray(q.filters)) {
        it = q.filters.reduce((it2, f2) => (0, import_it_filter.default)(it2, f2), it);
      }
      if (Array.isArray(q.orders)) {
        it = q.orders.reduce((it2, f2) => sortAll(it2, f2), it);
      }
      if (q.offset != null) {
        let i3 = 0;
        it = (0, import_it_filter.default)(it, () => i3++ >= (q.offset || 0));
      }
      if (q.limit != null) {
        it = (0, import_it_take.default)(it, q.limit);
      }
      return it;
    }
    queryKeys(q, options) {
      let it = this._allKeys(q, options);
      if (q.prefix != null) {
        it = (0, import_it_filter.default)(it, (cid) => cid.toString().startsWith(q.prefix || ""));
      }
      if (Array.isArray(q.filters)) {
        it = q.filters.reduce((it2, f2) => (0, import_it_filter.default)(it2, f2), it);
      }
      if (Array.isArray(q.orders)) {
        it = q.orders.reduce((it2, f2) => sortAll(it2, f2), it);
      }
      if (q.offset != null) {
        let i3 = 0;
        it = (0, import_it_filter.default)(it, () => i3++ >= q.offset);
      }
      if (q.limit != null) {
        it = (0, import_it_take.default)(it, q.limit);
      }
      return it;
    }
  };

  // node_modules/blockstore-core/esm/src/memory.js
  init_base32();
  init_raw();
  init_cid();
  init_digest();

  // node_modules/blockstore-core/esm/src/index.js
  var Errors = { ...errors_exports };

  // node_modules/ipfs-car/dist/esm/blockstore/memory.js
  var MemoryBlockStore = class extends BaseBlockstore {
    constructor() {
      super();
      this.store = /* @__PURE__ */ new Map();
    }
    async *blocks() {
      for (const [cidStr, bytes] of this.store.entries()) {
        yield { cid: CID.parse(cidStr), bytes };
      }
    }
    put(cid, bytes) {
      this.store.set(cid.toString(), bytes);
      return Promise.resolve();
    }
    get(cid) {
      const bytes = this.store.get(cid.toString());
      if (!bytes) {
        throw new Error(`block with cid ${cid.toString()} no found`);
      }
      return Promise.resolve(bytes);
    }
    has(cid) {
      return Promise.resolve(this.store.has(cid.toString()));
    }
    close() {
      this.store.clear();
      return Promise.resolve();
    }
  };

  // node_modules/ipfs-car/dist/esm/pack/constants.js
  init_sha2_browser();
  var unixfsImporterOptionsDefault = {
    cidVersion: 1,
    chunker: "fixed",
    maxChunkSize: 262144,
    hasher: sha256,
    rawLeaves: true,
    wrapWithDirectory: true,
    maxChildrenPerNode: 174
  };

  // node_modules/ipfs-car/dist/esm/pack/index.js
  async function pack({ input, blockstore: userBlockstore, hasher, maxChunkSize, maxChildrenPerNode, wrapWithDirectory, rawLeaves }) {
    if (!input || Array.isArray(input) && !input.length) {
      throw new Error("missing input file(s)");
    }
    const blockstore = userBlockstore ? userBlockstore : new MemoryBlockStore();
    const rootEntry = await (0, import_it_last.default)((0, import_it_pipe.default)(getNormaliser(input), (source) => importer(source, blockstore, {
      ...unixfsImporterOptionsDefault,
      hasher: hasher || unixfsImporterOptionsDefault.hasher,
      maxChunkSize: maxChunkSize || unixfsImporterOptionsDefault.maxChunkSize,
      maxChildrenPerNode: maxChildrenPerNode || unixfsImporterOptionsDefault.maxChildrenPerNode,
      wrapWithDirectory: wrapWithDirectory === false ? false : unixfsImporterOptionsDefault.wrapWithDirectory,
      rawLeaves: rawLeaves == null ? unixfsImporterOptionsDefault.rawLeaves : rawLeaves
    })));
    if (!rootEntry || !rootEntry.cid) {
      throw new Error("given input could not be parsed correctly");
    }
    const root2 = rootEntry.cid;
    const { writer, out: carOut } = await CarWriter.create([root2]);
    const carOutIter = carOut[Symbol.asyncIterator]();
    let writingPromise;
    const writeAll = async () => {
      for await (const block of blockstore.blocks()) {
        await writer.put(block);
      }
      await writer.close();
      if (!userBlockstore) {
        await blockstore.close();
      }
    };
    const out = {
      [Symbol.asyncIterator]() {
        if (writingPromise != null) {
          throw new Error("Multiple iterator not supported");
        }
        writingPromise = writeAll();
        return {
          async next() {
            const result = await carOutIter.next();
            if (result.done) {
              await writingPromise;
            }
            return result;
          }
        };
      }
    };
    return { root: root2, out };
  }

  // node_modules/@web3-storage/parse-link-header/index.js
  var MAX_HEADER_LENGTH = 2e3;
  var THROW_ON_MAX_HEADER_LENGTH_EXCEEDED = false;
  function hasRel(x) {
    return x && x.rel;
  }
  function intoRels(acc, x) {
    function splitRel(rel) {
      acc[rel] = Object.assign({}, x, { rel });
    }
    x.rel.split(/\s+/).forEach(splitRel);
    return acc;
  }
  function createObjects(acc, p2) {
    const m2 = p2.match(/\s*(.+)\s*=\s*"?([^"]+)"?/);
    if (m2)
      acc[m2[1]] = m2[2];
    return acc;
  }
  function parseLink(link) {
    try {
      const m2 = link.match(/<?([^>]*)>(.*)/);
      const linkUrl = m2[1];
      const parts = m2[2].split(";");
      const qry = {};
      const url2 = new URL(linkUrl, "https://example.com");
      for (const [key2, value] of url2.searchParams) {
        qry[key2] = value;
      }
      parts.shift();
      let info = parts.reduce(createObjects, {});
      info = Object.assign({}, qry, info);
      info.url = linkUrl;
      return info;
    } catch {
      return null;
    }
  }
  function checkHeader(linkHeader, options) {
    if (!linkHeader)
      return false;
    options = options || {};
    const maxHeaderLength = options.maxHeaderLength || MAX_HEADER_LENGTH;
    const throwOnMaxHeaderLengthExceeded = options.throwOnMaxHeaderLengthExceeded || THROW_ON_MAX_HEADER_LENGTH_EXCEEDED;
    if (linkHeader.length > maxHeaderLength) {
      if (throwOnMaxHeaderLengthExceeded) {
        throw new Error("Input string too long, it should be under " + maxHeaderLength + " characters.");
      } else {
        return false;
      }
    }
    return true;
  }
  function parseLinkHeader(linkHeader, options) {
    if (!checkHeader(linkHeader, options))
      return null;
    return linkHeader.split(/,\s*</).map(parseLink).filter(hasRel).reduce(intoRels, {});
  }

  // node_modules/ipfs-car/dist/esm/unpack/index.js
  var import_browser_readablestream_to_it4 = __toESM(require_browser_readablestream_to_it(), 1);

  // node_modules/ipfs-unixfs-exporter/esm/src/index.js
  var import_err_code17 = __toESM(require_err_code(), 1);
  init_cid();

  // node_modules/ipfs-unixfs-exporter/esm/src/resolvers/index.js
  var import_err_code16 = __toESM(require_err_code(), 1);
  init_raw();
  init_identity2();

  // node_modules/ipfs-unixfs-exporter/esm/src/resolvers/unixfs-v1/index.js
  var import_err_code12 = __toESM(require_err_code(), 1);

  // node_modules/ipfs-unixfs-exporter/esm/src/utils/find-cid-in-shard.js
  var import_hamt_sharding2 = __toESM(require_src2(), 1);
  var hashFn = async function(buf2) {
    return (await murmur3128.encode(buf2)).slice(0, 8).reverse();
  };
  var addLinksToHamtBucket = (links3, bucket, rootBucket) => {
    return Promise.all(links3.map((link) => {
      if (link.Name == null) {
        throw new Error("Unexpected Link without a Name");
      }
      if (link.Name.length === 2) {
        const pos = parseInt(link.Name, 16);
        return bucket._putObjectAt(pos, new import_hamt_sharding2.Bucket({
          hash: rootBucket._options.hash,
          bits: rootBucket._options.bits
        }, bucket, pos));
      }
      return rootBucket.put(link.Name.substring(2), true);
    }));
  };
  var toPrefix = (position) => {
    return position.toString(16).toUpperCase().padStart(2, "0").substring(0, 2);
  };
  var toBucketPath = (position) => {
    let bucket = position.bucket;
    const path2 = [];
    while (bucket._parent) {
      path2.push(bucket);
      bucket = bucket._parent;
    }
    path2.push(bucket);
    return path2.reverse();
  };
  var findShardCid = async (node, name5, blockstore, context, options) => {
    if (!context) {
      const rootBucket = (0, import_hamt_sharding2.createHAMT)({ hashFn });
      context = {
        rootBucket,
        hamtDepth: 1,
        lastBucket: rootBucket
      };
    }
    await addLinksToHamtBucket(node.Links, context.lastBucket, context.rootBucket);
    const position = await context.rootBucket._findNewBucketAndPos(name5);
    let prefix = toPrefix(position.pos);
    const bucketPath = toBucketPath(position);
    if (bucketPath.length > context.hamtDepth) {
      context.lastBucket = bucketPath[context.hamtDepth];
      prefix = toPrefix(context.lastBucket._posAtParent);
    }
    const link = node.Links.find((link2) => {
      if (link2.Name == null) {
        return false;
      }
      const entryPrefix = link2.Name.substring(0, 2);
      const entryName = link2.Name.substring(2);
      if (entryPrefix !== prefix) {
        return false;
      }
      if (entryName && entryName !== name5) {
        return false;
      }
      return true;
    });
    if (!link) {
      return null;
    }
    if (link.Name != null && link.Name.substring(2) === name5) {
      return link.Hash;
    }
    context.hamtDepth++;
    const block = await blockstore.get(link.Hash, options);
    node = decode7(block);
    return findShardCid(node, name5, blockstore, context, options);
  };
  var find_cid_in_shard_default = findShardCid;

  // node_modules/ipfs-unixfs-exporter/esm/src/utils/extract-data-from-block.js
  function extractDataFromBlock(block, blockStart, requestedStart, requestedEnd) {
    const blockLength = block.length;
    const blockEnd = blockStart + blockLength;
    if (requestedStart >= blockEnd || requestedEnd < blockStart) {
      return new Uint8Array(0);
    }
    if (requestedEnd >= blockStart && requestedEnd < blockEnd) {
      block = block.slice(0, requestedEnd - blockStart);
    }
    if (requestedStart >= blockStart && requestedStart < blockEnd) {
      block = block.slice(requestedStart - blockStart);
    }
    return block;
  }
  var extract_data_from_block_default = extractDataFromBlock;

  // node_modules/ipfs-unixfs-exporter/esm/src/utils/validate-offset-and-length.js
  var import_err_code10 = __toESM(require_err_code(), 1);
  var validateOffsetAndLength = (size, offset3, length2) => {
    if (!offset3) {
      offset3 = 0;
    }
    if (offset3 < 0) {
      throw (0, import_err_code10.default)(new Error("Offset must be greater than or equal to 0"), "ERR_INVALID_PARAMS");
    }
    if (offset3 > size) {
      throw (0, import_err_code10.default)(new Error("Offset must be less than the file size"), "ERR_INVALID_PARAMS");
    }
    if (!length2 && length2 !== 0) {
      length2 = size - offset3;
    }
    if (length2 < 0) {
      throw (0, import_err_code10.default)(new Error("Length must be greater than or equal to 0"), "ERR_INVALID_PARAMS");
    }
    if (offset3 + length2 > size) {
      length2 = size - offset3;
    }
    return {
      offset: offset3,
      length: length2
    };
  };
  var validate_offset_and_length_default = validateOffsetAndLength;

  // node_modules/ipfs-unixfs-exporter/esm/src/resolvers/unixfs-v1/content/file.js
  var import_err_code11 = __toESM(require_err_code(), 1);
  init_raw();
  async function* emitBytes(blockstore, node, start, end, streamPosition = 0, options) {
    if (node instanceof Uint8Array) {
      const buf2 = extract_data_from_block_default(node, streamPosition, start, end);
      if (buf2.length) {
        yield buf2;
      }
      streamPosition += buf2.length;
      return streamPosition;
    }
    if (node.Data == null) {
      throw (0, import_err_code11.default)(new Error("no data in PBNode"), "ERR_NOT_UNIXFS");
    }
    let file;
    try {
      file = UnixFS.unmarshal(node.Data);
    } catch (err) {
      throw (0, import_err_code11.default)(err, "ERR_NOT_UNIXFS");
    }
    if (file.data && file.data.length) {
      const buf2 = extract_data_from_block_default(file.data, streamPosition, start, end);
      if (buf2.length) {
        yield buf2;
      }
      streamPosition += file.data.length;
    }
    let childStart = streamPosition;
    for (let i3 = 0; i3 < node.Links.length; i3++) {
      const childLink = node.Links[i3];
      const childEnd = streamPosition + file.blockSizes[i3];
      if (start >= childStart && start < childEnd || end > childStart && end <= childEnd || start < childStart && end > childEnd) {
        const block = await blockstore.get(childLink.Hash, { signal: options.signal });
        let child;
        switch (childLink.Hash.code) {
          case code2:
            child = await decode7(block);
            break;
          case code3:
            child = block;
            break;
          case code:
            child = await decode6(block);
            break;
          default:
            throw Error(`Unsupported codec: ${childLink.Hash.code}`);
        }
        for await (const buf2 of emitBytes(blockstore, child, start, end, streamPosition, options)) {
          streamPosition += buf2.length;
          yield buf2;
        }
      }
      streamPosition = childEnd;
      childStart = childEnd + 1;
    }
  }
  var fileContent = (cid, node, unixfs, path2, resolve5, depth, blockstore) => {
    function yieldFileContent(options = {}) {
      const fileSize = unixfs.fileSize();
      if (fileSize === void 0) {
        throw new Error("File was a directory");
      }
      const { offset: offset3, length: length2 } = validate_offset_and_length_default(fileSize, options.offset, options.length);
      const start = offset3;
      const end = offset3 + length2;
      return emitBytes(blockstore, node, start, end, 0, options);
    }
    return yieldFileContent;
  };
  var file_default2 = fileContent;

  // node_modules/ipfs-unixfs-exporter/esm/src/resolvers/unixfs-v1/content/directory.js
  var directoryContent = (cid, node, unixfs, path2, resolve5, depth, blockstore) => {
    async function* yieldDirectoryContent(options = {}) {
      const offset3 = options.offset || 0;
      const length2 = options.length || node.Links.length;
      const links3 = node.Links.slice(offset3, length2);
      for (const link of links3) {
        const result = await resolve5(link.Hash, link.Name || "", `${path2}/${link.Name || ""}`, [], depth + 1, blockstore, options);
        if (result.entry) {
          yield result.entry;
        }
      }
    }
    return yieldDirectoryContent;
  };
  var directory_default = directoryContent;

  // node_modules/ipfs-unixfs-exporter/esm/src/resolvers/unixfs-v1/content/hamt-sharded-directory.js
  var hamtShardedDirectoryContent = (cid, node, unixfs, path2, resolve5, depth, blockstore) => {
    function yieldHamtDirectoryContent(options = {}) {
      return listDirectory(node, path2, resolve5, depth, blockstore, options);
    }
    return yieldHamtDirectoryContent;
  };
  async function* listDirectory(node, path2, resolve5, depth, blockstore, options) {
    const links3 = node.Links;
    for (const link of links3) {
      const name5 = link.Name != null ? link.Name.substring(2) : null;
      if (name5) {
        const result = await resolve5(link.Hash, name5, `${path2}/${name5}`, [], depth + 1, blockstore, options);
        yield result.entry;
      } else {
        const block = await blockstore.get(link.Hash);
        node = decode7(block);
        for await (const file of listDirectory(node, path2, resolve5, depth, blockstore, options)) {
          yield file;
        }
      }
    }
  }
  var hamt_sharded_directory_default = hamtShardedDirectoryContent;

  // node_modules/ipfs-unixfs-exporter/esm/src/resolvers/unixfs-v1/index.js
  var findLinkCid = (node, name5) => {
    const link = node.Links.find((link2) => link2.Name === name5);
    return link && link.Hash;
  };
  var contentExporters = {
    raw: file_default2,
    file: file_default2,
    directory: directory_default,
    "hamt-sharded-directory": hamt_sharded_directory_default,
    metadata: (cid, node, unixfs, path2, resolve5, depth, blockstore) => {
      return () => [];
    },
    symlink: (cid, node, unixfs, path2, resolve5, depth, blockstore) => {
      return () => [];
    }
  };
  var unixFsResolver = async (cid, name5, path2, toResolve, resolve5, depth, blockstore, options) => {
    const block = await blockstore.get(cid, options);
    const node = decode7(block);
    let unixfs;
    let next;
    if (!name5) {
      name5 = cid.toString();
    }
    if (node.Data == null) {
      throw (0, import_err_code12.default)(new Error("no data in PBNode"), "ERR_NOT_UNIXFS");
    }
    try {
      unixfs = UnixFS.unmarshal(node.Data);
    } catch (err) {
      throw (0, import_err_code12.default)(err, "ERR_NOT_UNIXFS");
    }
    if (!path2) {
      path2 = name5;
    }
    if (toResolve.length) {
      let linkCid;
      if (unixfs && unixfs.type === "hamt-sharded-directory") {
        linkCid = await find_cid_in_shard_default(node, toResolve[0], blockstore);
      } else {
        linkCid = findLinkCid(node, toResolve[0]);
      }
      if (!linkCid) {
        throw (0, import_err_code12.default)(new Error("file does not exist"), "ERR_NOT_FOUND");
      }
      const nextName = toResolve.shift();
      const nextPath = `${path2}/${nextName}`;
      next = {
        cid: linkCid,
        toResolve,
        name: nextName || "",
        path: nextPath
      };
    }
    return {
      entry: {
        type: unixfs.isDirectory() ? "directory" : "file",
        name: name5,
        path: path2,
        cid,
        content: contentExporters[unixfs.type](cid, node, unixfs, path2, resolve5, depth, blockstore),
        unixfs,
        depth,
        node,
        size: unixfs.fileSize()
      },
      next
    };
  };
  var unixfs_v1_default = unixFsResolver;

  // node_modules/ipfs-unixfs-exporter/esm/src/resolvers/raw.js
  var import_err_code13 = __toESM(require_err_code(), 1);
  var rawContent = (node) => {
    async function* contentGenerator(options = {}) {
      const { offset: offset3, length: length2 } = validate_offset_and_length_default(node.length, options.offset, options.length);
      yield extract_data_from_block_default(node, 0, offset3, offset3 + length2);
    }
    return contentGenerator;
  };
  var resolve = async (cid, name5, path2, toResolve, resolve5, depth, blockstore, options) => {
    if (toResolve.length) {
      throw (0, import_err_code13.default)(new Error(`No link named ${path2} found in raw node ${cid}`), "ERR_NOT_FOUND");
    }
    const block = await blockstore.get(cid, options);
    return {
      entry: {
        type: "raw",
        name: name5,
        path: path2,
        cid,
        content: rawContent(block),
        depth,
        size: block.length,
        node: block
      }
    };
  };
  var raw_default = resolve;

  // node_modules/ipfs-unixfs-exporter/esm/src/resolvers/dag-cbor.js
  init_cid();
  var import_err_code14 = __toESM(require_err_code(), 1);
  var resolve2 = async (cid, name5, path2, toResolve, resolve5, depth, blockstore, options) => {
    const block = await blockstore.get(cid);
    const object4 = decode6(block);
    let subObject = object4;
    let subPath = path2;
    while (toResolve.length) {
      const prop = toResolve[0];
      if (prop in subObject) {
        toResolve.shift();
        subPath = `${subPath}/${prop}`;
        const subObjectCid = CID.asCID(subObject[prop]);
        if (subObjectCid) {
          return {
            entry: {
              type: "object",
              name: name5,
              path: path2,
              cid,
              node: block,
              depth,
              size: block.length,
              content: async function* () {
                yield object4;
              }
            },
            next: {
              cid: subObjectCid,
              name: prop,
              path: subPath,
              toResolve
            }
          };
        }
        subObject = subObject[prop];
      } else {
        throw (0, import_err_code14.default)(new Error(`No property named ${prop} found in cbor node ${cid}`), "ERR_NO_PROP");
      }
    }
    return {
      entry: {
        type: "object",
        name: name5,
        path: path2,
        cid,
        node: block,
        depth,
        size: block.length,
        content: async function* () {
          yield object4;
        }
      }
    };
  };
  var dag_cbor_default = resolve2;

  // node_modules/ipfs-unixfs-exporter/esm/src/resolvers/identity.js
  var import_err_code15 = __toESM(require_err_code(), 1);
  init_digest();
  var rawContent2 = (node) => {
    async function* contentGenerator(options = {}) {
      const { offset: offset3, length: length2 } = validate_offset_and_length_default(node.length, options.offset, options.length);
      yield extract_data_from_block_default(node, 0, offset3, offset3 + length2);
    }
    return contentGenerator;
  };
  var resolve3 = async (cid, name5, path2, toResolve, resolve5, depth, blockstore, options) => {
    if (toResolve.length) {
      throw (0, import_err_code15.default)(new Error(`No link named ${path2} found in raw node ${cid}`), "ERR_NOT_FOUND");
    }
    const buf2 = await decode3(cid.multihash.bytes);
    return {
      entry: {
        type: "identity",
        name: name5,
        path: path2,
        cid,
        content: rawContent2(buf2.digest),
        depth,
        size: buf2.digest.length,
        node: buf2.digest
      }
    };
  };
  var identity_default = resolve3;

  // node_modules/ipfs-unixfs-exporter/esm/src/resolvers/index.js
  var resolvers = {
    [code2]: unixfs_v1_default,
    [code3]: raw_default,
    [code]: dag_cbor_default,
    [identity2.code]: identity_default
  };
  function resolve4(cid, name5, path2, toResolve, depth, blockstore, options) {
    const resolver = resolvers[cid.code];
    if (!resolver) {
      throw (0, import_err_code16.default)(new Error(`No resolver for code ${cid.code}`), "ERR_NO_RESOLVER");
    }
    return resolver(cid, name5, path2, toResolve, resolve4, depth, blockstore, options);
  }
  var resolvers_default = resolve4;

  // node_modules/ipfs-unixfs-exporter/esm/src/index.js
  var import_it_last2 = __toESM(require_it_last(), 1);
  var toPathComponents2 = (path2 = "") => {
    return (path2.trim().match(/([^\\^/]|\\\/)+/g) || []).filter(Boolean);
  };
  var cidAndRest = (path2) => {
    if (path2 instanceof Uint8Array) {
      return {
        cid: CID.decode(path2),
        toResolve: []
      };
    }
    const cid = CID.asCID(path2);
    if (cid) {
      return {
        cid,
        toResolve: []
      };
    }
    if (typeof path2 === "string") {
      if (path2.indexOf("/ipfs/") === 0) {
        path2 = path2.substring(6);
      }
      const output = toPathComponents2(path2);
      return {
        cid: CID.parse(output[0]),
        toResolve: output.slice(1)
      };
    }
    throw (0, import_err_code17.default)(new Error(`Unknown path type ${path2}`), "ERR_BAD_PATH");
  };
  async function* walkPath(path2, blockstore, options = {}) {
    let { cid, toResolve } = cidAndRest(path2);
    let name5 = cid.toString();
    let entryPath = name5;
    const startingDepth = toResolve.length;
    while (true) {
      const result = await resolvers_default(cid, name5, entryPath, toResolve, startingDepth, blockstore, options);
      if (!result.entry && !result.next) {
        throw (0, import_err_code17.default)(new Error(`Could not resolve ${path2}`), "ERR_NOT_FOUND");
      }
      if (result.entry) {
        yield result.entry;
      }
      if (!result.next) {
        return;
      }
      toResolve = result.next.toResolve;
      cid = result.next.cid;
      name5 = result.next.name;
      entryPath = result.next.path;
    }
  }
  async function exporter(path2, blockstore, options = {}) {
    const result = await (0, import_it_last2.default)(walkPath(path2, blockstore, options));
    if (!result) {
      throw (0, import_err_code17.default)(new Error(`Could not resolve ${path2}`), "ERR_NOT_FOUND");
    }
    return result;
  }
  async function* recursive(path2, blockstore, options = {}) {
    const node = await exporter(path2, blockstore, options);
    if (!node) {
      return;
    }
    yield node;
    if (node.type === "directory") {
      for await (const child of recurse(node, options)) {
        yield child;
      }
    }
    async function* recurse(node2, options2) {
      for await (const file of node2.content(options2)) {
        yield file;
        if (file instanceof Uint8Array) {
          continue;
        }
        if (file.type === "directory") {
          yield* recurse(file, options2);
        }
      }
    }
  }

  // node_modules/uint8arrays/esm/src/equals.js
  function equals3(a2, b2) {
    if (a2 === b2) {
      return true;
    }
    if (a2.byteLength !== b2.byteLength) {
      return false;
    }
    for (let i3 = 0; i3 < a2.byteLength; i3++) {
      if (a2[i3] !== b2[i3]) {
        return false;
      }
    }
    return true;
  }

  // node_modules/ipfs-car/dist/esm/unpack/utils/verifying-get-only-blockstore.js
  init_sha2_browser();
  var VerifyingGetOnlyBlockStore = class extends BaseBlockstore {
    constructor(blockstore) {
      super();
      this.store = blockstore;
    }
    async get(cid) {
      const res = await this.store.get(cid);
      if (!res) {
        throw new Error(`Incomplete CAR. Block missing for CID ${cid}`);
      }
      if (!isValid({ cid, bytes: res })) {
        throw new Error(`Invalid CAR. Hash of block data does not match CID ${cid}`);
      }
      return res;
    }
    static fromBlockstore(b2) {
      return new VerifyingGetOnlyBlockStore(b2);
    }
    static fromCarReader(cr) {
      return new VerifyingGetOnlyBlockStore({
        // Return bytes in the same fashion as a Blockstore implementation
        get: async (cid) => {
          const block = await cr.get(cid);
          return block === null || block === void 0 ? void 0 : block.bytes;
        }
      });
    }
  };
  async function isValid({ cid, bytes }) {
    const hash = await sha256.digest(bytes);
    return equals3(hash.digest, cid.multihash.digest);
  }

  // node_modules/ipfs-car/dist/esm/unpack/index.js
  async function* unpackStream(readable, { roots, blockstore: userBlockstore } = {}) {
    const carIterator = await CarBlockIterator.fromIterable(asAsyncIterable(readable));
    const blockstore = userBlockstore || new MemoryBlockStore();
    for await (const block of carIterator) {
      await blockstore.put(block.cid, block.bytes);
    }
    const verifyingBlockStore = VerifyingGetOnlyBlockStore.fromBlockstore(blockstore);
    if (!roots || roots.length === 0) {
      roots = await carIterator.getRoots();
    }
    for (const root2 of roots) {
      yield* recursive(root2, verifyingBlockStore);
    }
  }
  function asAsyncIterable(readable) {
    return Symbol.asyncIterator in readable ? readable : (0, import_browser_readablestream_to_it4.default)(readable);
  }

  // node_modules/multiformats/esm/src/block.js
  init_src();
  var readonly2 = ({ enumerable: enumerable4 = true, configurable = false } = {}) => ({
    enumerable: enumerable4,
    configurable,
    writable: false
  });
  var links = function* (source, base3) {
    if (source == null)
      return;
    if (source instanceof Uint8Array)
      return;
    for (const [key2, value] of Object.entries(source)) {
      const path2 = [
        ...base3,
        key2
      ];
      if (value != null && typeof value === "object") {
        if (Array.isArray(value)) {
          for (const [index3, element] of value.entries()) {
            const elementPath = [
              ...path2,
              index3
            ];
            const cid = CID.asCID(element);
            if (cid) {
              yield [
                elementPath.join("/"),
                cid
              ];
            } else if (typeof element === "object") {
              yield* links(element, elementPath);
            }
          }
        } else {
          const cid = CID.asCID(value);
          if (cid) {
            yield [
              path2.join("/"),
              cid
            ];
          } else {
            yield* links(value, path2);
          }
        }
      }
    }
  };
  var tree = function* (source, base3) {
    if (source == null)
      return;
    for (const [key2, value] of Object.entries(source)) {
      const path2 = [
        ...base3,
        key2
      ];
      yield path2.join("/");
      if (value != null && !(value instanceof Uint8Array) && typeof value === "object" && !CID.asCID(value)) {
        if (Array.isArray(value)) {
          for (const [index3, element] of value.entries()) {
            const elementPath = [
              ...path2,
              index3
            ];
            yield elementPath.join("/");
            if (typeof element === "object" && !CID.asCID(element)) {
              yield* tree(element, elementPath);
            }
          }
        } else {
          yield* tree(value, path2);
        }
      }
    }
  };
  var get2 = (source, path2) => {
    let node = source;
    for (const [index3, key2] of path2.entries()) {
      node = node[key2];
      if (node == null) {
        throw new Error(`Object has no property at ${path2.slice(0, index3 + 1).map((part) => `[${JSON.stringify(part)}]`).join("")}`);
      }
      const cid = CID.asCID(node);
      if (cid) {
        return {
          value: cid,
          remaining: path2.slice(index3 + 1).join("/")
        };
      }
    }
    return { value: node };
  };
  var Block = class {
    constructor({ cid, bytes, value }) {
      if (!cid || !bytes || typeof value === "undefined")
        throw new Error("Missing required argument");
      this.cid = cid;
      this.bytes = bytes;
      this.value = value;
      this.asBlock = this;
      Object.defineProperties(this, {
        cid: readonly2(),
        bytes: readonly2(),
        value: readonly2(),
        asBlock: readonly2()
      });
    }
    links() {
      return links(this.value, []);
    }
    tree() {
      return tree(this.value, []);
    }
    get(path2 = "/") {
      return get2(this.value, path2.split("/").filter(Boolean));
    }
  };

  // node_modules/carbites/esm/lib/treewalk/splitter.js
  init_raw();

  // node_modules/carbites/node_modules/@ipld/dag-cbor/esm/index.js
  var esm_exports3 = {};
  __export(esm_exports3, {
    code: () => code5,
    decode: () => decode10,
    encode: () => encode11,
    name: () => name4
  });
  init_cid();
  var CID_CBOR_TAG2 = 42;
  function cidEncoder2(obj) {
    if (obj.asCID !== obj) {
      return null;
    }
    const cid = CID.asCID(obj);
    if (!cid) {
      return null;
    }
    const bytes = new Uint8Array(cid.bytes.byteLength + 1);
    bytes.set(cid.bytes, 1);
    return [
      new Token(Type.tag, CID_CBOR_TAG2),
      new Token(Type.bytes, bytes)
    ];
  }
  function undefinedEncoder2() {
    throw new Error("`undefined` is not supported by the IPLD Data Model and cannot be encoded");
  }
  function numberEncoder2(num) {
    if (Number.isNaN(num)) {
      throw new Error("`NaN` is not supported by the IPLD Data Model and cannot be encoded");
    }
    if (num === Infinity || num === -Infinity) {
      throw new Error("`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded");
    }
    return null;
  }
  var encodeOptions2 = {
    float64: true,
    typeEncoders: {
      Object: cidEncoder2,
      undefined: undefinedEncoder2,
      number: numberEncoder2
    }
  };
  function cidDecoder2(bytes) {
    if (bytes[0] !== 0) {
      throw new Error("Invalid CID for CBOR tag 42; expected leading 0x00");
    }
    return CID.decode(bytes.subarray(1));
  }
  var decodeOptions2 = {
    allowIndefinite: false,
    allowUndefined: false,
    allowNaN: false,
    allowInfinity: false,
    allowBigInt: true,
    strict: true,
    useMaps: false,
    tags: []
  };
  decodeOptions2.tags[CID_CBOR_TAG2] = cidDecoder2;
  var name4 = "dag-cbor";
  var code5 = 113;
  var encode11 = (node) => encode5(node, encodeOptions2);
  var decode10 = (data) => decode5(data, decodeOptions2);

  // node_modules/carbites/esm/lib/treewalk/splitter.js
  var TreewalkCarSplitter = class {
    constructor(reader, targetSize, options = {}) {
      if (typeof targetSize !== "number" || targetSize <= 0) {
        throw new Error("invalid target chunk size");
      }
      this._reader = reader;
      this._targetSize = targetSize;
      this._decoders = [
        src_exports,
        raw_exports,
        esm_exports3,
        ...options.decoders || []
      ];
    }
    async *cars() {
      const roots = await this._reader.getRoots();
      if (roots.length !== 1)
        throw new Error(`unexpected number of roots: ${roots.length}`);
      let channel;
      for await (const val of this._cars(roots[0])) {
        channel = val.channel;
        if (val.out)
          yield val.out;
      }
      if (!channel) {
        throw new Error("missing CAR writer channel");
      }
      channel.writer.close();
      yield channel.out;
    }
    async _get(cid) {
      const rawBlock = await this._reader.get(cid);
      if (!rawBlock)
        throw new Error(`missing block for ${cid}`);
      const { bytes } = rawBlock;
      const decoder = this._decoders.find((d2) => d2.code === cid.code);
      if (!decoder)
        throw new Error(`missing decoder for ${cid.code}`);
      return new Block({
        cid,
        bytes,
        value: decoder.decode(bytes)
      });
    }
    async *_cars(cid, parents = [], channel = void 0) {
      const block = await this._get(cid);
      channel = channel || Object.assign(CarWriter.create(cid), { size: 0 });
      if (channel.size > 0 && channel.size + block.bytes.byteLength >= this._targetSize) {
        channel.writer.close();
        const { out } = channel;
        channel = newCar(parents);
        yield {
          channel,
          out
        };
      }
      parents = parents.concat(block);
      channel.size += block.bytes.byteLength;
      channel.writer.put(block);
      for (const [, cid2] of block.links()) {
        for await (const val of this._cars(cid2, parents, channel)) {
          channel = val.channel;
          yield val;
        }
      }
      if (!channel) {
        throw new Error("missing CAR writer channel");
      }
      yield { channel };
    }
    static async fromIterable(iterable, targetSize, options) {
      const reader = await CarReader.fromIterable(iterable);
      return new TreewalkCarSplitter(reader, targetSize, options);
    }
    static async fromBlob(blob, targetSize, options) {
      const buffer2 = await blob.arrayBuffer();
      const reader = await CarReader.fromBytes(new Uint8Array(buffer2));
      return new TreewalkCarSplitter(reader, targetSize, options);
    }
  };
  function newCar(parents) {
    const ch = Object.assign(CarWriter.create(parents[0].cid), { size: parents.reduce((size, b2) => size + b2.bytes.byteLength, 0) });
    for (const b2 of parents) {
      ch.writer.put(b2);
    }
    return ch;
  }

  // node_modules/web3.storage/src/lib.js
  var import_throttled_queue = __toESM(require_throttledQueue(), 1);

  // node_modules/web3.storage/src/platform.web.js
  var fetch2 = globalThis.fetch;
  var Request = globalThis.Request;
  var Response2 = globalThis.Response;
  var Blob2 = globalThis.Blob;
  var File2 = globalThis.File;
  var Blockstore = MemoryBlockStore;

  // node_modules/web3.storage/src/lib.js
  var MAX_PUT_RETRIES = 5;
  var MAX_CONCURRENT_UPLOADS = 3;
  var DEFAULT_CHUNK_SIZE = 1024 * 1024 * 10;
  var MAX_BLOCK_SIZE = 1048576;
  var MAX_CHUNK_SIZE = 104857600;
  var RATE_LIMIT_REQUESTS = 30;
  var RATE_LIMIT_PERIOD = 10 * 1e3;
  function createRateLimiter() {
    const throttle2 = (0, import_throttled_queue.default)(RATE_LIMIT_REQUESTS, RATE_LIMIT_PERIOD);
    return () => throttle2(() => {
    });
  }
  var globalRateLimiter = createRateLimiter();
  var Web3Storage = class {
    /**
     * Constructs a client bound to the given `options.token` and
     * `options.endpoint`.
     *
     * @example
     * ```js
     * import { Web3Storage } from 'web3.storage'
     * const client = new Web3Storage({ token: API_TOKEN })
     * ```
     *
      @param {Service} options
     */
    constructor({
      token,
      endpoint = new URL("https://api.web3.storage"),
      rateLimiter,
      fetch: fetch3 = fetch2
    }) {
      this.token = token;
      this.endpoint = endpoint;
      this.rateLimiter = rateLimiter || createRateLimiter();
      this.fetch = fetch3;
    }
    /**
     * @hidden
     * @param {string} token
     * @returns {Record<string, string>}
     */
    static headers(token) {
      if (!token)
        throw new Error("missing token");
      return {
        Authorization: `Bearer ${token}`,
        "X-Client": "web3.storage/js"
      };
    }
    /**
     * @param {Service} service
     * @param {Iterable<Filelike>} files
     * @param {PutOptions} [options]
     * @returns {Promise<CIDString>}
     */
    static async put({ endpoint, token, rateLimiter = globalRateLimiter, fetch: fetch3 = fetch2 }, files, {
      onRootCidReady,
      onStoredChunk,
      maxRetries = MAX_PUT_RETRIES,
      maxChunkSize = DEFAULT_CHUNK_SIZE,
      wrapWithDirectory = true,
      name: name5,
      signal
    } = {}) {
      if (maxChunkSize >= MAX_CHUNK_SIZE || maxChunkSize < MAX_BLOCK_SIZE) {
        throw new Error("maximum chunk size must be less than 100MiB and greater than or equal to 1MB");
      }
      const blockstore = new Blockstore();
      try {
        const { out, root: root2 } = await pack({
          input: Array.from(files).map(toImportCandidate),
          blockstore,
          wrapWithDirectory,
          maxChunkSize: MAX_BLOCK_SIZE,
          maxChildrenPerNode: 1024
        });
        onRootCidReady && onRootCidReady(root2.toString());
        const car = await CarReader.fromIterable(out);
        return await Web3Storage.putCar({ endpoint, token, rateLimiter, fetch: fetch3 }, car, { onStoredChunk, maxRetries, maxChunkSize, name: name5, signal });
      } finally {
        await blockstore.close();
      }
    }
    /**
     * @param {Service} service
     * @param {import('@ipld/car/api').CarReader} car
     * @param {PutCarOptions} [options]
     * @returns {Promise<CIDString>}
     */
    static async putCar({ endpoint, token, rateLimiter = globalRateLimiter, fetch: fetch3 = fetch2 }, car, {
      name: name5,
      onStoredChunk,
      maxRetries = MAX_PUT_RETRIES,
      maxChunkSize = DEFAULT_CHUNK_SIZE,
      decoders,
      signal
    } = {}) {
      if (maxChunkSize >= MAX_CHUNK_SIZE || maxChunkSize < MAX_BLOCK_SIZE) {
        throw new Error("maximum chunk size must be less than 100MiB and greater than or equal to 1MB");
      }
      const targetSize = maxChunkSize;
      const url2 = new URL("car", endpoint);
      let headers = Web3Storage.headers(token);
      if (name5) {
        headers = { ...headers, "X-Name": encodeURIComponent(name5) };
      }
      const roots = await car.getRoots();
      if (roots[0] == null) {
        throw new Error("missing root CID");
      }
      if (roots.length > 1) {
        throw new Error("too many roots");
      }
      const carRoot = roots[0].toString();
      const splitter = new TreewalkCarSplitter(car, targetSize, { decoders });
      const onCarChunk = async (car2) => {
        const carParts = [];
        for await (const part of car2) {
          carParts.push(part);
        }
        const carFile = new Blob2(carParts, { type: "application/vnd.ipld.car" });
        const res = await (0, import_p_retry.default)(
          async () => {
            await rateLimiter();
            let response;
            try {
              response = await fetch3(url2.toString(), {
                method: "POST",
                headers,
                body: carFile,
                signal
              });
            } catch (err) {
              throw signal && signal.aborted ? new import_p_retry.AbortError(err) : err;
            }
            if (response.status === 429) {
              throw new Error("rate limited");
            }
            const res2 = await response.json();
            if (!response.ok) {
              throw new Error(res2.message);
            }
            if (res2.cid !== carRoot) {
              throw new Error(`root CID mismatch, expected: ${carRoot}, received: ${res2.cid}`);
            }
            return res2.cid;
          },
          { retries: maxRetries }
        );
        onStoredChunk && onStoredChunk(carFile.size);
        return res;
      };
      const upload2 = transform(MAX_CONCURRENT_UPLOADS, onCarChunk);
      for await (const _ of upload2(splitter.cars())) {
      }
      return carRoot;
    }
    /**
     * @param {Service} service
     * @param {CIDString} cid
     * @param {RequestOptions} [options]
     * @returns {Promise<Web3Response | null>}
     */
    static async get({ endpoint, token, rateLimiter = globalRateLimiter, fetch: fetch3 = fetch2 }, cid, options = {}) {
      const url2 = new URL(`car/${cid}`, endpoint);
      await rateLimiter();
      const res = await fetch3(url2.toString(), {
        method: "GET",
        headers: Web3Storage.headers(token),
        signal: options.signal
      });
      if (res.status === 429) {
        throw new Error("rate limited");
      }
      return toWeb3Response(res);
    }
    /**
     * @param {Service} service
     * @param {CIDString} cid
     * @param {RequestOptions} [options]
     * @returns {Promise<CIDString>}
     */
    /* c8 ignore next 4 */
    static async delete({ endpoint, token, rateLimiter = globalRateLimiter }, cid, options = {}) {
      console.log("Not deleting", cid, endpoint, token, rateLimiter, options);
      throw Error(".delete not implemented yet");
    }
    /**
     * @param {Service} service
     * @param {CIDString} cid
     * @param {RequestOptions} [options]
     * @returns {Promise<Status | undefined>}
     */
    static async status({ endpoint, token, rateLimiter = globalRateLimiter, fetch: fetch3 = fetch2 }, cid, options = {}) {
      const url2 = new URL(`status/${cid}`, endpoint);
      await rateLimiter();
      const res = await fetch3(url2.toString(), {
        method: "GET",
        headers: Web3Storage.headers(token),
        signal: options.signal
      });
      if (res.status === 429) {
        throw new Error("rate limited");
      }
      if (res.status === 404) {
        return void 0;
      }
      if (!res.ok) {
        throw new Error(res.statusText);
      }
      return res.json();
    }
    /**
     * @param {Service} service
     * @param {ListOptions} [opts]
     * @returns {AsyncIterable<Upload>}
     */
    static async *list(service, { before = (/* @__PURE__ */ new Date()).toISOString(), maxResults = Infinity, signal } = {}) {
      async function listPage({ endpoint, token, rateLimiter = globalRateLimiter, fetch: fetch3 = fetch2 }, { before: before2, size: size2 }) {
        const search = new URLSearchParams({ before: before2, size: size2.toString() });
        const url2 = new URL(`user/uploads?${search}`, endpoint);
        await rateLimiter();
        return fetch3(url2.toString(), {
          method: "GET",
          headers: {
            ...Web3Storage.headers(token),
            "Access-Control-Request-Headers": "Link"
          },
          signal
        });
      }
      let count2 = 0;
      const size = maxResults > 100 ? 100 : maxResults;
      for await (const res of paginator(listPage, service, { before, size })) {
        if (!res.ok) {
          if (res.status === 429) {
            throw new Error("rate limited");
          }
          const errorMessage = await res.json();
          throw new Error(`${res.status} ${res.statusText} ${errorMessage ? "- " + errorMessage.message : ""}`);
        }
        const page = await res.json();
        for (const upload2 of page) {
          if (++count2 > maxResults) {
            return;
          }
          yield upload2;
        }
      }
    }
    // Just a sugar so you don't have to pass around endpoint and token around.
    /**
     * Uploads files to web3.storage. Files are hashed in the client and uploaded as a single
     * [Content Addressed Archive(CAR)](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md).
     * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)
     *
     * Returns the corresponding Content Identifier (CID).
     *
     * @example
     * ```js
     * const file = new File(['hello world'], 'hello.txt', { type: 'text/plain' })
     * const cid = await client.put([file])
     * ```
     * @param {Iterable<Filelike>} files
     * @param {PutOptions} [options]
     */
    put(files, options) {
      return Web3Storage.put(this, files, options);
    }
    /**
       * Uploads a CAR ([Content Addressed Archive](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md)) file to web3.storage.
       * Takes a CarReader interface from @ipld/car
       *
       * Returns the corresponding Content Identifier (CID).
       *
       * @example
       * ```js
       * import fs from 'fs'
       * import { Readable } from 'stream'
       * import { CarReader, CarWriter } from '@ipld/car'
       * import * as raw from 'multiformats/codecs/raw'
       * import { CID } from 'multiformats/cid'
       * import { sha256 } from 'multiformats/hashes/sha2'
       *
       * async function getCar() {
       *    const bytes = new TextEncoder().encode('random meaningless bytes')
       *    const hash = await sha256.digest(raw.encode(bytes))
       *    const cid = CID.create(1, raw.code, hash)
       *
       *    // create the writer and set the header with a single root
       *    const { writer, out } = await CarWriter.create([cid])
       *    Readable.from(out).pipe(fs.createWriteStream('example.car'))
    
       *    // store a new block, creates a new file entry in the CAR archive
       *    await writer.put({ cid, bytes })
       *    await writer.close()
    
       *    const inStream = fs.createReadStream('example.car')
       *    // read and parse the entire stream in one go, this will cache the contents of
       *    // the car in memory so is not suitable for large files.
       *    const reader = await CarReader.fromIterable(inStream)
       *    return reader
       * }
       *
       * const car = await getCar()
       * const cid = await client.putCar(car)
       * ```
       * @param {import('@ipld/car/api').CarReader} car
       * @param {PutCarOptions} [options]
       */
    putCar(car, options) {
      return Web3Storage.putCar(this, car, options);
    }
    /**
     * Fetch the Content Addressed Archive by its root CID.
     * @param {CIDString} cid
     * @param {RequestOptions} [options]
     */
    get(cid, options) {
      return Web3Storage.get(this, cid, options);
    }
    /**
     * @param {CIDString} cid
     * @param {RequestOptions} [options]
     */
    /* c8 ignore next 3 */
    delete(cid, options) {
      return Web3Storage.delete(this, cid, options);
    }
    /**
     * Fetch info on Filecoin deals and IPFS pins that a given CID is replicated in.
     * @param {CIDString} cid
     * @param {RequestOptions} [options]
     */
    status(cid, options) {
      return Web3Storage.status(this, cid, options);
    }
    /**
     * Find all uploads for this account. Use a `for await...of` loop to fetch them all.
     * @example
     * Fetch all the uploads
     * ```js
     * const uploads = []
     * for await (const item of client.list()) {
     *    uploads.push(item)
     * }
     * ```
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of
     * @param {ListOptions} [opts]
     * @returns {AsyncIterable<Upload>}
     */
    list(opts) {
      return Web3Storage.list(this, opts);
    }
  };
  async function toWeb3File({ content, path: path2, cid }) {
    const chunks = [];
    for await (const chunk of content()) {
      chunks.push(chunk);
    }
    const file = new File2(chunks, toFilenameWithPath(path2));
    return Object.assign(file, { cid: cid.toString() });
  }
  function toFilenameWithPath(unixFsPath) {
    const slashIndex = unixFsPath.indexOf("/");
    return slashIndex === -1 ? unixFsPath : unixFsPath.substring(slashIndex + 1);
  }
  function toWeb3Response(res) {
    const response = Object.assign(res, {
      unixFsIterator: async function* () {
        if (!res.ok) {
          throw new Error(`Response was not ok: ${res.status} ${res.statusText} - Check for { "ok": false } on the Response object before calling .unixFsIterator`);
        }
        if (!res.body) {
          throw new Error("No body on response");
        }
        const blockstore = new Blockstore();
        try {
          for await (const entry of unpackStream(res.body, { blockstore })) {
            yield entry;
          }
        } finally {
          await blockstore.close();
        }
      },
      files: async () => {
        if (!res.ok) {
          throw new Error(`Response was not ok: ${res.status} ${res.statusText} - Check for { "ok": false } on the Response object before calling .files`);
        }
        const files = [];
        for await (const entry of response.unixFsIterator()) {
          if (entry.type === "directory") {
            continue;
          }
          const file = await toWeb3File(entry);
          files.push(file);
        }
        return files;
      }
    });
    return response;
  }
  function toImportCandidate(file) {
    let stream;
    return {
      path: file.name,
      get content() {
        stream = stream || file.stream();
        return stream;
      }
    };
  }
  async function* paginator(fn, service, opts) {
    let res = await fn(service, opts);
    yield res;
    let link = parseLinkHeader(res.headers.get("Link") || "");
    while (link && link.next) {
      res = await fn(service, link.next);
      yield res;
      link = parseLinkHeader(res.headers.get("Link") || "");
    }
  }

  // src/components/Evidence.tsx
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var getBase64 = (file) => new Promise((resolve5, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve5(reader.result);
    reader.onerror = (error) => reject(error);
  });
  var Evidence = (inputs) => {
    const { fileList, setFileList } = inputs;
    const [previewOpen, setPreviewOpen] = (0, import_react78.useState)(false);
    const [previewImage2, setPreviewImage] = (0, import_react78.useState)("");
    const [previewTitle, setPreviewTitle] = (0, import_react78.useState)("");
    const [emptyList, setEmptyList] = (0, import_react78.useState)([]);
    const web3storage_key = process.env.WEB3_STORAGE_KEY;
    const handleCancel = () => setPreviewOpen(false);
    const handlePreview = (file) => __async(void 0, null, function* () {
      if (!file.url && !file.preview) {
        file.preview = yield getBase64(file.originFileObj);
      }
      setPreviewImage(file.url || file.preview);
      setPreviewOpen(true);
      setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf("/") + 1));
    });
    const handleChange = ({ file: newFile }) => {
      let _fileList = [...fileList];
      let existingUIDs = _fileList.map((_file) => _file.uid);
      if (existingUIDs.includes(newFile.uid)) {
        let indexOf = existingUIDs.indexOf(newFile.uid);
        if (newFile.status == "error") {
          newFile.status = "done";
        }
        _fileList[indexOf] = newFile;
      } else {
        _fileList.push(newFile);
      }
      setFileList(_fileList);
    };
    const uploadButton = /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PlusOutlined_default2, {}),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { style: { marginTop: 8 }, children: "Upload" })
    ] });
    if (chrome && chrome.runtime && chrome.runtime.onMessage) {
      chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => __async(void 0, null, function* () {
        var _a;
        if (msg && msg.type == "screenshot") {
          if (msg.data.isSuccess) {
            let _fileList = [...fileList];
            let lastModifiedDate = /* @__PURE__ */ new Date();
            const blob = yield (yield fetch(msg.data.imageUri)).blob();
            const file = new File(
              [blob],
              `evidence_${_fileList.length}.jpg`,
              { type: "image/jpeg", lastModified: lastModifiedDate.getTime() }
            );
            let uid2 = `screenshot_${_fileList.length}`;
            console.log("uid", uid2, file.stream);
            _fileList.push({
              uid: uid2,
              name: `evidence_${_fileList.length}.jpg`,
              status: "done",
              url: msg.data.imageUri,
              originFileObj: file
            });
            console.log("_fileList", (_a = _fileList[0].originFileObj) == null ? void 0 : _a.stream);
            setFileList(_fileList);
          } else {
            alert(msg.data.error);
          }
        }
      }));
    }
    const takeScreenshot = () => {
      if (chrome && chrome.runtime) {
        chrome.runtime.sendMessage({ type: "take-screenshot" });
      }
    };
    const uploadToIPFS = (file) => __async(void 0, null, function* () {
      const client = new Web3Storage({ token: web3storage_key === void 0 ? "" : web3storage_key });
      const cid = yield client.put([file]);
      console.log("cid", cid);
    });
    const getLabel = () => {
      return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
        space_default,
        {
          style: { paddingBottom: "10px" },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("b", { children: "Upload evidences" }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(tooltip_default, { title: "Upload image", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
              upload_default,
              {
                fileList,
                maxCount: 5,
                showUploadList: false,
                multiple: true,
                onChange: handleChange,
                children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(button_default2, { type: "primary", shape: "circle", icon: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(UploadOutlined_default2, {}), size: "middle" })
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(tooltip_default, { title: "Screenshot website", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(button_default2, { onClick: takeScreenshot, type: "primary", shape: "circle", icon: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ExpandOutlined_default2, {}), size: "middle" }) })
          ]
        }
      );
    };
    const handleRemove = (file) => {
      let _fileList = [...fileList];
      let existingUIDs = _fileList.map((_file) => _file.uid);
      let indexOf = existingUIDs.indexOf(file.uid);
      if (indexOf >= 0) {
        _fileList.splice(indexOf, 1);
        setFileList(_fileList);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
      form_default.Item,
      {
        label: getLabel(),
        name: "evidences",
        rules: [{ required: true }],
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            upload_default,
            {
              listType: "picture-card",
              fileList,
              onPreview: handlePreview,
              onRemove: handleRemove,
              maxCount: 5
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(modal_default, { open: previewOpen, title: previewTitle, footer: null, onCancel: handleCancel, children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("img", { alt: "example", style: { width: "100%" }, src: previewImage2 }) })
        ]
      }
    );
  };
  var Evidence_default = Evidence;

  // src/components/ReviewForm.tsx
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  function ReviewForm() {
    const { web3Hooks } = (0, import_react79.useContext)(Context3);
    const { connectWallet, submitReport, getStakeAmount, stakeETH, account, chainId, reportTxInfo } = web3Hooks;
    const [isFraud, setIsFraud] = (0, import_react79.useState)(true);
    const [buttonTxt, setButtonTxt] = (0, import_react79.useState)("Connect Wallet");
    const [buttonDisabled, setButtonDisabled] = (0, import_react79.useState)(false);
    const [fileList, setFileList] = (0, import_react79.useState)([]);
    const [comments, setComments] = (0, import_react79.useState)("");
    const web3storage_key = process.env.REACT_APP_WEB3_STORAGE_KEY;
    const [txMessage, setTxMessage] = (0, import_react79.useState)({
      message: "",
      type: "info",
      description: ""
    });
    const { TextArea: TextArea3 } = input_default;
    const onFraudChange = (e3) => {
      console.log("radio checked", e3.target.value);
      setIsFraud(e3.target.value);
    };
    const handleCommentsChange = (e3) => {
      setComments(e3.target.value);
    };
    const uploadToIPFS = () => __async(this, null, function* () {
      setButtonDisabled(true);
      setButtonTxt("Uploading...");
      const client = new Web3Storage({ token: web3storage_key === void 0 ? "" : web3storage_key });
      let imageUrls = [];
      for (let i3 = 0; i3 < fileList.length; i3++) {
        console.log("file", i3, fileList[i3]);
        const file = fileList[i3].originFileObj;
        if (file !== void 0) {
          const cid = yield client.put([file]);
          const img_url = "ipfs://" + cid + "/" + file.name;
          if (!imageUrls.includes(img_url)) {
            imageUrls.push(img_url);
          }
        }
      }
      return imageUrls;
    });
    const reportDomain = () => __async(this, null, function* () {
      try {
        setButtonDisabled(true);
        const imageUrls = yield uploadToIPFS();
        console.log(imageUrls);
        submitReport(isFraud, imageUrls, comments, stakeETH.stakeETH);
      } catch (e3) {
        alert(e3);
      }
    });
    (0, import_react79.useEffect)(() => {
      console.log("connectingWallet triggered", account, stakeETH, account, stakeETH);
      if (account.loading) {
        setButtonTxt("Connecting...");
        setButtonDisabled(true);
      } else if (stakeETH.loading) {
        setButtonTxt("loading...");
        setButtonDisabled(true);
      } else {
        setButtonDisabled(false);
        if (account.account && stakeETH.stakeETH == 0) {
          setButtonTxt("loading...");
          setButtonDisabled(true);
          getStakeAmount();
        } else if (account.account && stakeETH.stakeETH != 0) {
          setButtonTxt("Report");
          setButtonDisabled(false);
        }
      }
    }, [account, stakeETH]);
    (0, import_react79.useEffect)(() => {
      console.log("reportTxInfo", reportTxInfo);
      if (reportTxInfo.loading) {
        setButtonTxt("Submitting...");
        setButtonDisabled(true);
      } else if (account.account) {
        setButtonDisabled(false);
        setButtonTxt("Report");
      }
      function getSuccessMessage(txHash) {
        let network = chainInfo.find((item) => item.chainId == chainId.chainId);
        let url2 = `${network == null ? void 0 : network.explorer}/tx/${txHash}`;
        return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("p", { children: [
          "Successful ",
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("a", { href: url2, children: "transaction" })
        ] });
      }
      setTxMessage({
        type: reportTxInfo.isSuccess ? "success" : "error",
        message: reportTxInfo.isSuccess ? getSuccessMessage(reportTxInfo.txHash) : reportTxInfo.error || "",
        description: ""
      });
    }, [reportTxInfo]);
    function handleButtonClick() {
      return __async(this, null, function* () {
        if (!account.account) {
          connectWallet();
        } else if (buttonTxt == "Report") {
          reportDomain();
        } else {
          alert(`Setting not available: ${buttonTxt}`);
        }
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
      form_default,
      {
        layout: "vertical",
        name: "reviewDomain",
        initialValues: { remember: true },
        autoComplete: "off",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("table", { style: { width: "100%" }, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("tbody", { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("tr", { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("td", { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            form_default.Item,
            {
              label: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("b", { children: "Is Fraud" }),
              name: "isFraud",
              rules: [{ required: true }],
              children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(radio_default2.Group, { onChange: onFraudChange, value: isFraud, children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(radio_default2, { value: true, children: "Yes" }),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(radio_default2, { value: false, children: "No" })
              ] })
            }
          ) }) }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            form_default.Item,
            {
              label: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("b", { children: "Justification for above selection" }),
              name: "remarks",
              rules: [{ required: true }],
              children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(TextArea3, { rows: 2, id: "remarks", value: comments, onChange: handleCommentsChange })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Evidence_default, { fileList, setFileList }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { style: { display: "flex" }, children: [
            account.account ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
              tooltip_default,
              {
                title: "This is required to create a report. If deemed correct, you get your stake back along with additional rewards. If incorrect, entire stake is slashed.",
                style: { cursor: "pointer" },
                children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
                  button_default2,
                  {
                    disabled: true,
                    style: { background: "white", color: "black", cursor: "pointer !important" },
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("b", { style: { paddingRight: "5px" }, children: "STAKE:" }),
                      " ",
                      stakeETH.stakeETH,
                      " MATIC"
                    ]
                  }
                )
              }
            ) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_jsx_runtime4.Fragment, {}),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
              button_default2,
              {
                type: "primary",
                onClick: handleButtonClick,
                disabled: buttonDisabled,
                children: buttonTxt
              }
            )
          ] }),
          txMessage.message ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            alert_default,
            {
              message: txMessage.message,
              type: txMessage.type,
              description: txMessage.description,
              showIcon: true,
              style: { marginTop: "10px" }
            }
          ) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_jsx_runtime4.Fragment, {})
        ]
      }
    ) });
  }

  // src/components/History.tsx
  var import_react81 = __toESM(require_react());

  // node_modules/react-ipfs-image/dist/react-ipfs-image.esm.js
  var import_react80 = __toESM(require_react());
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key2, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key2 = sourceKeys[i3];
      if (excluded.indexOf(key2) >= 0)
        continue;
      target[key2] = source[key2];
    }
    return target;
  }
  var DEFAULT_IPFS_GATEWAY_URL = "https://ipfs.infura.io/ipfs";
  var cleanUpHash = function cleanUpHash2(hash) {
    if (hash.startsWith("ipfs://")) {
      return hash.substring(7);
    }
    return hash;
  };
  var _excluded43 = ["hash", "gatewayUrl"];
  var IpfsImage = function IpfsImage2(_ref) {
    var hash = _ref.hash, _ref$gatewayUrl = _ref.gatewayUrl, gatewayUrl = _ref$gatewayUrl === void 0 ? DEFAULT_IPFS_GATEWAY_URL : _ref$gatewayUrl, props = _objectWithoutPropertiesLoose2(_ref, _excluded43);
    return import_react80.default.createElement("img", Object.assign({
      src: gatewayUrl + "/" + cleanUpHash(hash)
    }, props));
  };

  // src/components/History.tsx
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var count = 5;
  var History = () => {
    const { useChainId, useAccounts, useIsActivating, useIsActive, useProvider, useENSNames } = hooks3;
    const { web3Hooks } = (0, import_react81.useContext)(Context3);
    const { account } = web3Hooks;
    const [initLoading, setInitLoading] = (0, import_react81.useState)(true);
    const [loading, setLoading] = (0, import_react81.useState)(false);
    const [allLoaded, setAllLoaded] = (0, import_react81.useState)(false);
    const [list, setList] = (0, import_react81.useState)([]);
    const [reports, setReports] = (0, import_react81.useState)([]);
    const getData = (count2) => __async(void 0, null, function* () {
      setInitLoading(true);
      const data = yield subgraphQuery(FETCH_REPORTS(count2, account.account));
      setInitLoading(false);
      setList(data.reports);
      if (data.reports.length == 0) {
        setAllLoaded(true);
      }
    });
    (0, import_react81.useEffect)(() => {
      getData(count);
    }, [account]);
    console.log(account);
    const onLoadMore = () => __async(void 0, null, function* () {
      setLoading(true);
      yield getData(count + 1);
      setLoading(false);
    });
    const loadMore = !initLoading && !loading && !allLoaded ? /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      "div",
      {
        style: {
          textAlign: "center",
          marginTop: 12,
          height: 32,
          lineHeight: "32px"
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(button_default2, { onClick: onLoadMore, children: "loading more" })
      }
    ) : null;
    const { Panel: Panel4 } = collapse_default;
    const renderStatus = (status) => {
      if (status === null) {
        return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(ClockCircleOutlined_default2, { style: { color: "orange" } });
      } else if (status === "ACCEPTED") {
        return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(CheckCircleFilled_default2, { style: { color: "green" } });
      } else {
        return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(CloseCircleFilled_default2, { style: { color: "red" } });
      }
    };
    const statusText = (status, address) => {
      if (status === null) {
        return "OPEN";
      } else if (status === "ACCEPTED") {
        return "Aproved by " + address.slice(0, 6) + "..." + address.slice(-4);
      } else {
        return "Rejected by " + address.slice(0, 6) + "..." + address.slice(-4);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      list_default,
      {
        className: "demo-loadmore-list",
        loading: initLoading,
        itemLayout: "horizontal",
        loadMore,
        dataSource: list,
        renderItem: (item) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          collapse_default,
          {
            bordered: true,
            defaultActiveKey: ["0"],
            className: "site-collapse-custom-collapse",
            style: { width: "100%" },
            children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Panel4, { header: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("b", { style: { fontSize: "15px" }, children: [
              renderStatus(item.status),
              " ",
              item.domain,
              " - ",
              item.isScam ? "scam" : "legit"
            ] }) }), className: "site-collapse-custom-panel", showArrow: false, children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("b", { children: "Status : " }),
                statusText(item.status, item.validator)
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { style: { display: "flex", justifyContent: "space-between" }, children: [
                item.status === null ? /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { style: { color: "orange" }, children: [
                  "Stake : ",
                  Number(item.stakeAmount) / 1e18,
                  " MATIC"
                ] }) : item.status === "ACCEPTED" ? /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { style: { color: "green" }, children: [
                  "Stake : ",
                  Number(item.stakeAmount) / 1e18,
                  " MATIC"
                ] }) : /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { style: { color: "red" }, children: [
                  "Stake : ",
                  Number(item.stakeAmount) / 1e18,
                  " MATIC"
                ] }),
                item.rewardAmount === null ? /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { style: { color: "gray" }, children: "Reward 0 VIGI" }) : /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { style: { color: "orange" }, children: [
                  "Reward : ",
                  Number(item.rewardAmount) / 1e18,
                  " points"
                ] })
              ] }),
              item.validatorComments ? /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("p", { children: [
                "Comments : ",
                item.validatorComments
              ] }) : /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("span", {}),
              /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(divider_default, { style: { margin: "12px 0", borderTop: "1px solid rgb(94 94 94 / 20%)" } }),
              /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("b", { children: "My Report" }),
              /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { children: [
                "Comments : ",
                item.comments
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { children: item.evidences.split(",").map(
                (evidence) => {
                  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(IpfsImage, { hash: evidence, gatewayUrl: "https://ipfs.io/ipfs", style: { width: "100px", height: "100px" } });
                }
              ) })
            ] }) }, "1")
          }
        )
      }
    );
  };
  var History_default = History;

  // src/prebuild-components/index.tsx
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var { Panel: Panel3 } = collapse_default;
  var links2 = [
    {
      heading: "How does it work?",
      link: "https://vigilancedao.notion.site/Introduction-56c27e27bebd4f1999ae90412934c93e"
    },
    {
      heading: "How to report websites?",
      link: "https://vigilancedao.notion.site/Report-domains-2bbc4b4fc530452287187e3948b90c80"
    }
  ];
  function Index(props) {
    if (props == void 0) {
      props = {};
    }
    if (props.domainInfo == void 0) {
      props.domainInfo = FOR_DEVELOPMENT.domainInfo;
    }
    if (props.account == void 0) {
      props.account = FOR_DEVELOPMENT.account;
    }
    if (props.connectWallet == void 0) {
      props.connectWallet = () => {
        console.log("connect wallet mock");
      };
    }
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { className: "App", children: [
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "backdrop" }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("header", { className: "App-header", children: [
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          typography_default.Title,
          {
            className: "title",
            level: 1,
            style: { color: "white", marginTop: "15px", marginBottom: "5px" },
            children: "Internet Vigilance"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          typography_default.Paragraph,
          {
            style: { color: "white", fontSize: "12px", textAlign: "center" },
            children: "Powered by Blockchain"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          divider_default,
          {
            style: {
              margin: "12px 0 24px",
              borderTop: "1px solid rgb(255 255 255 / 20%)"
            }
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(
          space_default,
          {
            direction: "vertical",
            size: "middle",
            style: { display: "flex", width: "100%" },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(card_default, { style: { width: "100%", textAlign: "left" }, children: [
                /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("table", { style: { width: "100%" }, children: /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("tbody", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("tr", { children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("td", { style: { textAlign: "right", paddingBottom: "10px" }, children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Network_default, {}) }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("tr", { children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("td", { children: /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("p", { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("b", { children: "Domain:" }),
                    " ",
                    props.domainInfo.domain
                  ] }) }) })
                ] }) }),
                /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("p", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("b", { children: "Registered on: " }),
                  props.domainInfo.registeredOn ? new Date(props.domainInfo.registeredOn).toLocaleDateString() : "NA"
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                  alert_default,
                  {
                    message: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("b", { children: props.domainInfo.status.message }),
                    type: props.domainInfo.status.type,
                    description: props.domainInfo.status.description,
                    showIcon: true
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                collapse_default,
                {
                  bordered: true,
                  defaultActiveKey: ["0"],
                  expandIcon: ({ isActive: isActive2 }) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CaretRightOutlined_default2, { rotate: isActive2 ? 90 : 0 }),
                  className: "site-collapse-custom-collapse",
                  style: { width: "100%" },
                  children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                    Panel3,
                    {
                      header: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("b", { style: { fontSize: "15px" }, children: "Domain reports history" }) }),
                      className: "site-collapse-custom-panel",
                      children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(DomainHistory, {})
                    },
                    "1"
                  )
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                collapse_default,
                {
                  bordered: true,
                  defaultActiveKey: ["0"],
                  expandIcon: ({ isActive: isActive2 }) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CaretRightOutlined_default2, { rotate: isActive2 ? 90 : 0 }),
                  className: "site-collapse-custom-collapse",
                  style: { width: "100%" },
                  children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                    Panel3,
                    {
                      header: /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("b", { style: { fontSize: "15px" }, children: "Review website" }),
                        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("p", { children: "Earn rewards \u{1F4B0} by keeping the web safe" })
                      ] }),
                      className: "site-collapse-custom-panel",
                      children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(ReviewForm, {})
                    },
                    "1"
                  )
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                collapse_default,
                {
                  bordered: true,
                  defaultActiveKey: ["0"],
                  expandIcon: ({ isActive: isActive2 }) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CaretRightOutlined_default2, { rotate: isActive2 ? 90 : 0 }),
                  className: "site-collapse-custom-collapse",
                  style: { width: "100%" },
                  children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                    Panel3,
                    {
                      header: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("b", { style: { fontSize: "15px" }, children: "My History" }) }),
                      className: "site-collapse-custom-panel",
                      children: !props.account.account ? (
                        // @ts-ignore
                        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(button_default2, { onClick: () => props.connectWallet(), children: "Connect Wallet" })
                      ) : /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(History_default, {})
                    },
                    "1"
                  )
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                collapse_default,
                {
                  bordered: true,
                  defaultActiveKey: ["0"],
                  expandIcon: ({ isActive: isActive2 }) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CaretRightOutlined_default2, { rotate: isActive2 ? 90 : 0 }),
                  className: "site-collapse-custom-collapse",
                  style: { width: "100%" },
                  children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                    Panel3,
                    {
                      header: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("b", { style: { fontSize: "15px" }, children: "How does it work? \u{1F914}" }) }),
                      className: "site-collapse-custom-panel",
                      children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                        list_default,
                        {
                          bordered: true,
                          dataSource: links2,
                          renderItem: (item) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(list_default.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("a", { href: item.link, target: "_blank", children: [
                            /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                              "img",
                              {
                                src: "./assets/new_tab_link.png",
                                style: {
                                  width: "15px",
                                  "marginRight": "10px",
                                  marginTop: "-3px"
                                }
                              }
                            ),
                            " ",
                            item.heading
                          ] }) })
                        }
                      )
                    },
                    "1"
                  )
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                collapse_default,
                {
                  bordered: true,
                  defaultActiveKey: ["0"],
                  expandIcon: ({ isActive: isActive2 }) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CaretRightOutlined_default2, { rotate: isActive2 ? 90 : 0 }),
                  className: "site-collapse-custom-collapse",
                  style: { width: "100%" },
                  children: /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(
                    Panel3,
                    {
                      header: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("b", { style: { fontSize: "15px" }, children: "Contact us" }) }),
                      className: "site-collapse-custom-panel",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                          "a",
                          {
                            href: "https://discord.truts.xyz/",
                            target: "_blank",
                            style: { marginRight: "10px" },
                            children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("img", { src: "./assets/discord.png", width: "25px" })
                          }
                        ),
                        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                          "a",
                          {
                            href: "https://vigilancedao.org",
                            target: "_blank",
                            style: { marginRight: "10px" },
                            children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("img", { src: "./assets/website.png", width: "25px" })
                          }
                        ),
                        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                          "a",
                          {
                            href: "mailto:hello@vigilancedao.org",
                            target: "_blank",
                            style: { marginRight: "10px" },
                            children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("img", { src: "./assets/email.png", width: "25px" })
                          }
                        )
                      ]
                    },
                    "1"
                  )
                }
              )
            ]
          }
        )
      ] })
    ] });
  }

  // src/App.tsx
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var [metamaskConnector, hooks3] = (0, import_core.initializeConnector)(
    (actions) => new import_metamask.MetaMask({ actions })
  );
  var Context3 = import_react82.default.createContext({
    web3Hooks: {
      account: { account: "", loading: false },
      chainId: { chainId: 0, loading: false },
      reportTxInfo: { isSuccess: false, error: null, txHash: "", loading: false },
      stakeETH: { stakeETH: 0, loading: false },
      domainInfo: {
        domain: "",
        registeredOn: 0,
        status: {
          message: "Loading...",
          type: "warning",
          description: ""
        },
        loading: true
      },
      switchNetwork: () => {
      },
      connectWallet: () => {
      },
      getStakeAmount: () => {
      },
      submitReport: () => {
      },
      activateListeners: () => {
      }
    }
  });
  function App() {
    const _web3hook = useWeb3Hook();
    const {
      activateListeners,
      account: _account,
      chainId: _chainId,
      domainInfo,
      connectWallet
    } = _web3hook;
    (0, import_react82.useEffect)(() => {
      activateListeners();
    });
    const { Panel: Panel4 } = collapse_default;
    const getStatus = (domain) => __async(this, null, function* () {
      const data = yield subgraphQuery(FETCH_REPORTS_BY_DOMAIN(domain));
      console.log("getStatus", data.isScam);
    });
    (0, import_react82.useEffect)(() => {
      if (domainInfo.domain) {
        getStatus(domainInfo.domain);
      }
    }, [domainInfo]);
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Context3.Provider, { value: { web3Hooks: _web3hook }, children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
      Index,
      {
        domainInfo,
        account: _account,
        connectWallet
      }
    ) });
  }
  var App_default = App;

  // src/reportWebVitals.ts
  var reportWebVitals = (onPerfEntry) => {
    if (onPerfEntry && onPerfEntry instanceof Function) {
      Promise.resolve().then(() => (init_web_vitals(), web_vitals_exports)).then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
        getCLS(onPerfEntry);
        getFID(onPerfEntry);
        getFCP(onPerfEntry);
        getLCP(onPerfEntry);
        getTTFB(onPerfEntry);
      });
    }
  };
  var reportWebVitals_default = reportWebVitals;

  // src/index.tsx
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  var root = import_client.default.createRoot(
    document.getElementById("root")
  );
  root.render(
    /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_react83.default.StrictMode, { children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(App_default, {}) })
  );
  reportWebVitals_default();
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

js-sha3/src/sha3.js:
  (**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   *)

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

@babel/runtime/helpers/esm/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)
*/
