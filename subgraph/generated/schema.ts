// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Report extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Report entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Report must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Report", id.toString(), this);
    }
  }

  static load(id: string): Report | null {
    return changetype<Report | null>(store.get("Report", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    return value!.toString();
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get isScam(): boolean {
    let value = this.get("isScam");
    return value!.toBoolean();
  }

  set isScam(value: boolean) {
    this.set("isScam", Value.fromBoolean(value));
  }

  get reporter(): Bytes {
    let value = this.get("reporter");
    return value!.toBytes();
  }

  set reporter(value: Bytes) {
    this.set("reporter", Value.fromBytes(value));
  }

  get evidences(): string {
    let value = this.get("evidences");
    return value!.toString();
  }

  set evidences(value: string) {
    this.set("evidences", Value.fromString(value));
  }

  get comments(): string {
    let value = this.get("comments");
    return value!.toString();
  }

  set comments(value: string) {
    this.set("comments", Value.fromString(value));
  }

  get stakeAmount(): BigInt {
    let value = this.get("stakeAmount");
    return value!.toBigInt();
  }

  set stakeAmount(value: BigInt) {
    this.set("stakeAmount", Value.fromBigInt(value));
  }

  get createdon(): BigInt {
    let value = this.get("createdon");
    return value!.toBigInt();
  }

  set createdon(value: BigInt) {
    this.set("createdon", Value.fromBigInt(value));
  }

  get validator(): Bytes | null {
    let value = this.get("validator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set validator(value: Bytes | null) {
    if (!value) {
      this.unset("validator");
    } else {
      this.set("validator", Value.fromBytes(<Bytes>value));
    }
  }

  get updatedon(): BigInt | null {
    let value = this.get("updatedon");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedon(value: BigInt | null) {
    if (!value) {
      this.unset("updatedon");
    } else {
      this.set("updatedon", Value.fromBigInt(<BigInt>value));
    }
  }

  get validatorComments(): string | null {
    let value = this.get("validatorComments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorComments(value: string | null) {
    if (!value) {
      this.unset("validatorComments");
    } else {
      this.set("validatorComments", Value.fromString(<string>value));
    }
  }

  get rewardAmount(): BigInt | null {
    let value = this.get("rewardAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rewardAmount(value: BigInt | null) {
    if (!value) {
      this.unset("rewardAmount");
    } else {
      this.set("rewardAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }
}
